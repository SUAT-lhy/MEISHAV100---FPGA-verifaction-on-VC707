module CHIPLINK_PREFIX_Chiplink_TLMonitor(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_param,
  input  [2:0]  io_in_a_bits_size,
  input  [6:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input         io_in_a_bits_corrupt,
  input         io_in_c_ready,
  input         io_in_c_valid,
  input  [2:0]  io_in_c_bits_opcode,
  input  [2:0]  io_in_c_bits_param,
  input  [2:0]  io_in_c_bits_size,
  input  [6:0]  io_in_c_bits_source,
  input  [31:0] io_in_c_bits_address,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [6:0]  io_in_d_bits_source,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt,
  input         io_in_e_ready,
  input         io_in_e_valid,
  input         io_in_e_bits_sink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [127:0] _RAND_18;
  reg [511:0] _RAND_19;
  reg [511:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [127:0] _RAND_24;
  reg [511:0] _RAND_25;
  reg [31:0] _RAND_26;
  reg [31:0] _RAND_27;
  reg [31:0] _RAND_28;
  reg [31:0] _RAND_29;
  reg [31:0] _RAND_30;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = io_in_a_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_7 = io_in_a_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_13 = io_in_a_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_19 = io_in_a_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_25 = io_in_a_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_31 = io_in_a_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_37 = io_in_a_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_43 = io_in_a_bits_source[6:4] == 3'h7;
  wire  source_ok = _source_ok_T_1 | _source_ok_T_7 | _source_ok_T_13 | _source_ok_T_19 | _source_ok_T_25 |
    _source_ok_T_31 | _source_ok_T_37 | _source_ok_T_43;
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_86 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_86;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire [1:0] mask_sizeOH_shiftAmount = io_in_a_bits_size[1:0];
  wire [3:0] _mask_sizeOH_T_1 = 4'h1 << mask_sizeOH_shiftAmount;
  wire [2:0] mask_sizeOH = _mask_sizeOH_T_1[2:0] | 3'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h3;
  wire  mask_size = mask_sizeOH[2];
  wire  mask_bit = io_in_a_bits_address[2];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[1];
  wire  mask_bit_1 = io_in_a_bits_address[1];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire  mask_size_2 = mask_sizeOH[0];
  wire  mask_bit_2 = io_in_a_bits_address[0];
  wire  mask_nbit_2 = ~mask_bit_2;
  wire  mask_eq_6 = mask_eq_2 & mask_nbit_2;
  wire  mask_lo_lo_lo = mask_acc_2 | mask_size_2 & mask_eq_6;
  wire  mask_eq_7 = mask_eq_2 & mask_bit_2;
  wire  mask_lo_lo_hi = mask_acc_2 | mask_size_2 & mask_eq_7;
  wire  mask_eq_8 = mask_eq_3 & mask_nbit_2;
  wire  mask_lo_hi_lo = mask_acc_3 | mask_size_2 & mask_eq_8;
  wire  mask_eq_9 = mask_eq_3 & mask_bit_2;
  wire  mask_lo_hi_hi = mask_acc_3 | mask_size_2 & mask_eq_9;
  wire  mask_eq_10 = mask_eq_4 & mask_nbit_2;
  wire  mask_hi_lo_lo = mask_acc_4 | mask_size_2 & mask_eq_10;
  wire  mask_eq_11 = mask_eq_4 & mask_bit_2;
  wire  mask_hi_lo_hi = mask_acc_4 | mask_size_2 & mask_eq_11;
  wire  mask_eq_12 = mask_eq_5 & mask_nbit_2;
  wire  mask_hi_hi_lo = mask_acc_5 | mask_size_2 & mask_eq_12;
  wire  mask_eq_13 = mask_eq_5 & mask_bit_2;
  wire  mask_hi_hi_hi = mask_acc_5 | mask_size_2 & mask_eq_13;
  wire [7:0] mask = {mask_hi_hi_hi,mask_hi_hi_lo,mask_hi_lo_hi,mask_hi_lo_lo,mask_lo_hi_hi,mask_lo_hi_lo,mask_lo_lo_hi,
    mask_lo_lo_lo};
  wire  _T_118 = io_in_a_bits_opcode == 3'h6;
  wire [31:0] _T_180 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_181 = {1'b0,$signed(_T_180)};
  wire [32:0] _T_183 = $signed(_T_181) & -33'sh10000000;
  wire  _T_184 = $signed(_T_183) == 33'sh0;
  wire [31:0] _T_185 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_186 = {1'b0,$signed(_T_185)};
  wire [32:0] _T_188 = $signed(_T_186) & -33'sh20000000;
  wire  _T_189 = $signed(_T_188) == 33'sh0;
  wire [31:0] _T_190 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_191 = {1'b0,$signed(_T_190)};
  wire [32:0] _T_193 = $signed(_T_191) & -33'sh40000000;
  wire  _T_194 = $signed(_T_193) == 33'sh0;
  wire [31:0] _T_195 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_196 = {1'b0,$signed(_T_195)};
  wire [32:0] _T_198 = $signed(_T_196) & -33'sh40000000;
  wire  _T_199 = $signed(_T_198) == 33'sh0;
  wire [31:0] _T_200 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_201 = {1'b0,$signed(_T_200)};
  wire [32:0] _T_203 = $signed(_T_201) & -33'sh20000000;
  wire  _T_204 = $signed(_T_203) == 33'sh0;
  wire  _T_211 = io_in_a_bits_size <= 3'h6;
  wire [31:0] _T_214 = io_in_a_bits_address ^ 32'h1000;
  wire [32:0] _T_215 = {1'b0,$signed(_T_214)};
  wire [32:0] _T_217 = $signed(_T_215) & -33'sh1000;
  wire  _T_218 = $signed(_T_217) == 33'sh0;
  wire  _T_219 = _T_211 & _T_218;
  wire  _T_222 = source_ok & _T_219;
  wire  _T_277 = _source_ok_T_1 & _T_211;
  wire  _T_330 = _T_218 | _T_184 | _T_189 | _T_194 | _T_199 | _T_204;
  wire  _T_333 = _T_277 & _T_330;
  wire  _T_347 = io_in_a_bits_param <= 3'h2;
  wire [7:0] _T_351 = ~io_in_a_bits_mask;
  wire  _T_352 = _T_351 == 8'h0;
  wire  _T_356 = ~io_in_a_bits_corrupt;
  wire  _T_360 = io_in_a_bits_opcode == 3'h7;
  wire  _T_593 = io_in_a_bits_param != 3'h0;
  wire  _T_606 = io_in_a_bits_opcode == 3'h4;
  wire  _T_709 = _T_211 & _T_330;
  wire  _T_720 = io_in_a_bits_param == 3'h0;
  wire  _T_724 = io_in_a_bits_mask == mask;
  wire  _T_732 = io_in_a_bits_opcode == 3'h0;
  wire  _T_834 = source_ok & _T_709;
  wire  _T_852 = io_in_a_bits_opcode == 3'h1;
  wire [7:0] _T_968 = ~mask;
  wire [7:0] _T_969 = io_in_a_bits_mask & _T_968;
  wire  _T_970 = _T_969 == 8'h0;
  wire  _T_974 = io_in_a_bits_opcode == 3'h2;
  wire  _T_1088 = io_in_a_bits_param <= 3'h4;
  wire  _T_1096 = io_in_a_bits_opcode == 3'h3;
  wire  _T_1210 = io_in_a_bits_param <= 3'h3;
  wire  _T_1218 = io_in_a_bits_opcode == 3'h5;
  wire  _T_1332 = io_in_a_bits_param <= 3'h1;
  wire  _T_1344 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_55 = io_in_d_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_61 = io_in_d_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_67 = io_in_d_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_73 = io_in_d_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_79 = io_in_d_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_85 = io_in_d_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_91 = io_in_d_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_97 = io_in_d_bits_source[6:4] == 3'h7;
  wire  source_ok_1 = _source_ok_T_55 | _source_ok_T_61 | _source_ok_T_67 | _source_ok_T_73 | _source_ok_T_79 |
    _source_ok_T_85 | _source_ok_T_91 | _source_ok_T_97;
  wire  _T_1348 = io_in_d_bits_opcode == 3'h6;
  wire  _T_1352 = io_in_d_bits_size >= 3'h3;
  wire  _T_1356 = io_in_d_bits_param == 2'h0;
  wire  _T_1360 = ~io_in_d_bits_corrupt;
  wire  _T_1364 = ~io_in_d_bits_denied;
  wire  _T_1368 = io_in_d_bits_opcode == 3'h4;
  wire  _T_1379 = io_in_d_bits_param <= 2'h2;
  wire  _T_1383 = io_in_d_bits_param != 2'h2;
  wire  _T_1396 = io_in_d_bits_opcode == 3'h5;
  wire  _T_1416 = _T_1364 | io_in_d_bits_corrupt;
  wire  _T_1425 = io_in_d_bits_opcode == 3'h0;
  wire  _T_1442 = io_in_d_bits_opcode == 3'h1;
  wire  _T_1460 = io_in_d_bits_opcode == 3'h2;
  wire  _source_ok_T_109 = io_in_c_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_115 = io_in_c_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_121 = io_in_c_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_127 = io_in_c_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_133 = io_in_c_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_139 = io_in_c_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_145 = io_in_c_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_151 = io_in_c_bits_source[6:4] == 3'h7;
  wire  source_ok_2 = _source_ok_T_109 | _source_ok_T_115 | _source_ok_T_121 | _source_ok_T_127 | _source_ok_T_133 |
    _source_ok_T_139 | _source_ok_T_145 | _source_ok_T_151;
  wire [12:0] _is_aligned_mask_T_7 = 13'h3f << io_in_c_bits_size;
  wire [5:0] is_aligned_mask_2 = ~_is_aligned_mask_T_7[5:0];
  wire [31:0] _GEN_87 = {{26'd0}, is_aligned_mask_2};
  wire [31:0] _is_aligned_T_2 = io_in_c_bits_address & _GEN_87;
  wire  is_aligned_2 = _is_aligned_T_2 == 32'h0;
  wire [31:0] _address_ok_T_34 = io_in_c_bits_address ^ 32'h10000000;
  wire [32:0] _address_ok_T_35 = {1'b0,$signed(_address_ok_T_34)};
  wire [32:0] _address_ok_T_37 = $signed(_address_ok_T_35) & -33'sh10000000;
  wire  _address_ok_T_38 = $signed(_address_ok_T_37) == 33'sh0;
  wire [31:0] _address_ok_T_39 = io_in_c_bits_address ^ 32'h20000000;
  wire [32:0] _address_ok_T_40 = {1'b0,$signed(_address_ok_T_39)};
  wire [32:0] _address_ok_T_42 = $signed(_address_ok_T_40) & -33'sh20000000;
  wire  _address_ok_T_43 = $signed(_address_ok_T_42) == 33'sh0;
  wire [31:0] _address_ok_T_44 = io_in_c_bits_address ^ 32'h40000000;
  wire [32:0] _address_ok_T_45 = {1'b0,$signed(_address_ok_T_44)};
  wire [32:0] _address_ok_T_47 = $signed(_address_ok_T_45) & -33'sh40000000;
  wire  _address_ok_T_48 = $signed(_address_ok_T_47) == 33'sh0;
  wire [31:0] _address_ok_T_49 = io_in_c_bits_address ^ 32'h80000000;
  wire [32:0] _address_ok_T_50 = {1'b0,$signed(_address_ok_T_49)};
  wire [32:0] _address_ok_T_52 = $signed(_address_ok_T_50) & -33'sh40000000;
  wire  _address_ok_T_53 = $signed(_address_ok_T_52) == 33'sh0;
  wire [31:0] _address_ok_T_54 = io_in_c_bits_address ^ 32'hc0000000;
  wire [32:0] _address_ok_T_55 = {1'b0,$signed(_address_ok_T_54)};
  wire [32:0] _address_ok_T_57 = $signed(_address_ok_T_55) & -33'sh20000000;
  wire  _address_ok_T_58 = $signed(_address_ok_T_57) == 33'sh0;
  wire  _address_ok_T_62 = _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 | _address_ok_T_58;
  wire [31:0] _address_ok_T_63 = io_in_c_bits_address ^ 32'h1000;
  wire [32:0] _address_ok_T_64 = {1'b0,$signed(_address_ok_T_63)};
  wire [32:0] _address_ok_T_66 = $signed(_address_ok_T_64) & -33'sh1000;
  wire  _address_ok_T_67 = $signed(_address_ok_T_66) == 33'sh0;
  wire  address_ok_1 = _address_ok_T_62 | _address_ok_T_67;
  wire  _T_2230 = io_in_c_bits_opcode == 3'h4;
  wire  _T_2237 = io_in_c_bits_size >= 3'h3;
  wire  _T_2244 = io_in_c_bits_param <= 3'h5;
  wire  _T_2252 = io_in_c_bits_opcode == 3'h5;
  wire  _T_2270 = io_in_c_bits_opcode == 3'h6;
  wire  _T_2363 = io_in_c_bits_size <= 3'h6;
  wire  _T_2371 = _T_2363 & _address_ok_T_67;
  wire  _T_2374 = source_ok_2 & _T_2371;
  wire  _T_2429 = _source_ok_T_109 & _T_2363;
  wire  _T_2482 = _address_ok_T_67 | _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 |
    _address_ok_T_58;
  wire  _T_2485 = _T_2429 & _T_2482;
  wire  _T_2507 = io_in_c_bits_opcode == 3'h7;
  wire  _T_2740 = io_in_c_bits_opcode == 3'h0;
  wire  _T_2750 = io_in_c_bits_param == 3'h0;
  wire  _T_2758 = io_in_c_bits_opcode == 3'h1;
  wire  _T_2772 = io_in_c_bits_opcode == 3'h2;
  wire  sink_ok_1 = io_in_e_bits_sink < 1'h1;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [2:0] a_first_beats1_decode = is_aligned_mask[5:3];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [2:0] a_first_counter;
  wire [2:0] a_first_counter1 = a_first_counter - 3'h1;
  wire  a_first = a_first_counter == 3'h0;
  reg [2:0] opcode;
  reg [2:0] param;
  reg [2:0] size;
  reg [6:0] source;
  reg [31:0] address;
  wire  _T_2794 = io_in_a_valid & ~a_first;
  wire  _T_2795 = io_in_a_bits_opcode == opcode;
  wire  _T_2799 = io_in_a_bits_param == param;
  wire  _T_2803 = io_in_a_bits_size == size;
  wire  _T_2807 = io_in_a_bits_source == source;
  wire  _T_2811 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [2:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:3];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [2:0] d_first_counter;
  wire [2:0] d_first_counter1 = d_first_counter - 3'h1;
  wire  d_first = d_first_counter == 3'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [6:0] source_1;
  reg  denied;
  wire  _T_2818 = io_in_d_valid & ~d_first;
  wire  _T_2819 = io_in_d_bits_opcode == opcode_1;
  wire  _T_2823 = io_in_d_bits_param == param_1;
  wire  _T_2827 = io_in_d_bits_size == size_1;
  wire  _T_2831 = io_in_d_bits_source == source_1;
  wire  _T_2839 = io_in_d_bits_denied == denied;
  wire  _c_first_T = io_in_c_ready & io_in_c_valid;
  wire [2:0] c_first_beats1_decode = is_aligned_mask_2[5:3];
  wire  c_first_beats1_opdata = io_in_c_bits_opcode[0];
  reg [2:0] c_first_counter;
  wire [2:0] c_first_counter1 = c_first_counter - 3'h1;
  wire  c_first = c_first_counter == 3'h0;
  reg [2:0] opcode_3;
  reg [2:0] param_3;
  reg [2:0] size_3;
  reg [6:0] source_3;
  reg [31:0] address_2;
  wire  _T_2870 = io_in_c_valid & ~c_first;
  wire  _T_2871 = io_in_c_bits_opcode == opcode_3;
  wire  _T_2875 = io_in_c_bits_param == param_3;
  wire  _T_2879 = io_in_c_bits_size == size_3;
  wire  _T_2883 = io_in_c_bits_source == source_3;
  wire  _T_2887 = io_in_c_bits_address == address_2;
  reg [127:0] inflight;
  reg [511:0] inflight_opcodes;
  reg [511:0] inflight_sizes;
  reg [2:0] a_first_counter_1;
  wire [2:0] a_first_counter1_1 = a_first_counter_1 - 3'h1;
  wire  a_first_1 = a_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_1;
  wire [2:0] d_first_counter1_1 = d_first_counter_1 - 3'h1;
  wire  d_first_1 = d_first_counter_1 == 3'h0;
  wire [8:0] _GEN_88 = {io_in_d_bits_source, 2'h0};
  wire [9:0] _a_opcode_lookup_T = {{1'd0}, _GEN_88};
  wire [511:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [511:0] _GEN_89 = {{496'd0}, _a_opcode_lookup_T_5};
  wire [511:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_89;
  wire [511:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[511:1]};
  wire [511:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [511:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_89;
  wire [511:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[511:1]};
  wire  _T_2893 = io_in_a_valid & a_first_1;
  wire [127:0] _a_set_wo_ready_T = 128'h1 << io_in_a_bits_source;
  wire [127:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire  _T_2896 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_94 = {io_in_a_bits_source, 2'h0};
  wire [9:0] _a_opcodes_set_T = {{1'd0}, _GEN_94};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_95 = {{1023'd0}, a_opcodes_set_interm};
  wire [1026:0] _a_opcodes_set_T_1 = _GEN_95 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_97 = {{1023'd0}, a_sizes_set_interm};
  wire [1026:0] _a_sizes_set_T_1 = _GEN_97 << _a_opcodes_set_T;
  wire [127:0] _T_2898 = inflight >> io_in_a_bits_source;
  wire  _T_2900 = ~_T_2898[0];
  wire [127:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_31 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 1027'h0;
  wire [1026:0] _GEN_32 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 1027'h0;
  wire  _T_2904 = io_in_d_valid & d_first_1;
  wire  _T_2906 = ~_T_1348;
  wire  _T_2907 = io_in_d_valid & d_first_1 & ~_T_1348;
  wire [127:0] _d_clr_wo_ready_T = 128'h1 << io_in_d_bits_source;
  wire [127:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_1348 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_99 = {{1023'd0}, _a_opcode_lookup_T_5};
  wire [1038:0] _d_opcodes_clr_T_5 = _GEN_99 << _a_opcode_lookup_T;
  wire [127:0] d_clr = _d_first_T & d_first_1 & _T_2906 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_35 = _d_first_T & d_first_1 & _T_2906 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_2893 & io_in_a_bits_source == io_in_d_bits_source;
  wire [127:0] _T_2917 = inflight >> io_in_d_bits_source;
  wire  _T_2919 = _T_2917[0] | same_cycle_resp;
  wire [2:0] _GEN_39 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_40 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_39;
  wire [2:0] _GEN_41 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_40;
  wire [2:0] _GEN_42 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_41;
  wire [2:0] _GEN_43 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_42;
  wire [2:0] _GEN_44 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_43;
  wire [2:0] _GEN_51 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_42;
  wire [2:0] _GEN_52 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_51;
  wire  _T_2924 = io_in_d_bits_opcode == _GEN_52;
  wire  _T_2925 = io_in_d_bits_opcode == _GEN_44 | _T_2924;
  wire  _T_2929 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_55 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_56 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_55;
  wire [2:0] _GEN_57 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_56;
  wire [2:0] _GEN_58 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_57;
  wire [2:0] _GEN_59 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_58;
  wire [2:0] _GEN_60 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_59;
  wire [2:0] _GEN_67 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_58;
  wire [2:0] _GEN_68 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_67;
  wire  _T_2936 = io_in_d_bits_opcode == _GEN_68;
  wire  _T_2937 = io_in_d_bits_opcode == _GEN_60 | _T_2936;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_102 = {{1'd0}, io_in_d_bits_size};
  wire  _T_2941 = _GEN_102 == a_size_lookup;
  wire  _T_2951 = _T_2904 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_2906;
  wire  _T_2952 = ~io_in_d_ready;
  wire  _T_2953 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_2960 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [127:0] _inflight_T = inflight | a_set;
  wire [127:0] _inflight_T_1 = ~d_clr;
  wire [127:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [511:0] a_opcodes_set = _GEN_31[511:0];
  wire [511:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [511:0] d_opcodes_clr = _GEN_35[511:0];
  wire [511:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [511:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [511:0] a_sizes_set = _GEN_32[511:0];
  wire [511:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [511:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_2969 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [127:0] inflight_1;
  reg [511:0] inflight_sizes_1;
  reg [2:0] c_first_counter_1;
  wire [2:0] c_first_counter1_1 = c_first_counter_1 - 3'h1;
  wire  c_first_1 = c_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_2;
  wire [2:0] d_first_counter1_2 = d_first_counter_2 - 3'h1;
  wire  d_first_2 = d_first_counter_2 == 3'h0;
  wire [511:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [511:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_89;
  wire [511:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[511:1]};
  wire  _T_2979 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire  _T_2980 = io_in_c_valid & c_first_1 & _T_2979;
  wire [127:0] _c_set_wo_ready_T = 128'h1 << io_in_c_bits_source;
  wire [127:0] c_set_wo_ready = io_in_c_valid & c_first_1 & _T_2979 ? _c_set_wo_ready_T : 128'h0;
  wire  _T_2986 = _c_first_T & c_first_1 & _T_2979;
  wire [3:0] _c_sizes_set_interm_T = {io_in_c_bits_size, 1'h0};
  wire [3:0] _c_sizes_set_interm_T_1 = _c_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_109 = {io_in_c_bits_source, 2'h0};
  wire [9:0] _c_opcodes_set_T = {{1'd0}, _GEN_109};
  wire [3:0] c_sizes_set_interm = _c_first_T & c_first_1 & _T_2979 ? _c_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_112 = {{1023'd0}, c_sizes_set_interm};
  wire [1026:0] _c_sizes_set_T_1 = _GEN_112 << _c_opcodes_set_T;
  wire [127:0] _T_2987 = inflight_1 >> io_in_c_bits_source;
  wire  _T_2989 = ~_T_2987[0];
  wire [127:0] c_set = _c_first_T & c_first_1 & _T_2979 ? _c_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_77 = _c_first_T & c_first_1 & _T_2979 ? _c_sizes_set_T_1 : 1027'h0;
  wire  _T_2993 = io_in_d_valid & d_first_2;
  wire  _T_2995 = io_in_d_valid & d_first_2 & _T_1348;
  wire [127:0] d_clr_wo_ready_1 = io_in_d_valid & d_first_2 & _T_1348 ? _d_clr_wo_ready_T : 128'h0;
  wire [127:0] d_clr_1 = _d_first_T & d_first_2 & _T_1348 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_80 = _d_first_T & d_first_2 & _T_1348 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_8 = io_in_c_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp_1 = _T_2980 & io_in_c_bits_source == io_in_d_bits_source;
  wire [127:0] _T_3003 = inflight_1 >> io_in_d_bits_source;
  wire  _T_3005 = _T_3003[0] | same_cycle_resp_1;
  wire  _T_3009 = io_in_d_bits_size == io_in_c_bits_size;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_3013 = _GEN_102 == c_size_lookup;
  wire  _T_3022 = _T_2993 & c_first_1 & io_in_c_valid & _same_cycle_resp_T_8 & _T_1348;
  wire  _T_3024 = _T_2952 | io_in_c_ready;
  wire  _T_3028 = |c_set_wo_ready;
  wire  _T_3029 = c_set_wo_ready != d_clr_wo_ready_1;
  wire [127:0] _inflight_T_3 = inflight_1 | c_set;
  wire [127:0] _inflight_T_4 = ~d_clr_1;
  wire [127:0] _inflight_T_5 = _inflight_T_3 & _inflight_T_4;
  wire [511:0] d_opcodes_clr_1 = _GEN_80[511:0];
  wire [511:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [511:0] c_sizes_set = _GEN_77[511:0];
  wire [511:0] _inflight_sizes_T_3 = inflight_sizes_1 | c_sizes_set;
  wire [511:0] _inflight_sizes_T_5 = _inflight_sizes_T_3 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_3038 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  reg  inflight_2;
  reg [2:0] d_first_counter_3;
  wire [2:0] d_first_counter1_3 = d_first_counter_3 - 3'h1;
  wire  d_first_3 = d_first_counter_3 == 3'h0;
  wire  _T_3050 = io_in_d_bits_opcode[2] & ~io_in_d_bits_opcode[1];
  wire  _T_3051 = _d_first_T & d_first_3 & _T_3050;
  wire  _T_3054 = ~inflight_2;
  wire [1:0] _GEN_84 = _d_first_T & d_first_3 & _T_3050 ? 2'h1 : 2'h0;
  wire  _T_3058 = io_in_e_ready & io_in_e_valid;
  wire [1:0] _e_clr_T = 2'h1 << io_in_e_bits_sink;
  wire  d_set = _GEN_84[0];
  wire  _T_3062 = (d_set | inflight_2) >> io_in_e_bits_sink;
  wire [1:0] _GEN_85 = _T_3058 ? _e_clr_T : 2'h0;
  wire  e_clr = _GEN_85[0];
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 3'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      param <= io_in_a_bits_param;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 3'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      c_first_counter <= 3'h0;
    end else if (_c_first_T) begin
      if (c_first) begin
        if (c_first_beats1_opdata) begin
          c_first_counter <= c_first_beats1_decode;
        end else begin
          c_first_counter <= 3'h0;
        end
      end else begin
        c_first_counter <= c_first_counter1;
      end
    end
    if (_c_first_T & c_first) begin
      opcode_3 <= io_in_c_bits_opcode;
    end
    if (_c_first_T & c_first) begin
      param_3 <= io_in_c_bits_param;
    end
    if (_c_first_T & c_first) begin
      size_3 <= io_in_c_bits_size;
    end
    if (_c_first_T & c_first) begin
      source_3 <= io_in_c_bits_source;
    end
    if (_c_first_T & c_first) begin
      address_2 <= io_in_c_bits_address;
    end
    if (reset) begin
      inflight <= 128'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 512'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 512'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 3'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 3'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 128'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 512'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      c_first_counter_1 <= 3'h0;
    end else if (_c_first_T) begin
      if (c_first_1) begin
        if (c_first_beats1_opdata) begin
          c_first_counter_1 <= c_first_beats1_decode;
        end else begin
          c_first_counter_1 <= 3'h0;
        end
      end else begin
        c_first_counter_1 <= c_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_2 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 3'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_c_first_T | _d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    if (reset) begin
      inflight_2 <= 1'h0;
    end else begin
      inflight_2 <= (inflight_2 | d_set) & ~e_clr;
    end
    if (reset) begin
      d_first_counter_3 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_3) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_3 <= d_first_beats1_decode;
        end else begin
          d_first_counter_3 <= 3'h0;
        end
      end else begin
        d_first_counter_3 <= d_first_counter1_3;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get is corrupt (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1088 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1088 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1096 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1096 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1096 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1096 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1096 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1096 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1096 & ~(_T_1210 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1096 & ~(_T_1210 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1096 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1096 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(_T_1332 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(_T_1332 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(_T_356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint is corrupt (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1218 & ~(_T_356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1344 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1344 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1348 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1348 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1348 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1348 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1348 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1348 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1348 & ~(_T_1360 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1348 & ~(_T_1360 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1348 & ~(_T_1364 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1348 & ~(_T_1364 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1368 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1368 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1368 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1368 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1368 & ~(_T_1379 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1368 & ~(_T_1379 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1368 & ~(_T_1383 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1368 & ~(_T_1383 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1368 & ~(_T_1360 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1368 & ~(_T_1360 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1396 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1396 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1396 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1396 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1396 & ~(_T_1379 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1396 & ~(_T_1379 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1396 & ~(_T_1383 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1396 & ~(_T_1383 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1396 & ~(_T_1416 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1396 & ~(_T_1416 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1425 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1425 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1425 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1425 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1425 & ~(_T_1360 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1425 & ~(_T_1360 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1442 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1442 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1442 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1442 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1442 & ~(_T_1416 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1442 & ~(_T_1416 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1460 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1460 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1460 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1460 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1460 & ~(_T_1360 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1460 & ~(_T_1360 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2230 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2230 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2230 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2230 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2230 & ~(_T_2237 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2230 & ~(_T_2237 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2230 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2230 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2230 & ~(_T_2244 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2230 & ~(_T_2244 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2252 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2252 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2252 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2252 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2252 & ~(_T_2237 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2252 & ~(_T_2237 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2252 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2252 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2252 & ~(_T_2244 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2252 & ~(_T_2244 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(_T_2374 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(_T_2374 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(_T_2485 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(_T_2485 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(_T_2237 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release smaller than a beat (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(_T_2237 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(_T_2244 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid report param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2270 & ~(_T_2244 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(_T_2374 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(_T_2374 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(_T_2485 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(_T_2485 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(_T_2237 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(_T_2237 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(_T_2244 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2507 & ~(_T_2244 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2740 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2740 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2740 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2740 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2740 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2740 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2740 & ~(_T_2750 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2740 & ~(_T_2750 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2758 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2758 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2758 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2758 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2758 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2758 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2758 & ~(_T_2750 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2758 & ~(_T_2750 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2772 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2772 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2772 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2772 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2772 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck address not aligned to size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2772 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2772 & ~(_T_2750 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2772 & ~(_T_2750 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channels carries invalid sink ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2794 & ~(_T_2795 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2794 & ~(_T_2795 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2794 & ~(_T_2799 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2794 & ~(_T_2799 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2794 & ~(_T_2803 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2794 & ~(_T_2803 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2794 & ~(_T_2807 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2794 & ~(_T_2807 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2794 & ~(_T_2811 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2794 & ~(_T_2811 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2818 & ~(_T_2819 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2818 & ~(_T_2819 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2818 & ~(_T_2823 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2818 & ~(_T_2823 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2818 & ~(_T_2827 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2818 & ~(_T_2827 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2818 & ~(_T_2831 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2818 & ~(_T_2831 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2818 & ~(_T_2839 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2818 & ~(_T_2839 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2870 & ~(_T_2871 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2870 & ~(_T_2871 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2870 & ~(_T_2875 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2870 & ~(_T_2875 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2870 & ~(_T_2879 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2870 & ~(_T_2879 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2870 & ~(_T_2883 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2870 & ~(_T_2883 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2870 & ~(_T_2887 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2870 & ~(_T_2887 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2896 & ~(_T_2900 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2896 & ~(_T_2900 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2907 & ~(_T_2919 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2907 & ~(_T_2919 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2907 & same_cycle_resp & ~(_T_2925 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2907 & same_cycle_resp & ~(_T_2925 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2907 & same_cycle_resp & ~(_T_2929 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2907 & same_cycle_resp & ~(_T_2929 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2907 & ~same_cycle_resp & ~(_T_2937 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2907 & ~same_cycle_resp & ~(_T_2937 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2907 & ~same_cycle_resp & ~(_T_2941 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2907 & ~same_cycle_resp & ~(_T_2941 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2951 & ~(_T_2953 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2951 & ~(_T_2953 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2960 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2960 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2969 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2969 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2986 & ~(_T_2989 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel re-used a source ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2986 & ~(_T_2989 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2995 & ~(_T_3005 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2995 & ~(_T_3005 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2995 & same_cycle_resp_1 & ~(_T_3009 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2995 & same_cycle_resp_1 & ~(_T_3009 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2995 & ~same_cycle_resp_1 & ~(_T_3013 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2995 & ~same_cycle_resp_1 & ~(_T_3013 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3022 & ~(_T_3024 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3022 & ~(_T_3024 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3028 & ~(_T_3029 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3028 & ~(_T_3029 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_3038 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_3038 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3051 & ~(_T_3054 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel re-used a sink ID (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3051 & ~(_T_3054 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3058 & ~(_T_3062 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:8)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3058 & ~(_T_3062 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  source = _RAND_4[6:0];
  _RAND_5 = {1{`RANDOM}};
  address = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  d_first_counter = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  opcode_1 = _RAND_7[2:0];
  _RAND_8 = {1{`RANDOM}};
  param_1 = _RAND_8[1:0];
  _RAND_9 = {1{`RANDOM}};
  size_1 = _RAND_9[2:0];
  _RAND_10 = {1{`RANDOM}};
  source_1 = _RAND_10[6:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  c_first_counter = _RAND_12[2:0];
  _RAND_13 = {1{`RANDOM}};
  opcode_3 = _RAND_13[2:0];
  _RAND_14 = {1{`RANDOM}};
  param_3 = _RAND_14[2:0];
  _RAND_15 = {1{`RANDOM}};
  size_3 = _RAND_15[2:0];
  _RAND_16 = {1{`RANDOM}};
  source_3 = _RAND_16[6:0];
  _RAND_17 = {1{`RANDOM}};
  address_2 = _RAND_17[31:0];
  _RAND_18 = {4{`RANDOM}};
  inflight = _RAND_18[127:0];
  _RAND_19 = {16{`RANDOM}};
  inflight_opcodes = _RAND_19[511:0];
  _RAND_20 = {16{`RANDOM}};
  inflight_sizes = _RAND_20[511:0];
  _RAND_21 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_21[2:0];
  _RAND_22 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_22[2:0];
  _RAND_23 = {1{`RANDOM}};
  watchdog = _RAND_23[31:0];
  _RAND_24 = {4{`RANDOM}};
  inflight_1 = _RAND_24[127:0];
  _RAND_25 = {16{`RANDOM}};
  inflight_sizes_1 = _RAND_25[511:0];
  _RAND_26 = {1{`RANDOM}};
  c_first_counter_1 = _RAND_26[2:0];
  _RAND_27 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_27[2:0];
  _RAND_28 = {1{`RANDOM}};
  watchdog_1 = _RAND_28[31:0];
  _RAND_29 = {1{`RANDOM}};
  inflight_2 = _RAND_29[0:0];
  _RAND_30 = {1{`RANDOM}};
  d_first_counter_3 = _RAND_30[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLXbar(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_param,
  input  [2:0]  auto_in_a_bits_size,
  input  [6:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
  output        auto_in_c_ready,
  input         auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
  input  [2:0]  auto_in_c_bits_param,
  input  [2:0]  auto_in_c_bits_size,
  input  [6:0]  auto_in_c_bits_source,
  input  [31:0] auto_in_c_bits_address,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [6:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  output        auto_in_e_ready,
  input         auto_in_e_valid,
  input         auto_in_e_bits_sink,
  input         auto_out_1_a_ready,
  output        auto_out_1_a_valid,
  output [2:0]  auto_out_1_a_bits_opcode,
  output [2:0]  auto_out_1_a_bits_param,
  output [2:0]  auto_out_1_a_bits_size,
  output [6:0]  auto_out_1_a_bits_source,
  output [12:0] auto_out_1_a_bits_address,
  output [7:0]  auto_out_1_a_bits_mask,
  output        auto_out_1_a_bits_corrupt,
  input         auto_out_1_c_ready,
  output        auto_out_1_c_valid,
  output [2:0]  auto_out_1_c_bits_opcode,
  output [2:0]  auto_out_1_c_bits_param,
  output [2:0]  auto_out_1_c_bits_size,
  output [6:0]  auto_out_1_c_bits_source,
  output [12:0] auto_out_1_c_bits_address,
  output        auto_out_1_d_ready,
  input         auto_out_1_d_valid,
  input  [2:0]  auto_out_1_d_bits_opcode,
  input  [1:0]  auto_out_1_d_bits_param,
  input  [2:0]  auto_out_1_d_bits_size,
  input  [6:0]  auto_out_1_d_bits_source,
  input         auto_out_1_d_bits_denied,
  input         auto_out_1_d_bits_corrupt,
  output        auto_out_1_e_valid,
  input         auto_out_0_a_ready,
  output        auto_out_0_a_valid,
  output [2:0]  auto_out_0_a_bits_opcode,
  output [2:0]  auto_out_0_a_bits_param,
  output [2:0]  auto_out_0_a_bits_size,
  output [6:0]  auto_out_0_a_bits_source,
  output [31:0] auto_out_0_a_bits_address,
  output [7:0]  auto_out_0_a_bits_mask,
  output [63:0] auto_out_0_a_bits_data,
  output        auto_out_0_a_bits_corrupt,
  output        auto_out_0_d_ready,
  input         auto_out_0_d_valid,
  input  [2:0]  auto_out_0_d_bits_opcode,
  input  [2:0]  auto_out_0_d_bits_size,
  input  [6:0]  auto_out_0_d_bits_source,
  input         auto_out_0_d_bits_denied,
  input  [63:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_param;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [6:0] monitor_io_in_a_bits_source;
  wire [31:0] monitor_io_in_a_bits_address;
  wire [7:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_a_bits_corrupt;
  wire  monitor_io_in_c_ready;
  wire  monitor_io_in_c_valid;
  wire [2:0] monitor_io_in_c_bits_opcode;
  wire [2:0] monitor_io_in_c_bits_param;
  wire [2:0] monitor_io_in_c_bits_size;
  wire [6:0] monitor_io_in_c_bits_source;
  wire [31:0] monitor_io_in_c_bits_address;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [6:0] monitor_io_in_d_bits_source;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  monitor_io_in_e_ready;
  wire  monitor_io_in_e_valid;
  wire  monitor_io_in_e_bits_sink;
  reg [2:0] beatsLeft;
  wire  idle = beatsLeft == 3'h0;
  wire [1:0] readys_filter_lo = {auto_out_1_d_valid,auto_out_0_d_valid};
  reg [1:0] readys_mask;
  wire [1:0] _readys_filter_T = ~readys_mask;
  wire [1:0] readys_filter_hi = readys_filter_lo & _readys_filter_T;
  wire [3:0] readys_filter = {readys_filter_hi,auto_out_1_d_valid,auto_out_0_d_valid};
  wire [3:0] _GEN_1 = {{1'd0}, readys_filter[3:1]};
  wire [3:0] _readys_unready_T_1 = readys_filter | _GEN_1;
  wire [3:0] _readys_unready_T_4 = {readys_mask, 2'h0};
  wire [3:0] _GEN_2 = {{1'd0}, _readys_unready_T_1[3:1]};
  wire [3:0] readys_unready = _GEN_2 | _readys_unready_T_4;
  wire [1:0] _readys_readys_T_2 = readys_unready[3:2] & readys_unready[1:0];
  wire [1:0] readys_readys = ~_readys_readys_T_2;
  wire  readys_0 = readys_readys[0];
  wire  earlyWinner_0 = readys_0 & auto_out_0_d_valid;
  reg  state_0;
  wire  muxStateEarly_0 = idle ? earlyWinner_0 : state_0;
  wire [6:0] _T_36 = muxStateEarly_0 ? auto_out_0_d_bits_source : 7'h0;
  wire  readys_1 = readys_readys[1];
  wire  earlyWinner_1 = readys_1 & auto_out_1_d_valid;
  reg  state_1;
  wire  muxStateEarly_1 = idle ? earlyWinner_1 : state_1;
  wire [6:0] _T_37 = muxStateEarly_1 ? auto_out_1_d_bits_source : 7'h0;
  wire [31:0] _requestAIO_T = auto_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _requestAIO_T_1 = {1'b0,$signed(_requestAIO_T)};
  wire [32:0] _requestAIO_T_3 = $signed(_requestAIO_T_1) & 33'shf0000000;
  wire  _requestAIO_T_4 = $signed(_requestAIO_T_3) == 33'sh0;
  wire [31:0] _requestAIO_T_5 = auto_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _requestAIO_T_6 = {1'b0,$signed(_requestAIO_T_5)};
  wire [32:0] _requestAIO_T_8 = $signed(_requestAIO_T_6) & 33'she0000000;
  wire  _requestAIO_T_9 = $signed(_requestAIO_T_8) == 33'sh0;
  wire [31:0] _requestAIO_T_10 = auto_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _requestAIO_T_11 = {1'b0,$signed(_requestAIO_T_10)};
  wire [32:0] _requestAIO_T_13 = $signed(_requestAIO_T_11) & 33'shc0000000;
  wire  _requestAIO_T_14 = $signed(_requestAIO_T_13) == 33'sh0;
  wire [31:0] _requestAIO_T_15 = auto_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _requestAIO_T_16 = {1'b0,$signed(_requestAIO_T_15)};
  wire [32:0] _requestAIO_T_18 = $signed(_requestAIO_T_16) & 33'shc0000000;
  wire  _requestAIO_T_19 = $signed(_requestAIO_T_18) == 33'sh0;
  wire [31:0] _requestAIO_T_20 = auto_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _requestAIO_T_21 = {1'b0,$signed(_requestAIO_T_20)};
  wire [32:0] _requestAIO_T_23 = $signed(_requestAIO_T_21) & 33'she0000000;
  wire  _requestAIO_T_24 = $signed(_requestAIO_T_23) == 33'sh0;
  wire  requestAIO_0_0 = _requestAIO_T_4 | _requestAIO_T_9 | _requestAIO_T_14 | _requestAIO_T_19 | _requestAIO_T_24;
  wire [32:0] _requestAIO_T_30 = {1'b0,$signed(auto_in_a_bits_address)};
  wire [32:0] _requestAIO_T_32 = $signed(_requestAIO_T_30) & 33'shf0000000;
  wire  requestAIO_0_1 = $signed(_requestAIO_T_32) == 33'sh0;
  wire  requestEIO_0_1 = ~auto_in_e_bits_sink;
  wire [12:0] _beatsDO_decode_T_1 = 13'h3f << auto_out_0_d_bits_size;
  wire [5:0] _beatsDO_decode_T_3 = ~_beatsDO_decode_T_1[5:0];
  wire [2:0] beatsDO_decode = _beatsDO_decode_T_3[5:3];
  wire  beatsDO_opdata = auto_out_0_d_bits_opcode[0];
  wire [2:0] beatsDO_0 = beatsDO_opdata ? beatsDO_decode : 3'h0;
  wire [12:0] _beatsDO_decode_T_5 = 13'h3f << auto_out_1_d_bits_size;
  wire [5:0] _beatsDO_decode_T_7 = ~_beatsDO_decode_T_5[5:0];
  wire [2:0] beatsDO_decode_1 = _beatsDO_decode_T_7[5:3];
  wire  beatsDO_opdata_1 = auto_out_1_d_bits_opcode[0];
  wire [2:0] beatsDO_1 = beatsDO_opdata_1 ? beatsDO_decode_1 : 3'h0;
  wire  latch = idle & auto_in_d_ready;
  wire [1:0] _readys_mask_T = readys_readys & readys_filter_lo;
  wire [2:0] _readys_mask_T_1 = {_readys_mask_T, 1'h0};
  wire [1:0] _readys_mask_T_3 = _readys_mask_T | _readys_mask_T_1[1:0];
  wire  _prefixOR_T = earlyWinner_0 | earlyWinner_1;
  wire  _T_10 = auto_out_0_d_valid | auto_out_1_d_valid;
  wire  _T_11 = ~(auto_out_0_d_valid | auto_out_1_d_valid);
  wire [2:0] maskedBeats_0 = earlyWinner_0 ? beatsDO_0 : 3'h0;
  wire [2:0] maskedBeats_1 = earlyWinner_1 ? beatsDO_1 : 3'h0;
  wire [2:0] initBeats = maskedBeats_0 | maskedBeats_1;
  wire  _sink_ACancel_earlyValid_T_3 = state_0 & auto_out_0_d_valid | state_1 & auto_out_1_d_valid;
  wire  sink_ACancel_5_earlyValid = idle ? _T_10 : _sink_ACancel_earlyValid_T_3;
  wire  _beatsLeft_T_2 = auto_in_d_ready & sink_ACancel_5_earlyValid;
  wire [2:0] _GEN_3 = {{2'd0}, _beatsLeft_T_2};
  wire [2:0] _beatsLeft_T_4 = beatsLeft - _GEN_3;
  wire  allowed_0 = idle ? readys_0 : state_0;
  wire  allowed_1 = idle ? readys_1 : state_1;
  wire [2:0] _T_39 = muxStateEarly_0 ? auto_out_0_d_bits_size : 3'h0;
  wire [2:0] _T_40 = muxStateEarly_1 ? auto_out_1_d_bits_size : 3'h0;
  wire [2:0] _T_45 = muxStateEarly_0 ? auto_out_0_d_bits_opcode : 3'h0;
  wire [2:0] _T_46 = muxStateEarly_1 ? auto_out_1_d_bits_opcode : 3'h0;
  CHIPLINK_PREFIX_Chiplink_TLMonitor monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_param(monitor_io_in_a_bits_param),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_a_bits_corrupt(monitor_io_in_a_bits_corrupt),
    .io_in_c_ready(monitor_io_in_c_ready),
    .io_in_c_valid(monitor_io_in_c_valid),
    .io_in_c_bits_opcode(monitor_io_in_c_bits_opcode),
    .io_in_c_bits_param(monitor_io_in_c_bits_param),
    .io_in_c_bits_size(monitor_io_in_c_bits_size),
    .io_in_c_bits_source(monitor_io_in_c_bits_source),
    .io_in_c_bits_address(monitor_io_in_c_bits_address),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt),
    .io_in_e_ready(monitor_io_in_e_ready),
    .io_in_e_valid(monitor_io_in_e_valid),
    .io_in_e_bits_sink(monitor_io_in_e_bits_sink)
  );
  assign auto_in_a_ready = requestAIO_0_0 & auto_out_0_a_ready | requestAIO_0_1 & auto_out_1_a_ready;
  assign auto_in_c_ready = auto_out_1_c_ready;
  assign auto_in_d_valid = idle ? _T_10 : _sink_ACancel_earlyValid_T_3;
  assign auto_in_d_bits_opcode = _T_45 | _T_46;
  assign auto_in_d_bits_param = muxStateEarly_1 ? auto_out_1_d_bits_param : 2'h0;
  assign auto_in_d_bits_size = _T_39 | _T_40;
  assign auto_in_d_bits_source = _T_36 | _T_37;
  assign auto_in_d_bits_denied = muxStateEarly_0 & auto_out_0_d_bits_denied | muxStateEarly_1 & auto_out_1_d_bits_denied
    ;
  assign auto_in_d_bits_data = muxStateEarly_0 ? auto_out_0_d_bits_data : 64'h0;
  assign auto_in_d_bits_corrupt = muxStateEarly_0 & auto_out_0_d_bits_corrupt | muxStateEarly_1 &
    auto_out_1_d_bits_corrupt;
  assign auto_in_e_ready = ~auto_in_e_bits_sink;
  assign auto_out_1_a_valid = auto_in_a_valid & requestAIO_0_1;
  assign auto_out_1_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_1_a_bits_param = auto_in_a_bits_param;
  assign auto_out_1_a_bits_size = auto_in_a_bits_size;
  assign auto_out_1_a_bits_source = auto_in_a_bits_source;
  assign auto_out_1_a_bits_address = auto_in_a_bits_address[12:0];
  assign auto_out_1_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_1_a_bits_corrupt = auto_in_a_bits_corrupt;
  assign auto_out_1_c_valid = auto_in_c_valid;
  assign auto_out_1_c_bits_opcode = auto_in_c_bits_opcode;
  assign auto_out_1_c_bits_param = auto_in_c_bits_param;
  assign auto_out_1_c_bits_size = auto_in_c_bits_size;
  assign auto_out_1_c_bits_source = auto_in_c_bits_source;
  assign auto_out_1_c_bits_address = auto_in_c_bits_address[12:0];
  assign auto_out_1_d_ready = auto_in_d_ready & allowed_1;
  assign auto_out_1_e_valid = auto_in_e_valid & requestEIO_0_1;
  assign auto_out_0_a_valid = auto_in_a_valid & requestAIO_0_0;
  assign auto_out_0_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_0_a_bits_param = auto_in_a_bits_param;
  assign auto_out_0_a_bits_size = auto_in_a_bits_size;
  assign auto_out_0_a_bits_source = auto_in_a_bits_source;
  assign auto_out_0_a_bits_address = auto_in_a_bits_address;
  assign auto_out_0_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_0_a_bits_data = auto_in_a_bits_data;
  assign auto_out_0_a_bits_corrupt = auto_in_a_bits_corrupt;
  assign auto_out_0_d_ready = auto_in_d_ready & allowed_0;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = requestAIO_0_0 & auto_out_0_a_ready | requestAIO_0_1 & auto_out_1_a_ready;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_param = auto_in_a_bits_param;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_a_bits_corrupt = auto_in_a_bits_corrupt;
  assign monitor_io_in_c_ready = auto_out_1_c_ready;
  assign monitor_io_in_c_valid = auto_in_c_valid;
  assign monitor_io_in_c_bits_opcode = auto_in_c_bits_opcode;
  assign monitor_io_in_c_bits_param = auto_in_c_bits_param;
  assign monitor_io_in_c_bits_size = auto_in_c_bits_size;
  assign monitor_io_in_c_bits_source = auto_in_c_bits_source;
  assign monitor_io_in_c_bits_address = auto_in_c_bits_address;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = idle ? _T_10 : _sink_ACancel_earlyValid_T_3;
  assign monitor_io_in_d_bits_opcode = _T_45 | _T_46;
  assign monitor_io_in_d_bits_param = muxStateEarly_1 ? auto_out_1_d_bits_param : 2'h0;
  assign monitor_io_in_d_bits_size = _T_39 | _T_40;
  assign monitor_io_in_d_bits_source = _T_36 | _T_37;
  assign monitor_io_in_d_bits_denied = muxStateEarly_0 & auto_out_0_d_bits_denied | muxStateEarly_1 &
    auto_out_1_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = muxStateEarly_0 & auto_out_0_d_bits_corrupt | muxStateEarly_1 &
    auto_out_1_d_bits_corrupt;
  assign monitor_io_in_e_ready = ~auto_in_e_bits_sink;
  assign monitor_io_in_e_valid = auto_in_e_valid;
  assign monitor_io_in_e_bits_sink = auto_in_e_bits_sink;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 3'h0;
    end else if (latch) begin
      beatsLeft <= initBeats;
    end else begin
      beatsLeft <= _beatsLeft_T_4;
    end
    if (reset) begin
      readys_mask <= 2'h3;
    end else if (latch & |readys_filter_lo) begin
      readys_mask <= _readys_mask_T_3;
    end
    if (reset) begin
      state_0 <= 1'h0;
    end else if (idle) begin
      state_0 <= earlyWinner_0;
    end
    if (reset) begin
      state_1 <= 1'h0;
    end else if (idle) begin
      state_1 <= earlyWinner_1;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~earlyWinner_0 | ~earlyWinner_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~earlyWinner_0 | ~earlyWinner_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~(auto_out_0_d_valid | auto_out_1_d_valid) | _prefixOR_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~(auto_out_0_d_valid | auto_out_1_d_valid) | _prefixOR_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_11 | _T_10 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:108 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_11 | _T_10 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  beatsLeft = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  readys_mask = _RAND_1[1:0];
  _RAND_2 = {1{`RANDOM}};
  state_0 = _RAND_2[0:0];
  _RAND_3 = {1{`RANDOM}};
  state_1 = _RAND_3[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_1(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_size,
  input  [3:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [3:0]  io_in_a_bits_mask,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [3:0]  io_in_d_bits_source,
  input  [5:0]  io_in_d_bits_sink,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [63:0] _RAND_13;
  reg [63:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [63:0] _RAND_19;
  reg [31:0] _RAND_20;
  reg [31:0] _RAND_21;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = ~io_in_a_bits_source[3];
  wire  source_ok = _source_ok_T_1 | io_in_a_bits_source[3];
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_71 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_71;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire  mask_sizeOH_shiftAmount = io_in_a_bits_size[0];
  wire [1:0] _mask_sizeOH_T_1 = 2'h1 << mask_sizeOH_shiftAmount;
  wire [1:0] mask_sizeOH = _mask_sizeOH_T_1 | 2'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h2;
  wire  mask_size = mask_sizeOH[1];
  wire  mask_bit = io_in_a_bits_address[1];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[0];
  wire  mask_bit_1 = io_in_a_bits_address[0];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_lo_lo = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_lo_hi = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_hi_lo = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_hi_hi = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire [3:0] mask = {mask_hi_hi,mask_hi_lo,mask_lo_hi,mask_lo_lo};
  wire  _T_34 = io_in_a_bits_opcode == 3'h6;
  wire  _T_60 = 3'h6 == io_in_a_bits_size;
  wire [31:0] _T_62 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_63 = {1'b0,$signed(_T_62)};
  wire [32:0] _T_65 = $signed(_T_63) & -33'sh10000000;
  wire  _T_66 = $signed(_T_65) == 33'sh0;
  wire [31:0] _T_67 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_68 = {1'b0,$signed(_T_67)};
  wire [32:0] _T_70 = $signed(_T_68) & -33'sh20000000;
  wire  _T_71 = $signed(_T_70) == 33'sh0;
  wire [31:0] _T_72 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_73 = {1'b0,$signed(_T_72)};
  wire [32:0] _T_75 = $signed(_T_73) & -33'sh40000000;
  wire  _T_76 = $signed(_T_75) == 33'sh0;
  wire [31:0] _T_77 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_78 = {1'b0,$signed(_T_77)};
  wire [32:0] _T_80 = $signed(_T_78) & -33'sh40000000;
  wire  _T_81 = $signed(_T_80) == 33'sh0;
  wire [31:0] _T_82 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_83 = {1'b0,$signed(_T_82)};
  wire [32:0] _T_85 = $signed(_T_83) & -33'sh20000000;
  wire  _T_86 = $signed(_T_85) == 33'sh0;
  wire  _T_90 = _T_66 | _T_71 | _T_76 | _T_81 | _T_86;
  wire  _T_91 = _T_60 & _T_90;
  wire  _T_93 = io_in_a_bits_size <= 3'h6;
  wire [31:0] _T_96 = io_in_a_bits_address ^ 32'h1000;
  wire [32:0] _T_97 = {1'b0,$signed(_T_96)};
  wire [32:0] _T_99 = $signed(_T_97) & -33'sh1000;
  wire  _T_100 = $signed(_T_99) == 33'sh0;
  wire  _T_101 = _T_93 & _T_100;
  wire  _T_104 = _T_91 | _T_101;
  wire  _T_105 = source_ok & _T_104;
  wire [32:0] _T_136 = $signed(_T_78) & -33'sh80000000;
  wire  _T_137 = $signed(_T_136) == 33'sh0;
  wire  _T_141 = _T_100 | _T_66 | _T_71 | _T_76 | _T_137;
  wire [3:0] _T_162 = ~io_in_a_bits_mask;
  wire  _T_163 = _T_162 == 4'h0;
  wire  _T_171 = io_in_a_bits_opcode == 3'h7;
  wire  _T_312 = io_in_a_bits_opcode == 3'h4;
  wire  _T_367 = _T_93 & _T_141;
  wire  _T_382 = io_in_a_bits_mask == mask;
  wire  _T_390 = io_in_a_bits_opcode == 3'h0;
  wire  _T_444 = source_ok & _T_367;
  wire  _T_462 = io_in_a_bits_opcode == 3'h1;
  wire [3:0] _T_530 = ~mask;
  wire [3:0] _T_531 = io_in_a_bits_mask & _T_530;
  wire  _T_532 = _T_531 == 4'h0;
  wire  _T_536 = io_in_a_bits_opcode == 3'h2;
  wire  _T_556 = io_in_a_bits_size <= 3'h3;
  wire  _T_581 = _T_66 | _T_71 | _T_76 | _T_137;
  wire  _T_582 = _T_556 & _T_581;
  wire  _T_594 = _T_582 | _T_101;
  wire  _T_595 = source_ok & _T_594;
  wire  _T_613 = io_in_a_bits_opcode == 3'h3;
  wire  _T_690 = io_in_a_bits_opcode == 3'h5;
  wire  _T_766 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_13 = ~io_in_d_bits_source[3];
  wire  source_ok_1 = _source_ok_T_13 | io_in_d_bits_source[3];
  wire  sink_ok = io_in_d_bits_sink < 6'h21;
  wire  _T_770 = io_in_d_bits_opcode == 3'h6;
  wire  _T_774 = io_in_d_bits_size >= 3'h2;
  wire  _T_778 = io_in_d_bits_param == 2'h0;
  wire  _T_782 = ~io_in_d_bits_corrupt;
  wire  _T_786 = ~io_in_d_bits_denied;
  wire  _T_790 = io_in_d_bits_opcode == 3'h4;
  wire  _T_801 = io_in_d_bits_param <= 2'h2;
  wire  _T_805 = io_in_d_bits_param != 2'h2;
  wire  _T_818 = io_in_d_bits_opcode == 3'h5;
  wire  _T_838 = _T_786 | io_in_d_bits_corrupt;
  wire  _T_847 = io_in_d_bits_opcode == 3'h0;
  wire  _T_864 = io_in_d_bits_opcode == 3'h1;
  wire  _T_882 = io_in_d_bits_opcode == 3'h2;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [3:0] a_first_beats1_decode = is_aligned_mask[5:2];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [3:0] a_first_counter;
  wire [3:0] a_first_counter1 = a_first_counter - 4'h1;
  wire  a_first = a_first_counter == 4'h0;
  reg [2:0] opcode;
  reg [2:0] size;
  reg [3:0] source;
  reg [31:0] address;
  wire  _T_912 = io_in_a_valid & ~a_first;
  wire  _T_913 = io_in_a_bits_opcode == opcode;
  wire  _T_921 = io_in_a_bits_size == size;
  wire  _T_925 = io_in_a_bits_source == source;
  wire  _T_929 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [3:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:2];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [3:0] d_first_counter;
  wire [3:0] d_first_counter1 = d_first_counter - 4'h1;
  wire  d_first = d_first_counter == 4'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [3:0] source_1;
  reg [5:0] sink;
  reg  denied;
  wire  _T_936 = io_in_d_valid & ~d_first;
  wire  _T_937 = io_in_d_bits_opcode == opcode_1;
  wire  _T_941 = io_in_d_bits_param == param_1;
  wire  _T_945 = io_in_d_bits_size == size_1;
  wire  _T_949 = io_in_d_bits_source == source_1;
  wire  _T_953 = io_in_d_bits_sink == sink;
  wire  _T_957 = io_in_d_bits_denied == denied;
  reg [15:0] inflight;
  reg [63:0] inflight_opcodes;
  reg [63:0] inflight_sizes;
  reg [3:0] a_first_counter_1;
  wire [3:0] a_first_counter1_1 = a_first_counter_1 - 4'h1;
  wire  a_first_1 = a_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_1;
  wire [3:0] d_first_counter1_1 = d_first_counter_1 - 4'h1;
  wire  d_first_1 = d_first_counter_1 == 4'h0;
  wire [5:0] _GEN_72 = {io_in_d_bits_source, 2'h0};
  wire [6:0] _a_opcode_lookup_T = {{1'd0}, _GEN_72};
  wire [63:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [63:0] _GEN_73 = {{48'd0}, _a_opcode_lookup_T_5};
  wire [63:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_73;
  wire [63:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[63:1]};
  wire [63:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [63:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_73;
  wire [63:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[63:1]};
  wire  _T_963 = io_in_a_valid & a_first_1;
  wire [15:0] _a_set_wo_ready_T = 16'h1 << io_in_a_bits_source;
  wire  _T_966 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [5:0] _GEN_78 = {io_in_a_bits_source, 2'h0};
  wire [6:0] _a_opcodes_set_T = {{1'd0}, _GEN_78};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_79 = {{127'd0}, a_opcodes_set_interm};
  wire [130:0] _a_opcodes_set_T_1 = _GEN_79 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_81 = {{127'd0}, a_sizes_set_interm};
  wire [130:0] _a_sizes_set_T_1 = _GEN_81 << _a_opcodes_set_T;
  wire [15:0] _T_968 = inflight >> io_in_a_bits_source;
  wire  _T_970 = ~_T_968[0];
  wire [15:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 16'h0;
  wire [130:0] _GEN_19 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 131'h0;
  wire [130:0] _GEN_20 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 131'h0;
  wire  _T_974 = io_in_d_valid & d_first_1;
  wire  _T_976 = ~_T_770;
  wire  _T_977 = io_in_d_valid & d_first_1 & ~_T_770;
  wire [15:0] _d_clr_wo_ready_T = 16'h1 << io_in_d_bits_source;
  wire [142:0] _GEN_83 = {{127'd0}, _a_opcode_lookup_T_5};
  wire [142:0] _d_opcodes_clr_T_5 = _GEN_83 << _a_opcode_lookup_T;
  wire [15:0] d_clr = _d_first_T & d_first_1 & _T_976 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_23 = _d_first_T & d_first_1 & _T_976 ? _d_opcodes_clr_T_5 : 143'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_963 & io_in_a_bits_source == io_in_d_bits_source;
  wire [15:0] _T_987 = inflight >> io_in_d_bits_source;
  wire  _T_989 = _T_987[0] | same_cycle_resp;
  wire [2:0] _GEN_27 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_28 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_27;
  wire [2:0] _GEN_29 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_28;
  wire [2:0] _GEN_30 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_29;
  wire [2:0] _GEN_31 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_30;
  wire [2:0] _GEN_32 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_31;
  wire [2:0] _GEN_39 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_30;
  wire [2:0] _GEN_40 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_39;
  wire  _T_994 = io_in_d_bits_opcode == _GEN_40;
  wire  _T_995 = io_in_d_bits_opcode == _GEN_32 | _T_994;
  wire  _T_999 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_43 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_44 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_43;
  wire [2:0] _GEN_45 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_44;
  wire [2:0] _GEN_46 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_45;
  wire [2:0] _GEN_47 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_46;
  wire [2:0] _GEN_48 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_47;
  wire [2:0] _GEN_55 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_46;
  wire [2:0] _GEN_56 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_55;
  wire  _T_1006 = io_in_d_bits_opcode == _GEN_56;
  wire  _T_1007 = io_in_d_bits_opcode == _GEN_48 | _T_1006;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_86 = {{1'd0}, io_in_d_bits_size};
  wire  _T_1011 = _GEN_86 == a_size_lookup;
  wire  _T_1021 = _T_974 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_976;
  wire  _T_1023 = ~io_in_d_ready | io_in_a_ready;
  wire [15:0] _inflight_T = inflight | a_set;
  wire [15:0] _inflight_T_1 = ~d_clr;
  wire [15:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [63:0] a_opcodes_set = _GEN_19[63:0];
  wire [63:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [63:0] d_opcodes_clr = _GEN_23[63:0];
  wire [63:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [63:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [63:0] a_sizes_set = _GEN_20[63:0];
  wire [63:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [63:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_1032 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [15:0] inflight_1;
  reg [63:0] inflight_sizes_1;
  reg [3:0] d_first_counter_2;
  wire [3:0] d_first_counter1_2 = d_first_counter_2 - 4'h1;
  wire  d_first_2 = d_first_counter_2 == 4'h0;
  wire [63:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [63:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_73;
  wire [63:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[63:1]};
  wire  _T_1058 = io_in_d_valid & d_first_2 & _T_770;
  wire [15:0] d_clr_1 = _d_first_T & d_first_2 & _T_770 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_68 = _d_first_T & d_first_2 & _T_770 ? _d_opcodes_clr_T_5 : 143'h0;
  wire [15:0] _T_1066 = inflight_1 >> io_in_d_bits_source;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_1076 = _GEN_86 == c_size_lookup;
  wire [15:0] _inflight_T_4 = ~d_clr_1;
  wire [15:0] _inflight_T_5 = inflight_1 & _inflight_T_4;
  wire [63:0] d_opcodes_clr_1 = _GEN_68[63:0];
  wire [63:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [63:0] _inflight_sizes_T_5 = inflight_sizes_1 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_1096 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 4'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 4'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      sink <= io_in_d_bits_sink;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      inflight <= 16'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 64'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 64'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 4'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 4'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 16'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 64'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      d_first_counter_2 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 4'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_105 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_105 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_163 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_163 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_105 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_105 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_163 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_163 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_367 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_367 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_444 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_444 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_444 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_444 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_532 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_532 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_595 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_595 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_595 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_595 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_444 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_444 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_766 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_766 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_774 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_774 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_786 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_786 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(sink_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(sink_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_774 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_774 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_801 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_801 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_805 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_805 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(sink_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(sink_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_774 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_774 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_801 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_801 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_805 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_805 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_838 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_838 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_838 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_838 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_913 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_913 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_921 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_921 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_925 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_925 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_929 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_929 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_937 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_937 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_941 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_941 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_945 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_945 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_949 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_949 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_953 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel sink changed with multibeat operation (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_953 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_957 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_957 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_966 & ~(_T_970 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_966 & ~(_T_970 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & ~(_T_989 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & ~(_T_989 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_995 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_995 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_999 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_999 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1007 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1007 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1011 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1011 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1021 & ~(_T_1023 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1021 & ~(_T_1023 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1032 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1032 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1058 & ~(_T_1066[0] | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1058 & ~(_T_1066[0] | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1058 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1058 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1096 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:102:11)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1096 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  size = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  source = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  address = _RAND_4[31:0];
  _RAND_5 = {1{`RANDOM}};
  d_first_counter = _RAND_5[3:0];
  _RAND_6 = {1{`RANDOM}};
  opcode_1 = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  param_1 = _RAND_7[1:0];
  _RAND_8 = {1{`RANDOM}};
  size_1 = _RAND_8[2:0];
  _RAND_9 = {1{`RANDOM}};
  source_1 = _RAND_9[3:0];
  _RAND_10 = {1{`RANDOM}};
  sink = _RAND_10[5:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  inflight = _RAND_12[15:0];
  _RAND_13 = {2{`RANDOM}};
  inflight_opcodes = _RAND_13[63:0];
  _RAND_14 = {2{`RANDOM}};
  inflight_sizes = _RAND_14[63:0];
  _RAND_15 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_15[3:0];
  _RAND_16 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_16[3:0];
  _RAND_17 = {1{`RANDOM}};
  watchdog = _RAND_17[31:0];
  _RAND_18 = {1{`RANDOM}};
  inflight_1 = _RAND_18[15:0];
  _RAND_19 = {2{`RANDOM}};
  inflight_sizes_1 = _RAND_19[63:0];
  _RAND_20 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_20[3:0];
  _RAND_21 = {1{`RANDOM}};
  watchdog_1 = _RAND_21[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLXbar_1(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_size,
  input  [3:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [3:0]  auto_in_a_bits_mask,
  input  [31:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [3:0]  auto_in_d_bits_source,
  output [5:0]  auto_in_d_bits_sink,
  output        auto_in_d_bits_denied,
  output [31:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  input         auto_out_1_a_ready,
  output        auto_out_1_a_valid,
  output [2:0]  auto_out_1_a_bits_opcode,
  output [2:0]  auto_out_1_a_bits_size,
  output [3:0]  auto_out_1_a_bits_source,
  output [12:0] auto_out_1_a_bits_address,
  output [3:0]  auto_out_1_a_bits_mask,
  output        auto_out_1_d_ready,
  input         auto_out_1_d_valid,
  input  [2:0]  auto_out_1_d_bits_opcode,
  input  [2:0]  auto_out_1_d_bits_size,
  input  [3:0]  auto_out_1_d_bits_source,
  input         auto_out_1_d_bits_denied,
  input         auto_out_1_d_bits_corrupt,
  input         auto_out_0_a_ready,
  output        auto_out_0_a_valid,
  output [2:0]  auto_out_0_a_bits_opcode,
  output [2:0]  auto_out_0_a_bits_size,
  output [3:0]  auto_out_0_a_bits_source,
  output [31:0] auto_out_0_a_bits_address,
  output [3:0]  auto_out_0_a_bits_mask,
  output [31:0] auto_out_0_a_bits_data,
  output        auto_out_0_d_ready,
  input         auto_out_0_d_valid,
  input  [2:0]  auto_out_0_d_bits_opcode,
  input  [1:0]  auto_out_0_d_bits_param,
  input  [2:0]  auto_out_0_d_bits_size,
  input  [3:0]  auto_out_0_d_bits_source,
  input  [4:0]  auto_out_0_d_bits_sink,
  input         auto_out_0_d_bits_denied,
  input  [31:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [3:0] monitor_io_in_a_bits_source;
  wire [31:0] monitor_io_in_a_bits_address;
  wire [3:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [3:0] monitor_io_in_d_bits_source;
  wire [5:0] monitor_io_in_d_bits_sink;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  reg [3:0] beatsLeft;
  wire  idle = beatsLeft == 4'h0;
  wire [1:0] readys_filter_lo = {auto_out_1_d_valid,auto_out_0_d_valid};
  reg [1:0] readys_mask;
  wire [1:0] _readys_filter_T = ~readys_mask;
  wire [1:0] readys_filter_hi = readys_filter_lo & _readys_filter_T;
  wire [3:0] readys_filter = {readys_filter_hi,auto_out_1_d_valid,auto_out_0_d_valid};
  wire [3:0] _GEN_1 = {{1'd0}, readys_filter[3:1]};
  wire [3:0] _readys_unready_T_1 = readys_filter | _GEN_1;
  wire [3:0] _readys_unready_T_4 = {readys_mask, 2'h0};
  wire [3:0] _GEN_2 = {{1'd0}, _readys_unready_T_1[3:1]};
  wire [3:0] readys_unready = _GEN_2 | _readys_unready_T_4;
  wire [1:0] _readys_readys_T_2 = readys_unready[3:2] & readys_unready[1:0];
  wire [1:0] readys_readys = ~_readys_readys_T_2;
  wire  readys_0 = readys_readys[0];
  wire  earlyWinner_0 = readys_0 & auto_out_0_d_valid;
  reg  state_0;
  wire  muxStateEarly_0 = idle ? earlyWinner_0 : state_0;
  wire [3:0] _T_36 = muxStateEarly_0 ? auto_out_0_d_bits_source : 4'h0;
  wire  readys_1 = readys_readys[1];
  wire  earlyWinner_1 = readys_1 & auto_out_1_d_valid;
  reg  state_1;
  wire  muxStateEarly_1 = idle ? earlyWinner_1 : state_1;
  wire [3:0] _T_37 = muxStateEarly_1 ? auto_out_1_d_bits_source : 4'h0;
  wire [31:0] _requestAIO_T = auto_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _requestAIO_T_1 = {1'b0,$signed(_requestAIO_T)};
  wire [32:0] _requestAIO_T_3 = $signed(_requestAIO_T_1) & 33'shf0000000;
  wire  _requestAIO_T_4 = $signed(_requestAIO_T_3) == 33'sh0;
  wire [31:0] _requestAIO_T_5 = auto_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _requestAIO_T_6 = {1'b0,$signed(_requestAIO_T_5)};
  wire [32:0] _requestAIO_T_8 = $signed(_requestAIO_T_6) & 33'she0000000;
  wire  _requestAIO_T_9 = $signed(_requestAIO_T_8) == 33'sh0;
  wire [31:0] _requestAIO_T_10 = auto_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _requestAIO_T_11 = {1'b0,$signed(_requestAIO_T_10)};
  wire [32:0] _requestAIO_T_13 = $signed(_requestAIO_T_11) & 33'shc0000000;
  wire  _requestAIO_T_14 = $signed(_requestAIO_T_13) == 33'sh0;
  wire [31:0] _requestAIO_T_15 = auto_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _requestAIO_T_16 = {1'b0,$signed(_requestAIO_T_15)};
  wire [32:0] _requestAIO_T_18 = $signed(_requestAIO_T_16) & 33'sh80000000;
  wire  _requestAIO_T_19 = $signed(_requestAIO_T_18) == 33'sh0;
  wire  requestAIO_0_0 = _requestAIO_T_4 | _requestAIO_T_9 | _requestAIO_T_14 | _requestAIO_T_19;
  wire [32:0] _requestAIO_T_24 = {1'b0,$signed(auto_in_a_bits_address)};
  wire [32:0] _requestAIO_T_26 = $signed(_requestAIO_T_24) & 33'shf0000000;
  wire  requestAIO_0_1 = $signed(_requestAIO_T_26) == 33'sh0;
  wire [12:0] _beatsDO_decode_T_1 = 13'h3f << auto_out_0_d_bits_size;
  wire [5:0] _beatsDO_decode_T_3 = ~_beatsDO_decode_T_1[5:0];
  wire [3:0] beatsDO_decode = _beatsDO_decode_T_3[5:2];
  wire  beatsDO_opdata = auto_out_0_d_bits_opcode[0];
  wire [3:0] beatsDO_0 = beatsDO_opdata ? beatsDO_decode : 4'h0;
  wire [12:0] _beatsDO_decode_T_5 = 13'h3f << auto_out_1_d_bits_size;
  wire [5:0] _beatsDO_decode_T_7 = ~_beatsDO_decode_T_5[5:0];
  wire [3:0] beatsDO_decode_1 = _beatsDO_decode_T_7[5:2];
  wire  beatsDO_opdata_1 = auto_out_1_d_bits_opcode[0];
  wire [3:0] beatsDO_1 = beatsDO_opdata_1 ? beatsDO_decode_1 : 4'h0;
  wire  latch = idle & auto_in_d_ready;
  wire [1:0] _readys_mask_T = readys_readys & readys_filter_lo;
  wire [2:0] _readys_mask_T_1 = {_readys_mask_T, 1'h0};
  wire [1:0] _readys_mask_T_3 = _readys_mask_T | _readys_mask_T_1[1:0];
  wire  _prefixOR_T = earlyWinner_0 | earlyWinner_1;
  wire  _T_10 = auto_out_0_d_valid | auto_out_1_d_valid;
  wire  _T_11 = ~(auto_out_0_d_valid | auto_out_1_d_valid);
  wire [3:0] maskedBeats_0 = earlyWinner_0 ? beatsDO_0 : 4'h0;
  wire [3:0] maskedBeats_1 = earlyWinner_1 ? beatsDO_1 : 4'h0;
  wire [3:0] initBeats = maskedBeats_0 | maskedBeats_1;
  wire  _sink_ACancel_earlyValid_T_3 = state_0 & auto_out_0_d_valid | state_1 & auto_out_1_d_valid;
  wire  sink_ACancel_5_earlyValid = idle ? _T_10 : _sink_ACancel_earlyValid_T_3;
  wire  _beatsLeft_T_2 = auto_in_d_ready & sink_ACancel_5_earlyValid;
  wire [3:0] _GEN_3 = {{3'd0}, _beatsLeft_T_2};
  wire [3:0] _beatsLeft_T_4 = beatsLeft - _GEN_3;
  wire  allowed_0 = idle ? readys_0 : state_0;
  wire  allowed_1 = idle ? readys_1 : state_1;
  wire [5:0] out_1_0_d_bits_sink = {{1'd0}, auto_out_0_d_bits_sink};
  wire [5:0] _T_33 = muxStateEarly_0 ? out_1_0_d_bits_sink : 6'h0;
  wire [5:0] _T_34 = muxStateEarly_1 ? 6'h20 : 6'h0;
  wire [2:0] _T_39 = muxStateEarly_0 ? auto_out_0_d_bits_size : 3'h0;
  wire [2:0] _T_40 = muxStateEarly_1 ? auto_out_1_d_bits_size : 3'h0;
  wire [2:0] _T_45 = muxStateEarly_0 ? auto_out_0_d_bits_opcode : 3'h0;
  wire [2:0] _T_46 = muxStateEarly_1 ? auto_out_1_d_bits_opcode : 3'h0;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_1 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_sink(monitor_io_in_d_bits_sink),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt)
  );
  assign auto_in_a_ready = requestAIO_0_0 & auto_out_0_a_ready | requestAIO_0_1 & auto_out_1_a_ready;
  assign auto_in_d_valid = idle ? _T_10 : _sink_ACancel_earlyValid_T_3;
  assign auto_in_d_bits_opcode = _T_45 | _T_46;
  assign auto_in_d_bits_param = muxStateEarly_0 ? auto_out_0_d_bits_param : 2'h0;
  assign auto_in_d_bits_size = _T_39 | _T_40;
  assign auto_in_d_bits_source = _T_36 | _T_37;
  assign auto_in_d_bits_sink = _T_33 | _T_34;
  assign auto_in_d_bits_denied = muxStateEarly_0 & auto_out_0_d_bits_denied | muxStateEarly_1 & auto_out_1_d_bits_denied
    ;
  assign auto_in_d_bits_data = muxStateEarly_0 ? auto_out_0_d_bits_data : 32'h0;
  assign auto_in_d_bits_corrupt = muxStateEarly_0 & auto_out_0_d_bits_corrupt | muxStateEarly_1 &
    auto_out_1_d_bits_corrupt;
  assign auto_out_1_a_valid = auto_in_a_valid & requestAIO_0_1;
  assign auto_out_1_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_1_a_bits_size = auto_in_a_bits_size;
  assign auto_out_1_a_bits_source = auto_in_a_bits_source;
  assign auto_out_1_a_bits_address = auto_in_a_bits_address[12:0];
  assign auto_out_1_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_1_d_ready = auto_in_d_ready & allowed_1;
  assign auto_out_0_a_valid = auto_in_a_valid & requestAIO_0_0;
  assign auto_out_0_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_0_a_bits_size = auto_in_a_bits_size;
  assign auto_out_0_a_bits_source = auto_in_a_bits_source;
  assign auto_out_0_a_bits_address = auto_in_a_bits_address;
  assign auto_out_0_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_0_a_bits_data = auto_in_a_bits_data;
  assign auto_out_0_d_ready = auto_in_d_ready & allowed_0;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = requestAIO_0_0 & auto_out_0_a_ready | requestAIO_0_1 & auto_out_1_a_ready;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = idle ? _T_10 : _sink_ACancel_earlyValid_T_3;
  assign monitor_io_in_d_bits_opcode = _T_45 | _T_46;
  assign monitor_io_in_d_bits_param = muxStateEarly_0 ? auto_out_0_d_bits_param : 2'h0;
  assign monitor_io_in_d_bits_size = _T_39 | _T_40;
  assign monitor_io_in_d_bits_source = _T_36 | _T_37;
  assign monitor_io_in_d_bits_sink = _T_33 | _T_34;
  assign monitor_io_in_d_bits_denied = muxStateEarly_0 & auto_out_0_d_bits_denied | muxStateEarly_1 &
    auto_out_1_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = muxStateEarly_0 & auto_out_0_d_bits_corrupt | muxStateEarly_1 &
    auto_out_1_d_bits_corrupt;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 4'h0;
    end else if (latch) begin
      beatsLeft <= initBeats;
    end else begin
      beatsLeft <= _beatsLeft_T_4;
    end
    if (reset) begin
      readys_mask <= 2'h3;
    end else if (latch & |readys_filter_lo) begin
      readys_mask <= _readys_mask_T_3;
    end
    if (reset) begin
      state_0 <= 1'h0;
    end else if (idle) begin
      state_0 <= earlyWinner_0;
    end
    if (reset) begin
      state_1 <= 1'h0;
    end else if (idle) begin
      state_1 <= earlyWinner_1;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~earlyWinner_0 | ~earlyWinner_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~earlyWinner_0 | ~earlyWinner_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~(auto_out_0_d_valid | auto_out_1_d_valid) | _prefixOR_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~(auto_out_0_d_valid | auto_out_1_d_valid) | _prefixOR_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_11 | _T_10 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:108 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_11 | _T_10 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  beatsLeft = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  readys_mask = _RAND_1[1:0];
  _RAND_2 = {1{`RANDOM}};
  state_0 = _RAND_2[0:0];
  _RAND_3 = {1{`RANDOM}};
  state_1 = _RAND_3[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_2(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_size,
  input  [3:0]  io_in_a_bits_source,
  input  [12:0] io_in_a_bits_address,
  input  [3:0]  io_in_a_bits_mask,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [2:0]  io_in_d_bits_size,
  input  [3:0]  io_in_d_bits_source,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [63:0] _RAND_11;
  reg [63:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [63:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [31:0] _RAND_19;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = ~io_in_a_bits_source[3];
  wire  source_ok = _source_ok_T_1 | io_in_a_bits_source[3];
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [12:0] _GEN_71 = {{7'd0}, is_aligned_mask};
  wire [12:0] _is_aligned_T = io_in_a_bits_address & _GEN_71;
  wire  is_aligned = _is_aligned_T == 13'h0;
  wire  mask_sizeOH_shiftAmount = io_in_a_bits_size[0];
  wire [1:0] _mask_sizeOH_T_1 = 2'h1 << mask_sizeOH_shiftAmount;
  wire [1:0] mask_sizeOH = _mask_sizeOH_T_1 | 2'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h2;
  wire  mask_size = mask_sizeOH[1];
  wire  mask_bit = io_in_a_bits_address[1];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[0];
  wire  mask_bit_1 = io_in_a_bits_address[0];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_lo_lo = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_lo_hi = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_hi_lo = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_hi_hi = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire [3:0] mask = {mask_hi_hi,mask_hi_lo,mask_lo_hi,mask_lo_lo};
  wire  _T_34 = io_in_a_bits_opcode == 3'h6;
  wire  _T_54 = io_in_a_bits_size <= 3'h6;
  wire [12:0] _T_57 = io_in_a_bits_address ^ 13'h1000;
  wire [13:0] _T_58 = {1'b0,$signed(_T_57)};
  wire [13:0] _T_60 = $signed(_T_58) & -14'sh1000;
  wire  _T_61 = $signed(_T_60) == 14'sh0;
  wire  _T_62 = _T_54 & _T_61;
  wire  _T_64 = source_ok & _T_62;
  wire [3:0] _T_97 = ~io_in_a_bits_mask;
  wire  _T_98 = _T_97 == 4'h0;
  wire  _T_106 = io_in_a_bits_opcode == 3'h7;
  wire  _T_182 = io_in_a_bits_opcode == 3'h4;
  wire  _T_228 = io_in_a_bits_mask == mask;
  wire  _T_236 = io_in_a_bits_opcode == 3'h0;
  wire  _T_284 = io_in_a_bits_opcode == 3'h1;
  wire [3:0] _T_328 = ~mask;
  wire [3:0] _T_329 = io_in_a_bits_mask & _T_328;
  wire  _T_330 = _T_329 == 4'h0;
  wire  _T_334 = io_in_a_bits_opcode == 3'h2;
  wire  _T_382 = io_in_a_bits_opcode == 3'h3;
  wire  _T_430 = io_in_a_bits_opcode == 3'h5;
  wire  _T_482 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_13 = ~io_in_d_bits_source[3];
  wire  source_ok_1 = _source_ok_T_13 | io_in_d_bits_source[3];
  wire  _T_486 = io_in_d_bits_opcode == 3'h6;
  wire  _T_490 = io_in_d_bits_size >= 3'h2;
  wire  _T_498 = ~io_in_d_bits_corrupt;
  wire  _T_502 = ~io_in_d_bits_denied;
  wire  _T_506 = io_in_d_bits_opcode == 3'h4;
  wire  _T_534 = io_in_d_bits_opcode == 3'h5;
  wire  _T_554 = _T_502 | io_in_d_bits_corrupt;
  wire  _T_563 = io_in_d_bits_opcode == 3'h0;
  wire  _T_580 = io_in_d_bits_opcode == 3'h1;
  wire  _T_598 = io_in_d_bits_opcode == 3'h2;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [3:0] a_first_beats1_decode = is_aligned_mask[5:2];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [3:0] a_first_counter;
  wire [3:0] a_first_counter1 = a_first_counter - 4'h1;
  wire  a_first = a_first_counter == 4'h0;
  reg [2:0] opcode;
  reg [2:0] size;
  reg [3:0] source;
  reg [12:0] address;
  wire  _T_628 = io_in_a_valid & ~a_first;
  wire  _T_629 = io_in_a_bits_opcode == opcode;
  wire  _T_637 = io_in_a_bits_size == size;
  wire  _T_641 = io_in_a_bits_source == source;
  wire  _T_645 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [3:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:2];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [3:0] d_first_counter;
  wire [3:0] d_first_counter1 = d_first_counter - 4'h1;
  wire  d_first = d_first_counter == 4'h0;
  reg [2:0] opcode_1;
  reg [2:0] size_1;
  reg [3:0] source_1;
  reg  denied;
  wire  _T_652 = io_in_d_valid & ~d_first;
  wire  _T_653 = io_in_d_bits_opcode == opcode_1;
  wire  _T_661 = io_in_d_bits_size == size_1;
  wire  _T_665 = io_in_d_bits_source == source_1;
  wire  _T_673 = io_in_d_bits_denied == denied;
  reg [15:0] inflight;
  reg [63:0] inflight_opcodes;
  reg [63:0] inflight_sizes;
  reg [3:0] a_first_counter_1;
  wire [3:0] a_first_counter1_1 = a_first_counter_1 - 4'h1;
  wire  a_first_1 = a_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_1;
  wire [3:0] d_first_counter1_1 = d_first_counter_1 - 4'h1;
  wire  d_first_1 = d_first_counter_1 == 4'h0;
  wire [5:0] _GEN_72 = {io_in_d_bits_source, 2'h0};
  wire [6:0] _a_opcode_lookup_T = {{1'd0}, _GEN_72};
  wire [63:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [63:0] _GEN_73 = {{48'd0}, _a_opcode_lookup_T_5};
  wire [63:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_73;
  wire [63:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[63:1]};
  wire [63:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [63:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_73;
  wire [63:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[63:1]};
  wire  _T_679 = io_in_a_valid & a_first_1;
  wire [15:0] _a_set_wo_ready_T = 16'h1 << io_in_a_bits_source;
  wire [15:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 16'h0;
  wire  _T_682 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [5:0] _GEN_78 = {io_in_a_bits_source, 2'h0};
  wire [6:0] _a_opcodes_set_T = {{1'd0}, _GEN_78};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_79 = {{127'd0}, a_opcodes_set_interm};
  wire [130:0] _a_opcodes_set_T_1 = _GEN_79 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_81 = {{127'd0}, a_sizes_set_interm};
  wire [130:0] _a_sizes_set_T_1 = _GEN_81 << _a_opcodes_set_T;
  wire [15:0] _T_684 = inflight >> io_in_a_bits_source;
  wire  _T_686 = ~_T_684[0];
  wire [15:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 16'h0;
  wire [130:0] _GEN_19 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 131'h0;
  wire [130:0] _GEN_20 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 131'h0;
  wire  _T_690 = io_in_d_valid & d_first_1;
  wire  _T_692 = ~_T_486;
  wire  _T_693 = io_in_d_valid & d_first_1 & ~_T_486;
  wire [15:0] _d_clr_wo_ready_T = 16'h1 << io_in_d_bits_source;
  wire [15:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_486 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_83 = {{127'd0}, _a_opcode_lookup_T_5};
  wire [142:0] _d_opcodes_clr_T_5 = _GEN_83 << _a_opcode_lookup_T;
  wire [15:0] d_clr = _d_first_T & d_first_1 & _T_692 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_23 = _d_first_T & d_first_1 & _T_692 ? _d_opcodes_clr_T_5 : 143'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_679 & io_in_a_bits_source == io_in_d_bits_source;
  wire [15:0] _T_703 = inflight >> io_in_d_bits_source;
  wire  _T_705 = _T_703[0] | same_cycle_resp;
  wire [2:0] _GEN_27 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_28 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_27;
  wire [2:0] _GEN_29 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_28;
  wire [2:0] _GEN_30 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_29;
  wire [2:0] _GEN_31 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_30;
  wire [2:0] _GEN_32 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_31;
  wire [2:0] _GEN_39 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_30;
  wire [2:0] _GEN_40 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_39;
  wire  _T_710 = io_in_d_bits_opcode == _GEN_40;
  wire  _T_711 = io_in_d_bits_opcode == _GEN_32 | _T_710;
  wire  _T_715 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_43 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_44 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_43;
  wire [2:0] _GEN_45 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_44;
  wire [2:0] _GEN_46 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_45;
  wire [2:0] _GEN_47 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_46;
  wire [2:0] _GEN_48 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_47;
  wire [2:0] _GEN_55 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_46;
  wire [2:0] _GEN_56 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_55;
  wire  _T_722 = io_in_d_bits_opcode == _GEN_56;
  wire  _T_723 = io_in_d_bits_opcode == _GEN_48 | _T_722;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_86 = {{1'd0}, io_in_d_bits_size};
  wire  _T_727 = _GEN_86 == a_size_lookup;
  wire  _T_737 = _T_690 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_692;
  wire  _T_739 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_746 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [15:0] _inflight_T = inflight | a_set;
  wire [15:0] _inflight_T_1 = ~d_clr;
  wire [15:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [63:0] a_opcodes_set = _GEN_19[63:0];
  wire [63:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [63:0] d_opcodes_clr = _GEN_23[63:0];
  wire [63:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [63:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [63:0] a_sizes_set = _GEN_20[63:0];
  wire [63:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [63:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_755 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [15:0] inflight_1;
  reg [63:0] inflight_sizes_1;
  reg [3:0] d_first_counter_2;
  wire [3:0] d_first_counter1_2 = d_first_counter_2 - 4'h1;
  wire  d_first_2 = d_first_counter_2 == 4'h0;
  wire [63:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [63:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_73;
  wire [63:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[63:1]};
  wire  _T_781 = io_in_d_valid & d_first_2 & _T_486;
  wire [15:0] d_clr_1 = _d_first_T & d_first_2 & _T_486 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_68 = _d_first_T & d_first_2 & _T_486 ? _d_opcodes_clr_T_5 : 143'h0;
  wire [15:0] _T_789 = inflight_1 >> io_in_d_bits_source;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_799 = _GEN_86 == c_size_lookup;
  wire [15:0] _inflight_T_4 = ~d_clr_1;
  wire [15:0] _inflight_T_5 = inflight_1 & _inflight_T_4;
  wire [63:0] d_opcodes_clr_1 = _GEN_68[63:0];
  wire [63:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [63:0] _inflight_sizes_T_5 = inflight_sizes_1 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_824 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 4'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 4'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      inflight <= 16'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 64'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 64'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 4'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 4'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 16'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 64'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      d_first_counter_2 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 4'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_98 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_98 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_T_98 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_T_98 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(_T_62 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(_T_62 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(_T_228 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(_T_228 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(_T_228 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(_T_228 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(_T_330 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(_T_330 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(_T_228 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(_T_228 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(_T_228 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(_T_228 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(_T_228 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(_T_228 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_482 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_482 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_490 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_490 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_498 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_498 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_502 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_502 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(_T_490 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(_T_490 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(_T_498 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(_T_498 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(_T_490 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(_T_490 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(_T_554 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(_T_554 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_563 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_563 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_563 & ~(_T_498 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_563 & ~(_T_498 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_580 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_580 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_580 & ~(_T_554 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_580 & ~(_T_554 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_598 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_598 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_598 & ~(_T_498 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_598 & ~(_T_498 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_628 & ~(_T_629 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_628 & ~(_T_629 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_628 & ~(_T_637 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_628 & ~(_T_637 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_628 & ~(_T_641 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_628 & ~(_T_641 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_628 & ~(_T_645 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_628 & ~(_T_645 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_652 & ~(_T_653 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_652 & ~(_T_653 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_652 & ~(_T_661 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_652 & ~(_T_661 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_652 & ~(_T_665 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_652 & ~(_T_665 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_652 & ~(_T_673 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_652 & ~(_T_673 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_682 & ~(_T_686 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_682 & ~(_T_686 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_693 & ~(_T_705 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_693 & ~(_T_705 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_693 & same_cycle_resp & ~(_T_711 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_693 & same_cycle_resp & ~(_T_711 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_693 & same_cycle_resp & ~(_T_715 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_693 & same_cycle_resp & ~(_T_715 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_693 & ~same_cycle_resp & ~(_T_723 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_693 & ~same_cycle_resp & ~(_T_723 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_693 & ~same_cycle_resp & ~(_T_727 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_693 & ~same_cycle_resp & ~(_T_727 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_737 & ~(_T_739 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_737 & ~(_T_739 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_746 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_746 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_755 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_755 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_781 & ~(_T_789[0] | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_781 & ~(_T_789[0] | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_781 & ~(_T_799 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_781 & ~(_T_799 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_824 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:43:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_824 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  size = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  source = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  address = _RAND_4[12:0];
  _RAND_5 = {1{`RANDOM}};
  d_first_counter = _RAND_5[3:0];
  _RAND_6 = {1{`RANDOM}};
  opcode_1 = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  size_1 = _RAND_7[2:0];
  _RAND_8 = {1{`RANDOM}};
  source_1 = _RAND_8[3:0];
  _RAND_9 = {1{`RANDOM}};
  denied = _RAND_9[0:0];
  _RAND_10 = {1{`RANDOM}};
  inflight = _RAND_10[15:0];
  _RAND_11 = {2{`RANDOM}};
  inflight_opcodes = _RAND_11[63:0];
  _RAND_12 = {2{`RANDOM}};
  inflight_sizes = _RAND_12[63:0];
  _RAND_13 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_13[3:0];
  _RAND_14 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_14[3:0];
  _RAND_15 = {1{`RANDOM}};
  watchdog = _RAND_15[31:0];
  _RAND_16 = {1{`RANDOM}};
  inflight_1 = _RAND_16[15:0];
  _RAND_17 = {2{`RANDOM}};
  inflight_sizes_1 = _RAND_17[63:0];
  _RAND_18 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_18[3:0];
  _RAND_19 = {1{`RANDOM}};
  watchdog_1 = _RAND_19[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Queue(
  input        clock,
  input        reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input  [2:0] io_enq_bits_opcode,
  input  [2:0] io_enq_bits_size,
  input  [3:0] io_enq_bits_source,
  input        io_deq_ready,
  output       io_deq_valid,
  output [2:0] io_deq_bits_opcode,
  output [2:0] io_deq_bits_size,
  output [3:0] io_deq_bits_source
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_REG_INIT
  reg [2:0] ram_opcode [0:0];
  wire [2:0] ram_opcode_io_deq_bits_MPORT_data;
  wire  ram_opcode_io_deq_bits_MPORT_addr;
  wire [2:0] ram_opcode_MPORT_data;
  wire  ram_opcode_MPORT_addr;
  wire  ram_opcode_MPORT_mask;
  wire  ram_opcode_MPORT_en;
  reg [2:0] ram_size [0:0];
  wire [2:0] ram_size_io_deq_bits_MPORT_data;
  wire  ram_size_io_deq_bits_MPORT_addr;
  wire [2:0] ram_size_MPORT_data;
  wire  ram_size_MPORT_addr;
  wire  ram_size_MPORT_mask;
  wire  ram_size_MPORT_en;
  reg [3:0] ram_source [0:0];
  wire [3:0] ram_source_io_deq_bits_MPORT_data;
  wire  ram_source_io_deq_bits_MPORT_addr;
  wire [3:0] ram_source_MPORT_data;
  wire  ram_source_MPORT_addr;
  wire  ram_source_MPORT_mask;
  wire  ram_source_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  do_enq = io_enq_ready & io_enq_valid;
  wire  do_deq = io_deq_ready & io_deq_valid;
  assign ram_opcode_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_opcode_io_deq_bits_MPORT_data = ram_opcode[ram_opcode_io_deq_bits_MPORT_addr];
  assign ram_opcode_MPORT_data = io_enq_bits_opcode;
  assign ram_opcode_MPORT_addr = 1'h0;
  assign ram_opcode_MPORT_mask = 1'h1;
  assign ram_opcode_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_size_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_size_io_deq_bits_MPORT_data = ram_size[ram_size_io_deq_bits_MPORT_addr];
  assign ram_size_MPORT_data = io_enq_bits_size;
  assign ram_size_MPORT_addr = 1'h0;
  assign ram_size_MPORT_mask = 1'h1;
  assign ram_size_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_source_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_source_io_deq_bits_MPORT_data = ram_source[ram_source_io_deq_bits_MPORT_addr];
  assign ram_source_MPORT_data = io_enq_bits_source;
  assign ram_source_MPORT_addr = 1'h0;
  assign ram_source_MPORT_mask = 1'h1;
  assign ram_source_MPORT_en = io_enq_ready & io_enq_valid;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = ram_opcode_io_deq_bits_MPORT_data;
  assign io_deq_bits_size = ram_size_io_deq_bits_MPORT_data;
  assign io_deq_bits_source = ram_source_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_opcode_MPORT_en & ram_opcode_MPORT_mask) begin
      ram_opcode[ram_opcode_MPORT_addr] <= ram_opcode_MPORT_data;
    end
    if(ram_size_MPORT_en & ram_size_MPORT_mask) begin
      ram_size[ram_size_MPORT_addr] <= ram_size_MPORT_data;
    end
    if(ram_source_MPORT_en & ram_source_MPORT_mask) begin
      ram_source[ram_source_MPORT_addr] <= ram_source_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      maybe_full <= do_enq;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_opcode[initvar] = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_size[initvar] = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_source[initvar] = _RAND_2[3:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_3 = {1{`RANDOM}};
  maybe_full = _RAND_3[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLError(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_size,
  input  [3:0]  auto_in_a_bits_source,
  input  [12:0] auto_in_a_bits_address,
  input  [3:0]  auto_in_a_bits_mask,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [2:0]  auto_in_d_bits_size,
  output [3:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output        auto_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [3:0] monitor_io_in_a_bits_source;
  wire [12:0] monitor_io_in_a_bits_address;
  wire [3:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [3:0] monitor_io_in_d_bits_source;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  a_clock;
  wire  a_reset;
  wire  a_io_enq_ready;
  wire  a_io_enq_valid;
  wire [2:0] a_io_enq_bits_opcode;
  wire [2:0] a_io_enq_bits_size;
  wire [3:0] a_io_enq_bits_source;
  wire  a_io_deq_ready;
  wire  a_io_deq_valid;
  wire [2:0] a_io_deq_bits_opcode;
  wire [2:0] a_io_deq_bits_size;
  wire [3:0] a_io_deq_bits_source;
  reg  idle;
  wire  _a_last_T = a_io_deq_ready & a_io_deq_valid;
  wire [12:0] _a_last_beats1_decode_T_1 = 13'h3f << a_io_deq_bits_size;
  wire [5:0] _a_last_beats1_decode_T_3 = ~_a_last_beats1_decode_T_1[5:0];
  wire [3:0] a_last_beats1_decode = _a_last_beats1_decode_T_3[5:2];
  wire  a_last_beats1_opdata = ~a_io_deq_bits_opcode[2];
  wire [3:0] a_last_beats1 = a_last_beats1_opdata ? a_last_beats1_decode : 4'h0;
  reg [3:0] a_last_counter;
  wire [3:0] a_last_counter1 = a_last_counter - 4'h1;
  wire  a_last_first = a_last_counter == 4'h0;
  wire  a_last = a_last_counter == 4'h1 | a_last_beats1 == 4'h0;
  reg [3:0] beatsLeft;
  wire  idle_1 = beatsLeft == 4'h0;
  wire  da_valid = a_io_deq_valid & a_last & idle;
  wire [1:0] _readys_T = {da_valid,1'h0};
  wire [2:0] _readys_T_1 = {_readys_T, 1'h0};
  wire [1:0] _readys_T_3 = _readys_T | _readys_T_1[1:0];
  wire [2:0] _readys_T_5 = {_readys_T_3, 1'h0};
  wire [1:0] _readys_T_7 = ~_readys_T_5[1:0];
  wire  readys_1 = _readys_T_7[1];
  reg  state_1;
  wire  allowed_1 = idle_1 ? readys_1 : state_1;
  wire  out_1_ready = auto_in_d_ready & allowed_1;
  wire  _T = out_1_ready & da_valid;
  wire [2:0] da_bits_size = a_io_deq_bits_size;
  wire [12:0] _beats1_decode_T_1 = 13'h3f << da_bits_size;
  wire [5:0] _beats1_decode_T_3 = ~_beats1_decode_T_1[5:0];
  wire [3:0] beats1_decode = _beats1_decode_T_3[5:2];
  wire [2:0] _GEN_4 = 3'h2 == a_io_deq_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_5 = 3'h3 == a_io_deq_bits_opcode ? 3'h1 : _GEN_4;
  wire [2:0] _GEN_6 = 3'h4 == a_io_deq_bits_opcode ? 3'h1 : _GEN_5;
  wire [2:0] _GEN_7 = 3'h5 == a_io_deq_bits_opcode ? 3'h2 : _GEN_6;
  wire [2:0] _GEN_8 = 3'h6 == a_io_deq_bits_opcode ? 3'h4 : _GEN_7;
  wire [2:0] da_bits_opcode = 3'h7 == a_io_deq_bits_opcode ? 3'h4 : _GEN_8;
  wire  beats1_opdata = da_bits_opcode[0];
  wire [3:0] beats1 = beats1_opdata ? beats1_decode : 4'h0;
  reg [3:0] counter;
  wire [3:0] counter1 = counter - 4'h1;
  wire  da_first = counter == 4'h0;
  wire  da_last = counter == 4'h1 | beats1 == 4'h0;
  wire  _GEN_12 = _T & da_bits_opcode == 3'h4 ? 1'h0 : idle;
  wire  latch = idle_1 & auto_in_d_ready;
  wire  earlyWinner_1 = readys_1 & da_valid;
  wire  _T_22 = ~da_valid;
  wire  muxStateEarly_1 = idle_1 ? earlyWinner_1 : state_1;
  wire  _sink_ACancel_earlyValid_T_2 = state_1 & da_valid;
  wire  sink_ACancel_earlyValid = idle_1 ? da_valid : _sink_ACancel_earlyValid_T_2;
  wire  _beatsLeft_T_2 = auto_in_d_ready & sink_ACancel_earlyValid;
  wire [3:0] _GEN_17 = {{3'd0}, _beatsLeft_T_2};
  wire [3:0] _beatsLeft_T_4 = beatsLeft - _GEN_17;
  wire [3:0] da_bits_source = a_io_deq_bits_source;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_2 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt)
  );
  CHIPLINK_PREFIX_Queue a (
    .clock(a_clock),
    .reset(a_reset),
    .io_enq_ready(a_io_enq_ready),
    .io_enq_valid(a_io_enq_valid),
    .io_enq_bits_opcode(a_io_enq_bits_opcode),
    .io_enq_bits_size(a_io_enq_bits_size),
    .io_enq_bits_source(a_io_enq_bits_source),
    .io_deq_ready(a_io_deq_ready),
    .io_deq_valid(a_io_deq_valid),
    .io_deq_bits_opcode(a_io_deq_bits_opcode),
    .io_deq_bits_size(a_io_deq_bits_size),
    .io_deq_bits_source(a_io_deq_bits_source)
  );
  assign auto_in_a_ready = a_io_enq_ready;
  assign auto_in_d_valid = idle_1 ? da_valid : _sink_ACancel_earlyValid_T_2;
  assign auto_in_d_bits_opcode = muxStateEarly_1 ? da_bits_opcode : 3'h0;
  assign auto_in_d_bits_size = muxStateEarly_1 ? da_bits_size : 3'h0;
  assign auto_in_d_bits_source = muxStateEarly_1 ? da_bits_source : 4'h0;
  assign auto_in_d_bits_denied = idle_1 ? earlyWinner_1 : state_1;
  assign auto_in_d_bits_corrupt = muxStateEarly_1 & beats1_opdata;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = a_io_enq_ready;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = idle_1 ? da_valid : _sink_ACancel_earlyValid_T_2;
  assign monitor_io_in_d_bits_opcode = muxStateEarly_1 ? da_bits_opcode : 3'h0;
  assign monitor_io_in_d_bits_size = muxStateEarly_1 ? da_bits_size : 3'h0;
  assign monitor_io_in_d_bits_source = muxStateEarly_1 ? da_bits_source : 4'h0;
  assign monitor_io_in_d_bits_denied = idle_1 ? earlyWinner_1 : state_1;
  assign monitor_io_in_d_bits_corrupt = muxStateEarly_1 & beats1_opdata;
  assign a_clock = clock;
  assign a_reset = reset;
  assign a_io_enq_valid = auto_in_a_valid;
  assign a_io_enq_bits_opcode = auto_in_a_bits_opcode;
  assign a_io_enq_bits_size = auto_in_a_bits_size;
  assign a_io_enq_bits_source = auto_in_a_bits_source;
  assign a_io_deq_ready = out_1_ready & da_last & idle | ~a_last;
  always @(posedge clock) begin
    idle <= reset | _GEN_12;
    if (reset) begin
      a_last_counter <= 4'h0;
    end else if (_a_last_T) begin
      if (a_last_first) begin
        if (a_last_beats1_opdata) begin
          a_last_counter <= a_last_beats1_decode;
        end else begin
          a_last_counter <= 4'h0;
        end
      end else begin
        a_last_counter <= a_last_counter1;
      end
    end
    if (reset) begin
      beatsLeft <= 4'h0;
    end else if (latch) begin
      if (earlyWinner_1) begin
        if (beats1_opdata) begin
          beatsLeft <= beats1_decode;
        end else begin
          beatsLeft <= 4'h0;
        end
      end else begin
        beatsLeft <= 4'h0;
      end
    end else begin
      beatsLeft <= _beatsLeft_T_4;
    end
    if (reset) begin
      state_1 <= 1'h0;
    end else if (idle_1) begin
      state_1 <= earlyWinner_1;
    end
    if (reset) begin
      counter <= 4'h0;
    end else if (_T) begin
      if (da_first) begin
        if (beats1_opdata) begin
          counter <= beats1_decode;
        end else begin
          counter <= 4'h0;
        end
      end else begin
        counter <= counter1;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(idle | da_first | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Error.scala:49 assert (idle || da_first) // we only send Grant, never GrantData => simplified flow control below\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(idle | da_first | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~da_valid | earlyWinner_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~da_valid | earlyWinner_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_22 | da_valid | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:108 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_22 | da_valid | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  idle = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  a_last_counter = _RAND_1[3:0];
  _RAND_2 = {1{`RANDOM}};
  beatsLeft = _RAND_2[3:0];
  _RAND_3 = {1{`RANDOM}};
  state_1 = _RAND_3[0:0];
  _RAND_4 = {1{`RANDOM}};
  counter = _RAND_4[3:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_3(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_size,
  input  [3:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [3:0]  io_in_a_bits_mask,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [3:0]  io_in_d_bits_source,
  input  [4:0]  io_in_d_bits_sink,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [63:0] _RAND_13;
  reg [63:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [63:0] _RAND_19;
  reg [31:0] _RAND_20;
  reg [31:0] _RAND_21;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = ~io_in_a_bits_source[3];
  wire  source_ok = _source_ok_T_1 | io_in_a_bits_source[3];
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_71 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_71;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire  mask_sizeOH_shiftAmount = io_in_a_bits_size[0];
  wire [1:0] _mask_sizeOH_T_1 = 2'h1 << mask_sizeOH_shiftAmount;
  wire [1:0] mask_sizeOH = _mask_sizeOH_T_1 | 2'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h2;
  wire  mask_size = mask_sizeOH[1];
  wire  mask_bit = io_in_a_bits_address[1];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[0];
  wire  mask_bit_1 = io_in_a_bits_address[0];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_lo_lo = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_lo_hi = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_hi_lo = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_hi_hi = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire [3:0] mask = {mask_hi_hi,mask_hi_lo,mask_lo_hi,mask_lo_lo};
  wire  _T_34 = io_in_a_bits_opcode == 3'h6;
  wire  _T_60 = 3'h6 == io_in_a_bits_size;
  wire [31:0] _T_62 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_63 = {1'b0,$signed(_T_62)};
  wire [32:0] _T_65 = $signed(_T_63) & -33'sh10000000;
  wire  _T_66 = $signed(_T_65) == 33'sh0;
  wire [31:0] _T_67 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_68 = {1'b0,$signed(_T_67)};
  wire [32:0] _T_70 = $signed(_T_68) & -33'sh20000000;
  wire  _T_71 = $signed(_T_70) == 33'sh0;
  wire [31:0] _T_72 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_73 = {1'b0,$signed(_T_72)};
  wire [32:0] _T_75 = $signed(_T_73) & -33'sh40000000;
  wire  _T_76 = $signed(_T_75) == 33'sh0;
  wire [31:0] _T_77 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_78 = {1'b0,$signed(_T_77)};
  wire [32:0] _T_80 = $signed(_T_78) & -33'sh40000000;
  wire  _T_81 = $signed(_T_80) == 33'sh0;
  wire [31:0] _T_82 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_83 = {1'b0,$signed(_T_82)};
  wire [32:0] _T_85 = $signed(_T_83) & -33'sh20000000;
  wire  _T_86 = $signed(_T_85) == 33'sh0;
  wire  _T_90 = _T_66 | _T_71 | _T_76 | _T_81 | _T_86;
  wire  _T_91 = _T_60 & _T_90;
  wire  _T_94 = source_ok & _T_91;
  wire [32:0] _T_120 = $signed(_T_78) & -33'sh80000000;
  wire  _T_121 = $signed(_T_120) == 33'sh0;
  wire  _T_124 = _T_66 | _T_71 | _T_76 | _T_121;
  wire [3:0] _T_145 = ~io_in_a_bits_mask;
  wire  _T_146 = _T_145 == 4'h0;
  wire  _T_154 = io_in_a_bits_opcode == 3'h7;
  wire  _T_278 = io_in_a_bits_opcode == 3'h4;
  wire  _T_301 = io_in_a_bits_size <= 3'h6;
  wire  _T_327 = _T_301 & _T_124;
  wire  _T_342 = io_in_a_bits_mask == mask;
  wire  _T_350 = io_in_a_bits_opcode == 3'h0;
  wire  _T_398 = source_ok & _T_327;
  wire  _T_416 = io_in_a_bits_opcode == 3'h1;
  wire [3:0] _T_478 = ~mask;
  wire [3:0] _T_479 = io_in_a_bits_mask & _T_478;
  wire  _T_480 = _T_479 == 4'h0;
  wire  _T_484 = io_in_a_bits_opcode == 3'h2;
  wire  _T_504 = io_in_a_bits_size <= 3'h3;
  wire  _T_530 = _T_504 & _T_124;
  wire  _T_532 = source_ok & _T_530;
  wire  _T_550 = io_in_a_bits_opcode == 3'h3;
  wire  _T_616 = io_in_a_bits_opcode == 3'h5;
  wire  _T_686 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_13 = ~io_in_d_bits_source[3];
  wire  source_ok_1 = _source_ok_T_13 | io_in_d_bits_source[3];
  wire  _T_690 = io_in_d_bits_opcode == 3'h6;
  wire  _T_694 = io_in_d_bits_size >= 3'h2;
  wire  _T_698 = io_in_d_bits_param == 2'h0;
  wire  _T_702 = ~io_in_d_bits_corrupt;
  wire  _T_706 = ~io_in_d_bits_denied;
  wire  _T_710 = io_in_d_bits_opcode == 3'h4;
  wire  _T_721 = io_in_d_bits_param <= 2'h2;
  wire  _T_725 = io_in_d_bits_param != 2'h2;
  wire  _T_738 = io_in_d_bits_opcode == 3'h5;
  wire  _T_758 = _T_706 | io_in_d_bits_corrupt;
  wire  _T_767 = io_in_d_bits_opcode == 3'h0;
  wire  _T_784 = io_in_d_bits_opcode == 3'h1;
  wire  _T_802 = io_in_d_bits_opcode == 3'h2;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [3:0] a_first_beats1_decode = is_aligned_mask[5:2];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [3:0] a_first_counter;
  wire [3:0] a_first_counter1 = a_first_counter - 4'h1;
  wire  a_first = a_first_counter == 4'h0;
  reg [2:0] opcode;
  reg [2:0] size;
  reg [3:0] source;
  reg [31:0] address;
  wire  _T_832 = io_in_a_valid & ~a_first;
  wire  _T_833 = io_in_a_bits_opcode == opcode;
  wire  _T_841 = io_in_a_bits_size == size;
  wire  _T_845 = io_in_a_bits_source == source;
  wire  _T_849 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [3:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:2];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [3:0] d_first_counter;
  wire [3:0] d_first_counter1 = d_first_counter - 4'h1;
  wire  d_first = d_first_counter == 4'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [3:0] source_1;
  reg [4:0] sink;
  reg  denied;
  wire  _T_856 = io_in_d_valid & ~d_first;
  wire  _T_857 = io_in_d_bits_opcode == opcode_1;
  wire  _T_861 = io_in_d_bits_param == param_1;
  wire  _T_865 = io_in_d_bits_size == size_1;
  wire  _T_869 = io_in_d_bits_source == source_1;
  wire  _T_873 = io_in_d_bits_sink == sink;
  wire  _T_877 = io_in_d_bits_denied == denied;
  reg [15:0] inflight;
  reg [63:0] inflight_opcodes;
  reg [63:0] inflight_sizes;
  reg [3:0] a_first_counter_1;
  wire [3:0] a_first_counter1_1 = a_first_counter_1 - 4'h1;
  wire  a_first_1 = a_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_1;
  wire [3:0] d_first_counter1_1 = d_first_counter_1 - 4'h1;
  wire  d_first_1 = d_first_counter_1 == 4'h0;
  wire [5:0] _GEN_72 = {io_in_d_bits_source, 2'h0};
  wire [6:0] _a_opcode_lookup_T = {{1'd0}, _GEN_72};
  wire [63:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [63:0] _GEN_73 = {{48'd0}, _a_opcode_lookup_T_5};
  wire [63:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_73;
  wire [63:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[63:1]};
  wire [63:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [63:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_73;
  wire [63:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[63:1]};
  wire  _T_883 = io_in_a_valid & a_first_1;
  wire [15:0] _a_set_wo_ready_T = 16'h1 << io_in_a_bits_source;
  wire  _T_886 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [5:0] _GEN_78 = {io_in_a_bits_source, 2'h0};
  wire [6:0] _a_opcodes_set_T = {{1'd0}, _GEN_78};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_79 = {{127'd0}, a_opcodes_set_interm};
  wire [130:0] _a_opcodes_set_T_1 = _GEN_79 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_81 = {{127'd0}, a_sizes_set_interm};
  wire [130:0] _a_sizes_set_T_1 = _GEN_81 << _a_opcodes_set_T;
  wire [15:0] _T_888 = inflight >> io_in_a_bits_source;
  wire  _T_890 = ~_T_888[0];
  wire [15:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 16'h0;
  wire [130:0] _GEN_19 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 131'h0;
  wire [130:0] _GEN_20 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 131'h0;
  wire  _T_894 = io_in_d_valid & d_first_1;
  wire  _T_896 = ~_T_690;
  wire  _T_897 = io_in_d_valid & d_first_1 & ~_T_690;
  wire [15:0] _d_clr_wo_ready_T = 16'h1 << io_in_d_bits_source;
  wire [142:0] _GEN_83 = {{127'd0}, _a_opcode_lookup_T_5};
  wire [142:0] _d_opcodes_clr_T_5 = _GEN_83 << _a_opcode_lookup_T;
  wire [15:0] d_clr = _d_first_T & d_first_1 & _T_896 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_23 = _d_first_T & d_first_1 & _T_896 ? _d_opcodes_clr_T_5 : 143'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_883 & io_in_a_bits_source == io_in_d_bits_source;
  wire [15:0] _T_907 = inflight >> io_in_d_bits_source;
  wire  _T_909 = _T_907[0] | same_cycle_resp;
  wire [2:0] _GEN_27 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_28 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_27;
  wire [2:0] _GEN_29 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_28;
  wire [2:0] _GEN_30 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_29;
  wire [2:0] _GEN_31 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_30;
  wire [2:0] _GEN_32 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_31;
  wire [2:0] _GEN_39 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_30;
  wire [2:0] _GEN_40 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_39;
  wire  _T_914 = io_in_d_bits_opcode == _GEN_40;
  wire  _T_915 = io_in_d_bits_opcode == _GEN_32 | _T_914;
  wire  _T_919 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_43 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_44 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_43;
  wire [2:0] _GEN_45 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_44;
  wire [2:0] _GEN_46 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_45;
  wire [2:0] _GEN_47 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_46;
  wire [2:0] _GEN_48 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_47;
  wire [2:0] _GEN_55 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_46;
  wire [2:0] _GEN_56 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_55;
  wire  _T_926 = io_in_d_bits_opcode == _GEN_56;
  wire  _T_927 = io_in_d_bits_opcode == _GEN_48 | _T_926;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_86 = {{1'd0}, io_in_d_bits_size};
  wire  _T_931 = _GEN_86 == a_size_lookup;
  wire  _T_941 = _T_894 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_896;
  wire  _T_943 = ~io_in_d_ready | io_in_a_ready;
  wire [15:0] _inflight_T = inflight | a_set;
  wire [15:0] _inflight_T_1 = ~d_clr;
  wire [15:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [63:0] a_opcodes_set = _GEN_19[63:0];
  wire [63:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [63:0] d_opcodes_clr = _GEN_23[63:0];
  wire [63:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [63:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [63:0] a_sizes_set = _GEN_20[63:0];
  wire [63:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [63:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_952 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [15:0] inflight_1;
  reg [63:0] inflight_sizes_1;
  reg [3:0] d_first_counter_2;
  wire [3:0] d_first_counter1_2 = d_first_counter_2 - 4'h1;
  wire  d_first_2 = d_first_counter_2 == 4'h0;
  wire [63:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [63:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_73;
  wire [63:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[63:1]};
  wire  _T_978 = io_in_d_valid & d_first_2 & _T_690;
  wire [15:0] d_clr_1 = _d_first_T & d_first_2 & _T_690 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_68 = _d_first_T & d_first_2 & _T_690 ? _d_opcodes_clr_T_5 : 143'h0;
  wire [15:0] _T_986 = inflight_1 >> io_in_d_bits_source;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_996 = _GEN_86 == c_size_lookup;
  wire [15:0] _inflight_T_4 = ~d_clr_1;
  wire [15:0] _inflight_T_5 = inflight_1 & _inflight_T_4;
  wire [63:0] d_opcodes_clr_1 = _GEN_68[63:0];
  wire [63:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [63:0] _inflight_sizes_T_5 = inflight_sizes_1 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_1016 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 4'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 4'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      sink <= io_in_d_bits_sink;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      inflight <= 16'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 64'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 64'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 4'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 4'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 16'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 64'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      d_first_counter_2 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 4'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_94 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_94 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_146 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_146 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_T_94 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_T_94 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_T_146 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_T_146 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(_T_327 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(_T_327 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(_T_342 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(_T_342 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(_T_398 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(_T_398 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(_T_342 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(_T_342 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(_T_398 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(_T_398 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(_T_480 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(_T_480 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(_T_532 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(_T_532 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(_T_342 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(_T_342 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(_T_532 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(_T_532 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(_T_342 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(_T_342 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(_T_398 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(_T_398 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(_T_342 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(_T_342 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_686 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_686 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_694 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_694 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_698 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_698 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_702 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_702 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_706 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_706 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_694 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_694 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_721 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_721 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_725 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_725 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_702 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_702 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_694 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_694 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_721 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_721 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_725 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_725 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_758 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_758 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(_T_698 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(_T_698 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(_T_702 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(_T_702 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(_T_698 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(_T_698 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(_T_758 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(_T_758 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(_T_698 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(_T_698 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(_T_702 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(_T_702 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_832 & ~(_T_833 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_832 & ~(_T_833 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_832 & ~(_T_841 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_832 & ~(_T_841 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_832 & ~(_T_845 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_832 & ~(_T_845 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_832 & ~(_T_849 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_832 & ~(_T_849 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_857 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_857 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_861 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_861 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_865 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_865 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_869 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_869 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_873 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel sink changed with multibeat operation (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_873 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_877 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_877 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_886 & ~(_T_890 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_886 & ~(_T_890 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_897 & ~(_T_909 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_897 & ~(_T_909 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_897 & same_cycle_resp & ~(_T_915 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_897 & same_cycle_resp & ~(_T_915 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_897 & same_cycle_resp & ~(_T_919 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_897 & same_cycle_resp & ~(_T_919 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_897 & ~same_cycle_resp & ~(_T_927 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_897 & ~same_cycle_resp & ~(_T_927 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_897 & ~same_cycle_resp & ~(_T_931 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_897 & ~same_cycle_resp & ~(_T_931 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_941 & ~(_T_943 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_941 & ~(_T_943 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_952 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_952 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_978 & ~(_T_986[0] | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_978 & ~(_T_986[0] | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_978 & ~(_T_996 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at BusBypass.scala:32:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_978 & ~(_T_996 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1016 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at BusBypass.scala:32:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1016 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  size = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  source = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  address = _RAND_4[31:0];
  _RAND_5 = {1{`RANDOM}};
  d_first_counter = _RAND_5[3:0];
  _RAND_6 = {1{`RANDOM}};
  opcode_1 = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  param_1 = _RAND_7[1:0];
  _RAND_8 = {1{`RANDOM}};
  size_1 = _RAND_8[2:0];
  _RAND_9 = {1{`RANDOM}};
  source_1 = _RAND_9[3:0];
  _RAND_10 = {1{`RANDOM}};
  sink = _RAND_10[4:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  inflight = _RAND_12[15:0];
  _RAND_13 = {2{`RANDOM}};
  inflight_opcodes = _RAND_13[63:0];
  _RAND_14 = {2{`RANDOM}};
  inflight_sizes = _RAND_14[63:0];
  _RAND_15 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_15[3:0];
  _RAND_16 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_16[3:0];
  _RAND_17 = {1{`RANDOM}};
  watchdog = _RAND_17[31:0];
  _RAND_18 = {1{`RANDOM}};
  inflight_1 = _RAND_18[15:0];
  _RAND_19 = {2{`RANDOM}};
  inflight_sizes_1 = _RAND_19[63:0];
  _RAND_20 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_20[3:0];
  _RAND_21 = {1{`RANDOM}};
  watchdog_1 = _RAND_21[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLBusBypassBar(
  input          clock,
  input          reset,
  output         auto_in_a_ready,
  input          auto_in_a_valid,
  input  [2:0]   auto_in_a_bits_opcode,
  input  [2:0]   auto_in_a_bits_size,
  input  [3:0]   auto_in_a_bits_source,
  input  [31:0]  auto_in_a_bits_address,
  input  [3:0]   auto_in_a_bits_mask,
  input  [31:0]  auto_in_a_bits_data,
  input          auto_in_d_ready,
  output         auto_in_d_valid,
  output [2:0]   auto_in_d_bits_opcode,
  output [1:0]   auto_in_d_bits_param,
  output [2:0]   auto_in_d_bits_size,
  output [3:0]   auto_in_d_bits_source,
  output [4:0]   auto_in_d_bits_sink,
  output         auto_in_d_bits_denied,
  output [31:0]  auto_in_d_bits_data,
  output         auto_in_d_bits_corrupt,
  input          auto_out_1_a_ready,
  output         auto_out_1_a_valid,
  output [2:0]   auto_out_1_a_bits_opcode,
  output [2:0]   auto_out_1_a_bits_size,
  output [3:0]   auto_out_1_a_bits_source,
  output [31:0]  auto_out_1_a_bits_address,
  output [3:0]   auto_out_1_a_bits_mask,
  output [31:0]  auto_out_1_a_bits_data,
  output         auto_out_1_d_ready,
  input          auto_out_1_d_valid,
  input  [2:0]   auto_out_1_d_bits_opcode,
  input  [1:0]   auto_out_1_d_bits_param,
  input  [2:0]   auto_out_1_d_bits_size,
  input  [3:0]   auto_out_1_d_bits_source,
  input  [4:0]   auto_out_1_d_bits_sink,
  input          auto_out_1_d_bits_denied,
  input  [31:0]  auto_out_1_d_bits_data,
  input          auto_out_1_d_bits_corrupt,
  input          auto_out_0_a_ready,
  output         auto_out_0_a_valid,
  output [2:0]   auto_out_0_a_bits_opcode,
  output [3:0]   auto_out_0_a_bits_size,
  output [3:0]   auto_out_0_a_bits_source,
  output [127:0] auto_out_0_a_bits_address,
  output [3:0]   auto_out_0_a_bits_mask,
  output         auto_out_0_d_ready,
  input          auto_out_0_d_valid,
  input  [2:0]   auto_out_0_d_bits_opcode,
  input  [3:0]   auto_out_0_d_bits_size,
  input  [3:0]   auto_out_0_d_bits_source,
  input          auto_out_0_d_bits_denied,
  input          auto_out_0_d_bits_corrupt,
  input          io_bypass
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [3:0] monitor_io_in_a_bits_source;
  wire [31:0] monitor_io_in_a_bits_address;
  wire [3:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [3:0] monitor_io_in_d_bits_source;
  wire [4:0] monitor_io_in_d_bits_sink;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  reg  in_reset;
  reg  bypass_reg;
  wire  bypass = in_reset ? io_bypass : bypass_reg;
  reg [5:0] flight;
  reg [3:0] stall_counter;
  wire  stall_first = stall_counter == 4'h0;
  wire  stall = bypass != io_bypass & stall_first;
  wire  _bundleIn_0_a_ready_T = ~stall;
  wire  _bundleIn_0_a_ready_T_1 = bypass ? auto_out_0_a_ready : auto_out_1_a_ready;
  wire  in_a_ready = ~stall & _bundleIn_0_a_ready_T_1;
  wire  _T = in_a_ready & auto_in_a_valid;
  wire [12:0] _beats1_decode_T_1 = 13'h3f << auto_in_a_bits_size;
  wire [5:0] _beats1_decode_T_3 = ~_beats1_decode_T_1[5:0];
  wire [3:0] beats1_decode = _beats1_decode_T_3[5:2];
  wire  beats1_opdata = ~auto_in_a_bits_opcode[2];
  reg [3:0] counter;
  wire [3:0] counter1 = counter - 4'h1;
  wire  a_first = counter == 4'h0;
  wire  in_d_valid = bypass ? auto_out_0_d_valid : auto_out_1_d_valid;
  wire  _T_3 = auto_in_d_ready & in_d_valid;
  wire [2:0] bundleIn_0_d_bits_out_size = auto_out_0_d_bits_size[2:0];
  wire [2:0] in_d_bits_size = bypass ? bundleIn_0_d_bits_out_size : auto_out_1_d_bits_size;
  wire [12:0] _beats1_decode_T_13 = 13'h3f << in_d_bits_size;
  wire [5:0] _beats1_decode_T_15 = ~_beats1_decode_T_13[5:0];
  wire [3:0] beats1_decode_3 = _beats1_decode_T_15[5:2];
  wire [2:0] in_d_bits_opcode = bypass ? auto_out_0_d_bits_opcode : auto_out_1_d_bits_opcode;
  wire  beats1_opdata_3 = in_d_bits_opcode[0];
  wire [3:0] beats1_3 = beats1_opdata_3 ? beats1_decode_3 : 4'h0;
  reg [3:0] counter_3;
  wire [3:0] counter1_3 = counter_3 - 4'h1;
  wire  d_first = counter_3 == 4'h0;
  wire  d_last = counter_3 == 4'h1 | beats1_3 == 4'h0;
  wire  d_request = in_d_bits_opcode[2] & ~in_d_bits_opcode[1];
  wire  inc_hi = _T & a_first;
  wire  inc_lo = _T_3 & d_first & d_request;
  wire [1:0] inc = {inc_hi,inc_lo};
  wire  dec_lo = _T_3 & d_last;
  wire [1:0] dec = {1'h0,dec_lo};
  wire [1:0] _next_flight_T_2 = inc[0] + inc[1];
  wire [5:0] _GEN_7 = {{4'd0}, _next_flight_T_2};
  wire [5:0] _next_flight_T_5 = flight + _GEN_7;
  wire [1:0] _next_flight_T_8 = dec[0] + dec[1];
  wire [5:0] _GEN_8 = {{4'd0}, _next_flight_T_8};
  wire [5:0] next_flight = _next_flight_T_5 - _GEN_8;
  wire [3:0] stall_counter1 = stall_counter - 4'h1;
  wire  _bundleOut_0_a_valid_T_1 = _bundleIn_0_a_ready_T & auto_in_a_valid;
  wire  _bundleOut_1_a_valid_T_2 = ~bypass;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_3 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_sink(monitor_io_in_d_bits_sink),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt)
  );
  assign auto_in_a_ready = ~stall & _bundleIn_0_a_ready_T_1;
  assign auto_in_d_valid = bypass ? auto_out_0_d_valid : auto_out_1_d_valid;
  assign auto_in_d_bits_opcode = bypass ? auto_out_0_d_bits_opcode : auto_out_1_d_bits_opcode;
  assign auto_in_d_bits_param = bypass ? 2'h0 : auto_out_1_d_bits_param;
  assign auto_in_d_bits_size = bypass ? bundleIn_0_d_bits_out_size : auto_out_1_d_bits_size;
  assign auto_in_d_bits_source = bypass ? auto_out_0_d_bits_source : auto_out_1_d_bits_source;
  assign auto_in_d_bits_sink = bypass ? 5'h0 : auto_out_1_d_bits_sink;
  assign auto_in_d_bits_denied = bypass ? auto_out_0_d_bits_denied : auto_out_1_d_bits_denied;
  assign auto_in_d_bits_data = bypass ? 32'h0 : auto_out_1_d_bits_data;
  assign auto_in_d_bits_corrupt = bypass ? auto_out_0_d_bits_corrupt : auto_out_1_d_bits_corrupt;
  assign auto_out_1_a_valid = _bundleOut_0_a_valid_T_1 & ~bypass;
  assign auto_out_1_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_1_a_bits_size = auto_in_a_bits_size;
  assign auto_out_1_a_bits_source = auto_in_a_bits_source;
  assign auto_out_1_a_bits_address = auto_in_a_bits_address;
  assign auto_out_1_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_1_a_bits_data = auto_in_a_bits_data;
  assign auto_out_1_d_ready = auto_in_d_ready & _bundleOut_1_a_valid_T_2;
  assign auto_out_0_a_valid = _bundleIn_0_a_ready_T & auto_in_a_valid & bypass;
  assign auto_out_0_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_0_a_bits_size = {{1'd0}, auto_in_a_bits_size};
  assign auto_out_0_a_bits_source = auto_in_a_bits_source;
  assign auto_out_0_a_bits_address = {{96'd0}, auto_in_a_bits_address};
  assign auto_out_0_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_0_d_ready = auto_in_d_ready & bypass;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = ~stall & _bundleIn_0_a_ready_T_1;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = bypass ? auto_out_0_d_valid : auto_out_1_d_valid;
  assign monitor_io_in_d_bits_opcode = bypass ? auto_out_0_d_bits_opcode : auto_out_1_d_bits_opcode;
  assign monitor_io_in_d_bits_param = bypass ? 2'h0 : auto_out_1_d_bits_param;
  assign monitor_io_in_d_bits_size = bypass ? bundleIn_0_d_bits_out_size : auto_out_1_d_bits_size;
  assign monitor_io_in_d_bits_source = bypass ? auto_out_0_d_bits_source : auto_out_1_d_bits_source;
  assign monitor_io_in_d_bits_sink = bypass ? 5'h0 : auto_out_1_d_bits_sink;
  assign monitor_io_in_d_bits_denied = bypass ? auto_out_0_d_bits_denied : auto_out_1_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = bypass ? auto_out_0_d_bits_corrupt : auto_out_1_d_bits_corrupt;
  always @(posedge clock) begin
    in_reset <= reset;
    if (in_reset | next_flight == 6'h0) begin
      bypass_reg <= io_bypass;
    end
    if (reset) begin
      flight <= 6'h0;
    end else begin
      flight <= next_flight;
    end
    if (reset) begin
      stall_counter <= 4'h0;
    end else if (_T) begin
      if (stall_first) begin
        if (beats1_opdata) begin
          stall_counter <= beats1_decode;
        end else begin
          stall_counter <= 4'h0;
        end
      end else begin
        stall_counter <= stall_counter1;
      end
    end
    if (reset) begin
      counter <= 4'h0;
    end else if (_T) begin
      if (a_first) begin
        if (beats1_opdata) begin
          counter <= beats1_decode;
        end else begin
          counter <= 4'h0;
        end
      end else begin
        counter <= counter1;
      end
    end
    if (reset) begin
      counter_3 <= 4'h0;
    end else if (_T_3) begin
      if (d_first) begin
        if (beats1_opdata_3) begin
          counter_3 <= beats1_decode_3;
        end else begin
          counter_3 <= 4'h0;
        end
      end else begin
        counter_3 <= counter1_3;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  in_reset = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  bypass_reg = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  flight = _RAND_2[5:0];
  _RAND_3 = {1{`RANDOM}};
  stall_counter = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  counter = _RAND_4[3:0];
  _RAND_5 = {1{`RANDOM}};
  counter_3 = _RAND_5[3:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_4(
  input          clock,
  input          reset,
  input          io_in_a_ready,
  input          io_in_a_valid,
  input  [2:0]   io_in_a_bits_opcode,
  input  [3:0]   io_in_a_bits_size,
  input  [3:0]   io_in_a_bits_source,
  input  [127:0] io_in_a_bits_address,
  input  [3:0]   io_in_a_bits_mask,
  input          io_in_d_ready,
  input          io_in_d_valid,
  input  [2:0]   io_in_d_bits_opcode,
  input  [3:0]   io_in_d_bits_size,
  input  [3:0]   io_in_d_bits_source,
  input          io_in_d_bits_denied,
  input          io_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [127:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [63:0] _RAND_11;
  reg [127:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [127:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [31:0] _RAND_19;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = ~io_in_a_bits_source[3];
  wire  source_ok = _source_ok_T_1 | io_in_a_bits_source[3];
  wire [26:0] _is_aligned_mask_T_1 = 27'hfff << io_in_a_bits_size;
  wire [11:0] is_aligned_mask = ~_is_aligned_mask_T_1[11:0];
  wire [127:0] _GEN_71 = {{116'd0}, is_aligned_mask};
  wire [127:0] _is_aligned_T = io_in_a_bits_address & _GEN_71;
  wire  is_aligned = _is_aligned_T == 128'h0;
  wire  mask_sizeOH_shiftAmount = io_in_a_bits_size[0];
  wire [1:0] _mask_sizeOH_T_1 = 2'h1 << mask_sizeOH_shiftAmount;
  wire [1:0] mask_sizeOH = _mask_sizeOH_T_1 | 2'h1;
  wire  _mask_T = io_in_a_bits_size >= 4'h2;
  wire  mask_size = mask_sizeOH[1];
  wire  mask_bit = io_in_a_bits_address[1];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[0];
  wire  mask_bit_1 = io_in_a_bits_address[0];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_lo_lo = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_lo_hi = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_hi_lo = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_hi_hi = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire [3:0] mask = {mask_hi_hi,mask_hi_lo,mask_lo_hi,mask_lo_lo};
  wire [128:0] _T_12 = {1'b0,$signed(io_in_a_bits_address)};
  wire  _T_34 = io_in_a_bits_opcode == 3'h6;
  wire  _T_36 = io_in_a_bits_size <= 4'hc;
  wire  _T_51 = _T_36 & source_ok;
  wire [128:0] _T_60 = $signed(_T_12) & 129'sh100000000000000000000000000000000;
  wire  _T_61 = $signed(_T_60) == 129'sh0;
  wire  _T_62 = _T_36 & _T_61;
  wire  _T_64 = _T_51 & _T_62;
  wire [3:0] _T_97 = ~io_in_a_bits_mask;
  wire  _T_98 = _T_97 == 4'h0;
  wire  _T_106 = io_in_a_bits_opcode == 3'h7;
  wire  _T_182 = io_in_a_bits_opcode == 3'h4;
  wire  _T_228 = io_in_a_bits_mask == mask;
  wire  _T_236 = io_in_a_bits_opcode == 3'h0;
  wire  _T_284 = io_in_a_bits_opcode == 3'h1;
  wire [3:0] _T_328 = ~mask;
  wire [3:0] _T_329 = io_in_a_bits_mask & _T_328;
  wire  _T_330 = _T_329 == 4'h0;
  wire  _T_334 = io_in_a_bits_opcode == 3'h2;
  wire  _T_354 = io_in_a_bits_size <= 4'h4;
  wire  _T_362 = _T_354 & _T_61;
  wire  _T_364 = _T_51 & _T_362;
  wire  _T_382 = io_in_a_bits_opcode == 3'h3;
  wire  _T_430 = io_in_a_bits_opcode == 3'h5;
  wire  _T_482 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_13 = ~io_in_d_bits_source[3];
  wire  source_ok_1 = _source_ok_T_13 | io_in_d_bits_source[3];
  wire  _T_486 = io_in_d_bits_opcode == 3'h6;
  wire  _T_490 = io_in_d_bits_size >= 4'h2;
  wire  _T_498 = ~io_in_d_bits_corrupt;
  wire  _T_502 = ~io_in_d_bits_denied;
  wire  _T_506 = io_in_d_bits_opcode == 3'h4;
  wire  _T_534 = io_in_d_bits_opcode == 3'h5;
  wire  _T_554 = _T_502 | io_in_d_bits_corrupt;
  wire  _T_563 = io_in_d_bits_opcode == 3'h0;
  wire  _T_580 = io_in_d_bits_opcode == 3'h1;
  wire  _T_598 = io_in_d_bits_opcode == 3'h2;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [9:0] a_first_beats1_decode = is_aligned_mask[11:2];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [9:0] a_first_counter;
  wire [9:0] a_first_counter1 = a_first_counter - 10'h1;
  wire  a_first = a_first_counter == 10'h0;
  reg [2:0] opcode;
  reg [3:0] size;
  reg [3:0] source;
  reg [127:0] address;
  wire  _T_628 = io_in_a_valid & ~a_first;
  wire  _T_629 = io_in_a_bits_opcode == opcode;
  wire  _T_637 = io_in_a_bits_size == size;
  wire  _T_641 = io_in_a_bits_source == source;
  wire  _T_645 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [26:0] _d_first_beats1_decode_T_1 = 27'hfff << io_in_d_bits_size;
  wire [11:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[11:0];
  wire [9:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[11:2];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [9:0] d_first_counter;
  wire [9:0] d_first_counter1 = d_first_counter - 10'h1;
  wire  d_first = d_first_counter == 10'h0;
  reg [2:0] opcode_1;
  reg [3:0] size_1;
  reg [3:0] source_1;
  reg  denied;
  wire  _T_652 = io_in_d_valid & ~d_first;
  wire  _T_653 = io_in_d_bits_opcode == opcode_1;
  wire  _T_661 = io_in_d_bits_size == size_1;
  wire  _T_665 = io_in_d_bits_source == source_1;
  wire  _T_673 = io_in_d_bits_denied == denied;
  reg [15:0] inflight;
  reg [63:0] inflight_opcodes;
  reg [127:0] inflight_sizes;
  reg [9:0] a_first_counter_1;
  wire [9:0] a_first_counter1_1 = a_first_counter_1 - 10'h1;
  wire  a_first_1 = a_first_counter_1 == 10'h0;
  reg [9:0] d_first_counter_1;
  wire [9:0] d_first_counter1_1 = d_first_counter_1 - 10'h1;
  wire  d_first_1 = d_first_counter_1 == 10'h0;
  wire [5:0] _GEN_72 = {io_in_d_bits_source, 2'h0};
  wire [6:0] _a_opcode_lookup_T = {{1'd0}, _GEN_72};
  wire [63:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [63:0] _GEN_73 = {{48'd0}, _a_opcode_lookup_T_5};
  wire [63:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_73;
  wire [63:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[63:1]};
  wire [6:0] _a_size_lookup_T = {io_in_d_bits_source, 3'h0};
  wire [127:0] _a_size_lookup_T_1 = inflight_sizes >> _a_size_lookup_T;
  wire [15:0] _a_size_lookup_T_5 = 16'h100 - 16'h1;
  wire [127:0] _GEN_75 = {{112'd0}, _a_size_lookup_T_5};
  wire [127:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_75;
  wire [127:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[127:1]};
  wire  _T_679 = io_in_a_valid & a_first_1;
  wire [15:0] _a_set_wo_ready_T = 16'h1 << io_in_a_bits_source;
  wire  _T_682 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [4:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [4:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 5'h1;
  wire [5:0] _GEN_77 = {io_in_a_bits_source, 2'h0};
  wire [6:0] _a_opcodes_set_T = {{1'd0}, _GEN_77};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_78 = {{127'd0}, a_opcodes_set_interm};
  wire [130:0] _a_opcodes_set_T_1 = _GEN_78 << _a_opcodes_set_T;
  wire [6:0] _a_sizes_set_T = {io_in_a_bits_source, 3'h0};
  wire [4:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 5'h0;
  wire [131:0] _GEN_79 = {{127'd0}, a_sizes_set_interm};
  wire [131:0] _a_sizes_set_T_1 = _GEN_79 << _a_sizes_set_T;
  wire [15:0] _T_684 = inflight >> io_in_a_bits_source;
  wire  _T_686 = ~_T_684[0];
  wire [15:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 16'h0;
  wire [130:0] _GEN_19 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 131'h0;
  wire [131:0] _GEN_20 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 132'h0;
  wire  _T_690 = io_in_d_valid & d_first_1;
  wire  _T_692 = ~_T_486;
  wire  _T_693 = io_in_d_valid & d_first_1 & ~_T_486;
  wire [15:0] _d_clr_wo_ready_T = 16'h1 << io_in_d_bits_source;
  wire [142:0] _GEN_81 = {{127'd0}, _a_opcode_lookup_T_5};
  wire [142:0] _d_opcodes_clr_T_5 = _GEN_81 << _a_opcode_lookup_T;
  wire [142:0] _GEN_82 = {{127'd0}, _a_size_lookup_T_5};
  wire [142:0] _d_sizes_clr_T_5 = _GEN_82 << _a_size_lookup_T;
  wire [15:0] d_clr = _d_first_T & d_first_1 & _T_692 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_23 = _d_first_T & d_first_1 & _T_692 ? _d_opcodes_clr_T_5 : 143'h0;
  wire [142:0] _GEN_24 = _d_first_T & d_first_1 & _T_692 ? _d_sizes_clr_T_5 : 143'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_679 & io_in_a_bits_source == io_in_d_bits_source;
  wire [15:0] _T_703 = inflight >> io_in_d_bits_source;
  wire  _T_705 = _T_703[0] | same_cycle_resp;
  wire [2:0] _GEN_27 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_28 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_27;
  wire [2:0] _GEN_29 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_28;
  wire [2:0] _GEN_30 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_29;
  wire [2:0] _GEN_31 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_30;
  wire [2:0] _GEN_32 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_31;
  wire [2:0] _GEN_39 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_30;
  wire [2:0] _GEN_40 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_39;
  wire  _T_710 = io_in_d_bits_opcode == _GEN_40;
  wire  _T_711 = io_in_d_bits_opcode == _GEN_32 | _T_710;
  wire  _T_715 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_43 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_44 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_43;
  wire [2:0] _GEN_45 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_44;
  wire [2:0] _GEN_46 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_45;
  wire [2:0] _GEN_47 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_46;
  wire [2:0] _GEN_48 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_47;
  wire [2:0] _GEN_55 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_46;
  wire [2:0] _GEN_56 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_55;
  wire  _T_722 = io_in_d_bits_opcode == _GEN_56;
  wire  _T_723 = io_in_d_bits_opcode == _GEN_48 | _T_722;
  wire [7:0] a_size_lookup = _a_size_lookup_T_7[7:0];
  wire [7:0] _GEN_83 = {{4'd0}, io_in_d_bits_size};
  wire  _T_727 = _GEN_83 == a_size_lookup;
  wire  _T_737 = _T_690 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_692;
  wire  _T_739 = ~io_in_d_ready | io_in_a_ready;
  wire [15:0] _inflight_T = inflight | a_set;
  wire [15:0] _inflight_T_1 = ~d_clr;
  wire [15:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [63:0] a_opcodes_set = _GEN_19[63:0];
  wire [63:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [63:0] d_opcodes_clr = _GEN_23[63:0];
  wire [63:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [63:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [127:0] a_sizes_set = _GEN_20[127:0];
  wire [127:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [127:0] d_sizes_clr = _GEN_24[127:0];
  wire [127:0] _inflight_sizes_T_1 = ~d_sizes_clr;
  wire [127:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_sizes_T_1;
  reg [31:0] watchdog;
  wire  _T_748 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [15:0] inflight_1;
  reg [127:0] inflight_sizes_1;
  reg [9:0] d_first_counter_2;
  wire [9:0] d_first_counter1_2 = d_first_counter_2 - 10'h1;
  wire  d_first_2 = d_first_counter_2 == 10'h0;
  wire [127:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_size_lookup_T;
  wire [127:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_75;
  wire [127:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[127:1]};
  wire  _T_774 = io_in_d_valid & d_first_2 & _T_486;
  wire [15:0] d_clr_1 = _d_first_T & d_first_2 & _T_486 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_69 = _d_first_T & d_first_2 & _T_486 ? _d_sizes_clr_T_5 : 143'h0;
  wire [15:0] _T_782 = inflight_1 >> io_in_d_bits_source;
  wire [7:0] c_size_lookup = _c_size_lookup_T_7[7:0];
  wire  _T_792 = _GEN_83 == c_size_lookup;
  wire [15:0] _inflight_T_4 = ~d_clr_1;
  wire [15:0] _inflight_T_5 = inflight_1 & _inflight_T_4;
  wire [127:0] d_sizes_clr_1 = _GEN_69[127:0];
  wire [127:0] _inflight_sizes_T_4 = ~d_sizes_clr_1;
  wire [127:0] _inflight_sizes_T_5 = inflight_sizes_1 & _inflight_sizes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_812 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 10'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 10'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 10'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 10'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      inflight <= 16'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 64'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 128'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 10'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 10'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 10'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 10'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 16'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 128'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      d_first_counter_2 <= 10'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 10'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_98 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_98 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_T_98 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_106 & ~(_T_98 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(_T_51 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(_T_51 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(_T_62 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(_T_62 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(_T_228 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_182 & ~(_T_228 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(_T_228 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_236 & ~(_T_228 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(_T_330 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_284 & ~(_T_330 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(_T_364 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(_T_364 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(_T_228 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_334 & ~(_T_228 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(_T_364 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(_T_364 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(_T_228 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_382 & ~(_T_228 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(_T_64 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(_T_64 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(_T_228 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_430 & ~(_T_228 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_482 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_482 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_490 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_490 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_498 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_498 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_502 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_486 & ~(_T_502 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(_T_490 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(_T_490 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(_T_498 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_506 & ~(_T_498 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(_T_490 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(_T_490 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(_T_554 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_534 & ~(_T_554 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_563 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_563 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_563 & ~(_T_498 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_563 & ~(_T_498 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_580 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_580 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_580 & ~(_T_554 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_580 & ~(_T_554 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_598 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_598 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_598 & ~(_T_498 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_598 & ~(_T_498 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_628 & ~(_T_629 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_628 & ~(_T_629 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_628 & ~(_T_637 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_628 & ~(_T_637 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_628 & ~(_T_641 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_628 & ~(_T_641 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_628 & ~(_T_645 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_628 & ~(_T_645 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_652 & ~(_T_653 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_652 & ~(_T_653 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_652 & ~(_T_661 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_652 & ~(_T_661 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_652 & ~(_T_665 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_652 & ~(_T_665 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_652 & ~(_T_673 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_652 & ~(_T_673 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_682 & ~(_T_686 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_682 & ~(_T_686 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_693 & ~(_T_705 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_693 & ~(_T_705 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_693 & same_cycle_resp & ~(_T_711 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_693 & same_cycle_resp & ~(_T_711 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_693 & same_cycle_resp & ~(_T_715 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_693 & same_cycle_resp & ~(_T_715 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_693 & ~same_cycle_resp & ~(_T_723 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_693 & ~same_cycle_resp & ~(_T_723 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_693 & ~same_cycle_resp & ~(_T_727 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_693 & ~same_cycle_resp & ~(_T_727 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_737 & ~(_T_739 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_737 & ~(_T_739 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_748 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_748 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_774 & ~(_T_782[0] | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_774 & ~(_T_782[0] | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_774 & ~(_T_792 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at BusBypass.scala:33:14)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_774 & ~(_T_792 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_812 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at BusBypass.scala:33:14)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_812 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[9:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  size = _RAND_2[3:0];
  _RAND_3 = {1{`RANDOM}};
  source = _RAND_3[3:0];
  _RAND_4 = {4{`RANDOM}};
  address = _RAND_4[127:0];
  _RAND_5 = {1{`RANDOM}};
  d_first_counter = _RAND_5[9:0];
  _RAND_6 = {1{`RANDOM}};
  opcode_1 = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  size_1 = _RAND_7[3:0];
  _RAND_8 = {1{`RANDOM}};
  source_1 = _RAND_8[3:0];
  _RAND_9 = {1{`RANDOM}};
  denied = _RAND_9[0:0];
  _RAND_10 = {1{`RANDOM}};
  inflight = _RAND_10[15:0];
  _RAND_11 = {2{`RANDOM}};
  inflight_opcodes = _RAND_11[63:0];
  _RAND_12 = {4{`RANDOM}};
  inflight_sizes = _RAND_12[127:0];
  _RAND_13 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_13[9:0];
  _RAND_14 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_14[9:0];
  _RAND_15 = {1{`RANDOM}};
  watchdog = _RAND_15[31:0];
  _RAND_16 = {1{`RANDOM}};
  inflight_1 = _RAND_16[15:0];
  _RAND_17 = {4{`RANDOM}};
  inflight_sizes_1 = _RAND_17[127:0];
  _RAND_18 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_18[9:0];
  _RAND_19 = {1{`RANDOM}};
  watchdog_1 = _RAND_19[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLError_1(
  input          clock,
  input          reset,
  output         auto_in_a_ready,
  input          auto_in_a_valid,
  input  [2:0]   auto_in_a_bits_opcode,
  input  [3:0]   auto_in_a_bits_size,
  input  [3:0]   auto_in_a_bits_source,
  input  [127:0] auto_in_a_bits_address,
  input  [3:0]   auto_in_a_bits_mask,
  input          auto_in_d_ready,
  output         auto_in_d_valid,
  output [2:0]   auto_in_d_bits_opcode,
  output [3:0]   auto_in_d_bits_size,
  output [3:0]   auto_in_d_bits_source,
  output         auto_in_d_bits_denied,
  output         auto_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [3:0] monitor_io_in_a_bits_size;
  wire [3:0] monitor_io_in_a_bits_source;
  wire [127:0] monitor_io_in_a_bits_address;
  wire [3:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [3:0] monitor_io_in_d_bits_size;
  wire [3:0] monitor_io_in_d_bits_source;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  reg  idle;
  reg [9:0] beatsLeft;
  wire  idle_1 = beatsLeft == 10'h0;
  reg [9:0] a_last_counter;
  wire  a_last_beats1_opdata = ~auto_in_a_bits_opcode[2];
  wire [26:0] _a_last_beats1_decode_T_1 = 27'hfff << auto_in_a_bits_size;
  wire [11:0] _a_last_beats1_decode_T_3 = ~_a_last_beats1_decode_T_1[11:0];
  wire [9:0] a_last_beats1_decode = _a_last_beats1_decode_T_3[11:2];
  wire [9:0] a_last_beats1 = a_last_beats1_opdata ? a_last_beats1_decode : 10'h0;
  wire  a_last = a_last_counter == 10'h1 | a_last_beats1 == 10'h0;
  wire  da_valid = auto_in_a_valid & a_last & idle;
  wire [1:0] _readys_T = {da_valid,1'h0};
  wire [2:0] _readys_T_1 = {_readys_T, 1'h0};
  wire [1:0] _readys_T_3 = _readys_T | _readys_T_1[1:0];
  wire [2:0] _readys_T_5 = {_readys_T_3, 1'h0};
  wire [1:0] _readys_T_7 = ~_readys_T_5[1:0];
  wire  readys_1 = _readys_T_7[1];
  reg  state_1;
  wire  allowed_1 = idle_1 ? readys_1 : state_1;
  wire  out_1_ready = auto_in_d_ready & allowed_1;
  reg [9:0] counter;
  wire [2:0] _GEN_4 = 3'h2 == auto_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_5 = 3'h3 == auto_in_a_bits_opcode ? 3'h1 : _GEN_4;
  wire [2:0] _GEN_6 = 3'h4 == auto_in_a_bits_opcode ? 3'h1 : _GEN_5;
  wire [2:0] _GEN_7 = 3'h5 == auto_in_a_bits_opcode ? 3'h2 : _GEN_6;
  wire [2:0] _GEN_8 = 3'h6 == auto_in_a_bits_opcode ? 3'h4 : _GEN_7;
  wire [2:0] da_bits_opcode = 3'h7 == auto_in_a_bits_opcode ? 3'h4 : _GEN_8;
  wire  beats1_opdata = da_bits_opcode[0];
  wire [9:0] beats1 = beats1_opdata ? a_last_beats1_decode : 10'h0;
  wire  da_last = counter == 10'h1 | beats1 == 10'h0;
  wire  in_a_ready = out_1_ready & da_last & idle | ~a_last;
  wire  _a_last_T = in_a_ready & auto_in_a_valid;
  wire [9:0] a_last_counter1 = a_last_counter - 10'h1;
  wire  a_last_first = a_last_counter == 10'h0;
  wire  _T = out_1_ready & da_valid;
  wire [9:0] counter1 = counter - 10'h1;
  wire  da_first = counter == 10'h0;
  wire  _GEN_12 = _T & da_bits_opcode == 3'h4 ? 1'h0 : idle;
  wire  latch = idle_1 & auto_in_d_ready;
  wire  earlyWinner_1 = readys_1 & da_valid;
  wire  _T_22 = ~da_valid;
  wire  muxStateEarly_1 = idle_1 ? earlyWinner_1 : state_1;
  wire  _sink_ACancel_earlyValid_T_2 = state_1 & da_valid;
  wire  sink_ACancel_earlyValid = idle_1 ? da_valid : _sink_ACancel_earlyValid_T_2;
  wire  _beatsLeft_T_2 = auto_in_d_ready & sink_ACancel_earlyValid;
  wire [9:0] _GEN_17 = {{9'd0}, _beatsLeft_T_2};
  wire [9:0] _beatsLeft_T_4 = beatsLeft - _GEN_17;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_4 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt)
  );
  assign auto_in_a_ready = out_1_ready & da_last & idle | ~a_last;
  assign auto_in_d_valid = idle_1 ? da_valid : _sink_ACancel_earlyValid_T_2;
  assign auto_in_d_bits_opcode = muxStateEarly_1 ? da_bits_opcode : 3'h0;
  assign auto_in_d_bits_size = muxStateEarly_1 ? auto_in_a_bits_size : 4'h0;
  assign auto_in_d_bits_source = muxStateEarly_1 ? auto_in_a_bits_source : 4'h0;
  assign auto_in_d_bits_denied = idle_1 ? earlyWinner_1 : state_1;
  assign auto_in_d_bits_corrupt = muxStateEarly_1 & beats1_opdata;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = out_1_ready & da_last & idle | ~a_last;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = idle_1 ? da_valid : _sink_ACancel_earlyValid_T_2;
  assign monitor_io_in_d_bits_opcode = muxStateEarly_1 ? da_bits_opcode : 3'h0;
  assign monitor_io_in_d_bits_size = muxStateEarly_1 ? auto_in_a_bits_size : 4'h0;
  assign monitor_io_in_d_bits_source = muxStateEarly_1 ? auto_in_a_bits_source : 4'h0;
  assign monitor_io_in_d_bits_denied = idle_1 ? earlyWinner_1 : state_1;
  assign monitor_io_in_d_bits_corrupt = muxStateEarly_1 & beats1_opdata;
  always @(posedge clock) begin
    idle <= reset | _GEN_12;
    if (reset) begin
      beatsLeft <= 10'h0;
    end else if (latch) begin
      if (earlyWinner_1) begin
        if (beats1_opdata) begin
          beatsLeft <= a_last_beats1_decode;
        end else begin
          beatsLeft <= 10'h0;
        end
      end else begin
        beatsLeft <= 10'h0;
      end
    end else begin
      beatsLeft <= _beatsLeft_T_4;
    end
    if (reset) begin
      a_last_counter <= 10'h0;
    end else if (_a_last_T) begin
      if (a_last_first) begin
        if (a_last_beats1_opdata) begin
          a_last_counter <= a_last_beats1_decode;
        end else begin
          a_last_counter <= 10'h0;
        end
      end else begin
        a_last_counter <= a_last_counter1;
      end
    end
    if (reset) begin
      state_1 <= 1'h0;
    end else if (idle_1) begin
      state_1 <= earlyWinner_1;
    end
    if (reset) begin
      counter <= 10'h0;
    end else if (_T) begin
      if (da_first) begin
        if (beats1_opdata) begin
          counter <= a_last_beats1_decode;
        end else begin
          counter <= 10'h0;
        end
      end else begin
        counter <= counter1;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(idle | da_first | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Error.scala:49 assert (idle || da_first) // we only send Grant, never GrantData => simplified flow control below\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(idle | da_first | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~da_valid | earlyWinner_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~da_valid | earlyWinner_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_22 | da_valid | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:108 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_22 | da_valid | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  idle = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  beatsLeft = _RAND_1[9:0];
  _RAND_2 = {1{`RANDOM}};
  a_last_counter = _RAND_2[9:0];
  _RAND_3 = {1{`RANDOM}};
  state_1 = _RAND_3[0:0];
  _RAND_4 = {1{`RANDOM}};
  counter = _RAND_4[9:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLBusBypass(
  input         clock,
  input         reset,
  input         auto_node_out_out_a_ready,
  output        auto_node_out_out_a_valid,
  output [2:0]  auto_node_out_out_a_bits_opcode,
  output [2:0]  auto_node_out_out_a_bits_size,
  output [3:0]  auto_node_out_out_a_bits_source,
  output [31:0] auto_node_out_out_a_bits_address,
  output [3:0]  auto_node_out_out_a_bits_mask,
  output [31:0] auto_node_out_out_a_bits_data,
  output        auto_node_out_out_d_ready,
  input         auto_node_out_out_d_valid,
  input  [2:0]  auto_node_out_out_d_bits_opcode,
  input  [1:0]  auto_node_out_out_d_bits_param,
  input  [2:0]  auto_node_out_out_d_bits_size,
  input  [3:0]  auto_node_out_out_d_bits_source,
  input  [4:0]  auto_node_out_out_d_bits_sink,
  input         auto_node_out_out_d_bits_denied,
  input  [31:0] auto_node_out_out_d_bits_data,
  input         auto_node_out_out_d_bits_corrupt,
  output        auto_node_in_in_a_ready,
  input         auto_node_in_in_a_valid,
  input  [2:0]  auto_node_in_in_a_bits_opcode,
  input  [2:0]  auto_node_in_in_a_bits_size,
  input  [3:0]  auto_node_in_in_a_bits_source,
  input  [31:0] auto_node_in_in_a_bits_address,
  input  [3:0]  auto_node_in_in_a_bits_mask,
  input  [31:0] auto_node_in_in_a_bits_data,
  input         auto_node_in_in_d_ready,
  output        auto_node_in_in_d_valid,
  output [2:0]  auto_node_in_in_d_bits_opcode,
  output [1:0]  auto_node_in_in_d_bits_param,
  output [2:0]  auto_node_in_in_d_bits_size,
  output [3:0]  auto_node_in_in_d_bits_source,
  output [4:0]  auto_node_in_in_d_bits_sink,
  output        auto_node_in_in_d_bits_denied,
  output [31:0] auto_node_in_in_d_bits_data,
  output        auto_node_in_in_d_bits_corrupt,
  input         io_bypass
);
  wire  bar_clock;
  wire  bar_reset;
  wire  bar_auto_in_a_ready;
  wire  bar_auto_in_a_valid;
  wire [2:0] bar_auto_in_a_bits_opcode;
  wire [2:0] bar_auto_in_a_bits_size;
  wire [3:0] bar_auto_in_a_bits_source;
  wire [31:0] bar_auto_in_a_bits_address;
  wire [3:0] bar_auto_in_a_bits_mask;
  wire [31:0] bar_auto_in_a_bits_data;
  wire  bar_auto_in_d_ready;
  wire  bar_auto_in_d_valid;
  wire [2:0] bar_auto_in_d_bits_opcode;
  wire [1:0] bar_auto_in_d_bits_param;
  wire [2:0] bar_auto_in_d_bits_size;
  wire [3:0] bar_auto_in_d_bits_source;
  wire [4:0] bar_auto_in_d_bits_sink;
  wire  bar_auto_in_d_bits_denied;
  wire [31:0] bar_auto_in_d_bits_data;
  wire  bar_auto_in_d_bits_corrupt;
  wire  bar_auto_out_1_a_ready;
  wire  bar_auto_out_1_a_valid;
  wire [2:0] bar_auto_out_1_a_bits_opcode;
  wire [2:0] bar_auto_out_1_a_bits_size;
  wire [3:0] bar_auto_out_1_a_bits_source;
  wire [31:0] bar_auto_out_1_a_bits_address;
  wire [3:0] bar_auto_out_1_a_bits_mask;
  wire [31:0] bar_auto_out_1_a_bits_data;
  wire  bar_auto_out_1_d_ready;
  wire  bar_auto_out_1_d_valid;
  wire [2:0] bar_auto_out_1_d_bits_opcode;
  wire [1:0] bar_auto_out_1_d_bits_param;
  wire [2:0] bar_auto_out_1_d_bits_size;
  wire [3:0] bar_auto_out_1_d_bits_source;
  wire [4:0] bar_auto_out_1_d_bits_sink;
  wire  bar_auto_out_1_d_bits_denied;
  wire [31:0] bar_auto_out_1_d_bits_data;
  wire  bar_auto_out_1_d_bits_corrupt;
  wire  bar_auto_out_0_a_ready;
  wire  bar_auto_out_0_a_valid;
  wire [2:0] bar_auto_out_0_a_bits_opcode;
  wire [3:0] bar_auto_out_0_a_bits_size;
  wire [3:0] bar_auto_out_0_a_bits_source;
  wire [127:0] bar_auto_out_0_a_bits_address;
  wire [3:0] bar_auto_out_0_a_bits_mask;
  wire  bar_auto_out_0_d_ready;
  wire  bar_auto_out_0_d_valid;
  wire [2:0] bar_auto_out_0_d_bits_opcode;
  wire [3:0] bar_auto_out_0_d_bits_size;
  wire [3:0] bar_auto_out_0_d_bits_source;
  wire  bar_auto_out_0_d_bits_denied;
  wire  bar_auto_out_0_d_bits_corrupt;
  wire  bar_io_bypass;
  wire  error_clock;
  wire  error_reset;
  wire  error_auto_in_a_ready;
  wire  error_auto_in_a_valid;
  wire [2:0] error_auto_in_a_bits_opcode;
  wire [3:0] error_auto_in_a_bits_size;
  wire [3:0] error_auto_in_a_bits_source;
  wire [127:0] error_auto_in_a_bits_address;
  wire [3:0] error_auto_in_a_bits_mask;
  wire  error_auto_in_d_ready;
  wire  error_auto_in_d_valid;
  wire [2:0] error_auto_in_d_bits_opcode;
  wire [3:0] error_auto_in_d_bits_size;
  wire [3:0] error_auto_in_d_bits_source;
  wire  error_auto_in_d_bits_denied;
  wire  error_auto_in_d_bits_corrupt;
  CHIPLINK_PREFIX_TLBusBypassBar bar (
    .clock(bar_clock),
    .reset(bar_reset),
    .auto_in_a_ready(bar_auto_in_a_ready),
    .auto_in_a_valid(bar_auto_in_a_valid),
    .auto_in_a_bits_opcode(bar_auto_in_a_bits_opcode),
    .auto_in_a_bits_size(bar_auto_in_a_bits_size),
    .auto_in_a_bits_source(bar_auto_in_a_bits_source),
    .auto_in_a_bits_address(bar_auto_in_a_bits_address),
    .auto_in_a_bits_mask(bar_auto_in_a_bits_mask),
    .auto_in_a_bits_data(bar_auto_in_a_bits_data),
    .auto_in_d_ready(bar_auto_in_d_ready),
    .auto_in_d_valid(bar_auto_in_d_valid),
    .auto_in_d_bits_opcode(bar_auto_in_d_bits_opcode),
    .auto_in_d_bits_param(bar_auto_in_d_bits_param),
    .auto_in_d_bits_size(bar_auto_in_d_bits_size),
    .auto_in_d_bits_source(bar_auto_in_d_bits_source),
    .auto_in_d_bits_sink(bar_auto_in_d_bits_sink),
    .auto_in_d_bits_denied(bar_auto_in_d_bits_denied),
    .auto_in_d_bits_data(bar_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt(bar_auto_in_d_bits_corrupt),
    .auto_out_1_a_ready(bar_auto_out_1_a_ready),
    .auto_out_1_a_valid(bar_auto_out_1_a_valid),
    .auto_out_1_a_bits_opcode(bar_auto_out_1_a_bits_opcode),
    .auto_out_1_a_bits_size(bar_auto_out_1_a_bits_size),
    .auto_out_1_a_bits_source(bar_auto_out_1_a_bits_source),
    .auto_out_1_a_bits_address(bar_auto_out_1_a_bits_address),
    .auto_out_1_a_bits_mask(bar_auto_out_1_a_bits_mask),
    .auto_out_1_a_bits_data(bar_auto_out_1_a_bits_data),
    .auto_out_1_d_ready(bar_auto_out_1_d_ready),
    .auto_out_1_d_valid(bar_auto_out_1_d_valid),
    .auto_out_1_d_bits_opcode(bar_auto_out_1_d_bits_opcode),
    .auto_out_1_d_bits_param(bar_auto_out_1_d_bits_param),
    .auto_out_1_d_bits_size(bar_auto_out_1_d_bits_size),
    .auto_out_1_d_bits_source(bar_auto_out_1_d_bits_source),
    .auto_out_1_d_bits_sink(bar_auto_out_1_d_bits_sink),
    .auto_out_1_d_bits_denied(bar_auto_out_1_d_bits_denied),
    .auto_out_1_d_bits_data(bar_auto_out_1_d_bits_data),
    .auto_out_1_d_bits_corrupt(bar_auto_out_1_d_bits_corrupt),
    .auto_out_0_a_ready(bar_auto_out_0_a_ready),
    .auto_out_0_a_valid(bar_auto_out_0_a_valid),
    .auto_out_0_a_bits_opcode(bar_auto_out_0_a_bits_opcode),
    .auto_out_0_a_bits_size(bar_auto_out_0_a_bits_size),
    .auto_out_0_a_bits_source(bar_auto_out_0_a_bits_source),
    .auto_out_0_a_bits_address(bar_auto_out_0_a_bits_address),
    .auto_out_0_a_bits_mask(bar_auto_out_0_a_bits_mask),
    .auto_out_0_d_ready(bar_auto_out_0_d_ready),
    .auto_out_0_d_valid(bar_auto_out_0_d_valid),
    .auto_out_0_d_bits_opcode(bar_auto_out_0_d_bits_opcode),
    .auto_out_0_d_bits_size(bar_auto_out_0_d_bits_size),
    .auto_out_0_d_bits_source(bar_auto_out_0_d_bits_source),
    .auto_out_0_d_bits_denied(bar_auto_out_0_d_bits_denied),
    .auto_out_0_d_bits_corrupt(bar_auto_out_0_d_bits_corrupt),
    .io_bypass(bar_io_bypass)
  );
  CHIPLINK_PREFIX_TLError_1 error (
    .clock(error_clock),
    .reset(error_reset),
    .auto_in_a_ready(error_auto_in_a_ready),
    .auto_in_a_valid(error_auto_in_a_valid),
    .auto_in_a_bits_opcode(error_auto_in_a_bits_opcode),
    .auto_in_a_bits_size(error_auto_in_a_bits_size),
    .auto_in_a_bits_source(error_auto_in_a_bits_source),
    .auto_in_a_bits_address(error_auto_in_a_bits_address),
    .auto_in_a_bits_mask(error_auto_in_a_bits_mask),
    .auto_in_d_ready(error_auto_in_d_ready),
    .auto_in_d_valid(error_auto_in_d_valid),
    .auto_in_d_bits_opcode(error_auto_in_d_bits_opcode),
    .auto_in_d_bits_size(error_auto_in_d_bits_size),
    .auto_in_d_bits_source(error_auto_in_d_bits_source),
    .auto_in_d_bits_denied(error_auto_in_d_bits_denied),
    .auto_in_d_bits_corrupt(error_auto_in_d_bits_corrupt)
  );
  assign auto_node_out_out_a_valid = bar_auto_out_1_a_valid;
  assign auto_node_out_out_a_bits_opcode = bar_auto_out_1_a_bits_opcode;
  assign auto_node_out_out_a_bits_size = bar_auto_out_1_a_bits_size;
  assign auto_node_out_out_a_bits_source = bar_auto_out_1_a_bits_source;
  assign auto_node_out_out_a_bits_address = bar_auto_out_1_a_bits_address;
  assign auto_node_out_out_a_bits_mask = bar_auto_out_1_a_bits_mask;
  assign auto_node_out_out_a_bits_data = bar_auto_out_1_a_bits_data;
  assign auto_node_out_out_d_ready = bar_auto_out_1_d_ready;
  assign auto_node_in_in_a_ready = bar_auto_in_a_ready;
  assign auto_node_in_in_d_valid = bar_auto_in_d_valid;
  assign auto_node_in_in_d_bits_opcode = bar_auto_in_d_bits_opcode;
  assign auto_node_in_in_d_bits_param = bar_auto_in_d_bits_param;
  assign auto_node_in_in_d_bits_size = bar_auto_in_d_bits_size;
  assign auto_node_in_in_d_bits_source = bar_auto_in_d_bits_source;
  assign auto_node_in_in_d_bits_sink = bar_auto_in_d_bits_sink;
  assign auto_node_in_in_d_bits_denied = bar_auto_in_d_bits_denied;
  assign auto_node_in_in_d_bits_data = bar_auto_in_d_bits_data;
  assign auto_node_in_in_d_bits_corrupt = bar_auto_in_d_bits_corrupt;
  assign bar_clock = clock;
  assign bar_reset = reset;
  assign bar_auto_in_a_valid = auto_node_in_in_a_valid;
  assign bar_auto_in_a_bits_opcode = auto_node_in_in_a_bits_opcode;
  assign bar_auto_in_a_bits_size = auto_node_in_in_a_bits_size;
  assign bar_auto_in_a_bits_source = auto_node_in_in_a_bits_source;
  assign bar_auto_in_a_bits_address = auto_node_in_in_a_bits_address;
  assign bar_auto_in_a_bits_mask = auto_node_in_in_a_bits_mask;
  assign bar_auto_in_a_bits_data = auto_node_in_in_a_bits_data;
  assign bar_auto_in_d_ready = auto_node_in_in_d_ready;
  assign bar_auto_out_1_a_ready = auto_node_out_out_a_ready;
  assign bar_auto_out_1_d_valid = auto_node_out_out_d_valid;
  assign bar_auto_out_1_d_bits_opcode = auto_node_out_out_d_bits_opcode;
  assign bar_auto_out_1_d_bits_param = auto_node_out_out_d_bits_param;
  assign bar_auto_out_1_d_bits_size = auto_node_out_out_d_bits_size;
  assign bar_auto_out_1_d_bits_source = auto_node_out_out_d_bits_source;
  assign bar_auto_out_1_d_bits_sink = auto_node_out_out_d_bits_sink;
  assign bar_auto_out_1_d_bits_denied = auto_node_out_out_d_bits_denied;
  assign bar_auto_out_1_d_bits_data = auto_node_out_out_d_bits_data;
  assign bar_auto_out_1_d_bits_corrupt = auto_node_out_out_d_bits_corrupt;
  assign bar_auto_out_0_a_ready = error_auto_in_a_ready;
  assign bar_auto_out_0_d_valid = error_auto_in_d_valid;
  assign bar_auto_out_0_d_bits_opcode = error_auto_in_d_bits_opcode;
  assign bar_auto_out_0_d_bits_size = error_auto_in_d_bits_size;
  assign bar_auto_out_0_d_bits_source = error_auto_in_d_bits_source;
  assign bar_auto_out_0_d_bits_denied = error_auto_in_d_bits_denied;
  assign bar_auto_out_0_d_bits_corrupt = error_auto_in_d_bits_corrupt;
  assign bar_io_bypass = io_bypass;
  assign error_clock = clock;
  assign error_reset = reset;
  assign error_auto_in_a_valid = bar_auto_out_0_a_valid;
  assign error_auto_in_a_bits_opcode = bar_auto_out_0_a_bits_opcode;
  assign error_auto_in_a_bits_size = bar_auto_out_0_a_bits_size;
  assign error_auto_in_a_bits_source = bar_auto_out_0_a_bits_source;
  assign error_auto_in_a_bits_address = bar_auto_out_0_a_bits_address;
  assign error_auto_in_a_bits_mask = bar_auto_out_0_a_bits_mask;
  assign error_auto_in_d_ready = bar_auto_out_0_d_ready;
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_5(
  input        clock,
  input        reset,
  input        io_in_d_valid,
  input  [2:0] io_in_d_bits_opcode,
  input  [1:0] io_in_d_bits_param,
  input  [2:0] io_in_d_bits_size,
  input        io_in_d_bits_source,
  input        io_in_d_bits_denied,
  input        io_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _T_677 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_1 = ~io_in_d_bits_source;
  wire  _T_681 = io_in_d_bits_opcode == 3'h6;
  wire  _T_685 = io_in_d_bits_size >= 3'h2;
  wire  _T_689 = io_in_d_bits_param == 2'h0;
  wire  _T_693 = ~io_in_d_bits_corrupt;
  wire  _T_697 = ~io_in_d_bits_denied;
  wire  _T_701 = io_in_d_bits_opcode == 3'h4;
  wire  _T_712 = io_in_d_bits_param <= 2'h2;
  wire  _T_716 = io_in_d_bits_param != 2'h2;
  wire  _T_729 = io_in_d_bits_opcode == 3'h5;
  wire  _T_749 = _T_697 | io_in_d_bits_corrupt;
  wire  _T_758 = io_in_d_bits_opcode == 3'h0;
  wire  _T_775 = io_in_d_bits_opcode == 3'h1;
  wire  _T_793 = io_in_d_bits_opcode == 3'h2;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [3:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:2];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [3:0] d_first_counter;
  wire [3:0] d_first_counter1 = d_first_counter - 4'h1;
  wire  d_first = d_first_counter == 4'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg  source_1;
  reg  denied;
  wire  _T_1648 = io_in_d_valid & ~d_first;
  wire  _T_1649 = io_in_d_bits_opcode == opcode_1;
  wire  _T_1653 = io_in_d_bits_param == param_1;
  wire  _T_1657 = io_in_d_bits_size == size_1;
  wire  _T_1661 = io_in_d_bits_source == source_1;
  wire  _T_1669 = io_in_d_bits_denied == denied;
  reg [3:0] inflight_opcodes;
  reg [3:0] inflight_sizes;
  reg [3:0] d_first_counter_1;
  wire [3:0] d_first_counter1_1 = d_first_counter_1 - 4'h1;
  wire  d_first_1 = d_first_counter_1 == 4'h0;
  wire [2:0] _GEN_86 = {io_in_d_bits_source, 2'h0};
  wire [3:0] _a_opcode_lookup_T = {{1'd0}, _GEN_86};
  wire [3:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [15:0] _GEN_87 = {{12'd0}, _a_opcode_lookup_T_1};
  wire [15:0] _a_opcode_lookup_T_6 = _GEN_87 & _a_opcode_lookup_T_5;
  wire [15:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[15:1]};
  wire [3:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [15:0] _GEN_90 = {{12'd0}, _a_size_lookup_T_1};
  wire [15:0] _a_size_lookup_T_6 = _GEN_90 & _a_opcode_lookup_T_5;
  wire [15:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[15:1]};
  wire  _T_1737 = io_in_d_valid & d_first_1 & ~_T_681;
  wire [30:0] _GEN_93 = {{15'd0}, _a_opcode_lookup_T_5};
  wire [30:0] _d_opcodes_clr_T_5 = _GEN_93 << _a_opcode_lookup_T;
  wire [30:0] _GEN_35 = _T_1737 ? _d_opcodes_clr_T_5 : 31'h0;
  wire  _T_1747 = 1'h0 >> io_in_d_bits_source;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_55 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_56 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_55;
  wire [2:0] _GEN_57 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_56;
  wire [2:0] _GEN_58 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_57;
  wire [2:0] _GEN_59 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_58;
  wire [2:0] _GEN_60 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_59;
  wire [2:0] _GEN_67 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_58;
  wire [2:0] _GEN_68 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_67;
  wire  _T_1766 = io_in_d_bits_opcode == _GEN_68;
  wire  _T_1767 = io_in_d_bits_opcode == _GEN_60 | _T_1766;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_96 = {{1'd0}, io_in_d_bits_size};
  wire  _T_1771 = _GEN_96 == a_size_lookup;
  wire [3:0] d_opcodes_clr = _GEN_35[3:0];
  wire [3:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [3:0] _inflight_opcodes_T_2 = inflight_opcodes & _inflight_opcodes_T_1;
  wire [3:0] _inflight_sizes_T_2 = inflight_sizes & _inflight_opcodes_T_1;
  reg [3:0] inflight_sizes_1;
  reg [3:0] d_first_counter_2;
  wire [3:0] d_first_counter1_2 = d_first_counter_2 - 4'h1;
  wire  d_first_2 = d_first_counter_2 == 4'h0;
  wire [3:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [15:0] _GEN_101 = {{12'd0}, _c_size_lookup_T_1};
  wire [15:0] _c_size_lookup_T_6 = _GEN_101 & _a_opcode_lookup_T_5;
  wire [15:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[15:1]};
  wire  _T_1825 = io_in_d_valid & d_first_2 & _T_681;
  wire [30:0] _GEN_80 = _T_1825 ? _d_opcodes_clr_T_5 : 31'h0;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_1843 = _GEN_96 == c_size_lookup;
  wire [3:0] d_opcodes_clr_1 = _GEN_80[3:0];
  wire [3:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [3:0] _inflight_sizes_T_5 = inflight_sizes_1 & _inflight_opcodes_T_4;
  reg  inflight_2;
  reg [3:0] d_first_counter_3;
  wire [3:0] d_first_counter1_3 = d_first_counter_3 - 4'h1;
  wire  d_first_3 = d_first_counter_3 == 4'h0;
  wire  _T_1880 = io_in_d_bits_opcode[2] & ~io_in_d_bits_opcode[1];
  wire  _T_1881 = io_in_d_valid & d_first_3 & _T_1880;
  wire  _T_1884 = ~inflight_2;
  wire [1:0] _GEN_84 = io_in_d_valid & d_first_3 & _T_1880 ? 2'h1 : 2'h0;
  wire  d_set = _GEN_84[0];
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      d_first_counter <= 4'h0;
    end else if (io_in_d_valid) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 4'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (io_in_d_valid & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (io_in_d_valid & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (io_in_d_valid & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (io_in_d_valid & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (io_in_d_valid & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      inflight_opcodes <= 4'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 4'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      d_first_counter_1 <= 4'h0;
    end else if (io_in_d_valid) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 4'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      inflight_sizes_1 <= 4'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      d_first_counter_2 <= 4'h0;
    end else if (io_in_d_valid) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 4'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      inflight_2 <= 1'h0;
    end else begin
      inflight_2 <= inflight_2 | d_set;
    end
    if (reset) begin
      d_first_counter_3 <= 4'h0;
    end else if (io_in_d_valid) begin
      if (d_first_3) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_3 <= d_first_beats1_decode;
        end else begin
          d_first_counter_3 <= 4'h0;
        end
      end else begin
        d_first_counter_3 <= d_first_counter1_3;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_677 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_677 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_681 & ~(_source_ok_T_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_681 & ~(_source_ok_T_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_681 & ~(_T_685 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_681 & ~(_T_685 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_681 & ~(_T_689 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_681 & ~(_T_689 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_681 & ~(_T_693 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_681 & ~(_T_693 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_681 & ~(_T_697 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_681 & ~(_T_697 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_701 & ~(_source_ok_T_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_701 & ~(_source_ok_T_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_701 & ~(_T_685 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_701 & ~(_T_685 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_701 & ~(_T_712 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_701 & ~(_T_712 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_701 & ~(_T_716 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_701 & ~(_T_716 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_701 & ~(_T_693 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_701 & ~(_T_693 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_729 & ~(_source_ok_T_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_729 & ~(_source_ok_T_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_729 & ~(_T_685 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_729 & ~(_T_685 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_729 & ~(_T_712 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_729 & ~(_T_712 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_729 & ~(_T_716 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_729 & ~(_T_716 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_729 & ~(_T_749 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_729 & ~(_T_749 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_758 & ~(_source_ok_T_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_758 & ~(_source_ok_T_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_758 & ~(_T_689 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_758 & ~(_T_689 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_758 & ~(_T_693 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_758 & ~(_T_693 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_775 & ~(_source_ok_T_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_775 & ~(_source_ok_T_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_775 & ~(_T_689 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_775 & ~(_T_689 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_775 & ~(_T_749 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_775 & ~(_T_749 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_793 & ~(_source_ok_T_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_793 & ~(_source_ok_T_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_793 & ~(_T_689 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_793 & ~(_T_689 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_793 & ~(_T_693 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_793 & ~(_T_693 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1648 & ~(_T_1649 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1648 & ~(_T_1649 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1648 & ~(_T_1653 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1648 & ~(_T_1653 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1648 & ~(_T_1657 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1648 & ~(_T_1657 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1648 & ~(_T_1661 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1648 & ~(_T_1661 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1648 & ~(_T_1669 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1648 & ~(_T_1669 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1737 & ~(_T_1747 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1737 & ~(_T_1747 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1737 & ~(_T_1767 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1737 & ~(_T_1767 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1737 & ~(_T_1771 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1737 & ~(_T_1771 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1825 & ~(_T_1747 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1825 & ~(_T_1747 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1825 & ~(_T_1843 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1825 & ~(_T_1843 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1881 & ~(_T_1884 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel re-used a sink ID (connected at ChipLink.scala:70:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1881 & ~(_T_1884 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  d_first_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  opcode_1 = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  param_1 = _RAND_2[1:0];
  _RAND_3 = {1{`RANDOM}};
  size_1 = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  source_1 = _RAND_4[0:0];
  _RAND_5 = {1{`RANDOM}};
  denied = _RAND_5[0:0];
  _RAND_6 = {1{`RANDOM}};
  inflight_opcodes = _RAND_6[3:0];
  _RAND_7 = {1{`RANDOM}};
  inflight_sizes = _RAND_7[3:0];
  _RAND_8 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_8[3:0];
  _RAND_9 = {1{`RANDOM}};
  inflight_sizes_1 = _RAND_9[3:0];
  _RAND_10 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_10[3:0];
  _RAND_11 = {1{`RANDOM}};
  inflight_2 = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  d_first_counter_3 = _RAND_12[3:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_6(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_param,
  input  [2:0]  io_in_a_bits_size,
  input  [5:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [3:0]  io_in_a_bits_mask,
  input         io_in_c_ready,
  input         io_in_c_valid,
  input  [2:0]  io_in_c_bits_opcode,
  input  [2:0]  io_in_c_bits_param,
  input  [2:0]  io_in_c_bits_size,
  input  [5:0]  io_in_c_bits_source,
  input  [31:0] io_in_c_bits_address,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [5:0]  io_in_d_bits_source,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt,
  input         io_in_e_ready,
  input         io_in_e_valid,
  input         io_in_e_bits_sink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [63:0] _RAND_18;
  reg [255:0] _RAND_19;
  reg [255:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [63:0] _RAND_24;
  reg [255:0] _RAND_25;
  reg [31:0] _RAND_26;
  reg [31:0] _RAND_27;
  reg [31:0] _RAND_28;
  reg [31:0] _RAND_29;
  reg [31:0] _RAND_30;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = io_in_a_bits_source[5:3] == 3'h0;
  wire  _source_ok_T_7 = io_in_a_bits_source[5:3] == 3'h1;
  wire  _source_ok_T_13 = io_in_a_bits_source[5:3] == 3'h2;
  wire  _source_ok_T_19 = io_in_a_bits_source[5:3] == 3'h3;
  wire  _source_ok_T_25 = io_in_a_bits_source[5:3] == 3'h4;
  wire  _source_ok_T_31 = io_in_a_bits_source[5:3] == 3'h5;
  wire  _source_ok_T_37 = io_in_a_bits_source[5:3] == 3'h6;
  wire  _source_ok_T_43 = io_in_a_bits_source[5:3] == 3'h7;
  wire  source_ok = _source_ok_T_1 | _source_ok_T_7 | _source_ok_T_13 | _source_ok_T_19 | _source_ok_T_25 |
    _source_ok_T_31 | _source_ok_T_37 | _source_ok_T_43;
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_86 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_86;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire  mask_sizeOH_shiftAmount = io_in_a_bits_size[0];
  wire [1:0] _mask_sizeOH_T_1 = 2'h1 << mask_sizeOH_shiftAmount;
  wire [1:0] mask_sizeOH = _mask_sizeOH_T_1 | 2'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h2;
  wire  mask_size = mask_sizeOH[1];
  wire  mask_bit = io_in_a_bits_address[1];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[0];
  wire  mask_bit_1 = io_in_a_bits_address[0];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_lo_lo = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_lo_hi = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_hi_lo = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_hi_hi = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire [3:0] mask = {mask_hi_hi,mask_hi_lo,mask_lo_hi,mask_lo_lo};
  wire  _T_118 = io_in_a_bits_opcode == 3'h6;
  wire [31:0] _T_180 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_181 = {1'b0,$signed(_T_180)};
  wire [32:0] _T_183 = $signed(_T_181) & -33'sh10000000;
  wire  _T_184 = $signed(_T_183) == 33'sh0;
  wire [31:0] _T_185 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_186 = {1'b0,$signed(_T_185)};
  wire [32:0] _T_188 = $signed(_T_186) & -33'sh20000000;
  wire  _T_189 = $signed(_T_188) == 33'sh0;
  wire [31:0] _T_190 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_191 = {1'b0,$signed(_T_190)};
  wire [32:0] _T_193 = $signed(_T_191) & -33'sh40000000;
  wire  _T_194 = $signed(_T_193) == 33'sh0;
  wire [31:0] _T_195 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_196 = {1'b0,$signed(_T_195)};
  wire [32:0] _T_198 = $signed(_T_196) & -33'sh40000000;
  wire  _T_199 = $signed(_T_198) == 33'sh0;
  wire [31:0] _T_200 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_201 = {1'b0,$signed(_T_200)};
  wire [32:0] _T_203 = $signed(_T_201) & -33'sh20000000;
  wire  _T_204 = $signed(_T_203) == 33'sh0;
  wire  _T_211 = io_in_a_bits_size <= 3'h6;
  wire [31:0] _T_214 = io_in_a_bits_address ^ 32'h1000;
  wire [32:0] _T_215 = {1'b0,$signed(_T_214)};
  wire [32:0] _T_217 = $signed(_T_215) & -33'sh1000;
  wire  _T_218 = $signed(_T_217) == 33'sh0;
  wire  _T_219 = _T_211 & _T_218;
  wire  _T_222 = source_ok & _T_219;
  wire  _T_277 = _source_ok_T_1 & _T_211;
  wire  _T_330 = _T_218 | _T_184 | _T_189 | _T_194 | _T_199 | _T_204;
  wire  _T_333 = _T_277 & _T_330;
  wire  _T_347 = io_in_a_bits_param <= 3'h2;
  wire [3:0] _T_351 = ~io_in_a_bits_mask;
  wire  _T_352 = _T_351 == 4'h0;
  wire  _T_360 = io_in_a_bits_opcode == 3'h7;
  wire  _T_593 = io_in_a_bits_param != 3'h0;
  wire  _T_606 = io_in_a_bits_opcode == 3'h4;
  wire  _T_709 = _T_211 & _T_330;
  wire  _T_720 = io_in_a_bits_param == 3'h0;
  wire  _T_724 = io_in_a_bits_mask == mask;
  wire  _T_732 = io_in_a_bits_opcode == 3'h0;
  wire  _T_834 = source_ok & _T_709;
  wire  _T_852 = io_in_a_bits_opcode == 3'h1;
  wire [3:0] _T_968 = ~mask;
  wire [3:0] _T_969 = io_in_a_bits_mask & _T_968;
  wire  _T_970 = _T_969 == 4'h0;
  wire  _T_974 = io_in_a_bits_opcode == 3'h2;
  wire  _T_1036 = io_in_a_bits_size <= 3'h3;
  wire  _T_1074 = _T_1036 & _T_330;
  wire  _T_1076 = source_ok & _T_1074;
  wire  _T_1086 = io_in_a_bits_param <= 3'h4;
  wire  _T_1094 = io_in_a_bits_opcode == 3'h3;
  wire  _T_1206 = io_in_a_bits_param <= 3'h3;
  wire  _T_1214 = io_in_a_bits_opcode == 3'h5;
  wire  _T_1326 = io_in_a_bits_param <= 3'h1;
  wire  _T_1338 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_55 = io_in_d_bits_source[5:3] == 3'h0;
  wire  _source_ok_T_61 = io_in_d_bits_source[5:3] == 3'h1;
  wire  _source_ok_T_67 = io_in_d_bits_source[5:3] == 3'h2;
  wire  _source_ok_T_73 = io_in_d_bits_source[5:3] == 3'h3;
  wire  _source_ok_T_79 = io_in_d_bits_source[5:3] == 3'h4;
  wire  _source_ok_T_85 = io_in_d_bits_source[5:3] == 3'h5;
  wire  _source_ok_T_91 = io_in_d_bits_source[5:3] == 3'h6;
  wire  _source_ok_T_97 = io_in_d_bits_source[5:3] == 3'h7;
  wire  source_ok_1 = _source_ok_T_55 | _source_ok_T_61 | _source_ok_T_67 | _source_ok_T_73 | _source_ok_T_79 |
    _source_ok_T_85 | _source_ok_T_91 | _source_ok_T_97;
  wire  _T_1342 = io_in_d_bits_opcode == 3'h6;
  wire  _T_1346 = io_in_d_bits_size >= 3'h2;
  wire  _T_1350 = io_in_d_bits_param == 2'h0;
  wire  _T_1354 = ~io_in_d_bits_corrupt;
  wire  _T_1358 = ~io_in_d_bits_denied;
  wire  _T_1362 = io_in_d_bits_opcode == 3'h4;
  wire  _T_1373 = io_in_d_bits_param <= 2'h2;
  wire  _T_1377 = io_in_d_bits_param != 2'h2;
  wire  _T_1390 = io_in_d_bits_opcode == 3'h5;
  wire  _T_1410 = _T_1358 | io_in_d_bits_corrupt;
  wire  _T_1419 = io_in_d_bits_opcode == 3'h0;
  wire  _T_1436 = io_in_d_bits_opcode == 3'h1;
  wire  _T_1454 = io_in_d_bits_opcode == 3'h2;
  wire  _source_ok_T_109 = io_in_c_bits_source[5:3] == 3'h0;
  wire  _source_ok_T_115 = io_in_c_bits_source[5:3] == 3'h1;
  wire  _source_ok_T_121 = io_in_c_bits_source[5:3] == 3'h2;
  wire  _source_ok_T_127 = io_in_c_bits_source[5:3] == 3'h3;
  wire  _source_ok_T_133 = io_in_c_bits_source[5:3] == 3'h4;
  wire  _source_ok_T_139 = io_in_c_bits_source[5:3] == 3'h5;
  wire  _source_ok_T_145 = io_in_c_bits_source[5:3] == 3'h6;
  wire  _source_ok_T_151 = io_in_c_bits_source[5:3] == 3'h7;
  wire  source_ok_2 = _source_ok_T_109 | _source_ok_T_115 | _source_ok_T_121 | _source_ok_T_127 | _source_ok_T_133 |
    _source_ok_T_139 | _source_ok_T_145 | _source_ok_T_151;
  wire [12:0] _is_aligned_mask_T_7 = 13'h3f << io_in_c_bits_size;
  wire [5:0] is_aligned_mask_2 = ~_is_aligned_mask_T_7[5:0];
  wire [31:0] _GEN_87 = {{26'd0}, is_aligned_mask_2};
  wire [31:0] _is_aligned_T_2 = io_in_c_bits_address & _GEN_87;
  wire  is_aligned_2 = _is_aligned_T_2 == 32'h0;
  wire [31:0] _address_ok_T_34 = io_in_c_bits_address ^ 32'h10000000;
  wire [32:0] _address_ok_T_35 = {1'b0,$signed(_address_ok_T_34)};
  wire [32:0] _address_ok_T_37 = $signed(_address_ok_T_35) & -33'sh10000000;
  wire  _address_ok_T_38 = $signed(_address_ok_T_37) == 33'sh0;
  wire [31:0] _address_ok_T_39 = io_in_c_bits_address ^ 32'h20000000;
  wire [32:0] _address_ok_T_40 = {1'b0,$signed(_address_ok_T_39)};
  wire [32:0] _address_ok_T_42 = $signed(_address_ok_T_40) & -33'sh20000000;
  wire  _address_ok_T_43 = $signed(_address_ok_T_42) == 33'sh0;
  wire [31:0] _address_ok_T_44 = io_in_c_bits_address ^ 32'h40000000;
  wire [32:0] _address_ok_T_45 = {1'b0,$signed(_address_ok_T_44)};
  wire [32:0] _address_ok_T_47 = $signed(_address_ok_T_45) & -33'sh40000000;
  wire  _address_ok_T_48 = $signed(_address_ok_T_47) == 33'sh0;
  wire [31:0] _address_ok_T_49 = io_in_c_bits_address ^ 32'h80000000;
  wire [32:0] _address_ok_T_50 = {1'b0,$signed(_address_ok_T_49)};
  wire [32:0] _address_ok_T_52 = $signed(_address_ok_T_50) & -33'sh40000000;
  wire  _address_ok_T_53 = $signed(_address_ok_T_52) == 33'sh0;
  wire [31:0] _address_ok_T_54 = io_in_c_bits_address ^ 32'hc0000000;
  wire [32:0] _address_ok_T_55 = {1'b0,$signed(_address_ok_T_54)};
  wire [32:0] _address_ok_T_57 = $signed(_address_ok_T_55) & -33'sh20000000;
  wire  _address_ok_T_58 = $signed(_address_ok_T_57) == 33'sh0;
  wire  _address_ok_T_62 = _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 | _address_ok_T_58;
  wire [31:0] _address_ok_T_63 = io_in_c_bits_address ^ 32'h1000;
  wire [32:0] _address_ok_T_64 = {1'b0,$signed(_address_ok_T_63)};
  wire [32:0] _address_ok_T_66 = $signed(_address_ok_T_64) & -33'sh1000;
  wire  _address_ok_T_67 = $signed(_address_ok_T_66) == 33'sh0;
  wire  address_ok_1 = _address_ok_T_62 | _address_ok_T_67;
  wire  _T_2224 = io_in_c_bits_opcode == 3'h4;
  wire  _T_2231 = io_in_c_bits_size >= 3'h2;
  wire  _T_2238 = io_in_c_bits_param <= 3'h5;
  wire  _T_2246 = io_in_c_bits_opcode == 3'h5;
  wire  _T_2264 = io_in_c_bits_opcode == 3'h6;
  wire  _T_2357 = io_in_c_bits_size <= 3'h6;
  wire  _T_2365 = _T_2357 & _address_ok_T_67;
  wire  _T_2368 = source_ok_2 & _T_2365;
  wire  _T_2423 = _source_ok_T_109 & _T_2357;
  wire  _T_2476 = _address_ok_T_67 | _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 |
    _address_ok_T_58;
  wire  _T_2479 = _T_2423 & _T_2476;
  wire  _T_2501 = io_in_c_bits_opcode == 3'h7;
  wire  _T_2734 = io_in_c_bits_opcode == 3'h0;
  wire  _T_2744 = io_in_c_bits_param == 3'h0;
  wire  _T_2752 = io_in_c_bits_opcode == 3'h1;
  wire  _T_2766 = io_in_c_bits_opcode == 3'h2;
  wire  sink_ok_1 = io_in_e_bits_sink < 1'h1;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [3:0] a_first_beats1_decode = is_aligned_mask[5:2];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [3:0] a_first_counter;
  wire [3:0] a_first_counter1 = a_first_counter - 4'h1;
  wire  a_first = a_first_counter == 4'h0;
  reg [2:0] opcode;
  reg [2:0] param;
  reg [2:0] size;
  reg [5:0] source;
  reg [31:0] address;
  wire  _T_2788 = io_in_a_valid & ~a_first;
  wire  _T_2789 = io_in_a_bits_opcode == opcode;
  wire  _T_2793 = io_in_a_bits_param == param;
  wire  _T_2797 = io_in_a_bits_size == size;
  wire  _T_2801 = io_in_a_bits_source == source;
  wire  _T_2805 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [3:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:2];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [3:0] d_first_counter;
  wire [3:0] d_first_counter1 = d_first_counter - 4'h1;
  wire  d_first = d_first_counter == 4'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [5:0] source_1;
  reg  denied;
  wire  _T_2812 = io_in_d_valid & ~d_first;
  wire  _T_2813 = io_in_d_bits_opcode == opcode_1;
  wire  _T_2817 = io_in_d_bits_param == param_1;
  wire  _T_2821 = io_in_d_bits_size == size_1;
  wire  _T_2825 = io_in_d_bits_source == source_1;
  wire  _T_2833 = io_in_d_bits_denied == denied;
  wire  _c_first_T = io_in_c_ready & io_in_c_valid;
  wire [3:0] c_first_beats1_decode = is_aligned_mask_2[5:2];
  wire  c_first_beats1_opdata = io_in_c_bits_opcode[0];
  reg [3:0] c_first_counter;
  wire [3:0] c_first_counter1 = c_first_counter - 4'h1;
  wire  c_first = c_first_counter == 4'h0;
  reg [2:0] opcode_3;
  reg [2:0] param_3;
  reg [2:0] size_3;
  reg [5:0] source_3;
  reg [31:0] address_2;
  wire  _T_2864 = io_in_c_valid & ~c_first;
  wire  _T_2865 = io_in_c_bits_opcode == opcode_3;
  wire  _T_2869 = io_in_c_bits_param == param_3;
  wire  _T_2873 = io_in_c_bits_size == size_3;
  wire  _T_2877 = io_in_c_bits_source == source_3;
  wire  _T_2881 = io_in_c_bits_address == address_2;
  reg [63:0] inflight;
  reg [255:0] inflight_opcodes;
  reg [255:0] inflight_sizes;
  reg [3:0] a_first_counter_1;
  wire [3:0] a_first_counter1_1 = a_first_counter_1 - 4'h1;
  wire  a_first_1 = a_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_1;
  wire [3:0] d_first_counter1_1 = d_first_counter_1 - 4'h1;
  wire  d_first_1 = d_first_counter_1 == 4'h0;
  wire [7:0] _GEN_88 = {io_in_d_bits_source, 2'h0};
  wire [8:0] _a_opcode_lookup_T = {{1'd0}, _GEN_88};
  wire [255:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [255:0] _GEN_89 = {{240'd0}, _a_opcode_lookup_T_5};
  wire [255:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_89;
  wire [255:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[255:1]};
  wire [255:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [255:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_89;
  wire [255:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[255:1]};
  wire  _T_2887 = io_in_a_valid & a_first_1;
  wire [63:0] _a_set_wo_ready_T = 64'h1 << io_in_a_bits_source;
  wire [63:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 64'h0;
  wire  _T_2890 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [7:0] _GEN_94 = {io_in_a_bits_source, 2'h0};
  wire [8:0] _a_opcodes_set_T = {{1'd0}, _GEN_94};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [514:0] _GEN_95 = {{511'd0}, a_opcodes_set_interm};
  wire [514:0] _a_opcodes_set_T_1 = _GEN_95 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [514:0] _GEN_97 = {{511'd0}, a_sizes_set_interm};
  wire [514:0] _a_sizes_set_T_1 = _GEN_97 << _a_opcodes_set_T;
  wire [63:0] _T_2892 = inflight >> io_in_a_bits_source;
  wire  _T_2894 = ~_T_2892[0];
  wire [63:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 64'h0;
  wire [514:0] _GEN_31 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 515'h0;
  wire [514:0] _GEN_32 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 515'h0;
  wire  _T_2898 = io_in_d_valid & d_first_1;
  wire  _T_2900 = ~_T_1342;
  wire  _T_2901 = io_in_d_valid & d_first_1 & ~_T_1342;
  wire [63:0] _d_clr_wo_ready_T = 64'h1 << io_in_d_bits_source;
  wire [63:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_1342 ? _d_clr_wo_ready_T : 64'h0;
  wire [526:0] _GEN_99 = {{511'd0}, _a_opcode_lookup_T_5};
  wire [526:0] _d_opcodes_clr_T_5 = _GEN_99 << _a_opcode_lookup_T;
  wire [63:0] d_clr = _d_first_T & d_first_1 & _T_2900 ? _d_clr_wo_ready_T : 64'h0;
  wire [526:0] _GEN_35 = _d_first_T & d_first_1 & _T_2900 ? _d_opcodes_clr_T_5 : 527'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_2887 & io_in_a_bits_source == io_in_d_bits_source;
  wire [63:0] _T_2911 = inflight >> io_in_d_bits_source;
  wire  _T_2913 = _T_2911[0] | same_cycle_resp;
  wire [2:0] _GEN_39 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_40 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_39;
  wire [2:0] _GEN_41 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_40;
  wire [2:0] _GEN_42 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_41;
  wire [2:0] _GEN_43 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_42;
  wire [2:0] _GEN_44 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_43;
  wire [2:0] _GEN_51 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_42;
  wire [2:0] _GEN_52 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_51;
  wire  _T_2918 = io_in_d_bits_opcode == _GEN_52;
  wire  _T_2919 = io_in_d_bits_opcode == _GEN_44 | _T_2918;
  wire  _T_2923 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_55 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_56 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_55;
  wire [2:0] _GEN_57 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_56;
  wire [2:0] _GEN_58 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_57;
  wire [2:0] _GEN_59 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_58;
  wire [2:0] _GEN_60 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_59;
  wire [2:0] _GEN_67 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_58;
  wire [2:0] _GEN_68 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_67;
  wire  _T_2930 = io_in_d_bits_opcode == _GEN_68;
  wire  _T_2931 = io_in_d_bits_opcode == _GEN_60 | _T_2930;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_102 = {{1'd0}, io_in_d_bits_size};
  wire  _T_2935 = _GEN_102 == a_size_lookup;
  wire  _T_2945 = _T_2898 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_2900;
  wire  _T_2946 = ~io_in_d_ready;
  wire  _T_2947 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_2954 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [63:0] _inflight_T = inflight | a_set;
  wire [63:0] _inflight_T_1 = ~d_clr;
  wire [63:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [255:0] a_opcodes_set = _GEN_31[255:0];
  wire [255:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [255:0] d_opcodes_clr = _GEN_35[255:0];
  wire [255:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [255:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [255:0] a_sizes_set = _GEN_32[255:0];
  wire [255:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [255:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_2963 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [63:0] inflight_1;
  reg [255:0] inflight_sizes_1;
  reg [3:0] c_first_counter_1;
  wire [3:0] c_first_counter1_1 = c_first_counter_1 - 4'h1;
  wire  c_first_1 = c_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_2;
  wire [3:0] d_first_counter1_2 = d_first_counter_2 - 4'h1;
  wire  d_first_2 = d_first_counter_2 == 4'h0;
  wire [255:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [255:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_89;
  wire [255:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[255:1]};
  wire  _T_2973 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire  _T_2974 = io_in_c_valid & c_first_1 & _T_2973;
  wire [63:0] _c_set_wo_ready_T = 64'h1 << io_in_c_bits_source;
  wire [63:0] c_set_wo_ready = io_in_c_valid & c_first_1 & _T_2973 ? _c_set_wo_ready_T : 64'h0;
  wire  _T_2980 = _c_first_T & c_first_1 & _T_2973;
  wire [3:0] _c_sizes_set_interm_T = {io_in_c_bits_size, 1'h0};
  wire [3:0] _c_sizes_set_interm_T_1 = _c_sizes_set_interm_T | 4'h1;
  wire [7:0] _GEN_109 = {io_in_c_bits_source, 2'h0};
  wire [8:0] _c_opcodes_set_T = {{1'd0}, _GEN_109};
  wire [3:0] c_sizes_set_interm = _c_first_T & c_first_1 & _T_2973 ? _c_sizes_set_interm_T_1 : 4'h0;
  wire [514:0] _GEN_112 = {{511'd0}, c_sizes_set_interm};
  wire [514:0] _c_sizes_set_T_1 = _GEN_112 << _c_opcodes_set_T;
  wire [63:0] _T_2981 = inflight_1 >> io_in_c_bits_source;
  wire  _T_2983 = ~_T_2981[0];
  wire [63:0] c_set = _c_first_T & c_first_1 & _T_2973 ? _c_set_wo_ready_T : 64'h0;
  wire [514:0] _GEN_77 = _c_first_T & c_first_1 & _T_2973 ? _c_sizes_set_T_1 : 515'h0;
  wire  _T_2987 = io_in_d_valid & d_first_2;
  wire  _T_2989 = io_in_d_valid & d_first_2 & _T_1342;
  wire [63:0] d_clr_wo_ready_1 = io_in_d_valid & d_first_2 & _T_1342 ? _d_clr_wo_ready_T : 64'h0;
  wire [63:0] d_clr_1 = _d_first_T & d_first_2 & _T_1342 ? _d_clr_wo_ready_T : 64'h0;
  wire [526:0] _GEN_80 = _d_first_T & d_first_2 & _T_1342 ? _d_opcodes_clr_T_5 : 527'h0;
  wire  _same_cycle_resp_T_8 = io_in_c_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp_1 = _T_2974 & io_in_c_bits_source == io_in_d_bits_source;
  wire [63:0] _T_2997 = inflight_1 >> io_in_d_bits_source;
  wire  _T_2999 = _T_2997[0] | same_cycle_resp_1;
  wire  _T_3003 = io_in_d_bits_size == io_in_c_bits_size;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_3007 = _GEN_102 == c_size_lookup;
  wire  _T_3016 = _T_2987 & c_first_1 & io_in_c_valid & _same_cycle_resp_T_8 & _T_1342;
  wire  _T_3018 = _T_2946 | io_in_c_ready;
  wire  _T_3022 = |c_set_wo_ready;
  wire  _T_3023 = c_set_wo_ready != d_clr_wo_ready_1;
  wire [63:0] _inflight_T_3 = inflight_1 | c_set;
  wire [63:0] _inflight_T_4 = ~d_clr_1;
  wire [63:0] _inflight_T_5 = _inflight_T_3 & _inflight_T_4;
  wire [255:0] d_opcodes_clr_1 = _GEN_80[255:0];
  wire [255:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [255:0] c_sizes_set = _GEN_77[255:0];
  wire [255:0] _inflight_sizes_T_3 = inflight_sizes_1 | c_sizes_set;
  wire [255:0] _inflight_sizes_T_5 = _inflight_sizes_T_3 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_3032 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  reg  inflight_2;
  reg [3:0] d_first_counter_3;
  wire [3:0] d_first_counter1_3 = d_first_counter_3 - 4'h1;
  wire  d_first_3 = d_first_counter_3 == 4'h0;
  wire  _T_3044 = io_in_d_bits_opcode[2] & ~io_in_d_bits_opcode[1];
  wire  _T_3045 = _d_first_T & d_first_3 & _T_3044;
  wire  _T_3048 = ~inflight_2;
  wire [1:0] _GEN_84 = _d_first_T & d_first_3 & _T_3044 ? 2'h1 : 2'h0;
  wire  _T_3052 = io_in_e_ready & io_in_e_valid;
  wire [1:0] _e_clr_T = 2'h1 << io_in_e_bits_sink;
  wire  d_set = _GEN_84[0];
  wire  _T_3056 = (d_set | inflight_2) >> io_in_e_bits_sink;
  wire [1:0] _GEN_85 = _T_3052 ? _e_clr_T : 2'h0;
  wire  e_clr = _GEN_85[0];
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 4'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      param <= io_in_a_bits_param;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 4'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      c_first_counter <= 4'h0;
    end else if (_c_first_T) begin
      if (c_first) begin
        if (c_first_beats1_opdata) begin
          c_first_counter <= c_first_beats1_decode;
        end else begin
          c_first_counter <= 4'h0;
        end
      end else begin
        c_first_counter <= c_first_counter1;
      end
    end
    if (_c_first_T & c_first) begin
      opcode_3 <= io_in_c_bits_opcode;
    end
    if (_c_first_T & c_first) begin
      param_3 <= io_in_c_bits_param;
    end
    if (_c_first_T & c_first) begin
      size_3 <= io_in_c_bits_size;
    end
    if (_c_first_T & c_first) begin
      source_3 <= io_in_c_bits_source;
    end
    if (_c_first_T & c_first) begin
      address_2 <= io_in_c_bits_address;
    end
    if (reset) begin
      inflight <= 64'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 256'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 256'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 4'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 4'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 64'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 256'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      c_first_counter_1 <= 4'h0;
    end else if (_c_first_T) begin
      if (c_first_1) begin
        if (c_first_beats1_opdata) begin
          c_first_counter_1 <= c_first_beats1_decode;
        end else begin
          c_first_counter_1 <= 4'h0;
        end
      end else begin
        c_first_counter_1 <= c_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_2 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 4'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_c_first_T | _d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    if (reset) begin
      inflight_2 <= 1'h0;
    end else begin
      inflight_2 <= (inflight_2 | d_set) & ~e_clr;
    end
    if (reset) begin
      d_first_counter_3 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_3) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_3 <= d_first_beats1_decode;
        end else begin
          d_first_counter_3 <= 4'h0;
        end
      end else begin
        d_first_counter_3 <= d_first_counter1_3;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1086 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1086 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1206 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1206 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_1326 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_1326 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1338 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1338 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1346 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1346 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1358 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1358 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1346 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1346 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1373 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1373 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1377 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1377 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1346 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1346 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1373 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1373 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1377 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1377 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1410 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1410 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1410 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1410 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2368 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2368 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2479 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2479 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release smaller than a beat (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid report param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2368 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2368 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2479 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2479 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(_T_2744 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(_T_2744 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(_T_2744 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(_T_2744 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck address not aligned to size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(_T_2744 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid param (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(_T_2744 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channels carries invalid sink ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2789 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2789 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2793 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel param changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2793 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2797 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2797 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2801 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2801 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2805 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2805 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2813 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2813 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2817 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2817 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2821 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2821 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2825 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2825 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2833 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2833 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2865 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2865 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2869 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel param changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2869 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2873 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel size changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2873 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2877 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel source changed within multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2877 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2881 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel address changed with multibeat operation (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2881 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2890 & ~(_T_2894 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2890 & ~(_T_2894 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & ~(_T_2913 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & ~(_T_2913 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2919 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2919 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2923 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2923 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2931 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2931 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2935 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2935 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2945 & ~(_T_2947 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2945 & ~(_T_2947 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2954 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2954 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2963 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2963 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2980 & ~(_T_2983 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel re-used a source ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2980 & ~(_T_2983 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2989 & ~(_T_2999 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2989 & ~(_T_2999 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2989 & same_cycle_resp_1 & ~(_T_3003 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2989 & same_cycle_resp_1 & ~(_T_3003 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2989 & ~same_cycle_resp_1 & ~(_T_3007 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2989 & ~same_cycle_resp_1 & ~(_T_3007 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3016 & ~(_T_3018 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3016 & ~(_T_3018 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3022 & ~(_T_3023 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' and 'D' concurrent, despite minlatency 1 (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3022 & ~(_T_3023 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_3032 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_3032 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3045 & ~(_T_3048 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel re-used a sink ID (connected at ChipLink.scala:71:16)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3045 & ~(_T_3048 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3052 & ~(_T_3056 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channel acknowledged for nothing inflight (connected at ChipLink.scala:71:16)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3052 & ~(_T_3056 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  source = _RAND_4[5:0];
  _RAND_5 = {1{`RANDOM}};
  address = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  d_first_counter = _RAND_6[3:0];
  _RAND_7 = {1{`RANDOM}};
  opcode_1 = _RAND_7[2:0];
  _RAND_8 = {1{`RANDOM}};
  param_1 = _RAND_8[1:0];
  _RAND_9 = {1{`RANDOM}};
  size_1 = _RAND_9[2:0];
  _RAND_10 = {1{`RANDOM}};
  source_1 = _RAND_10[5:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  c_first_counter = _RAND_12[3:0];
  _RAND_13 = {1{`RANDOM}};
  opcode_3 = _RAND_13[2:0];
  _RAND_14 = {1{`RANDOM}};
  param_3 = _RAND_14[2:0];
  _RAND_15 = {1{`RANDOM}};
  size_3 = _RAND_15[2:0];
  _RAND_16 = {1{`RANDOM}};
  source_3 = _RAND_16[5:0];
  _RAND_17 = {1{`RANDOM}};
  address_2 = _RAND_17[31:0];
  _RAND_18 = {2{`RANDOM}};
  inflight = _RAND_18[63:0];
  _RAND_19 = {8{`RANDOM}};
  inflight_opcodes = _RAND_19[255:0];
  _RAND_20 = {8{`RANDOM}};
  inflight_sizes = _RAND_20[255:0];
  _RAND_21 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_21[3:0];
  _RAND_22 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_22[3:0];
  _RAND_23 = {1{`RANDOM}};
  watchdog = _RAND_23[31:0];
  _RAND_24 = {2{`RANDOM}};
  inflight_1 = _RAND_24[63:0];
  _RAND_25 = {8{`RANDOM}};
  inflight_sizes_1 = _RAND_25[255:0];
  _RAND_26 = {1{`RANDOM}};
  c_first_counter_1 = _RAND_26[3:0];
  _RAND_27 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_27[3:0];
  _RAND_28 = {1{`RANDOM}};
  watchdog_1 = _RAND_28[31:0];
  _RAND_29 = {1{`RANDOM}};
  inflight_2 = _RAND_29[0:0];
  _RAND_30 = {1{`RANDOM}};
  d_first_counter_3 = _RAND_30[3:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_StuckSnooper(
  input         clock,
  input         reset,
  output        auto_in_1_a_ready,
  input         auto_in_1_a_valid,
  input  [2:0]  auto_in_1_a_bits_opcode,
  input  [2:0]  auto_in_1_a_bits_param,
  input  [2:0]  auto_in_1_a_bits_size,
  input  [5:0]  auto_in_1_a_bits_source,
  input  [31:0] auto_in_1_a_bits_address,
  input  [3:0]  auto_in_1_a_bits_mask,
  input  [31:0] auto_in_1_a_bits_data,
  output        auto_in_1_c_ready,
  input         auto_in_1_c_valid,
  input  [2:0]  auto_in_1_c_bits_opcode,
  input  [2:0]  auto_in_1_c_bits_param,
  input  [2:0]  auto_in_1_c_bits_size,
  input  [5:0]  auto_in_1_c_bits_source,
  input  [31:0] auto_in_1_c_bits_address,
  input         auto_in_1_d_ready,
  output        auto_in_1_d_valid,
  output [2:0]  auto_in_1_d_bits_opcode,
  output [1:0]  auto_in_1_d_bits_param,
  output [2:0]  auto_in_1_d_bits_size,
  output [5:0]  auto_in_1_d_bits_source,
  output        auto_in_1_d_bits_denied,
  output [31:0] auto_in_1_d_bits_data,
  output        auto_in_1_e_ready,
  input         auto_in_1_e_valid,
  input         auto_in_1_e_bits_sink,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [2:0]  auto_out_a_bits_param,
  output [2:0]  auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [3:0]  auto_out_a_bits_mask,
  output [31:0] auto_out_a_bits_data,
  input         auto_out_c_ready,
  output        auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
  output [2:0]  auto_out_c_bits_param,
  output [2:0]  auto_out_c_bits_size,
  output [5:0]  auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [31:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  input         auto_out_e_ready,
  output        auto_out_e_valid,
  output        auto_out_e_bits_sink,
  input         io_bypass
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire  monitor_io_in_d_bits_source;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  monitor_1_clock;
  wire  monitor_1_reset;
  wire  monitor_1_io_in_a_ready;
  wire  monitor_1_io_in_a_valid;
  wire [2:0] monitor_1_io_in_a_bits_opcode;
  wire [2:0] monitor_1_io_in_a_bits_param;
  wire [2:0] monitor_1_io_in_a_bits_size;
  wire [5:0] monitor_1_io_in_a_bits_source;
  wire [31:0] monitor_1_io_in_a_bits_address;
  wire [3:0] monitor_1_io_in_a_bits_mask;
  wire  monitor_1_io_in_c_ready;
  wire  monitor_1_io_in_c_valid;
  wire [2:0] monitor_1_io_in_c_bits_opcode;
  wire [2:0] monitor_1_io_in_c_bits_param;
  wire [2:0] monitor_1_io_in_c_bits_size;
  wire [5:0] monitor_1_io_in_c_bits_source;
  wire [31:0] monitor_1_io_in_c_bits_address;
  wire  monitor_1_io_in_d_ready;
  wire  monitor_1_io_in_d_valid;
  wire [2:0] monitor_1_io_in_d_bits_opcode;
  wire [1:0] monitor_1_io_in_d_bits_param;
  wire [2:0] monitor_1_io_in_d_bits_size;
  wire [5:0] monitor_1_io_in_d_bits_source;
  wire  monitor_1_io_in_d_bits_denied;
  wire  monitor_1_io_in_d_bits_corrupt;
  wire  monitor_1_io_in_e_ready;
  wire  monitor_1_io_in_e_valid;
  wire  monitor_1_io_in_e_bits_sink;
  reg  bypass;
  reg [7:0] flight;
  reg [3:0] stall_counter;
  wire  stall_first = stall_counter == 4'h0;
  wire  stall = bypass != io_bypass & stall_first;
  wire  _bundleOut_0_a_valid_T = ~stall;
  wire  _bundleOut_0_a_valid_T_1 = bypass ? 1'h0 : auto_in_1_a_valid;
  wire  out_a_valid = ~stall & _bundleOut_0_a_valid_T_1;
  wire  _T = auto_out_a_ready & out_a_valid;
  wire [2:0] out_a_bits_size = bypass ? 3'h0 : auto_in_1_a_bits_size;
  wire [12:0] _beats1_decode_T_1 = 13'h3f << out_a_bits_size;
  wire [5:0] _beats1_decode_T_3 = ~_beats1_decode_T_1[5:0];
  wire [3:0] beats1_decode = _beats1_decode_T_3[5:2];
  wire [2:0] out_a_bits_opcode = bypass ? 3'h0 : auto_in_1_a_bits_opcode;
  wire  beats1_opdata = ~out_a_bits_opcode[2];
  reg [3:0] counter;
  wire [3:0] counter1 = counter - 4'h1;
  wire  a_first = counter == 4'h0;
  reg  divertprobes;
  wire  bypass_c = bypass | divertprobes;
  wire  out_c_valid = bypass_c ? 1'h0 : auto_in_1_c_valid;
  wire  _T_2 = auto_out_c_ready & out_c_valid;
  wire [2:0] out_c_bits_size = bypass_c ? 3'h0 : auto_in_1_c_bits_size;
  wire [12:0] _beats1_decode_T_9 = 13'h3f << out_c_bits_size;
  wire [5:0] _beats1_decode_T_11 = ~_beats1_decode_T_9[5:0];
  wire [3:0] beats1_decode_2 = _beats1_decode_T_11[5:2];
  wire [2:0] out_c_bits_opcode = bypass_c ? 3'h4 : auto_in_1_c_bits_opcode;
  wire  beats1_opdata_2 = out_c_bits_opcode[0];
  wire [3:0] beats1_2 = beats1_opdata_2 ? beats1_decode_2 : 4'h0;
  reg [3:0] counter_2;
  wire [3:0] counter1_2 = counter_2 - 4'h1;
  wire  c_first = counter_2 == 4'h0;
  wire  c_last = counter_2 == 4'h1 | beats1_2 == 4'h0;
  wire  out_d_ready = bypass | auto_in_1_d_ready;
  wire  _T_3 = out_d_ready & auto_out_d_valid;
  wire [12:0] _beats1_decode_T_13 = 13'h3f << auto_out_d_bits_size;
  wire [5:0] _beats1_decode_T_15 = ~_beats1_decode_T_13[5:0];
  wire [3:0] beats1_decode_3 = _beats1_decode_T_15[5:2];
  wire  beats1_opdata_3 = auto_out_d_bits_opcode[0];
  wire [3:0] beats1_3 = beats1_opdata_3 ? beats1_decode_3 : 4'h0;
  reg [3:0] counter_3;
  wire [3:0] counter1_3 = counter_3 - 4'h1;
  wire  d_first = counter_3 == 4'h0;
  wire  d_last = counter_3 == 4'h1 | beats1_3 == 4'h0;
  wire  out_e_valid = bypass_c ? 1'h0 : auto_in_1_e_valid;
  wire  done_4 = auto_out_e_ready & out_e_valid;
  wire  c_request = out_c_bits_opcode[2] & out_c_bits_opcode[1];
  wire  c_response = ~out_c_bits_opcode[2] | ~out_c_bits_opcode[1];
  wire  d_request = auto_out_d_bits_opcode[2] & ~auto_out_d_bits_opcode[1];
  wire  inc_hi_hi_hi = _T & a_first;
  wire  inc_lo_hi = _T_2 & c_first & c_request;
  wire  inc_hi_hi_lo = _T_3 & d_first & d_request;
  wire [4:0] inc = {inc_hi_hi_hi,inc_hi_hi_lo,1'h0,inc_lo_hi,1'h0};
  wire  dec_lo_hi = _T_2 & c_last & c_response;
  wire  dec_hi_hi_lo = _T_3 & d_last;
  wire [4:0] dec = {1'h0,dec_hi_hi_lo,1'h0,dec_lo_hi,done_4};
  wire [1:0] _next_flight_T_5 = inc[0] + inc[1];
  wire [1:0] _next_flight_T_7 = inc[3] + inc[4];
  wire [1:0] _GEN_7 = {{1'd0}, inc[2]};
  wire [2:0] _next_flight_T_9 = _GEN_7 + _next_flight_T_7;
  wire [2:0] _next_flight_T_11 = _next_flight_T_5 + _next_flight_T_9[1:0];
  wire [7:0] _GEN_8 = {{5'd0}, _next_flight_T_11};
  wire [7:0] _next_flight_T_14 = flight + _GEN_8;
  wire [1:0] _next_flight_T_20 = dec[0] + dec[1];
  wire [1:0] _next_flight_T_22 = dec[3] + dec[4];
  wire [1:0] _GEN_9 = {{1'd0}, dec[2]};
  wire [2:0] _next_flight_T_24 = _GEN_9 + _next_flight_T_22;
  wire [2:0] _next_flight_T_26 = _next_flight_T_20 + _next_flight_T_24[1:0];
  wire [7:0] _GEN_10 = {{5'd0}, _next_flight_T_26};
  wire [7:0] next_flight = _next_flight_T_14 - _GEN_10;
  wire [3:0] stall_counter1 = stall_counter - 4'h1;
  wire  _bundleIn_0_a_ready_T_1 = _bundleOut_0_a_valid_T & auto_out_a_ready;
  wire  _bundleIn_1_a_ready_T_2 = ~bypass;
  wire  in1_a_ready = _bundleIn_0_a_ready_T_1 & ~bypass;
  wire  _divertprobes_T = in1_a_ready & auto_in_1_a_valid;
  wire  _bundleIn_1_bvalid_T = ~bypass_c;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_5 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt)
  );
  CHIPLINK_PREFIX_Chiplink_TLMonitor_6 monitor_1 (
    .clock(monitor_1_clock),
    .reset(monitor_1_reset),
    .io_in_a_ready(monitor_1_io_in_a_ready),
    .io_in_a_valid(monitor_1_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_1_io_in_a_bits_opcode),
    .io_in_a_bits_param(monitor_1_io_in_a_bits_param),
    .io_in_a_bits_size(monitor_1_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_1_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_1_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_1_io_in_a_bits_mask),
    .io_in_c_ready(monitor_1_io_in_c_ready),
    .io_in_c_valid(monitor_1_io_in_c_valid),
    .io_in_c_bits_opcode(monitor_1_io_in_c_bits_opcode),
    .io_in_c_bits_param(monitor_1_io_in_c_bits_param),
    .io_in_c_bits_size(monitor_1_io_in_c_bits_size),
    .io_in_c_bits_source(monitor_1_io_in_c_bits_source),
    .io_in_c_bits_address(monitor_1_io_in_c_bits_address),
    .io_in_d_ready(monitor_1_io_in_d_ready),
    .io_in_d_valid(monitor_1_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_1_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_1_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_1_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_1_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_1_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_1_io_in_d_bits_corrupt),
    .io_in_e_ready(monitor_1_io_in_e_ready),
    .io_in_e_valid(monitor_1_io_in_e_valid),
    .io_in_e_bits_sink(monitor_1_io_in_e_bits_sink)
  );
  assign auto_in_1_a_ready = _bundleIn_0_a_ready_T_1 & ~bypass;
  assign auto_in_1_c_ready = auto_out_c_ready & _bundleIn_1_bvalid_T;
  assign auto_in_1_d_valid = auto_out_d_valid & _bundleIn_1_a_ready_T_2;
  assign auto_in_1_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_1_d_bits_param = auto_out_d_bits_param;
  assign auto_in_1_d_bits_size = auto_out_d_bits_size;
  assign auto_in_1_d_bits_source = auto_out_d_bits_source;
  assign auto_in_1_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_1_d_bits_data = auto_out_d_bits_data;
  assign auto_in_1_e_ready = auto_out_e_ready & _bundleIn_1_bvalid_T;
  assign auto_out_a_valid = ~stall & _bundleOut_0_a_valid_T_1;
  assign auto_out_a_bits_opcode = bypass ? 3'h0 : auto_in_1_a_bits_opcode;
  assign auto_out_a_bits_param = bypass ? 3'h0 : auto_in_1_a_bits_param;
  assign auto_out_a_bits_size = bypass ? 3'h0 : auto_in_1_a_bits_size;
  assign auto_out_a_bits_source = bypass ? 6'h0 : auto_in_1_a_bits_source;
  assign auto_out_a_bits_address = bypass ? 32'h0 : auto_in_1_a_bits_address;
  assign auto_out_a_bits_mask = bypass ? 4'h0 : auto_in_1_a_bits_mask;
  assign auto_out_a_bits_data = bypass ? 32'h0 : auto_in_1_a_bits_data;
  assign auto_out_c_valid = bypass_c ? 1'h0 : auto_in_1_c_valid;
  assign auto_out_c_bits_opcode = bypass_c ? 3'h4 : auto_in_1_c_bits_opcode;
  assign auto_out_c_bits_param = bypass_c ? 3'h5 : auto_in_1_c_bits_param;
  assign auto_out_c_bits_size = bypass_c ? 3'h0 : auto_in_1_c_bits_size;
  assign auto_out_c_bits_source = bypass_c ? 6'h0 : auto_in_1_c_bits_source;
  assign auto_out_c_bits_address = bypass_c ? 32'h0 : auto_in_1_c_bits_address;
  assign auto_out_d_ready = bypass | auto_in_1_d_ready;
  assign auto_out_e_valid = bypass_c ? 1'h0 : auto_in_1_e_valid;
  assign auto_out_e_bits_sink = bypass_c ? 1'h0 : auto_in_1_e_bits_sink;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_d_valid = auto_out_d_valid & bypass;
  assign monitor_io_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign monitor_io_in_d_bits_param = auto_out_d_bits_param;
  assign monitor_io_in_d_bits_size = auto_out_d_bits_size;
  assign monitor_io_in_d_bits_source = auto_out_d_bits_source[0];
  assign monitor_io_in_d_bits_denied = auto_out_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign monitor_1_clock = clock;
  assign monitor_1_reset = reset;
  assign monitor_1_io_in_a_ready = _bundleIn_0_a_ready_T_1 & ~bypass;
  assign monitor_1_io_in_a_valid = auto_in_1_a_valid;
  assign monitor_1_io_in_a_bits_opcode = auto_in_1_a_bits_opcode;
  assign monitor_1_io_in_a_bits_param = auto_in_1_a_bits_param;
  assign monitor_1_io_in_a_bits_size = auto_in_1_a_bits_size;
  assign monitor_1_io_in_a_bits_source = auto_in_1_a_bits_source;
  assign monitor_1_io_in_a_bits_address = auto_in_1_a_bits_address;
  assign monitor_1_io_in_a_bits_mask = auto_in_1_a_bits_mask;
  assign monitor_1_io_in_c_ready = auto_out_c_ready & _bundleIn_1_bvalid_T;
  assign monitor_1_io_in_c_valid = auto_in_1_c_valid;
  assign monitor_1_io_in_c_bits_opcode = auto_in_1_c_bits_opcode;
  assign monitor_1_io_in_c_bits_param = auto_in_1_c_bits_param;
  assign monitor_1_io_in_c_bits_size = auto_in_1_c_bits_size;
  assign monitor_1_io_in_c_bits_source = auto_in_1_c_bits_source;
  assign monitor_1_io_in_c_bits_address = auto_in_1_c_bits_address;
  assign monitor_1_io_in_d_ready = auto_in_1_d_ready;
  assign monitor_1_io_in_d_valid = auto_out_d_valid & _bundleIn_1_a_ready_T_2;
  assign monitor_1_io_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign monitor_1_io_in_d_bits_param = auto_out_d_bits_param;
  assign monitor_1_io_in_d_bits_size = auto_out_d_bits_size;
  assign monitor_1_io_in_d_bits_source = auto_out_d_bits_source;
  assign monitor_1_io_in_d_bits_denied = auto_out_d_bits_denied;
  assign monitor_1_io_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign monitor_1_io_in_e_ready = auto_out_e_ready & _bundleIn_1_bvalid_T;
  assign monitor_1_io_in_e_valid = auto_in_1_e_valid;
  assign monitor_1_io_in_e_bits_sink = auto_in_1_e_bits_sink;
  always @(posedge clock) begin
    if (reset) begin
      bypass <= io_bypass;
    end else if (next_flight == 8'h0) begin
      bypass <= io_bypass;
    end
    if (reset) begin
      flight <= 8'h0;
    end else begin
      flight <= next_flight;
    end
    if (reset) begin
      stall_counter <= 4'h0;
    end else if (_T) begin
      if (stall_first) begin
        if (beats1_opdata) begin
          stall_counter <= beats1_decode;
        end else begin
          stall_counter <= 4'h0;
        end
      end else begin
        stall_counter <= stall_counter1;
      end
    end
    if (reset) begin
      counter <= 4'h0;
    end else if (_T) begin
      if (a_first) begin
        if (beats1_opdata) begin
          counter <= beats1_decode;
        end else begin
          counter <= 4'h0;
        end
      end else begin
        counter <= counter1;
      end
    end
    divertprobes <= reset | divertprobes & ~(_divertprobes_T & (auto_in_1_a_bits_opcode == 3'h6 |
      auto_in_1_a_bits_opcode == 3'h7));
    if (reset) begin
      counter_2 <= 4'h0;
    end else if (_T_2) begin
      if (c_first) begin
        if (beats1_opdata_2) begin
          counter_2 <= beats1_decode_2;
        end else begin
          counter_2 <= 4'h0;
        end
      end else begin
        counter_2 <= counter1_2;
      end
    end
    if (reset) begin
      counter_3 <= 4'h0;
    end else if (_T_3) begin
      if (d_first) begin
        if (beats1_opdata_3) begin
          counter_3 <= beats1_decode_3;
        end else begin
          counter_3 <= 4'h0;
        end
      end else begin
        counter_3 <= counter1_3;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  bypass = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  flight = _RAND_1[7:0];
  _RAND_2 = {1{`RANDOM}};
  stall_counter = _RAND_2[3:0];
  _RAND_3 = {1{`RANDOM}};
  counter = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  divertprobes = _RAND_4[0:0];
  _RAND_5 = {1{`RANDOM}};
  counter_2 = _RAND_5[3:0];
  _RAND_6 = {1{`RANDOM}};
  counter_3 = _RAND_6[3:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_7(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_size,
  input  [3:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [3:0]  io_in_a_bits_mask,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [3:0]  io_in_d_bits_source,
  input  [4:0]  io_in_d_bits_sink,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [63:0] _RAND_13;
  reg [63:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [63:0] _RAND_19;
  reg [31:0] _RAND_20;
  reg [31:0] _RAND_21;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = ~io_in_a_bits_source[3];
  wire  source_ok = _source_ok_T_1 | io_in_a_bits_source[3];
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_71 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_71;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire  mask_sizeOH_shiftAmount = io_in_a_bits_size[0];
  wire [1:0] _mask_sizeOH_T_1 = 2'h1 << mask_sizeOH_shiftAmount;
  wire [1:0] mask_sizeOH = _mask_sizeOH_T_1 | 2'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h2;
  wire  mask_size = mask_sizeOH[1];
  wire  mask_bit = io_in_a_bits_address[1];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[0];
  wire  mask_bit_1 = io_in_a_bits_address[0];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_lo_lo = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_lo_hi = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_hi_lo = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_hi_hi = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire [3:0] mask = {mask_hi_hi,mask_hi_lo,mask_lo_hi,mask_lo_lo};
  wire  _T_34 = io_in_a_bits_opcode == 3'h6;
  wire  _T_60 = 3'h6 == io_in_a_bits_size;
  wire [31:0] _T_62 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_63 = {1'b0,$signed(_T_62)};
  wire [32:0] _T_65 = $signed(_T_63) & -33'sh10000000;
  wire  _T_66 = $signed(_T_65) == 33'sh0;
  wire [31:0] _T_67 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_68 = {1'b0,$signed(_T_67)};
  wire [32:0] _T_70 = $signed(_T_68) & -33'sh20000000;
  wire  _T_71 = $signed(_T_70) == 33'sh0;
  wire [31:0] _T_72 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_73 = {1'b0,$signed(_T_72)};
  wire [32:0] _T_75 = $signed(_T_73) & -33'sh40000000;
  wire  _T_76 = $signed(_T_75) == 33'sh0;
  wire [31:0] _T_77 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_78 = {1'b0,$signed(_T_77)};
  wire [32:0] _T_80 = $signed(_T_78) & -33'sh40000000;
  wire  _T_81 = $signed(_T_80) == 33'sh0;
  wire [31:0] _T_82 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_83 = {1'b0,$signed(_T_82)};
  wire [32:0] _T_85 = $signed(_T_83) & -33'sh20000000;
  wire  _T_86 = $signed(_T_85) == 33'sh0;
  wire  _T_90 = _T_66 | _T_71 | _T_76 | _T_81 | _T_86;
  wire  _T_91 = _T_60 & _T_90;
  wire  _T_94 = source_ok & _T_91;
  wire [32:0] _T_120 = $signed(_T_78) & -33'sh80000000;
  wire  _T_121 = $signed(_T_120) == 33'sh0;
  wire  _T_124 = _T_66 | _T_71 | _T_76 | _T_121;
  wire [3:0] _T_145 = ~io_in_a_bits_mask;
  wire  _T_146 = _T_145 == 4'h0;
  wire  _T_154 = io_in_a_bits_opcode == 3'h7;
  wire  _T_278 = io_in_a_bits_opcode == 3'h4;
  wire  _T_301 = io_in_a_bits_size <= 3'h6;
  wire  _T_327 = _T_301 & _T_124;
  wire  _T_342 = io_in_a_bits_mask == mask;
  wire  _T_350 = io_in_a_bits_opcode == 3'h0;
  wire  _T_398 = source_ok & _T_327;
  wire  _T_416 = io_in_a_bits_opcode == 3'h1;
  wire [3:0] _T_478 = ~mask;
  wire [3:0] _T_479 = io_in_a_bits_mask & _T_478;
  wire  _T_480 = _T_479 == 4'h0;
  wire  _T_484 = io_in_a_bits_opcode == 3'h2;
  wire  _T_504 = io_in_a_bits_size <= 3'h3;
  wire  _T_530 = _T_504 & _T_124;
  wire  _T_532 = source_ok & _T_530;
  wire  _T_550 = io_in_a_bits_opcode == 3'h3;
  wire  _T_616 = io_in_a_bits_opcode == 3'h5;
  wire  _T_686 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_13 = ~io_in_d_bits_source[3];
  wire  source_ok_1 = _source_ok_T_13 | io_in_d_bits_source[3];
  wire  _T_690 = io_in_d_bits_opcode == 3'h6;
  wire  _T_694 = io_in_d_bits_size >= 3'h2;
  wire  _T_698 = io_in_d_bits_param == 2'h0;
  wire  _T_702 = ~io_in_d_bits_corrupt;
  wire  _T_706 = ~io_in_d_bits_denied;
  wire  _T_710 = io_in_d_bits_opcode == 3'h4;
  wire  _T_721 = io_in_d_bits_param <= 2'h2;
  wire  _T_725 = io_in_d_bits_param != 2'h2;
  wire  _T_738 = io_in_d_bits_opcode == 3'h5;
  wire  _T_758 = _T_706 | io_in_d_bits_corrupt;
  wire  _T_767 = io_in_d_bits_opcode == 3'h0;
  wire  _T_784 = io_in_d_bits_opcode == 3'h1;
  wire  _T_802 = io_in_d_bits_opcode == 3'h2;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [3:0] a_first_beats1_decode = is_aligned_mask[5:2];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [3:0] a_first_counter;
  wire [3:0] a_first_counter1 = a_first_counter - 4'h1;
  wire  a_first = a_first_counter == 4'h0;
  reg [2:0] opcode;
  reg [2:0] size;
  reg [3:0] source;
  reg [31:0] address;
  wire  _T_832 = io_in_a_valid & ~a_first;
  wire  _T_833 = io_in_a_bits_opcode == opcode;
  wire  _T_841 = io_in_a_bits_size == size;
  wire  _T_845 = io_in_a_bits_source == source;
  wire  _T_849 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [3:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:2];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [3:0] d_first_counter;
  wire [3:0] d_first_counter1 = d_first_counter - 4'h1;
  wire  d_first = d_first_counter == 4'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [3:0] source_1;
  reg [4:0] sink;
  reg  denied;
  wire  _T_856 = io_in_d_valid & ~d_first;
  wire  _T_857 = io_in_d_bits_opcode == opcode_1;
  wire  _T_861 = io_in_d_bits_param == param_1;
  wire  _T_865 = io_in_d_bits_size == size_1;
  wire  _T_869 = io_in_d_bits_source == source_1;
  wire  _T_873 = io_in_d_bits_sink == sink;
  wire  _T_877 = io_in_d_bits_denied == denied;
  reg [15:0] inflight;
  reg [63:0] inflight_opcodes;
  reg [63:0] inflight_sizes;
  reg [3:0] a_first_counter_1;
  wire [3:0] a_first_counter1_1 = a_first_counter_1 - 4'h1;
  wire  a_first_1 = a_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_1;
  wire [3:0] d_first_counter1_1 = d_first_counter_1 - 4'h1;
  wire  d_first_1 = d_first_counter_1 == 4'h0;
  wire [5:0] _GEN_72 = {io_in_d_bits_source, 2'h0};
  wire [6:0] _a_opcode_lookup_T = {{1'd0}, _GEN_72};
  wire [63:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [63:0] _GEN_73 = {{48'd0}, _a_opcode_lookup_T_5};
  wire [63:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_73;
  wire [63:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[63:1]};
  wire [63:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [63:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_73;
  wire [63:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[63:1]};
  wire  _T_883 = io_in_a_valid & a_first_1;
  wire [15:0] _a_set_wo_ready_T = 16'h1 << io_in_a_bits_source;
  wire [15:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 16'h0;
  wire  _T_886 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [5:0] _GEN_78 = {io_in_a_bits_source, 2'h0};
  wire [6:0] _a_opcodes_set_T = {{1'd0}, _GEN_78};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_79 = {{127'd0}, a_opcodes_set_interm};
  wire [130:0] _a_opcodes_set_T_1 = _GEN_79 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_81 = {{127'd0}, a_sizes_set_interm};
  wire [130:0] _a_sizes_set_T_1 = _GEN_81 << _a_opcodes_set_T;
  wire [15:0] _T_888 = inflight >> io_in_a_bits_source;
  wire  _T_890 = ~_T_888[0];
  wire [15:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 16'h0;
  wire [130:0] _GEN_19 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 131'h0;
  wire [130:0] _GEN_20 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 131'h0;
  wire  _T_894 = io_in_d_valid & d_first_1;
  wire  _T_896 = ~_T_690;
  wire  _T_897 = io_in_d_valid & d_first_1 & ~_T_690;
  wire [15:0] _d_clr_wo_ready_T = 16'h1 << io_in_d_bits_source;
  wire [15:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_690 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_83 = {{127'd0}, _a_opcode_lookup_T_5};
  wire [142:0] _d_opcodes_clr_T_5 = _GEN_83 << _a_opcode_lookup_T;
  wire [15:0] d_clr = _d_first_T & d_first_1 & _T_896 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_23 = _d_first_T & d_first_1 & _T_896 ? _d_opcodes_clr_T_5 : 143'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_883 & io_in_a_bits_source == io_in_d_bits_source;
  wire [15:0] _T_907 = inflight >> io_in_d_bits_source;
  wire  _T_909 = _T_907[0] | same_cycle_resp;
  wire [2:0] _GEN_27 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_28 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_27;
  wire [2:0] _GEN_29 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_28;
  wire [2:0] _GEN_30 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_29;
  wire [2:0] _GEN_31 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_30;
  wire [2:0] _GEN_32 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_31;
  wire [2:0] _GEN_39 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_30;
  wire [2:0] _GEN_40 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_39;
  wire  _T_914 = io_in_d_bits_opcode == _GEN_40;
  wire  _T_915 = io_in_d_bits_opcode == _GEN_32 | _T_914;
  wire  _T_919 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_43 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_44 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_43;
  wire [2:0] _GEN_45 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_44;
  wire [2:0] _GEN_46 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_45;
  wire [2:0] _GEN_47 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_46;
  wire [2:0] _GEN_48 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_47;
  wire [2:0] _GEN_55 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_46;
  wire [2:0] _GEN_56 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_55;
  wire  _T_926 = io_in_d_bits_opcode == _GEN_56;
  wire  _T_927 = io_in_d_bits_opcode == _GEN_48 | _T_926;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_86 = {{1'd0}, io_in_d_bits_size};
  wire  _T_931 = _GEN_86 == a_size_lookup;
  wire  _T_941 = _T_894 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_896;
  wire  _T_943 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_950 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [15:0] _inflight_T = inflight | a_set;
  wire [15:0] _inflight_T_1 = ~d_clr;
  wire [15:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [63:0] a_opcodes_set = _GEN_19[63:0];
  wire [63:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [63:0] d_opcodes_clr = _GEN_23[63:0];
  wire [63:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [63:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [63:0] a_sizes_set = _GEN_20[63:0];
  wire [63:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [63:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_959 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [15:0] inflight_1;
  reg [63:0] inflight_sizes_1;
  reg [3:0] d_first_counter_2;
  wire [3:0] d_first_counter1_2 = d_first_counter_2 - 4'h1;
  wire  d_first_2 = d_first_counter_2 == 4'h0;
  wire [63:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [63:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_73;
  wire [63:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[63:1]};
  wire  _T_985 = io_in_d_valid & d_first_2 & _T_690;
  wire [15:0] d_clr_1 = _d_first_T & d_first_2 & _T_690 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_68 = _d_first_T & d_first_2 & _T_690 ? _d_opcodes_clr_T_5 : 143'h0;
  wire [15:0] _T_993 = inflight_1 >> io_in_d_bits_source;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_1003 = _GEN_86 == c_size_lookup;
  wire [15:0] _inflight_T_4 = ~d_clr_1;
  wire [15:0] _inflight_T_5 = inflight_1 & _inflight_T_4;
  wire [63:0] d_opcodes_clr_1 = _GEN_68[63:0];
  wire [63:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [63:0] _inflight_sizes_T_5 = inflight_sizes_1 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_1028 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 4'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 4'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      sink <= io_in_d_bits_sink;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      inflight <= 16'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 64'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 64'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 4'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 4'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 16'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 64'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      d_first_counter_2 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 4'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_94 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_94 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_146 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_146 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_T_94 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_T_94 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_T_146 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_154 & ~(_T_146 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(_T_327 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(_T_327 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(_T_342 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_278 & ~(_T_342 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(_T_398 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(_T_398 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(_T_342 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_350 & ~(_T_342 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(_T_398 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(_T_398 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(_T_480 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_416 & ~(_T_480 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(_T_532 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(_T_532 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(_T_342 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_484 & ~(_T_342 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(_T_532 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(_T_532 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(_T_342 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_550 & ~(_T_342 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(_T_398 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(_T_398 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(_T_342 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_616 & ~(_T_342 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_686 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_686 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_694 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_694 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_698 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_698 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_702 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_702 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_706 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_690 & ~(_T_706 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_694 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_694 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_721 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_721 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_725 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_725 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_702 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_710 & ~(_T_702 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_694 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_694 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_721 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_721 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_725 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_725 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_758 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_738 & ~(_T_758 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(_T_698 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(_T_698 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(_T_702 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_767 & ~(_T_702 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(_T_698 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(_T_698 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(_T_758 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_784 & ~(_T_758 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(_T_698 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(_T_698 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(_T_702 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_802 & ~(_T_702 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_832 & ~(_T_833 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_832 & ~(_T_833 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_832 & ~(_T_841 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_832 & ~(_T_841 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_832 & ~(_T_845 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_832 & ~(_T_845 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_832 & ~(_T_849 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_832 & ~(_T_849 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_857 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_857 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_861 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_861 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_865 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_865 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_869 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_869 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_873 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel sink changed with multibeat operation (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_873 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_856 & ~(_T_877 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_856 & ~(_T_877 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_886 & ~(_T_890 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_886 & ~(_T_890 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_897 & ~(_T_909 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_897 & ~(_T_909 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_897 & same_cycle_resp & ~(_T_915 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_897 & same_cycle_resp & ~(_T_915 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_897 & same_cycle_resp & ~(_T_919 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_897 & same_cycle_resp & ~(_T_919 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_897 & ~same_cycle_resp & ~(_T_927 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_897 & ~same_cycle_resp & ~(_T_927 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_897 & ~same_cycle_resp & ~(_T_931 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_897 & ~same_cycle_resp & ~(_T_931 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_941 & ~(_T_943 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_941 & ~(_T_943 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_950 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 8 (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_950 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_959 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_959 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_985 & ~(_T_993[0] | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_985 & ~(_T_993[0] | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_985 & ~(_T_1003 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLink.scala:66:13)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_985 & ~(_T_1003 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1028 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLink.scala:66:13)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1028 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  size = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  source = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  address = _RAND_4[31:0];
  _RAND_5 = {1{`RANDOM}};
  d_first_counter = _RAND_5[3:0];
  _RAND_6 = {1{`RANDOM}};
  opcode_1 = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  param_1 = _RAND_7[1:0];
  _RAND_8 = {1{`RANDOM}};
  size_1 = _RAND_8[2:0];
  _RAND_9 = {1{`RANDOM}};
  source_1 = _RAND_9[3:0];
  _RAND_10 = {1{`RANDOM}};
  sink = _RAND_10[4:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  inflight = _RAND_12[15:0];
  _RAND_13 = {2{`RANDOM}};
  inflight_opcodes = _RAND_13[63:0];
  _RAND_14 = {2{`RANDOM}};
  inflight_sizes = _RAND_14[63:0];
  _RAND_15 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_15[3:0];
  _RAND_16 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_16[3:0];
  _RAND_17 = {1{`RANDOM}};
  watchdog = _RAND_17[31:0];
  _RAND_18 = {1{`RANDOM}};
  inflight_1 = _RAND_18[15:0];
  _RAND_19 = {2{`RANDOM}};
  inflight_sizes_1 = _RAND_19[63:0];
  _RAND_20 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_20[3:0];
  _RAND_21 = {1{`RANDOM}};
  watchdog_1 = _RAND_21[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_PartialInjector(
  input         clock,
  input         reset,
  input         io_i_last,
  output        io_o_last,
  output        io_i_ready,
  input         io_i_valid,
  input  [2:0]  io_i_bits_opcode,
  input  [2:0]  io_i_bits_param,
  input  [2:0]  io_i_bits_size,
  input  [3:0]  io_i_bits_source,
  input  [31:0] io_i_bits_address,
  input  [3:0]  io_i_bits_mask,
  input  [31:0] io_i_bits_data,
  input         io_o_ready,
  output        io_o_valid,
  output [2:0]  io_o_bits_opcode,
  output [2:0]  io_o_bits_param,
  output [2:0]  io_o_bits_size,
  output [3:0]  io_o_bits_source,
  output [31:0] io_o_bits_address,
  output [31:0] io_o_bits_data
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_REG_INIT
  reg [3:0] state;
  reg [31:0] shift;
  wire  full = state[3];
  wire  partial = io_i_bits_opcode == 3'h1;
  reg  last;
  wire [7:0] mixed_lo_lo_hi = io_i_bits_data[7:0];
  wire [7:0] mixed_lo_hi_hi = io_i_bits_data[15:8];
  wire [7:0] mixed_hi_lo_hi = io_i_bits_data[23:16];
  wire [7:0] mixed_hi_hi_hi = io_i_bits_data[31:24];
  wire  mixed_lo_lo_lo = io_i_bits_mask[0];
  wire  mixed_lo_hi_lo = io_i_bits_mask[1];
  wire  mixed_hi_lo_lo = io_i_bits_mask[2];
  wire  mixed_hi_hi_lo = io_i_bits_mask[3];
  wire [35:0] mixed = {mixed_hi_hi_hi,mixed_hi_hi_lo,mixed_hi_lo_hi,mixed_hi_lo_lo,mixed_lo_hi_hi,mixed_lo_hi_lo,
    mixed_lo_lo_hi,mixed_lo_lo_lo};
  wire [5:0] _wide_T = {state, 2'h0};
  wire [98:0] _GEN_11 = {{63'd0}, mixed};
  wire [98:0] _wide_T_1 = _GEN_11 << _wide_T;
  wire [98:0] _GEN_12 = {{67'd0}, shift};
  wire [98:0] wide = _GEN_12 | _wide_T_1;
  wire  _T_1 = ~last;
  wire  _GEN_0 = (io_i_last | full) & ~last ? 1'h0 : io_o_ready;
  wire  _T_3 = io_o_ready & io_o_valid;
  wire [3:0] _state_T_1 = state + 4'h1;
  wire [66:0] _GEN_2 = full | last ? 67'h0 : wide[98:32];
  wire [66:0] _GEN_3 = _T_3 ? _GEN_2 : {{35'd0}, shift};
  wire [98:0] _GEN_6 = partial ? wide : {{67'd0}, io_i_bits_data};
  wire [66:0] _GEN_8 = partial ? _GEN_3 : {{35'd0}, shift};
  assign io_o_last = partial ? last : io_i_last;
  assign io_i_ready = partial ? _GEN_0 : io_o_ready;
  assign io_o_valid = io_i_valid;
  assign io_o_bits_opcode = io_i_bits_opcode;
  assign io_o_bits_param = io_i_bits_param;
  assign io_o_bits_size = io_i_bits_size;
  assign io_o_bits_source = io_i_bits_source;
  assign io_o_bits_address = io_i_bits_address;
  assign io_o_bits_data = _GEN_6[31:0];
  always @(posedge clock) begin
    if (reset) begin
      state <= 4'h0;
    end else if (partial) begin
      if (_T_3) begin
        if (full | last) begin
          state <= 4'h0;
        end else begin
          state <= _state_T_1;
        end
      end
    end
    if (reset) begin
      shift <= 32'h0;
    end else begin
      shift <= _GEN_8[31:0];
    end
    if (reset) begin
      last <= 1'h0;
    end else if (partial) begin
      if (_T_3) begin
        last <= io_i_last & _T_1;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  state = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  shift = _RAND_1[31:0];
  _RAND_2 = {1{`RANDOM}};
  last = _RAND_2[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Queue_2(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [2:0]  io_enq_bits_size,
  input  [3:0]  io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input  [3:0]  io_enq_bits_mask,
  input  [31:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [2:0]  io_deq_bits_param,
  output [2:0]  io_deq_bits_size,
  output [3:0]  io_deq_bits_source,
  output [31:0] io_deq_bits_address,
  output [3:0]  io_deq_bits_mask,
  output [31:0] io_deq_bits_data
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_7;
`endif // RANDOMIZE_REG_INIT
  reg [2:0] ram_opcode [0:0];
  wire [2:0] ram_opcode_io_deq_bits_MPORT_data;
  wire  ram_opcode_io_deq_bits_MPORT_addr;
  wire [2:0] ram_opcode_MPORT_data;
  wire  ram_opcode_MPORT_addr;
  wire  ram_opcode_MPORT_mask;
  wire  ram_opcode_MPORT_en;
  reg [2:0] ram_param [0:0];
  wire [2:0] ram_param_io_deq_bits_MPORT_data;
  wire  ram_param_io_deq_bits_MPORT_addr;
  wire [2:0] ram_param_MPORT_data;
  wire  ram_param_MPORT_addr;
  wire  ram_param_MPORT_mask;
  wire  ram_param_MPORT_en;
  reg [2:0] ram_size [0:0];
  wire [2:0] ram_size_io_deq_bits_MPORT_data;
  wire  ram_size_io_deq_bits_MPORT_addr;
  wire [2:0] ram_size_MPORT_data;
  wire  ram_size_MPORT_addr;
  wire  ram_size_MPORT_mask;
  wire  ram_size_MPORT_en;
  reg [3:0] ram_source [0:0];
  wire [3:0] ram_source_io_deq_bits_MPORT_data;
  wire  ram_source_io_deq_bits_MPORT_addr;
  wire [3:0] ram_source_MPORT_data;
  wire  ram_source_MPORT_addr;
  wire  ram_source_MPORT_mask;
  wire  ram_source_MPORT_en;
  reg [31:0] ram_address [0:0];
  wire [31:0] ram_address_io_deq_bits_MPORT_data;
  wire  ram_address_io_deq_bits_MPORT_addr;
  wire [31:0] ram_address_MPORT_data;
  wire  ram_address_MPORT_addr;
  wire  ram_address_MPORT_mask;
  wire  ram_address_MPORT_en;
  reg [3:0] ram_mask [0:0];
  wire [3:0] ram_mask_io_deq_bits_MPORT_data;
  wire  ram_mask_io_deq_bits_MPORT_addr;
  wire [3:0] ram_mask_MPORT_data;
  wire  ram_mask_MPORT_addr;
  wire  ram_mask_MPORT_mask;
  wire  ram_mask_MPORT_en;
  reg [31:0] ram_data [0:0];
  wire [31:0] ram_data_io_deq_bits_MPORT_data;
  wire  ram_data_io_deq_bits_MPORT_addr;
  wire [31:0] ram_data_MPORT_data;
  wire  ram_data_MPORT_addr;
  wire  ram_data_MPORT_mask;
  wire  ram_data_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  _do_enq_T = io_enq_ready & io_enq_valid;
  wire  _do_deq_T = io_deq_ready & io_deq_valid;
  wire  _GEN_14 = io_deq_ready ? 1'h0 : _do_enq_T;
  wire  do_enq = empty ? _GEN_14 : _do_enq_T;
  wire  do_deq = empty ? 1'h0 : _do_deq_T;
  assign ram_opcode_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_opcode_io_deq_bits_MPORT_data = ram_opcode[ram_opcode_io_deq_bits_MPORT_addr];
  assign ram_opcode_MPORT_data = io_enq_bits_opcode;
  assign ram_opcode_MPORT_addr = 1'h0;
  assign ram_opcode_MPORT_mask = 1'h1;
  assign ram_opcode_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_param_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_param_io_deq_bits_MPORT_data = ram_param[ram_param_io_deq_bits_MPORT_addr];
  assign ram_param_MPORT_data = 3'h0;
  assign ram_param_MPORT_addr = 1'h0;
  assign ram_param_MPORT_mask = 1'h1;
  assign ram_param_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_size_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_size_io_deq_bits_MPORT_data = ram_size[ram_size_io_deq_bits_MPORT_addr];
  assign ram_size_MPORT_data = io_enq_bits_size;
  assign ram_size_MPORT_addr = 1'h0;
  assign ram_size_MPORT_mask = 1'h1;
  assign ram_size_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_source_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_source_io_deq_bits_MPORT_data = ram_source[ram_source_io_deq_bits_MPORT_addr];
  assign ram_source_MPORT_data = io_enq_bits_source;
  assign ram_source_MPORT_addr = 1'h0;
  assign ram_source_MPORT_mask = 1'h1;
  assign ram_source_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_address_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_address_io_deq_bits_MPORT_data = ram_address[ram_address_io_deq_bits_MPORT_addr];
  assign ram_address_MPORT_data = io_enq_bits_address;
  assign ram_address_MPORT_addr = 1'h0;
  assign ram_address_MPORT_mask = 1'h1;
  assign ram_address_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_mask_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_mask_io_deq_bits_MPORT_data = ram_mask[ram_mask_io_deq_bits_MPORT_addr];
  assign ram_mask_MPORT_data = io_enq_bits_mask;
  assign ram_mask_MPORT_addr = 1'h0;
  assign ram_mask_MPORT_mask = 1'h1;
  assign ram_mask_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_data_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_data_io_deq_bits_MPORT_data = ram_data[ram_data_io_deq_bits_MPORT_addr];
  assign ram_data_MPORT_data = io_enq_bits_data;
  assign ram_data_MPORT_addr = 1'h0;
  assign ram_data_MPORT_mask = 1'h1;
  assign ram_data_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = io_enq_valid | ~empty;
  assign io_deq_bits_opcode = empty ? io_enq_bits_opcode : ram_opcode_io_deq_bits_MPORT_data;
  assign io_deq_bits_param = empty ? 3'h0 : ram_param_io_deq_bits_MPORT_data;
  assign io_deq_bits_size = empty ? io_enq_bits_size : ram_size_io_deq_bits_MPORT_data;
  assign io_deq_bits_source = empty ? io_enq_bits_source : ram_source_io_deq_bits_MPORT_data;
  assign io_deq_bits_address = empty ? io_enq_bits_address : ram_address_io_deq_bits_MPORT_data;
  assign io_deq_bits_mask = empty ? io_enq_bits_mask : ram_mask_io_deq_bits_MPORT_data;
  assign io_deq_bits_data = empty ? io_enq_bits_data : ram_data_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_opcode_MPORT_en & ram_opcode_MPORT_mask) begin
      ram_opcode[ram_opcode_MPORT_addr] <= ram_opcode_MPORT_data;
    end
    if(ram_param_MPORT_en & ram_param_MPORT_mask) begin
      ram_param[ram_param_MPORT_addr] <= ram_param_MPORT_data;
    end
    if(ram_size_MPORT_en & ram_size_MPORT_mask) begin
      ram_size[ram_size_MPORT_addr] <= ram_size_MPORT_data;
    end
    if(ram_source_MPORT_en & ram_source_MPORT_mask) begin
      ram_source[ram_source_MPORT_addr] <= ram_source_MPORT_data;
    end
    if(ram_address_MPORT_en & ram_address_MPORT_mask) begin
      ram_address[ram_address_MPORT_addr] <= ram_address_MPORT_data;
    end
    if(ram_mask_MPORT_en & ram_mask_MPORT_mask) begin
      ram_mask[ram_mask_MPORT_addr] <= ram_mask_MPORT_data;
    end
    if(ram_data_MPORT_en & ram_data_MPORT_mask) begin
      ram_data[ram_data_MPORT_addr] <= ram_data_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      if (empty) begin
        if (io_deq_ready) begin
          maybe_full <= 1'h0;
        end else begin
          maybe_full <= _do_enq_T;
        end
      end else begin
        maybe_full <= _do_enq_T;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_opcode[initvar] = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_param[initvar] = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_size[initvar] = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_source[initvar] = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_address[initvar] = _RAND_4[31:0];
  _RAND_5 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_mask[initvar] = _RAND_5[3:0];
  _RAND_6 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_data[initvar] = _RAND_6[31:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_7 = {1{`RANDOM}};
  maybe_full = _RAND_7[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_SinkA(
  input         clock,
  input         reset,
  output        io_a_ready,
  input         io_a_valid,
  input  [2:0]  io_a_bits_opcode,
  input  [2:0]  io_a_bits_size,
  input  [3:0]  io_a_bits_source,
  input  [31:0] io_a_bits_address,
  input  [3:0]  io_a_bits_mask,
  input  [31:0] io_a_bits_data,
  input         io_q_ready,
  output        io_q_valid,
  output [31:0] io_q_bits_data,
  output        io_q_bits_last,
  output [6:0]  io_q_bits_beats
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
`endif // RANDOMIZE_REG_INIT
  wire  inject_clock;
  wire  inject_reset;
  wire  inject_io_i_last;
  wire  inject_io_o_last;
  wire  inject_io_i_ready;
  wire  inject_io_i_valid;
  wire [2:0] inject_io_i_bits_opcode;
  wire [2:0] inject_io_i_bits_param;
  wire [2:0] inject_io_i_bits_size;
  wire [3:0] inject_io_i_bits_source;
  wire [31:0] inject_io_i_bits_address;
  wire [3:0] inject_io_i_bits_mask;
  wire [31:0] inject_io_i_bits_data;
  wire  inject_io_o_ready;
  wire  inject_io_o_valid;
  wire [2:0] inject_io_o_bits_opcode;
  wire [2:0] inject_io_o_bits_param;
  wire [2:0] inject_io_o_bits_size;
  wire [3:0] inject_io_o_bits_source;
  wire [31:0] inject_io_o_bits_address;
  wire [31:0] inject_io_o_bits_data;
  wire  inject_io_i_q_clock;
  wire  inject_io_i_q_reset;
  wire  inject_io_i_q_io_enq_ready;
  wire  inject_io_i_q_io_enq_valid;
  wire [2:0] inject_io_i_q_io_enq_bits_opcode;
  wire [2:0] inject_io_i_q_io_enq_bits_size;
  wire [3:0] inject_io_i_q_io_enq_bits_source;
  wire [31:0] inject_io_i_q_io_enq_bits_address;
  wire [3:0] inject_io_i_q_io_enq_bits_mask;
  wire [31:0] inject_io_i_q_io_enq_bits_data;
  wire  inject_io_i_q_io_deq_ready;
  wire  inject_io_i_q_io_deq_valid;
  wire [2:0] inject_io_i_q_io_deq_bits_opcode;
  wire [2:0] inject_io_i_q_io_deq_bits_param;
  wire [2:0] inject_io_i_q_io_deq_bits_size;
  wire [3:0] inject_io_i_q_io_deq_bits_source;
  wire [31:0] inject_io_i_q_io_deq_bits_address;
  wire [3:0] inject_io_i_q_io_deq_bits_mask;
  wire [31:0] inject_io_i_q_io_deq_bits_data;
  wire  _inject_io_i_last_T = inject_io_i_ready & inject_io_i_valid;
  wire [12:0] _inject_io_i_last_beats1_decode_T_1 = 13'h3f << inject_io_i_bits_size;
  wire [5:0] _inject_io_i_last_beats1_decode_T_3 = ~_inject_io_i_last_beats1_decode_T_1[5:0];
  wire [3:0] inject_io_i_last_beats1_decode = _inject_io_i_last_beats1_decode_T_3[5:2];
  wire  inject_io_i_last_beats1_opdata = ~inject_io_i_bits_opcode[2];
  wire [3:0] inject_io_i_last_beats1 = inject_io_i_last_beats1_opdata ? inject_io_i_last_beats1_decode : 4'h0;
  reg [3:0] inject_io_i_last_counter;
  wire [3:0] inject_io_i_last_counter1 = inject_io_i_last_counter - 4'h1;
  wire  inject_io_i_last_first = inject_io_i_last_counter == 4'h0;
  wire  a_hasData = ~inject_io_o_bits_opcode[2];
  wire  a_partial = inject_io_o_bits_opcode == 3'h1;
  reg [1:0] state;
  wire  _T = io_q_ready & io_q_valid;
  wire  _T_1 = 2'h0 == state;
  wire  _T_2 = 2'h1 == state;
  wire  _T_3 = 2'h2 == state;
  wire [1:0] _state_T = a_hasData ? 2'h3 : 2'h0;
  wire  _T_4 = 2'h3 == state;
  wire [1:0] _state_T_2 = ~inject_io_o_last ? 2'h3 : 2'h0;
  wire [1:0] _GEN_1 = _T_4 ? _state_T_2 : state;
  wire [1:0] _GEN_2 = _T_3 ? _state_T : _GEN_1;
  wire [2:0] _GEN_7 = 4'h1 == inject_io_o_bits_source ? 3'h1 : 3'h0;
  wire [2:0] _GEN_8 = 4'h2 == inject_io_o_bits_source ? 3'h2 : _GEN_7;
  wire [2:0] _GEN_9 = 4'h3 == inject_io_o_bits_source ? 3'h3 : _GEN_8;
  wire [2:0] _GEN_10 = 4'h4 == inject_io_o_bits_source ? 3'h4 : _GEN_9;
  wire [2:0] _GEN_11 = 4'h5 == inject_io_o_bits_source ? 3'h5 : _GEN_10;
  wire [2:0] _GEN_12 = 4'h6 == inject_io_o_bits_source ? 3'h6 : _GEN_11;
  wire [2:0] _GEN_13 = 4'h7 == inject_io_o_bits_source ? 3'h7 : _GEN_12;
  wire [2:0] _GEN_14 = 4'h8 == inject_io_o_bits_source ? 3'h0 : _GEN_13;
  wire [2:0] _GEN_15 = 4'h9 == inject_io_o_bits_source ? 3'h1 : _GEN_14;
  wire [2:0] _GEN_16 = 4'ha == inject_io_o_bits_source ? 3'h2 : _GEN_15;
  wire [2:0] _GEN_17 = 4'hb == inject_io_o_bits_source ? 3'h3 : _GEN_16;
  wire [2:0] _GEN_18 = 4'hc == inject_io_o_bits_source ? 3'h4 : _GEN_17;
  wire [2:0] _GEN_19 = 4'hd == inject_io_o_bits_source ? 3'h5 : _GEN_18;
  wire [2:0] _GEN_20 = 4'he == inject_io_o_bits_source ? 3'h6 : _GEN_19;
  wire [2:0] _GEN_21 = 4'hf == inject_io_o_bits_source ? 3'h7 : _GEN_20;
  wire [15:0] header_hi_hi_hi = {{13'd0}, _GEN_21};
  wire [1:0] _GEN_30 = 4'h8 == inject_io_o_bits_source ? 2'h2 : 2'h1;
  wire [1:0] _GEN_31 = 4'h9 == inject_io_o_bits_source ? 2'h2 : _GEN_30;
  wire [1:0] _GEN_32 = 4'ha == inject_io_o_bits_source ? 2'h2 : _GEN_31;
  wire [1:0] _GEN_33 = 4'hb == inject_io_o_bits_source ? 2'h2 : _GEN_32;
  wire [1:0] _GEN_34 = 4'hc == inject_io_o_bits_source ? 2'h2 : _GEN_33;
  wire [1:0] _GEN_35 = 4'hd == inject_io_o_bits_source ? 2'h2 : _GEN_34;
  wire [1:0] _GEN_36 = 4'he == inject_io_o_bits_source ? 2'h2 : _GEN_35;
  wire [1:0] _GEN_37 = 4'hf == inject_io_o_bits_source ? 2'h2 : _GEN_36;
  wire [2:0] header_hi_hi_lo = {{1'd0}, _GEN_37};
  wire [3:0] header_hi_lo = {{1'd0}, inject_io_o_bits_size};
  wire [2:0] header_lo_hi_hi = inject_io_o_bits_param;
  wire [2:0] header_lo_hi_lo = inject_io_o_bits_opcode;
  wire [31:0] header = {header_hi_hi_hi,header_hi_hi_lo,header_hi_lo,header_lo_hi_hi,header_lo_hi_lo,3'h0};
  wire [1:0] _isLastState_T = a_hasData ? 2'h3 : 2'h2;
  wire  isLastState = state == _isLastState_T;
  wire [31:0] _io_q_bits_data_WIRE_1 = inject_io_o_bits_address;
  wire [31:0] _GEN_39 = 2'h1 == state ? _io_q_bits_data_WIRE_1 : header;
  wire [31:0] _GEN_40 = 2'h2 == state ? 32'h0 : _GEN_39;
  wire [31:0] _io_q_bits_data_WIRE_3 = inject_io_o_bits_data;
  wire [2:0] io_q_bits_beats_shiftAmount = header_hi_lo[2:0];
  wire [7:0] _io_q_bits_beats_T_1 = 8'h1 << io_q_bits_beats_shiftAmount;
  wire [3:0] io_q_bits_beats_hi = _io_q_bits_beats_T_1[6:3];
  wire  io_q_bits_beats_lo = inject_io_o_bits_size <= 3'h2;
  wire [4:0] _io_q_bits_beats_T_3 = {io_q_bits_beats_hi,io_q_bits_beats_lo};
  wire [4:0] _io_q_bits_beats_T_4 = a_hasData ? _io_q_bits_beats_T_3 : 5'h0;
  wire [4:0] _io_q_bits_beats_T_6 = _io_q_bits_beats_T_4 + 5'h3;
  wire  io_q_bits_beats_hi_1 = _io_q_bits_beats_T_1[6];
  wire  io_q_bits_beats_lo_1 = inject_io_o_bits_size <= 3'h5;
  wire [1:0] _io_q_bits_beats_T_10 = {io_q_bits_beats_hi_1,io_q_bits_beats_lo_1};
  wire [1:0] _io_q_bits_beats_T_11 = a_partial ? _io_q_bits_beats_T_10 : 2'h0;
  wire [4:0] _GEN_42 = {{3'd0}, _io_q_bits_beats_T_11};
  wire [4:0] _io_q_bits_beats_T_13 = _io_q_bits_beats_T_6 + _GEN_42;
  CHIPLINK_PREFIX_PartialInjector inject (
    .clock(inject_clock),
    .reset(inject_reset),
    .io_i_last(inject_io_i_last),
    .io_o_last(inject_io_o_last),
    .io_i_ready(inject_io_i_ready),
    .io_i_valid(inject_io_i_valid),
    .io_i_bits_opcode(inject_io_i_bits_opcode),
    .io_i_bits_param(inject_io_i_bits_param),
    .io_i_bits_size(inject_io_i_bits_size),
    .io_i_bits_source(inject_io_i_bits_source),
    .io_i_bits_address(inject_io_i_bits_address),
    .io_i_bits_mask(inject_io_i_bits_mask),
    .io_i_bits_data(inject_io_i_bits_data),
    .io_o_ready(inject_io_o_ready),
    .io_o_valid(inject_io_o_valid),
    .io_o_bits_opcode(inject_io_o_bits_opcode),
    .io_o_bits_param(inject_io_o_bits_param),
    .io_o_bits_size(inject_io_o_bits_size),
    .io_o_bits_source(inject_io_o_bits_source),
    .io_o_bits_address(inject_io_o_bits_address),
    .io_o_bits_data(inject_io_o_bits_data)
  );
  CHIPLINK_PREFIX_Queue_2 inject_io_i_q (
    .clock(inject_io_i_q_clock),
    .reset(inject_io_i_q_reset),
    .io_enq_ready(inject_io_i_q_io_enq_ready),
    .io_enq_valid(inject_io_i_q_io_enq_valid),
    .io_enq_bits_opcode(inject_io_i_q_io_enq_bits_opcode),
    .io_enq_bits_size(inject_io_i_q_io_enq_bits_size),
    .io_enq_bits_source(inject_io_i_q_io_enq_bits_source),
    .io_enq_bits_address(inject_io_i_q_io_enq_bits_address),
    .io_enq_bits_mask(inject_io_i_q_io_enq_bits_mask),
    .io_enq_bits_data(inject_io_i_q_io_enq_bits_data),
    .io_deq_ready(inject_io_i_q_io_deq_ready),
    .io_deq_valid(inject_io_i_q_io_deq_valid),
    .io_deq_bits_opcode(inject_io_i_q_io_deq_bits_opcode),
    .io_deq_bits_param(inject_io_i_q_io_deq_bits_param),
    .io_deq_bits_size(inject_io_i_q_io_deq_bits_size),
    .io_deq_bits_source(inject_io_i_q_io_deq_bits_source),
    .io_deq_bits_address(inject_io_i_q_io_deq_bits_address),
    .io_deq_bits_mask(inject_io_i_q_io_deq_bits_mask),
    .io_deq_bits_data(inject_io_i_q_io_deq_bits_data)
  );
  assign io_a_ready = inject_io_i_q_io_enq_ready;
  assign io_q_valid = inject_io_o_valid;
  assign io_q_bits_data = 2'h3 == state ? _io_q_bits_data_WIRE_3 : _GEN_40;
  assign io_q_bits_last = inject_io_o_last & isLastState;
  assign io_q_bits_beats = {{2'd0}, _io_q_bits_beats_T_13};
  assign inject_clock = clock;
  assign inject_reset = reset;
  assign inject_io_i_last = inject_io_i_last_counter == 4'h1 | inject_io_i_last_beats1 == 4'h0;
  assign inject_io_i_valid = inject_io_i_q_io_deq_valid;
  assign inject_io_i_bits_opcode = inject_io_i_q_io_deq_bits_opcode;
  assign inject_io_i_bits_param = inject_io_i_q_io_deq_bits_param;
  assign inject_io_i_bits_size = inject_io_i_q_io_deq_bits_size;
  assign inject_io_i_bits_source = inject_io_i_q_io_deq_bits_source;
  assign inject_io_i_bits_address = inject_io_i_q_io_deq_bits_address;
  assign inject_io_i_bits_mask = inject_io_i_q_io_deq_bits_mask;
  assign inject_io_i_bits_data = inject_io_i_q_io_deq_bits_data;
  assign inject_io_o_ready = io_q_ready & isLastState;
  assign inject_io_i_q_clock = clock;
  assign inject_io_i_q_reset = reset;
  assign inject_io_i_q_io_enq_valid = io_a_valid;
  assign inject_io_i_q_io_enq_bits_opcode = io_a_bits_opcode;
  assign inject_io_i_q_io_enq_bits_size = io_a_bits_size;
  assign inject_io_i_q_io_enq_bits_source = io_a_bits_source;
  assign inject_io_i_q_io_enq_bits_address = io_a_bits_address;
  assign inject_io_i_q_io_enq_bits_mask = io_a_bits_mask;
  assign inject_io_i_q_io_enq_bits_data = io_a_bits_data;
  assign inject_io_i_q_io_deq_ready = inject_io_i_ready;
  always @(posedge clock) begin
    if (reset) begin
      inject_io_i_last_counter <= 4'h0;
    end else if (_inject_io_i_last_T) begin
      if (inject_io_i_last_first) begin
        if (inject_io_i_last_beats1_opdata) begin
          inject_io_i_last_counter <= inject_io_i_last_beats1_decode;
        end else begin
          inject_io_i_last_counter <= 4'h0;
        end
      end else begin
        inject_io_i_last_counter <= inject_io_i_last_counter1;
      end
    end
    if (reset) begin
      state <= 2'h0;
    end else if (_T) begin
      if (_T_1) begin
        state <= 2'h1;
      end else if (_T_2) begin
        state <= 2'h2;
      end else begin
        state <= _GEN_2;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  inject_io_i_last_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  state = _RAND_1[1:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_SinkB(
  input         clock,
  input         reset,
  input         io_q_ready,
  output        io_q_valid,
  output [31:0] io_q_bits_data,
  output        io_q_bits_last
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_REG_INIT
  reg [1:0] state;
  wire  _T = io_q_ready & io_q_valid;
  wire  _T_1 = 2'h0 == state;
  wire  _T_2 = 2'h1 == state;
  wire  _T_3 = 2'h2 == state;
  wire  _T_4 = 2'h3 == state;
  wire [1:0] _GEN_1 = _T_4 ? 2'h0 : state;
  wire [1:0] _GEN_2 = _T_3 ? 2'h0 : _GEN_1;
  wire [31:0] _GEN_7 = 2'h1 == state ? 32'h0 : 32'h1;
  wire [31:0] _GEN_8 = 2'h2 == state ? 32'h0 : _GEN_7;
  assign io_q_valid = 1'h0;
  assign io_q_bits_data = 2'h3 == state ? 32'h0 : _GEN_8;
  assign io_q_bits_last = state == 2'h2;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
    end else if (_T) begin
      if (_T_1) begin
        state <= 2'h1;
      end else if (_T_2) begin
        state <= 2'h2;
      end else begin
        state <= _GEN_2;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  state = _RAND_0[1:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_SinkC(
  input         clock,
  input         reset,
  input         io_q_ready,
  output        io_q_valid,
  output [31:0] io_q_bits_data,
  output        io_q_bits_last
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_REG_INIT
  reg [1:0] state;
  wire  _T = io_q_ready & io_q_valid;
  wire  _T_1 = 2'h0 == state;
  wire  _T_2 = 2'h1 == state;
  wire  _T_3 = 2'h2 == state;
  wire  _T_4 = 2'h3 == state;
  wire [1:0] _GEN_1 = _T_4 ? 2'h0 : state;
  wire [1:0] _GEN_2 = _T_3 ? 2'h0 : _GEN_1;
  wire [31:0] _GEN_39 = 2'h1 == state ? 32'h0 : 32'h2;
  wire [31:0] _GEN_40 = 2'h2 == state ? 32'h0 : _GEN_39;
  assign io_q_valid = 1'h0;
  assign io_q_bits_data = 2'h3 == state ? 32'h0 : _GEN_40;
  assign io_q_bits_last = state == 2'h2;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
    end else if (_T) begin
      if (_T_1) begin
        state <= 2'h1;
      end else if (_T_2) begin
        state <= 2'h2;
      end else begin
        state <= _GEN_2;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  state = _RAND_0[1:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Queue_5(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_param,
  input  [2:0]  io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input         io_enq_bits_denied,
  input  [31:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
  output [2:0]  io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output        io_deq_bits_sink,
  output        io_deq_bits_denied,
  output [31:0] io_deq_bits_data
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_7;
`endif // RANDOMIZE_REG_INIT
  reg [2:0] ram_opcode [0:0];
  wire [2:0] ram_opcode_io_deq_bits_MPORT_data;
  wire  ram_opcode_io_deq_bits_MPORT_addr;
  wire [2:0] ram_opcode_MPORT_data;
  wire  ram_opcode_MPORT_addr;
  wire  ram_opcode_MPORT_mask;
  wire  ram_opcode_MPORT_en;
  reg [1:0] ram_param [0:0];
  wire [1:0] ram_param_io_deq_bits_MPORT_data;
  wire  ram_param_io_deq_bits_MPORT_addr;
  wire [1:0] ram_param_MPORT_data;
  wire  ram_param_MPORT_addr;
  wire  ram_param_MPORT_mask;
  wire  ram_param_MPORT_en;
  reg [2:0] ram_size [0:0];
  wire [2:0] ram_size_io_deq_bits_MPORT_data;
  wire  ram_size_io_deq_bits_MPORT_addr;
  wire [2:0] ram_size_MPORT_data;
  wire  ram_size_MPORT_addr;
  wire  ram_size_MPORT_mask;
  wire  ram_size_MPORT_en;
  reg [5:0] ram_source [0:0];
  wire [5:0] ram_source_io_deq_bits_MPORT_data;
  wire  ram_source_io_deq_bits_MPORT_addr;
  wire [5:0] ram_source_MPORT_data;
  wire  ram_source_MPORT_addr;
  wire  ram_source_MPORT_mask;
  wire  ram_source_MPORT_en;
  reg  ram_sink [0:0];
  wire  ram_sink_io_deq_bits_MPORT_data;
  wire  ram_sink_io_deq_bits_MPORT_addr;
  wire  ram_sink_MPORT_data;
  wire  ram_sink_MPORT_addr;
  wire  ram_sink_MPORT_mask;
  wire  ram_sink_MPORT_en;
  reg  ram_denied [0:0];
  wire  ram_denied_io_deq_bits_MPORT_data;
  wire  ram_denied_io_deq_bits_MPORT_addr;
  wire  ram_denied_MPORT_data;
  wire  ram_denied_MPORT_addr;
  wire  ram_denied_MPORT_mask;
  wire  ram_denied_MPORT_en;
  reg [31:0] ram_data [0:0];
  wire [31:0] ram_data_io_deq_bits_MPORT_data;
  wire  ram_data_io_deq_bits_MPORT_addr;
  wire [31:0] ram_data_MPORT_data;
  wire  ram_data_MPORT_addr;
  wire  ram_data_MPORT_mask;
  wire  ram_data_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  _do_enq_T = io_enq_ready & io_enq_valid;
  wire  _do_deq_T = io_deq_ready & io_deq_valid;
  wire  _GEN_14 = io_deq_ready ? 1'h0 : _do_enq_T;
  wire  do_enq = empty ? _GEN_14 : _do_enq_T;
  wire  do_deq = empty ? 1'h0 : _do_deq_T;
  assign ram_opcode_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_opcode_io_deq_bits_MPORT_data = ram_opcode[ram_opcode_io_deq_bits_MPORT_addr];
  assign ram_opcode_MPORT_data = io_enq_bits_opcode;
  assign ram_opcode_MPORT_addr = 1'h0;
  assign ram_opcode_MPORT_mask = 1'h1;
  assign ram_opcode_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_param_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_param_io_deq_bits_MPORT_data = ram_param[ram_param_io_deq_bits_MPORT_addr];
  assign ram_param_MPORT_data = io_enq_bits_param;
  assign ram_param_MPORT_addr = 1'h0;
  assign ram_param_MPORT_mask = 1'h1;
  assign ram_param_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_size_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_size_io_deq_bits_MPORT_data = ram_size[ram_size_io_deq_bits_MPORT_addr];
  assign ram_size_MPORT_data = io_enq_bits_size;
  assign ram_size_MPORT_addr = 1'h0;
  assign ram_size_MPORT_mask = 1'h1;
  assign ram_size_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_source_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_source_io_deq_bits_MPORT_data = ram_source[ram_source_io_deq_bits_MPORT_addr];
  assign ram_source_MPORT_data = io_enq_bits_source;
  assign ram_source_MPORT_addr = 1'h0;
  assign ram_source_MPORT_mask = 1'h1;
  assign ram_source_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_sink_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_sink_io_deq_bits_MPORT_data = ram_sink[ram_sink_io_deq_bits_MPORT_addr];
  assign ram_sink_MPORT_data = 1'h0;
  assign ram_sink_MPORT_addr = 1'h0;
  assign ram_sink_MPORT_mask = 1'h1;
  assign ram_sink_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_denied_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_denied_io_deq_bits_MPORT_data = ram_denied[ram_denied_io_deq_bits_MPORT_addr];
  assign ram_denied_MPORT_data = io_enq_bits_denied;
  assign ram_denied_MPORT_addr = 1'h0;
  assign ram_denied_MPORT_mask = 1'h1;
  assign ram_denied_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign ram_data_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_data_io_deq_bits_MPORT_data = ram_data[ram_data_io_deq_bits_MPORT_addr];
  assign ram_data_MPORT_data = io_enq_bits_data;
  assign ram_data_MPORT_addr = 1'h0;
  assign ram_data_MPORT_mask = 1'h1;
  assign ram_data_MPORT_en = empty ? _GEN_14 : _do_enq_T;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = io_enq_valid | ~empty;
  assign io_deq_bits_opcode = empty ? io_enq_bits_opcode : ram_opcode_io_deq_bits_MPORT_data;
  assign io_deq_bits_param = empty ? io_enq_bits_param : ram_param_io_deq_bits_MPORT_data;
  assign io_deq_bits_size = empty ? io_enq_bits_size : ram_size_io_deq_bits_MPORT_data;
  assign io_deq_bits_source = empty ? io_enq_bits_source : ram_source_io_deq_bits_MPORT_data;
  assign io_deq_bits_sink = empty ? 1'h0 : ram_sink_io_deq_bits_MPORT_data;
  assign io_deq_bits_denied = empty ? io_enq_bits_denied : ram_denied_io_deq_bits_MPORT_data;
  assign io_deq_bits_data = empty ? io_enq_bits_data : ram_data_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_opcode_MPORT_en & ram_opcode_MPORT_mask) begin
      ram_opcode[ram_opcode_MPORT_addr] <= ram_opcode_MPORT_data;
    end
    if(ram_param_MPORT_en & ram_param_MPORT_mask) begin
      ram_param[ram_param_MPORT_addr] <= ram_param_MPORT_data;
    end
    if(ram_size_MPORT_en & ram_size_MPORT_mask) begin
      ram_size[ram_size_MPORT_addr] <= ram_size_MPORT_data;
    end
    if(ram_source_MPORT_en & ram_source_MPORT_mask) begin
      ram_source[ram_source_MPORT_addr] <= ram_source_MPORT_data;
    end
    if(ram_sink_MPORT_en & ram_sink_MPORT_mask) begin
      ram_sink[ram_sink_MPORT_addr] <= ram_sink_MPORT_data;
    end
    if(ram_denied_MPORT_en & ram_denied_MPORT_mask) begin
      ram_denied[ram_denied_MPORT_addr] <= ram_denied_MPORT_data;
    end
    if(ram_data_MPORT_en & ram_data_MPORT_mask) begin
      ram_data[ram_data_MPORT_addr] <= ram_data_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      if (empty) begin
        if (io_deq_ready) begin
          maybe_full <= 1'h0;
        end else begin
          maybe_full <= _do_enq_T;
        end
      end else begin
        maybe_full <= _do_enq_T;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_opcode[initvar] = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_param[initvar] = _RAND_1[1:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_size[initvar] = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_source[initvar] = _RAND_3[5:0];
  _RAND_4 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_sink[initvar] = _RAND_4[0:0];
  _RAND_5 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_denied[initvar] = _RAND_5[0:0];
  _RAND_6 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_data[initvar] = _RAND_6[31:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_7 = {1{`RANDOM}};
  maybe_full = _RAND_7[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_SinkD(
  input         clock,
  input         reset,
  output        io_d_ready,
  input         io_d_valid,
  input  [2:0]  io_d_bits_opcode,
  input  [1:0]  io_d_bits_param,
  input  [2:0]  io_d_bits_size,
  input  [5:0]  io_d_bits_source,
  input         io_d_bits_denied,
  input  [31:0] io_d_bits_data,
  input         io_q_ready,
  output        io_q_valid,
  output [31:0] io_q_bits_data,
  output        io_q_bits_last,
  output [6:0]  io_q_bits_beats,
  output        io_a_tlSource_valid,
  output [5:0]  io_a_tlSource_bits,
  input  [15:0] io_a_clSource,
  output        io_c_tlSource_valid,
  output [5:0]  io_c_tlSource_bits,
  input  [15:0] io_c_clSource
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
`endif // RANDOMIZE_REG_INIT
  wire  d_clock;
  wire  d_reset;
  wire  d_io_enq_ready;
  wire  d_io_enq_valid;
  wire [2:0] d_io_enq_bits_opcode;
  wire [1:0] d_io_enq_bits_param;
  wire [2:0] d_io_enq_bits_size;
  wire [5:0] d_io_enq_bits_source;
  wire  d_io_enq_bits_denied;
  wire [31:0] d_io_enq_bits_data;
  wire  d_io_deq_ready;
  wire  d_io_deq_valid;
  wire [2:0] d_io_deq_bits_opcode;
  wire [1:0] d_io_deq_bits_param;
  wire [2:0] d_io_deq_bits_size;
  wire [5:0] d_io_deq_bits_source;
  wire  d_io_deq_bits_sink;
  wire  d_io_deq_bits_denied;
  wire [31:0] d_io_deq_bits_data;
  reg [1:0] state;
  wire  _d_last_T = d_io_deq_ready & d_io_deq_valid;
  wire [12:0] _d_last_beats1_decode_T_1 = 13'h3f << d_io_deq_bits_size;
  wire [5:0] _d_last_beats1_decode_T_3 = ~_d_last_beats1_decode_T_1[5:0];
  wire [3:0] d_last_beats1_decode = _d_last_beats1_decode_T_3[5:2];
  wire  d_last_beats1_opdata = d_io_deq_bits_opcode[0];
  wire [3:0] d_last_beats1 = d_last_beats1_opdata ? d_last_beats1_decode : 4'h0;
  reg [3:0] d_last_counter;
  wire [3:0] d_last_counter1 = d_last_counter - 4'h1;
  wire  d_last_first = d_last_counter == 4'h0;
  wire  d_last = d_last_counter == 4'h1 | d_last_beats1 == 4'h0;
  wire  d_grant = d_io_deq_bits_opcode == 3'h4 | d_io_deq_bits_opcode == 3'h5;
  wire  _T = io_q_ready & io_q_valid;
  wire  _T_1 = 2'h0 == state;
  wire [1:0] _state_T = d_last_beats1_opdata ? 2'h2 : 2'h0;
  wire  _T_2 = 2'h1 == state;
  wire  _T_3 = 2'h2 == state;
  wire [1:0] _state_T_3 = d_last ? 2'h0 : 2'h2;
  wire [1:0] _GEN_1 = _T_3 ? _state_T_3 : state;
  wire  relack = d_io_deq_bits_opcode == 3'h6;
  wire  _io_a_tlSource_valid_T_2 = _T & state == 2'h0;
  wire [2:0] header_hi_hi_lo = d_io_deq_bits_source[5:3];
  wire [15:0] header_hi_hi_hi = relack ? io_c_clSource : io_a_clSource;
  wire [3:0] header_hi_lo = {{1'd0}, d_io_deq_bits_size};
  wire [2:0] header_lo_hi_lo = d_io_deq_bits_opcode;
  wire [31:0] header = {header_hi_hi_hi,header_hi_hi_lo,header_hi_lo,d_io_deq_bits_denied,d_io_deq_bits_param,
    header_lo_hi_lo,3'h3};
  wire [1:0] _isLastState_T = d_grant ? 2'h1 : 2'h0;
  wire [1:0] _isLastState_T_1 = d_last_beats1_opdata ? 2'h2 : _isLastState_T;
  wire  isLastState = state == _isLastState_T_1;
  wire [31:0] _io_q_bits_data_WIRE_1 = {{31'd0}, d_io_deq_bits_sink};
  wire [31:0] _GEN_6 = 2'h1 == state ? _io_q_bits_data_WIRE_1 : header;
  wire [31:0] _io_q_bits_data_WIRE_2 = d_io_deq_bits_data;
  wire [2:0] io_q_bits_beats_shiftAmount = header_hi_lo[2:0];
  wire [7:0] _io_q_bits_beats_T_1 = 8'h1 << io_q_bits_beats_shiftAmount;
  wire [3:0] io_q_bits_beats_hi = _io_q_bits_beats_T_1[6:3];
  wire  io_q_bits_beats_lo = d_io_deq_bits_size <= 3'h2;
  wire [4:0] _io_q_bits_beats_T_3 = {io_q_bits_beats_hi,io_q_bits_beats_lo};
  wire [4:0] _io_q_bits_beats_T_4 = d_last_beats1_opdata ? _io_q_bits_beats_T_3 : 5'h0;
  wire [4:0] _io_q_bits_beats_T_6 = _io_q_bits_beats_T_4 + 5'h1;
  wire [4:0] _GEN_8 = {{4'd0}, d_grant};
  wire [4:0] _io_q_bits_beats_T_8 = _io_q_bits_beats_T_6 + _GEN_8;
  CHIPLINK_PREFIX_Queue_5 d (
    .clock(d_clock),
    .reset(d_reset),
    .io_enq_ready(d_io_enq_ready),
    .io_enq_valid(d_io_enq_valid),
    .io_enq_bits_opcode(d_io_enq_bits_opcode),
    .io_enq_bits_param(d_io_enq_bits_param),
    .io_enq_bits_size(d_io_enq_bits_size),
    .io_enq_bits_source(d_io_enq_bits_source),
    .io_enq_bits_denied(d_io_enq_bits_denied),
    .io_enq_bits_data(d_io_enq_bits_data),
    .io_deq_ready(d_io_deq_ready),
    .io_deq_valid(d_io_deq_valid),
    .io_deq_bits_opcode(d_io_deq_bits_opcode),
    .io_deq_bits_param(d_io_deq_bits_param),
    .io_deq_bits_size(d_io_deq_bits_size),
    .io_deq_bits_source(d_io_deq_bits_source),
    .io_deq_bits_sink(d_io_deq_bits_sink),
    .io_deq_bits_denied(d_io_deq_bits_denied),
    .io_deq_bits_data(d_io_deq_bits_data)
  );
  assign io_d_ready = d_io_enq_ready;
  assign io_q_valid = d_io_deq_valid;
  assign io_q_bits_data = 2'h2 == state ? _io_q_bits_data_WIRE_2 : _GEN_6;
  assign io_q_bits_last = d_last & isLastState;
  assign io_q_bits_beats = {{2'd0}, _io_q_bits_beats_T_8};
  assign io_a_tlSource_valid = _T & state == 2'h0 & ~relack;
  assign io_a_tlSource_bits = d_io_deq_bits_source;
  assign io_c_tlSource_valid = _io_a_tlSource_valid_T_2 & relack;
  assign io_c_tlSource_bits = d_io_deq_bits_source;
  assign d_clock = clock;
  assign d_reset = reset;
  assign d_io_enq_valid = io_d_valid;
  assign d_io_enq_bits_opcode = io_d_bits_opcode;
  assign d_io_enq_bits_param = io_d_bits_param;
  assign d_io_enq_bits_size = io_d_bits_size;
  assign d_io_enq_bits_source = io_d_bits_source;
  assign d_io_enq_bits_denied = io_d_bits_denied;
  assign d_io_enq_bits_data = io_d_bits_data;
  assign d_io_deq_ready = io_q_ready & isLastState;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
    end else if (_T) begin
      if (_T_1) begin
        if (d_grant) begin
          state <= 2'h1;
        end else begin
          state <= _state_T;
        end
      end else if (_T_2) begin
        state <= _state_T;
      end else begin
        state <= _GEN_1;
      end
    end
    if (reset) begin
      d_last_counter <= 4'h0;
    end else if (_d_last_T) begin
      if (d_last_first) begin
        if (d_last_beats1_opdata) begin
          d_last_counter <= d_last_beats1_decode;
        end else begin
          d_last_counter <= 4'h0;
        end
      end else begin
        d_last_counter <= d_last_counter1;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  state = _RAND_0[1:0];
  _RAND_1 = {1{`RANDOM}};
  d_last_counter = _RAND_1[3:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_SinkE(
  output [31:0] io_q_bits_data,
  input  [15:0] io_d_clSink
);
  wire [22:0] header_hi = {io_d_clSink,3'h0,4'h0};
  assign io_q_bits_data = {header_hi,9'h4};
endmodule
module CHIPLINK_PREFIX_CAM(
  input         clock,
  input         reset,
  output        io_alloc_ready,
  input         io_alloc_valid,
  input  [15:0] io_alloc_bits,
  output [2:0]  io_key,
  input         io_free_valid,
  input  [2:0]  io_free_bits,
  output [15:0] io_data
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_1;
`endif // RANDOMIZE_REG_INIT
  reg [15:0] data [0:7];
  wire [15:0] data_io_data_MPORT_data;
  wire [2:0] data_io_data_MPORT_addr;
  wire [15:0] data_MPORT_data;
  wire [2:0] data_MPORT_addr;
  wire  data_MPORT_mask;
  wire  data_MPORT_en;
  reg [7:0] free;
  wire [8:0] _free_sel_T = {free, 1'h0};
  wire [7:0] _free_sel_T_2 = free | _free_sel_T[7:0];
  wire [9:0] _free_sel_T_3 = {_free_sel_T_2, 2'h0};
  wire [7:0] _free_sel_T_5 = _free_sel_T_2 | _free_sel_T_3[7:0];
  wire [11:0] _free_sel_T_6 = {_free_sel_T_5, 4'h0};
  wire [7:0] _free_sel_T_8 = _free_sel_T_5 | _free_sel_T_6[7:0];
  wire [8:0] _free_sel_T_10 = {_free_sel_T_8, 1'h0};
  wire [8:0] _free_sel_T_11 = ~_free_sel_T_10;
  wire [8:0] _GEN_5 = {{1'd0}, free};
  wire [8:0] free_sel = _free_sel_T_11 & _GEN_5;
  wire [3:0] io_key_hi = free_sel[7:4];
  wire [3:0] io_key_lo = free_sel[3:0];
  wire  io_key_hi_1 = |io_key_hi;
  wire [3:0] _io_key_T = io_key_hi | io_key_lo;
  wire [1:0] io_key_hi_2 = _io_key_T[3:2];
  wire [1:0] io_key_lo_1 = _io_key_T[1:0];
  wire  io_key_hi_3 = |io_key_hi_2;
  wire [1:0] _io_key_T_1 = io_key_hi_2 | io_key_lo_1;
  wire  io_key_lo_2 = _io_key_T_1[1];
  wire [1:0] io_key_lo_3 = {io_key_hi_3,io_key_lo_2};
  wire  _T = io_alloc_ready & io_alloc_valid;
  wire  bypass = _T & io_free_bits == io_key;
  wire [8:0] clr = _T ? free_sel : 9'h0;
  wire [7:0] _set_T = 8'h1 << io_free_bits;
  wire [7:0] set = io_free_valid ? _set_T : 8'h0;
  wire [8:0] _free_T = ~clr;
  wire [8:0] _free_T_1 = _GEN_5 & _free_T;
  wire [8:0] _GEN_7 = {{1'd0}, set};
  wire [8:0] _free_T_2 = _free_T_1 | _GEN_7;
  assign data_io_data_MPORT_addr = io_free_bits;
  assign data_io_data_MPORT_data = data[data_io_data_MPORT_addr];
  assign data_MPORT_data = io_alloc_bits;
  assign data_MPORT_addr = io_key;
  assign data_MPORT_mask = 1'h1;
  assign data_MPORT_en = io_alloc_ready & io_alloc_valid;
  assign io_alloc_ready = |free;
  assign io_key = {io_key_hi_1,io_key_lo_3};
  assign io_data = bypass ? io_alloc_bits : data_io_data_MPORT_data;
  always @(posedge clock) begin
    if(data_MPORT_en & data_MPORT_mask) begin
      data[data_MPORT_addr] <= data_MPORT_data;
    end
    if (reset) begin
      free <= 8'hff;
    end else begin
      free <= _free_T_2[7:0];
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 8; initvar = initvar+1)
    data[initvar] = _RAND_0[15:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_1 = {1{`RANDOM}};
  free = _RAND_1[7:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_ParitalExtractor(
  input         clock,
  input         reset,
  input         io_last,
  output        io_i_ready,
  input         io_i_valid,
  input  [2:0]  io_i_bits_opcode,
  input  [2:0]  io_i_bits_param,
  input  [2:0]  io_i_bits_size,
  input  [5:0]  io_i_bits_source,
  input  [31:0] io_i_bits_address,
  input  [3:0]  io_i_bits_mask,
  input  [31:0] io_i_bits_data,
  input         io_o_ready,
  output        io_o_valid,
  output [2:0]  io_o_bits_opcode,
  output [2:0]  io_o_bits_param,
  output [2:0]  io_o_bits_size,
  output [5:0]  io_o_bits_source,
  output [31:0] io_o_bits_address,
  output [3:0]  io_o_bits_mask,
  output [31:0] io_o_bits_data
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
`endif // RANDOMIZE_REG_INIT
  reg [3:0] state;
  reg [31:0] shift;
  wire  enable = io_i_bits_opcode == 3'h1;
  wire  empty = state == 4'h0;
  wire [5:0] _wide_T = {state, 2'h0};
  wire [94:0] _GEN_12 = {{63'd0}, io_i_bits_data};
  wire [94:0] _wide_T_1 = _GEN_12 << _wide_T;
  wire [94:0] _GEN_13 = {{63'd0}, shift};
  wire [94:0] wide = _GEN_13 | _wide_T_1;
  wire [31:0] _io_o_bits_data_T_4 = {wide[35:28],wide[26:19],wide[17:10],wide[8:1]};
  wire [3:0] _io_o_bits_mask_T_4 = {wide[27],wide[18],wide[9],wide[0]};
  wire  _GEN_0 = empty | io_o_ready;
  wire  _GEN_1 = empty ? 1'h0 : io_i_valid;
  wire  _T = io_i_ready & io_i_valid;
  wire [58:0] _shift_T_1 = empty ? {{27'd0}, io_i_bits_data} : wide[94:36];
  wire [3:0] _state_T_1 = state - 4'h1;
  wire [3:0] _GEN_2 = empty ? 4'h8 : _state_T_1;
  wire [58:0] _GEN_4 = _T ? _shift_T_1 : {{27'd0}, shift};
  wire [58:0] _GEN_10 = enable ? _GEN_4 : {{27'd0}, shift};
  assign io_i_ready = enable ? _GEN_0 : io_o_ready;
  assign io_o_valid = enable ? _GEN_1 : io_i_valid;
  assign io_o_bits_opcode = io_i_bits_opcode;
  assign io_o_bits_param = io_i_bits_param;
  assign io_o_bits_size = io_i_bits_size;
  assign io_o_bits_source = io_i_bits_source;
  assign io_o_bits_address = io_i_bits_address;
  assign io_o_bits_mask = enable ? _io_o_bits_mask_T_4 : io_i_bits_mask;
  assign io_o_bits_data = enable ? _io_o_bits_data_T_4 : io_i_bits_data;
  always @(posedge clock) begin
    if (reset) begin
      state <= 4'h0;
    end else if (enable) begin
      if (_T) begin
        if (io_last) begin
          state <= 4'h0;
        end else begin
          state <= _GEN_2;
        end
      end
    end
    shift <= _GEN_10[31:0];
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  state = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  shift = _RAND_1[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_SourceA(
  input         clock,
  input         reset,
  input         io_a_ready,
  output        io_a_valid,
  output [2:0]  io_a_bits_opcode,
  output [2:0]  io_a_bits_param,
  output [2:0]  io_a_bits_size,
  output [5:0]  io_a_bits_source,
  output [31:0] io_a_bits_address,
  output [3:0]  io_a_bits_mask,
  output [31:0] io_a_bits_data,
  output        io_q_ready,
  input         io_q_valid,
  input  [31:0] io_q_bits,
  input         io_d_tlSource_valid,
  input  [5:0]  io_d_tlSource_bits,
  output [15:0] io_d_clSource
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
`endif // RANDOMIZE_REG_INIT
  wire  cams_0_clock;
  wire  cams_0_reset;
  wire  cams_0_io_alloc_ready;
  wire  cams_0_io_alloc_valid;
  wire [15:0] cams_0_io_alloc_bits;
  wire [2:0] cams_0_io_key;
  wire  cams_0_io_free_valid;
  wire [2:0] cams_0_io_free_bits;
  wire [15:0] cams_0_io_data;
  wire  cams_1_clock;
  wire  cams_1_reset;
  wire  cams_1_io_alloc_ready;
  wire  cams_1_io_alloc_valid;
  wire [15:0] cams_1_io_alloc_bits;
  wire [2:0] cams_1_io_key;
  wire  cams_1_io_free_valid;
  wire [2:0] cams_1_io_free_bits;
  wire [15:0] cams_1_io_data;
  wire  cams_2_clock;
  wire  cams_2_reset;
  wire  cams_2_io_alloc_ready;
  wire  cams_2_io_alloc_valid;
  wire [15:0] cams_2_io_alloc_bits;
  wire [2:0] cams_2_io_key;
  wire  cams_2_io_free_valid;
  wire [2:0] cams_2_io_free_bits;
  wire [15:0] cams_2_io_data;
  wire  cams_3_clock;
  wire  cams_3_reset;
  wire  cams_3_io_alloc_ready;
  wire  cams_3_io_alloc_valid;
  wire [15:0] cams_3_io_alloc_bits;
  wire [2:0] cams_3_io_key;
  wire  cams_3_io_free_valid;
  wire [2:0] cams_3_io_free_bits;
  wire [15:0] cams_3_io_data;
  wire  cams_4_clock;
  wire  cams_4_reset;
  wire  cams_4_io_alloc_ready;
  wire  cams_4_io_alloc_valid;
  wire [15:0] cams_4_io_alloc_bits;
  wire [2:0] cams_4_io_key;
  wire  cams_4_io_free_valid;
  wire [2:0] cams_4_io_free_bits;
  wire [15:0] cams_4_io_data;
  wire  cams_5_clock;
  wire  cams_5_reset;
  wire  cams_5_io_alloc_ready;
  wire  cams_5_io_alloc_valid;
  wire [15:0] cams_5_io_alloc_bits;
  wire [2:0] cams_5_io_key;
  wire  cams_5_io_free_valid;
  wire [2:0] cams_5_io_free_bits;
  wire [15:0] cams_5_io_data;
  wire  cams_6_clock;
  wire  cams_6_reset;
  wire  cams_6_io_alloc_ready;
  wire  cams_6_io_alloc_valid;
  wire [15:0] cams_6_io_alloc_bits;
  wire [2:0] cams_6_io_key;
  wire  cams_6_io_free_valid;
  wire [2:0] cams_6_io_free_bits;
  wire [15:0] cams_6_io_data;
  wire  cams_7_clock;
  wire  cams_7_reset;
  wire  cams_7_io_alloc_ready;
  wire  cams_7_io_alloc_valid;
  wire [15:0] cams_7_io_alloc_bits;
  wire [2:0] cams_7_io_key;
  wire  cams_7_io_free_valid;
  wire [2:0] cams_7_io_free_bits;
  wire [15:0] cams_7_io_data;
  wire  extract_clock;
  wire  extract_reset;
  wire  extract_io_last;
  wire  extract_io_i_ready;
  wire  extract_io_i_valid;
  wire [2:0] extract_io_i_bits_opcode;
  wire [2:0] extract_io_i_bits_param;
  wire [2:0] extract_io_i_bits_size;
  wire [5:0] extract_io_i_bits_source;
  wire [31:0] extract_io_i_bits_address;
  wire [3:0] extract_io_i_bits_mask;
  wire [31:0] extract_io_i_bits_data;
  wire  extract_io_o_ready;
  wire  extract_io_o_valid;
  wire [2:0] extract_io_o_bits_opcode;
  wire [2:0] extract_io_o_bits_param;
  wire [2:0] extract_io_o_bits_size;
  wire [5:0] extract_io_o_bits_source;
  wire [31:0] extract_io_o_bits_address;
  wire [3:0] extract_io_o_bits_mask;
  wire [31:0] extract_io_o_bits_data;
  reg [1:0] state;
  wire [2:0] opcode = io_q_bits[5:3];
  wire [2:0] param = io_q_bits[8:6];
  wire [3:0] size = io_q_bits[12:9];
  wire [2:0] domain = io_q_bits[15:13];
  wire [15:0] source = io_q_bits[31:16];
  wire  enable = state == 2'h0;
  reg [2:0] r_1;
  wire [2:0] _GEN_1 = enable ? opcode : r_1;
  reg [2:0] r_2;
  reg [3:0] r_3;
  wire [3:0] _GEN_3 = enable ? size : r_3;
  reg [2:0] r_4;
  wire [2:0] _GEN_4 = enable ? domain : r_4;
  reg [15:0] r_5;
  wire  q_address0_enable = state == 2'h1;
  reg [31:0] q_address0_r;
  wire [31:0] _GEN_6 = q_address0_enable ? io_q_bits : q_address0_r;
  wire  q_address1_enable = state == 2'h2;
  reg [31:0] q_address1_r;
  wire [31:0] _GEN_7 = q_address1_enable ? io_q_bits : q_address1_r;
  reg [4:0] q_last_count;
  wire [2:0] q_last_beats_beats_shiftAmount = size[2:0];
  wire [7:0] _q_last_beats_beats_T_1 = 8'h1 << q_last_beats_beats_shiftAmount;
  wire [3:0] q_last_beats_beats_hi = _q_last_beats_beats_T_1[6:3];
  wire  q_last_beats_beats_lo = size <= 4'h2;
  wire [4:0] q_last_beats_beats = {q_last_beats_beats_hi,q_last_beats_beats_lo};
  wire  q_last_beats_masks_hi = _q_last_beats_beats_T_1[6];
  wire  q_last_beats_masks_lo = size <= 4'h5;
  wire [1:0] q_last_beats_masks = {q_last_beats_masks_hi,q_last_beats_masks_lo};
  wire  q_last_beats_partial = opcode == 3'h1;
  wire [4:0] _q_last_beats_a_T_1 = opcode[2] ? 5'h0 : q_last_beats_beats;
  wire [4:0] _q_last_beats_a_T_3 = _q_last_beats_a_T_1 + 5'h2;
  wire [1:0] _q_last_beats_a_T_4 = q_last_beats_partial ? q_last_beats_masks : 2'h0;
  wire [4:0] _GEN_40 = {{3'd0}, _q_last_beats_a_T_4};
  wire [4:0] q_last_beats_a = _q_last_beats_a_T_3 + _GEN_40;
  wire  q_last_first = q_last_count == 5'h0;
  wire  q_last = q_last_count == 5'h1 | q_last_first & q_last_beats_a == 5'h0;
  wire  _q_last_T = io_q_ready & io_q_valid;
  wire [4:0] _q_last_count_T_1 = q_last_count - 5'h1;
  wire  q_hasData = ~_GEN_1[2];
  wire  _a_first_T = state != 2'h3;
  reg  a_first;
  wire  _T_2 = 2'h0 == state;
  wire  _T_3 = 2'h1 == state;
  wire  _T_4 = 2'h2 == state;
  wire [1:0] _state_T = q_hasData ? 2'h3 : 2'h0;
  wire  _T_5 = 2'h3 == state;
  wire [1:0] _state_T_2 = ~q_last ? 2'h3 : 2'h0;
  wire [1:0] _GEN_10 = _T_5 ? _state_T_2 : state;
  wire [1:0] _GEN_11 = _T_4 ? _state_T : _GEN_10;
  wire [63:0] q_address = {_GEN_7,_GEN_6};
  wire  q_acq = _GEN_1 == 3'h6 | _GEN_1 == 3'h7;
  wire [63:0] _exists_T = q_address ^ 64'h10000000;
  wire [64:0] _exists_T_1 = {1'b0,$signed(_exists_T)};
  wire [64:0] _exists_T_3 = $signed(_exists_T_1) & -65'sh10000000;
  wire  _exists_T_4 = $signed(_exists_T_3) == 65'sh0;
  wire [63:0] _exists_T_5 = q_address ^ 64'h20000000;
  wire [64:0] _exists_T_6 = {1'b0,$signed(_exists_T_5)};
  wire [64:0] _exists_T_8 = $signed(_exists_T_6) & -65'sh20000000;
  wire  _exists_T_9 = $signed(_exists_T_8) == 65'sh0;
  wire [63:0] _exists_T_10 = q_address ^ 64'h40000000;
  wire [64:0] _exists_T_11 = {1'b0,$signed(_exists_T_10)};
  wire [64:0] _exists_T_13 = $signed(_exists_T_11) & -65'sh40000000;
  wire  _exists_T_14 = $signed(_exists_T_13) == 65'sh0;
  wire [63:0] _exists_T_15 = q_address ^ 64'h80000000;
  wire [64:0] _exists_T_16 = {1'b0,$signed(_exists_T_15)};
  wire [64:0] _exists_T_18 = $signed(_exists_T_16) & -65'sh40000000;
  wire  _exists_T_19 = $signed(_exists_T_18) == 65'sh0;
  wire [63:0] _exists_T_20 = q_address ^ 64'hc0000000;
  wire [64:0] _exists_T_21 = {1'b0,$signed(_exists_T_20)};
  wire [64:0] _exists_T_23 = $signed(_exists_T_21) & -65'sh20000000;
  wire  _exists_T_24 = $signed(_exists_T_23) == 65'sh0;
  wire  _exists_T_28 = _exists_T_4 | _exists_T_9 | _exists_T_14 | _exists_T_19 | _exists_T_24;
  wire [63:0] _exists_T_29 = q_address ^ 64'h1000;
  wire [64:0] _exists_T_30 = {1'b0,$signed(_exists_T_29)};
  wire [64:0] _exists_T_32 = $signed(_exists_T_30) & -65'sh1000;
  wire  _exists_T_33 = $signed(_exists_T_32) == 65'sh0;
  wire  exists = _exists_T_28 | _exists_T_33;
  wire [64:0] _writeOk_T_1 = {1'b0,$signed(q_address)};
  wire [64:0] _acquireOk_T_32 = $signed(_writeOk_T_1) & 65'shf0000000;
  wire  acquireOk = $signed(_acquireOk_T_32) == 65'sh0;
  wire  q_legal = exists & (~q_acq | acquireOk);
  reg [2:0] source_r;
  wire [2:0] _source_WIRE_0 = cams_0_io_key;
  wire [2:0] _source_WIRE_1 = cams_1_io_key;
  wire [2:0] _GEN_16 = 3'h1 == _GEN_4 ? _source_WIRE_1 : _source_WIRE_0;
  wire [2:0] _source_WIRE_2 = cams_2_io_key;
  wire [2:0] _GEN_17 = 3'h2 == _GEN_4 ? _source_WIRE_2 : _GEN_16;
  wire [2:0] _source_WIRE_3 = cams_3_io_key;
  wire [2:0] _GEN_18 = 3'h3 == _GEN_4 ? _source_WIRE_3 : _GEN_17;
  wire [2:0] _source_WIRE_4 = cams_4_io_key;
  wire [2:0] _GEN_19 = 3'h4 == _GEN_4 ? _source_WIRE_4 : _GEN_18;
  wire [2:0] _source_WIRE_5 = cams_5_io_key;
  wire [2:0] _GEN_20 = 3'h5 == _GEN_4 ? _source_WIRE_5 : _GEN_19;
  wire [2:0] _source_WIRE_6 = cams_6_io_key;
  wire [2:0] _GEN_21 = 3'h6 == _GEN_4 ? _source_WIRE_6 : _GEN_20;
  wire [2:0] _source_WIRE_7 = cams_7_io_key;
  wire [2:0] _GEN_22 = 3'h7 == _GEN_4 ? _source_WIRE_7 : _GEN_21;
  wire [2:0] _GEN_23 = a_first ? _GEN_22 : source_r;
  wire [7:0] a_sel = 8'h1 << _GEN_4;
  wire [63:0] _extract_io_i_bits_address_T = q_legal ? q_address : 64'h1000;
  wire [51:0] extract_io_i_bits_address_hi = _extract_io_i_bits_address_T[63:12];
  wire [11:0] extract_io_i_bits_address_lo = q_address[11:0];
  wire [63:0] _extract_io_i_bits_address_T_1 = {extract_io_i_bits_address_hi,extract_io_i_bits_address_lo};
  wire  extract_io_i_bits_mask_sizeOH_shiftAmount = _GEN_3[0];
  wire [1:0] _extract_io_i_bits_mask_sizeOH_T_1 = 2'h1 << extract_io_i_bits_mask_sizeOH_shiftAmount;
  wire [1:0] extract_io_i_bits_mask_sizeOH = _extract_io_i_bits_mask_sizeOH_T_1 | 2'h1;
  wire  _extract_io_i_bits_mask_T = _GEN_3 >= 4'h2;
  wire  extract_io_i_bits_mask_size = extract_io_i_bits_mask_sizeOH[1];
  wire  extract_io_i_bits_mask_bit = _GEN_6[1];
  wire  extract_io_i_bits_mask_nbit = ~extract_io_i_bits_mask_bit;
  wire  extract_io_i_bits_mask_acc = _extract_io_i_bits_mask_T | extract_io_i_bits_mask_size &
    extract_io_i_bits_mask_nbit;
  wire  extract_io_i_bits_mask_acc_1 = _extract_io_i_bits_mask_T | extract_io_i_bits_mask_size &
    extract_io_i_bits_mask_bit;
  wire  extract_io_i_bits_mask_size_1 = extract_io_i_bits_mask_sizeOH[0];
  wire  extract_io_i_bits_mask_bit_1 = _GEN_6[0];
  wire  extract_io_i_bits_mask_nbit_1 = ~extract_io_i_bits_mask_bit_1;
  wire  extract_io_i_bits_mask_eq_2 = extract_io_i_bits_mask_nbit & extract_io_i_bits_mask_nbit_1;
  wire  extract_io_i_bits_mask_lo_lo = extract_io_i_bits_mask_acc | extract_io_i_bits_mask_size_1 &
    extract_io_i_bits_mask_eq_2;
  wire  extract_io_i_bits_mask_eq_3 = extract_io_i_bits_mask_nbit & extract_io_i_bits_mask_bit_1;
  wire  extract_io_i_bits_mask_lo_hi = extract_io_i_bits_mask_acc | extract_io_i_bits_mask_size_1 &
    extract_io_i_bits_mask_eq_3;
  wire  extract_io_i_bits_mask_eq_4 = extract_io_i_bits_mask_bit & extract_io_i_bits_mask_nbit_1;
  wire  extract_io_i_bits_mask_hi_lo = extract_io_i_bits_mask_acc_1 | extract_io_i_bits_mask_size_1 &
    extract_io_i_bits_mask_eq_4;
  wire  extract_io_i_bits_mask_eq_5 = extract_io_i_bits_mask_bit & extract_io_i_bits_mask_bit_1;
  wire  extract_io_i_bits_mask_hi_hi = extract_io_i_bits_mask_acc_1 | extract_io_i_bits_mask_size_1 &
    extract_io_i_bits_mask_eq_5;
  wire [1:0] extract_io_i_bits_mask_lo = {extract_io_i_bits_mask_lo_hi,extract_io_i_bits_mask_lo_lo};
  wire [1:0] extract_io_i_bits_mask_hi = {extract_io_i_bits_mask_hi_hi,extract_io_i_bits_mask_hi_lo};
  wire  _source_ok_WIRE_0 = cams_0_io_alloc_ready;
  wire  _source_ok_WIRE_1 = cams_1_io_alloc_ready;
  wire  _GEN_25 = 3'h1 == _GEN_4 ? _source_ok_WIRE_1 : _source_ok_WIRE_0;
  wire  _source_ok_WIRE_2 = cams_2_io_alloc_ready;
  wire  _GEN_26 = 3'h2 == _GEN_4 ? _source_ok_WIRE_2 : _GEN_25;
  wire  _source_ok_WIRE_3 = cams_3_io_alloc_ready;
  wire  _GEN_27 = 3'h3 == _GEN_4 ? _source_ok_WIRE_3 : _GEN_26;
  wire  _source_ok_WIRE_4 = cams_4_io_alloc_ready;
  wire  _GEN_28 = 3'h4 == _GEN_4 ? _source_ok_WIRE_4 : _GEN_27;
  wire  _source_ok_WIRE_5 = cams_5_io_alloc_ready;
  wire  _GEN_29 = 3'h5 == _GEN_4 ? _source_ok_WIRE_5 : _GEN_28;
  wire  _source_ok_WIRE_6 = cams_6_io_alloc_ready;
  wire  _GEN_30 = 3'h6 == _GEN_4 ? _source_ok_WIRE_6 : _GEN_29;
  wire  _source_ok_WIRE_7 = cams_7_io_alloc_ready;
  wire  _GEN_31 = 3'h7 == _GEN_4 ? _source_ok_WIRE_7 : _GEN_30;
  wire  stall = a_first & ~_GEN_31;
  wire  xmit = q_last | state == 2'h3;
  wire  _extract_io_i_valid_T = ~stall;
  wire [2:0] d_clDomain = io_d_tlSource_bits[5:3];
  wire [7:0] d_sel = 8'h1 << d_clDomain;
  wire [15:0] _io_d_clSource_WIRE_0 = cams_0_io_data;
  wire [15:0] _io_d_clSource_WIRE_1 = cams_1_io_data;
  wire [15:0] _GEN_33 = 3'h1 == d_clDomain ? _io_d_clSource_WIRE_1 : _io_d_clSource_WIRE_0;
  wire [15:0] _io_d_clSource_WIRE_2 = cams_2_io_data;
  wire [15:0] _GEN_34 = 3'h2 == d_clDomain ? _io_d_clSource_WIRE_2 : _GEN_33;
  wire [15:0] _io_d_clSource_WIRE_3 = cams_3_io_data;
  wire [15:0] _GEN_35 = 3'h3 == d_clDomain ? _io_d_clSource_WIRE_3 : _GEN_34;
  wire [15:0] _io_d_clSource_WIRE_4 = cams_4_io_data;
  wire [15:0] _GEN_36 = 3'h4 == d_clDomain ? _io_d_clSource_WIRE_4 : _GEN_35;
  wire [15:0] _io_d_clSource_WIRE_5 = cams_5_io_data;
  wire [15:0] _GEN_37 = 3'h5 == d_clDomain ? _io_d_clSource_WIRE_5 : _GEN_36;
  wire [15:0] _io_d_clSource_WIRE_6 = cams_6_io_data;
  wire [15:0] _GEN_38 = 3'h6 == d_clDomain ? _io_d_clSource_WIRE_6 : _GEN_37;
  wire [15:0] _io_d_clSource_WIRE_7 = cams_7_io_data;
  CHIPLINK_PREFIX_CAM cams_0 (
    .clock(cams_0_clock),
    .reset(cams_0_reset),
    .io_alloc_ready(cams_0_io_alloc_ready),
    .io_alloc_valid(cams_0_io_alloc_valid),
    .io_alloc_bits(cams_0_io_alloc_bits),
    .io_key(cams_0_io_key),
    .io_free_valid(cams_0_io_free_valid),
    .io_free_bits(cams_0_io_free_bits),
    .io_data(cams_0_io_data)
  );
  CHIPLINK_PREFIX_CAM cams_1 (
    .clock(cams_1_clock),
    .reset(cams_1_reset),
    .io_alloc_ready(cams_1_io_alloc_ready),
    .io_alloc_valid(cams_1_io_alloc_valid),
    .io_alloc_bits(cams_1_io_alloc_bits),
    .io_key(cams_1_io_key),
    .io_free_valid(cams_1_io_free_valid),
    .io_free_bits(cams_1_io_free_bits),
    .io_data(cams_1_io_data)
  );
  CHIPLINK_PREFIX_CAM cams_2 (
    .clock(cams_2_clock),
    .reset(cams_2_reset),
    .io_alloc_ready(cams_2_io_alloc_ready),
    .io_alloc_valid(cams_2_io_alloc_valid),
    .io_alloc_bits(cams_2_io_alloc_bits),
    .io_key(cams_2_io_key),
    .io_free_valid(cams_2_io_free_valid),
    .io_free_bits(cams_2_io_free_bits),
    .io_data(cams_2_io_data)
  );
  CHIPLINK_PREFIX_CAM cams_3 (
    .clock(cams_3_clock),
    .reset(cams_3_reset),
    .io_alloc_ready(cams_3_io_alloc_ready),
    .io_alloc_valid(cams_3_io_alloc_valid),
    .io_alloc_bits(cams_3_io_alloc_bits),
    .io_key(cams_3_io_key),
    .io_free_valid(cams_3_io_free_valid),
    .io_free_bits(cams_3_io_free_bits),
    .io_data(cams_3_io_data)
  );
  CHIPLINK_PREFIX_CAM cams_4 (
    .clock(cams_4_clock),
    .reset(cams_4_reset),
    .io_alloc_ready(cams_4_io_alloc_ready),
    .io_alloc_valid(cams_4_io_alloc_valid),
    .io_alloc_bits(cams_4_io_alloc_bits),
    .io_key(cams_4_io_key),
    .io_free_valid(cams_4_io_free_valid),
    .io_free_bits(cams_4_io_free_bits),
    .io_data(cams_4_io_data)
  );
  CHIPLINK_PREFIX_CAM cams_5 (
    .clock(cams_5_clock),
    .reset(cams_5_reset),
    .io_alloc_ready(cams_5_io_alloc_ready),
    .io_alloc_valid(cams_5_io_alloc_valid),
    .io_alloc_bits(cams_5_io_alloc_bits),
    .io_key(cams_5_io_key),
    .io_free_valid(cams_5_io_free_valid),
    .io_free_bits(cams_5_io_free_bits),
    .io_data(cams_5_io_data)
  );
  CHIPLINK_PREFIX_CAM cams_6 (
    .clock(cams_6_clock),
    .reset(cams_6_reset),
    .io_alloc_ready(cams_6_io_alloc_ready),
    .io_alloc_valid(cams_6_io_alloc_valid),
    .io_alloc_bits(cams_6_io_alloc_bits),
    .io_key(cams_6_io_key),
    .io_free_valid(cams_6_io_free_valid),
    .io_free_bits(cams_6_io_free_bits),
    .io_data(cams_6_io_data)
  );
  CHIPLINK_PREFIX_CAM cams_7 (
    .clock(cams_7_clock),
    .reset(cams_7_reset),
    .io_alloc_ready(cams_7_io_alloc_ready),
    .io_alloc_valid(cams_7_io_alloc_valid),
    .io_alloc_bits(cams_7_io_alloc_bits),
    .io_key(cams_7_io_key),
    .io_free_valid(cams_7_io_free_valid),
    .io_free_bits(cams_7_io_free_bits),
    .io_data(cams_7_io_data)
  );
  CHIPLINK_PREFIX_ParitalExtractor extract (
    .clock(extract_clock),
    .reset(extract_reset),
    .io_last(extract_io_last),
    .io_i_ready(extract_io_i_ready),
    .io_i_valid(extract_io_i_valid),
    .io_i_bits_opcode(extract_io_i_bits_opcode),
    .io_i_bits_param(extract_io_i_bits_param),
    .io_i_bits_size(extract_io_i_bits_size),
    .io_i_bits_source(extract_io_i_bits_source),
    .io_i_bits_address(extract_io_i_bits_address),
    .io_i_bits_mask(extract_io_i_bits_mask),
    .io_i_bits_data(extract_io_i_bits_data),
    .io_o_ready(extract_io_o_ready),
    .io_o_valid(extract_io_o_valid),
    .io_o_bits_opcode(extract_io_o_bits_opcode),
    .io_o_bits_param(extract_io_o_bits_param),
    .io_o_bits_size(extract_io_o_bits_size),
    .io_o_bits_source(extract_io_o_bits_source),
    .io_o_bits_address(extract_io_o_bits_address),
    .io_o_bits_mask(extract_io_o_bits_mask),
    .io_o_bits_data(extract_io_o_bits_data)
  );
  assign io_a_valid = extract_io_o_valid;
  assign io_a_bits_opcode = extract_io_o_bits_opcode;
  assign io_a_bits_param = extract_io_o_bits_param;
  assign io_a_bits_size = extract_io_o_bits_size;
  assign io_a_bits_source = extract_io_o_bits_source;
  assign io_a_bits_address = extract_io_o_bits_address;
  assign io_a_bits_mask = extract_io_o_bits_mask;
  assign io_a_bits_data = extract_io_o_bits_data;
  assign io_q_ready = extract_io_i_ready & _extract_io_i_valid_T | ~xmit;
  assign io_d_clSource = 3'h7 == d_clDomain ? _io_d_clSource_WIRE_7 : _GEN_38;
  assign cams_0_clock = clock;
  assign cams_0_reset = reset;
  assign cams_0_io_alloc_valid = a_sel[0] & a_first & xmit & io_q_valid & extract_io_i_ready;
  assign cams_0_io_alloc_bits = enable ? source : r_5;
  assign cams_0_io_free_valid = io_d_tlSource_valid & d_sel[0];
  assign cams_0_io_free_bits = io_d_tlSource_bits[2:0];
  assign cams_1_clock = clock;
  assign cams_1_reset = reset;
  assign cams_1_io_alloc_valid = a_sel[1] & a_first & xmit & io_q_valid & extract_io_i_ready;
  assign cams_1_io_alloc_bits = enable ? source : r_5;
  assign cams_1_io_free_valid = io_d_tlSource_valid & d_sel[1];
  assign cams_1_io_free_bits = io_d_tlSource_bits[2:0];
  assign cams_2_clock = clock;
  assign cams_2_reset = reset;
  assign cams_2_io_alloc_valid = a_sel[2] & a_first & xmit & io_q_valid & extract_io_i_ready;
  assign cams_2_io_alloc_bits = enable ? source : r_5;
  assign cams_2_io_free_valid = io_d_tlSource_valid & d_sel[2];
  assign cams_2_io_free_bits = io_d_tlSource_bits[2:0];
  assign cams_3_clock = clock;
  assign cams_3_reset = reset;
  assign cams_3_io_alloc_valid = a_sel[3] & a_first & xmit & io_q_valid & extract_io_i_ready;
  assign cams_3_io_alloc_bits = enable ? source : r_5;
  assign cams_3_io_free_valid = io_d_tlSource_valid & d_sel[3];
  assign cams_3_io_free_bits = io_d_tlSource_bits[2:0];
  assign cams_4_clock = clock;
  assign cams_4_reset = reset;
  assign cams_4_io_alloc_valid = a_sel[4] & a_first & xmit & io_q_valid & extract_io_i_ready;
  assign cams_4_io_alloc_bits = enable ? source : r_5;
  assign cams_4_io_free_valid = io_d_tlSource_valid & d_sel[4];
  assign cams_4_io_free_bits = io_d_tlSource_bits[2:0];
  assign cams_5_clock = clock;
  assign cams_5_reset = reset;
  assign cams_5_io_alloc_valid = a_sel[5] & a_first & xmit & io_q_valid & extract_io_i_ready;
  assign cams_5_io_alloc_bits = enable ? source : r_5;
  assign cams_5_io_free_valid = io_d_tlSource_valid & d_sel[5];
  assign cams_5_io_free_bits = io_d_tlSource_bits[2:0];
  assign cams_6_clock = clock;
  assign cams_6_reset = reset;
  assign cams_6_io_alloc_valid = a_sel[6] & a_first & xmit & io_q_valid & extract_io_i_ready;
  assign cams_6_io_alloc_bits = enable ? source : r_5;
  assign cams_6_io_free_valid = io_d_tlSource_valid & d_sel[6];
  assign cams_6_io_free_bits = io_d_tlSource_bits[2:0];
  assign cams_7_clock = clock;
  assign cams_7_reset = reset;
  assign cams_7_io_alloc_valid = a_sel[7] & a_first & xmit & io_q_valid & extract_io_i_ready;
  assign cams_7_io_alloc_bits = enable ? source : r_5;
  assign cams_7_io_free_valid = io_d_tlSource_valid & d_sel[7];
  assign cams_7_io_free_bits = io_d_tlSource_bits[2:0];
  assign extract_clock = clock;
  assign extract_reset = reset;
  assign extract_io_last = q_last_count == 5'h1 | q_last_first & q_last_beats_a == 5'h0;
  assign extract_io_i_valid = io_q_valid & ~stall & xmit;
  assign extract_io_i_bits_opcode = enable ? opcode : r_1;
  assign extract_io_i_bits_param = enable ? param : r_2;
  assign extract_io_i_bits_size = _GEN_3[2:0];
  assign extract_io_i_bits_source = {_GEN_4,_GEN_23};
  assign extract_io_i_bits_address = _extract_io_i_bits_address_T_1[31:0];
  assign extract_io_i_bits_mask = {extract_io_i_bits_mask_hi,extract_io_i_bits_mask_lo};
  assign extract_io_i_bits_data = io_q_bits;
  assign extract_io_o_ready = io_a_ready;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
    end else if (_q_last_T) begin
      if (_T_2) begin
        state <= 2'h1;
      end else if (_T_3) begin
        state <= 2'h2;
      end else begin
        state <= _GEN_11;
      end
    end
    if (enable) begin
      r_1 <= opcode;
    end
    if (enable) begin
      r_2 <= param;
    end
    if (enable) begin
      r_3 <= size;
    end
    if (enable) begin
      r_4 <= domain;
    end
    if (enable) begin
      r_5 <= source;
    end
    if (q_address0_enable) begin
      q_address0_r <= io_q_bits;
    end
    if (q_address1_enable) begin
      q_address1_r <= io_q_bits;
    end
    if (reset) begin
      q_last_count <= 5'h0;
    end else if (_q_last_T) begin
      if (q_last_first) begin
        q_last_count <= q_last_beats_a;
      end else begin
        q_last_count <= _q_last_count_T_1;
      end
    end
    if (_q_last_T) begin
      a_first <= _a_first_T;
    end
    if (a_first) begin
      if (3'h7 == _GEN_4) begin
        source_r <= _source_WIRE_7;
      end else if (3'h6 == _GEN_4) begin
        source_r <= _source_WIRE_6;
      end else if (3'h5 == _GEN_4) begin
        source_r <= _source_WIRE_5;
      end else begin
        source_r <= _GEN_19;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  state = _RAND_0[1:0];
  _RAND_1 = {1{`RANDOM}};
  r_1 = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  r_2 = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  r_3 = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  r_4 = _RAND_4[2:0];
  _RAND_5 = {1{`RANDOM}};
  r_5 = _RAND_5[15:0];
  _RAND_6 = {1{`RANDOM}};
  q_address0_r = _RAND_6[31:0];
  _RAND_7 = {1{`RANDOM}};
  q_address1_r = _RAND_7[31:0];
  _RAND_8 = {1{`RANDOM}};
  q_last_count = _RAND_8[4:0];
  _RAND_9 = {1{`RANDOM}};
  a_first = _RAND_9[0:0];
  _RAND_10 = {1{`RANDOM}};
  source_r = _RAND_10[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_ParitalExtractor_1(
  input        clock,
  input        reset,
  input        io_last,
  output       io_i_ready,
  input        io_i_valid,
  input  [2:0] io_i_bits_opcode
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_REG_INIT
  reg [3:0] state;
  wire  enable = io_i_bits_opcode == 3'h1;
  wire  empty = state == 4'h0;
  wire  _T = io_i_ready & io_i_valid;
  wire [3:0] _state_T_1 = state - 4'h1;
  wire [3:0] _GEN_2 = empty ? 4'h8 : _state_T_1;
  assign io_i_ready = enable & empty;
  always @(posedge clock) begin
    if (reset) begin
      state <= 4'h0;
    end else if (enable) begin
      if (_T) begin
        if (io_last) begin
          state <= 4'h0;
        end else begin
          state <= _GEN_2;
        end
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  state = _RAND_0[3:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_SourceB(
  input         clock,
  input         reset,
  output        io_q_ready,
  input         io_q_valid,
  input  [31:0] io_q_bits
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_REG_INIT
  wire  extract_clock;
  wire  extract_reset;
  wire  extract_io_last;
  wire  extract_io_i_ready;
  wire  extract_io_i_valid;
  wire [2:0] extract_io_i_bits_opcode;
  reg [1:0] state;
  wire [2:0] opcode = io_q_bits[5:3];
  wire [3:0] size = io_q_bits[12:9];
  wire  enable = state == 2'h0;
  reg [2:0] r_1;
  wire [2:0] _GEN_1 = enable ? opcode : r_1;
  reg [4:0] q_last_count;
  wire [2:0] q_last_beats_beats_shiftAmount = size[2:0];
  wire [7:0] _q_last_beats_beats_T_1 = 8'h1 << q_last_beats_beats_shiftAmount;
  wire [3:0] q_last_beats_beats_hi = _q_last_beats_beats_T_1[6:3];
  wire  q_last_beats_beats_lo = size <= 4'h2;
  wire [4:0] q_last_beats_beats = {q_last_beats_beats_hi,q_last_beats_beats_lo};
  wire  q_last_beats_masks_hi = _q_last_beats_beats_T_1[6];
  wire  q_last_beats_masks_lo = size <= 4'h5;
  wire [1:0] q_last_beats_masks = {q_last_beats_masks_hi,q_last_beats_masks_lo};
  wire  q_last_beats_partial = opcode == 3'h1;
  wire [4:0] _q_last_beats_a_T_1 = opcode[2] ? 5'h0 : q_last_beats_beats;
  wire [4:0] _q_last_beats_a_T_3 = _q_last_beats_a_T_1 + 5'h2;
  wire [1:0] _q_last_beats_a_T_4 = q_last_beats_partial ? q_last_beats_masks : 2'h0;
  wire [4:0] _GEN_15 = {{3'd0}, _q_last_beats_a_T_4};
  wire [4:0] q_last_beats_a = _q_last_beats_a_T_3 + _GEN_15;
  wire  q_last_first = q_last_count == 5'h0;
  wire  q_last = q_last_count == 5'h1 | q_last_first & q_last_beats_a == 5'h0;
  wire  _q_last_T = io_q_ready & io_q_valid;
  wire [4:0] _q_last_count_T_1 = q_last_count - 5'h1;
  wire  q_hasData = ~_GEN_1[2];
  wire  _T_4 = 2'h0 == state;
  wire  _T_5 = 2'h1 == state;
  wire  _T_6 = 2'h2 == state;
  wire [1:0] _state_T = q_hasData ? 2'h3 : 2'h0;
  wire  _T_7 = 2'h3 == state;
  wire [1:0] _state_T_2 = ~q_last ? 2'h3 : 2'h0;
  wire [1:0] _GEN_10 = _T_7 ? _state_T_2 : state;
  wire [1:0] _GEN_11 = _T_6 ? _state_T : _GEN_10;
  wire  xmit = q_last | state == 2'h3;
  CHIPLINK_PREFIX_ParitalExtractor_1 extract (
    .clock(extract_clock),
    .reset(extract_reset),
    .io_last(extract_io_last),
    .io_i_ready(extract_io_i_ready),
    .io_i_valid(extract_io_i_valid),
    .io_i_bits_opcode(extract_io_i_bits_opcode)
  );
  assign io_q_ready = extract_io_i_ready | ~xmit;
  assign extract_clock = clock;
  assign extract_reset = reset;
  assign extract_io_last = q_last_count == 5'h1 | q_last_first & q_last_beats_a == 5'h0;
  assign extract_io_i_valid = io_q_valid & xmit;
  assign extract_io_i_bits_opcode = enable ? opcode : r_1;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
    end else if (_q_last_T) begin
      if (_T_4) begin
        state <= 2'h1;
      end else if (_T_5) begin
        state <= 2'h2;
      end else begin
        state <= _GEN_11;
      end
    end
    if (enable) begin
      r_1 <= opcode;
    end
    if (reset) begin
      q_last_count <= 5'h0;
    end else if (_q_last_T) begin
      if (q_last_first) begin
        q_last_count <= q_last_beats_a;
      end else begin
        q_last_count <= _q_last_count_T_1;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  state = _RAND_0[1:0];
  _RAND_1 = {1{`RANDOM}};
  r_1 = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  q_last_count = _RAND_2[4:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_CAM_8(
  input         clock,
  input         reset,
  output        io_alloc_ready,
  input         io_alloc_valid,
  input  [15:0] io_alloc_bits,
  output [2:0]  io_key,
  input         io_free_valid,
  input  [2:0]  io_free_bits,
  output [15:0] io_data
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_1;
`endif // RANDOMIZE_REG_INIT
  reg [15:0] data [0:7];
  wire [15:0] data_io_data_MPORT_data;
  wire [2:0] data_io_data_MPORT_addr;
  wire [15:0] data_MPORT_data;
  wire [2:0] data_MPORT_addr;
  wire  data_MPORT_mask;
  wire  data_MPORT_en;
  reg [7:0] free;
  wire [8:0] _free_sel_T = {free, 1'h0};
  wire [7:0] _free_sel_T_2 = free | _free_sel_T[7:0];
  wire [9:0] _free_sel_T_3 = {_free_sel_T_2, 2'h0};
  wire [7:0] _free_sel_T_5 = _free_sel_T_2 | _free_sel_T_3[7:0];
  wire [11:0] _free_sel_T_6 = {_free_sel_T_5, 4'h0};
  wire [7:0] _free_sel_T_8 = _free_sel_T_5 | _free_sel_T_6[7:0];
  wire [8:0] _free_sel_T_10 = {_free_sel_T_8, 1'h0};
  wire [8:0] _free_sel_T_11 = ~_free_sel_T_10;
  wire [8:0] _GEN_5 = {{1'd0}, free};
  wire [8:0] free_sel = _free_sel_T_11 & _GEN_5;
  wire [3:0] io_key_hi = free_sel[7:4];
  wire [3:0] io_key_lo = free_sel[3:0];
  wire  io_key_hi_1 = |io_key_hi;
  wire [3:0] _io_key_T = io_key_hi | io_key_lo;
  wire [1:0] io_key_hi_2 = _io_key_T[3:2];
  wire [1:0] io_key_lo_1 = _io_key_T[1:0];
  wire  io_key_hi_3 = |io_key_hi_2;
  wire [1:0] _io_key_T_1 = io_key_hi_2 | io_key_lo_1;
  wire  io_key_lo_2 = _io_key_T_1[1];
  wire [1:0] io_key_lo_3 = {io_key_hi_3,io_key_lo_2};
  wire  _T = io_alloc_ready & io_alloc_valid;
  wire  bypass = _T & io_free_bits == io_key;
  wire [8:0] clr = _T ? free_sel : 9'h0;
  wire [7:0] _set_T = 8'h1 << io_free_bits;
  wire [7:0] set = io_free_valid ? _set_T : 8'h0;
  wire [8:0] _free_T = ~clr;
  wire [8:0] _free_T_1 = _GEN_5 & _free_T;
  wire [8:0] _GEN_7 = {{1'd0}, set};
  wire [8:0] _free_T_2 = _free_T_1 | _GEN_7;
  assign data_io_data_MPORT_addr = io_free_bits;
  assign data_io_data_MPORT_data = data[data_io_data_MPORT_addr];
  assign data_MPORT_data = io_alloc_bits;
  assign data_MPORT_addr = io_key;
  assign data_MPORT_mask = 1'h1;
  assign data_MPORT_en = io_alloc_ready & io_alloc_valid;
  assign io_alloc_ready = |free;
  assign io_key = {io_key_hi_1,io_key_lo_3};
  assign io_data = bypass ? io_alloc_bits : data_io_data_MPORT_data;
  always @(posedge clock) begin
    if(data_MPORT_en & data_MPORT_mask) begin
      data[data_MPORT_addr] <= data_MPORT_data;
    end
    if (reset) begin
      free <= 8'hff;
    end else begin
      free <= _free_T_2[7:0];
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 8; initvar = initvar+1)
    data[initvar] = _RAND_0[15:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_1 = {1{`RANDOM}};
  free = _RAND_1[7:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_SourceC(
  input         clock,
  input         reset,
  input         io_c_ready,
  output        io_c_valid,
  output [2:0]  io_c_bits_opcode,
  output [2:0]  io_c_bits_param,
  output [2:0]  io_c_bits_size,
  output [5:0]  io_c_bits_source,
  output [31:0] io_c_bits_address,
  output        io_q_ready,
  input         io_q_valid,
  input  [31:0] io_q_bits,
  input         io_d_tlSource_valid,
  input  [5:0]  io_d_tlSource_bits,
  output [15:0] io_d_clSource
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
`endif // RANDOMIZE_REG_INIT
  wire  cam_clock;
  wire  cam_reset;
  wire  cam_io_alloc_ready;
  wire  cam_io_alloc_valid;
  wire [15:0] cam_io_alloc_bits;
  wire [2:0] cam_io_key;
  wire  cam_io_free_valid;
  wire [2:0] cam_io_free_bits;
  wire [15:0] cam_io_data;
  reg [1:0] state;
  wire [2:0] opcode = io_q_bits[5:3];
  wire [2:0] param = io_q_bits[8:6];
  wire [3:0] size = io_q_bits[12:9];
  wire [15:0] source = io_q_bits[31:16];
  wire  enable = state == 2'h0;
  reg [2:0] r_1;
  wire [2:0] _GEN_1 = enable ? opcode : r_1;
  reg [2:0] r_2;
  reg [3:0] r_3;
  wire [3:0] _GEN_3 = enable ? size : r_3;
  reg [15:0] r_5;
  wire  q_address0_enable = state == 2'h1;
  reg [31:0] q_address0_r;
  wire [31:0] _GEN_6 = q_address0_enable ? io_q_bits : q_address0_r;
  wire  q_address1_enable = state == 2'h2;
  reg [31:0] q_address1_r;
  wire [31:0] _GEN_7 = q_address1_enable ? io_q_bits : q_address1_r;
  reg [4:0] q_last_count;
  wire [2:0] q_last_beats_beats_shiftAmount = size[2:0];
  wire [7:0] _q_last_beats_beats_T_1 = 8'h1 << q_last_beats_beats_shiftAmount;
  wire [3:0] q_last_beats_beats_hi = _q_last_beats_beats_T_1[6:3];
  wire  q_last_beats_beats_lo = size <= 4'h2;
  wire [4:0] q_last_beats_beats = {q_last_beats_beats_hi,q_last_beats_beats_lo};
  wire [4:0] _q_last_beats_c_T_1 = opcode[0] ? q_last_beats_beats : 5'h0;
  wire [4:0] q_last_beats_c = _q_last_beats_c_T_1 + 5'h2;
  wire  q_last_first = q_last_count == 5'h0;
  wire  q_last = q_last_count == 5'h1 | q_last_first & q_last_beats_c == 5'h0;
  wire  _q_last_T = io_q_ready & io_q_valid;
  wire [4:0] _q_last_count_T_1 = q_last_count - 5'h1;
  wire  q_hasData = _GEN_1[0];
  wire  _c_first_T = state != 2'h3;
  reg  c_first;
  wire  _T_3 = 2'h0 == state;
  wire  _T_4 = 2'h1 == state;
  wire  _T_5 = 2'h2 == state;
  wire [1:0] _state_T = q_hasData ? 2'h3 : 2'h0;
  wire  _T_6 = 2'h3 == state;
  wire [1:0] _state_T_2 = ~q_last ? 2'h3 : 2'h0;
  wire [1:0] _GEN_10 = _T_6 ? _state_T_2 : state;
  wire [1:0] _GEN_11 = _T_5 ? _state_T : _GEN_10;
  wire [63:0] q_address = {_GEN_7,_GEN_6};
  wire [63:0] _exists_T = q_address ^ 64'h10000000;
  wire [64:0] _exists_T_1 = {1'b0,$signed(_exists_T)};
  wire [64:0] _exists_T_3 = $signed(_exists_T_1) & -65'sh10000000;
  wire  _exists_T_4 = $signed(_exists_T_3) == 65'sh0;
  wire [63:0] _exists_T_5 = q_address ^ 64'h20000000;
  wire [64:0] _exists_T_6 = {1'b0,$signed(_exists_T_5)};
  wire [64:0] _exists_T_8 = $signed(_exists_T_6) & -65'sh20000000;
  wire  _exists_T_9 = $signed(_exists_T_8) == 65'sh0;
  wire [63:0] _exists_T_10 = q_address ^ 64'h40000000;
  wire [64:0] _exists_T_11 = {1'b0,$signed(_exists_T_10)};
  wire [64:0] _exists_T_13 = $signed(_exists_T_11) & -65'sh40000000;
  wire  _exists_T_14 = $signed(_exists_T_13) == 65'sh0;
  wire [63:0] _exists_T_15 = q_address ^ 64'h80000000;
  wire [64:0] _exists_T_16 = {1'b0,$signed(_exists_T_15)};
  wire [64:0] _exists_T_18 = $signed(_exists_T_16) & -65'sh40000000;
  wire  _exists_T_19 = $signed(_exists_T_18) == 65'sh0;
  wire [63:0] _exists_T_20 = q_address ^ 64'hc0000000;
  wire [64:0] _exists_T_21 = {1'b0,$signed(_exists_T_20)};
  wire [64:0] _exists_T_23 = $signed(_exists_T_21) & -65'sh20000000;
  wire  _exists_T_24 = $signed(_exists_T_23) == 65'sh0;
  wire  _exists_T_28 = _exists_T_4 | _exists_T_9 | _exists_T_14 | _exists_T_19 | _exists_T_24;
  wire [63:0] _exists_T_29 = q_address ^ 64'h1000;
  wire [64:0] _exists_T_30 = {1'b0,$signed(_exists_T_29)};
  wire [64:0] _exists_T_32 = $signed(_exists_T_30) & -65'sh1000;
  wire  _exists_T_33 = $signed(_exists_T_32) == 65'sh0;
  wire  exists = _exists_T_28 | _exists_T_33;
  wire [64:0] _writeOk_T_1 = {1'b0,$signed(q_address)};
  wire [64:0] _acquireOk_T_32 = $signed(_writeOk_T_1) & 65'shf0000000;
  wire  acquireOk = $signed(_acquireOk_T_32) == 65'sh0;
  wire  q_legal = exists & acquireOk;
  wire  q_release = _GEN_1 == 3'h6 | _GEN_1 == 3'h7;
  wire  source_ok = ~q_release | cam_io_alloc_ready;
  reg [2:0] source_r;
  wire [2:0] _GEN_15 = c_first ? cam_io_key : source_r;
  wire [2:0] _io_c_bits_source_T = q_release ? _GEN_15 : 3'h0;
  wire [63:0] _io_c_bits_address_T = q_legal ? q_address : 64'h1000;
  wire [51:0] io_c_bits_address_hi = _io_c_bits_address_T[63:12];
  wire [11:0] io_c_bits_address_lo = q_address[11:0];
  wire [63:0] _io_c_bits_address_T_1 = {io_c_bits_address_hi,io_c_bits_address_lo};
  wire  stall = c_first & ~source_ok;
  wire  xmit = q_last | state == 2'h3;
  wire  _io_c_valid_T = ~stall;
  CHIPLINK_PREFIX_CAM_8 cam (
    .clock(cam_clock),
    .reset(cam_reset),
    .io_alloc_ready(cam_io_alloc_ready),
    .io_alloc_valid(cam_io_alloc_valid),
    .io_alloc_bits(cam_io_alloc_bits),
    .io_key(cam_io_key),
    .io_free_valid(cam_io_free_valid),
    .io_free_bits(cam_io_free_bits),
    .io_data(cam_io_data)
  );
  assign io_c_valid = io_q_valid & ~stall & xmit;
  assign io_c_bits_opcode = enable ? opcode : r_1;
  assign io_c_bits_param = enable ? param : r_2;
  assign io_c_bits_size = _GEN_3[2:0];
  assign io_c_bits_source = {{3'd0}, _io_c_bits_source_T};
  assign io_c_bits_address = _io_c_bits_address_T_1[31:0];
  assign io_q_ready = io_c_ready & _io_c_valid_T | ~xmit;
  assign io_d_clSource = cam_io_data;
  assign cam_clock = clock;
  assign cam_reset = reset;
  assign cam_io_alloc_valid = q_release & c_first & xmit & io_q_valid & io_c_ready;
  assign cam_io_alloc_bits = enable ? source : r_5;
  assign cam_io_free_valid = io_d_tlSource_valid;
  assign cam_io_free_bits = io_d_tlSource_bits[2:0];
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
    end else if (_q_last_T) begin
      if (_T_3) begin
        state <= 2'h1;
      end else if (_T_4) begin
        state <= 2'h2;
      end else begin
        state <= _GEN_11;
      end
    end
    if (enable) begin
      r_1 <= opcode;
    end
    if (enable) begin
      r_2 <= param;
    end
    if (enable) begin
      r_3 <= size;
    end
    if (enable) begin
      r_5 <= source;
    end
    if (q_address0_enable) begin
      q_address0_r <= io_q_bits;
    end
    if (q_address1_enable) begin
      q_address1_r <= io_q_bits;
    end
    if (reset) begin
      q_last_count <= 5'h0;
    end else if (_q_last_T) begin
      if (q_last_first) begin
        q_last_count <= q_last_beats_c;
      end else begin
        q_last_count <= _q_last_count_T_1;
      end
    end
    if (_q_last_T) begin
      c_first <= _c_first_T;
    end
    if (c_first) begin
      source_r <= cam_io_key;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  state = _RAND_0[1:0];
  _RAND_1 = {1{`RANDOM}};
  r_1 = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  r_2 = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  r_3 = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  r_5 = _RAND_4[15:0];
  _RAND_5 = {1{`RANDOM}};
  q_address0_r = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  q_address1_r = _RAND_6[31:0];
  _RAND_7 = {1{`RANDOM}};
  q_last_count = _RAND_7[4:0];
  _RAND_8 = {1{`RANDOM}};
  c_first = _RAND_8[0:0];
  _RAND_9 = {1{`RANDOM}};
  source_r = _RAND_9[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_CAM_9(
  input         clock,
  input         reset,
  output        io_alloc_ready,
  input         io_alloc_valid,
  input  [15:0] io_alloc_bits,
  output [4:0]  io_key,
  output [15:0] io_data
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_1;
`endif // RANDOMIZE_REG_INIT
  reg [15:0] data [0:31];
  wire [15:0] data_io_data_MPORT_data;
  wire [4:0] data_io_data_MPORT_addr;
  wire [15:0] data_MPORT_data;
  wire [4:0] data_MPORT_addr;
  wire  data_MPORT_mask;
  wire  data_MPORT_en;
  reg [31:0] free;
  wire [32:0] _free_sel_T = {free, 1'h0};
  wire [31:0] _free_sel_T_2 = free | _free_sel_T[31:0];
  wire [33:0] _free_sel_T_3 = {_free_sel_T_2, 2'h0};
  wire [31:0] _free_sel_T_5 = _free_sel_T_2 | _free_sel_T_3[31:0];
  wire [35:0] _free_sel_T_6 = {_free_sel_T_5, 4'h0};
  wire [31:0] _free_sel_T_8 = _free_sel_T_5 | _free_sel_T_6[31:0];
  wire [39:0] _free_sel_T_9 = {_free_sel_T_8, 8'h0};
  wire [31:0] _free_sel_T_11 = _free_sel_T_8 | _free_sel_T_9[31:0];
  wire [47:0] _free_sel_T_12 = {_free_sel_T_11, 16'h0};
  wire [31:0] _free_sel_T_14 = _free_sel_T_11 | _free_sel_T_12[31:0];
  wire [32:0] _free_sel_T_16 = {_free_sel_T_14, 1'h0};
  wire [32:0] _free_sel_T_17 = ~_free_sel_T_16;
  wire [32:0] _GEN_5 = {{1'd0}, free};
  wire [32:0] free_sel = _free_sel_T_17 & _GEN_5;
  wire [15:0] io_key_hi = free_sel[31:16];
  wire [15:0] io_key_lo = free_sel[15:0];
  wire  io_key_hi_1 = |io_key_hi;
  wire [15:0] _io_key_T = io_key_hi | io_key_lo;
  wire [7:0] io_key_hi_2 = _io_key_T[15:8];
  wire [7:0] io_key_lo_1 = _io_key_T[7:0];
  wire  io_key_hi_3 = |io_key_hi_2;
  wire [7:0] _io_key_T_1 = io_key_hi_2 | io_key_lo_1;
  wire [3:0] io_key_hi_4 = _io_key_T_1[7:4];
  wire [3:0] io_key_lo_2 = _io_key_T_1[3:0];
  wire  io_key_hi_5 = |io_key_hi_4;
  wire [3:0] _io_key_T_2 = io_key_hi_4 | io_key_lo_2;
  wire [1:0] io_key_hi_6 = _io_key_T_2[3:2];
  wire [1:0] io_key_lo_3 = _io_key_T_2[1:0];
  wire  io_key_hi_7 = |io_key_hi_6;
  wire [1:0] _io_key_T_3 = io_key_hi_6 | io_key_lo_3;
  wire  io_key_lo_4 = _io_key_T_3[1];
  wire [3:0] io_key_lo_7 = {io_key_hi_3,io_key_hi_5,io_key_hi_7,io_key_lo_4};
  wire  _T = io_alloc_ready & io_alloc_valid;
  wire  bypass = _T & 5'h0 == io_key;
  wire [32:0] clr = _T ? free_sel : 33'h0;
  wire [32:0] _free_T = ~clr;
  wire [32:0] _free_T_1 = _GEN_5 & _free_T;
  assign data_io_data_MPORT_addr = 5'h0;
  assign data_io_data_MPORT_data = data[data_io_data_MPORT_addr];
  assign data_MPORT_data = io_alloc_bits;
  assign data_MPORT_addr = io_key;
  assign data_MPORT_mask = 1'h1;
  assign data_MPORT_en = io_alloc_ready & io_alloc_valid;
  assign io_alloc_ready = |free;
  assign io_key = {io_key_hi_1,io_key_lo_7};
  assign io_data = bypass ? io_alloc_bits : data_io_data_MPORT_data;
  always @(posedge clock) begin
    if(data_MPORT_en & data_MPORT_mask) begin
      data[data_MPORT_addr] <= data_MPORT_data;
    end
    if (reset) begin
      free <= 32'hffffffff;
    end else begin
      free <= _free_T_1[31:0];
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 32; initvar = initvar+1)
    data[initvar] = _RAND_0[15:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_1 = {1{`RANDOM}};
  free = _RAND_1[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_SourceD(
  input         clock,
  input         reset,
  input         io_d_ready,
  output        io_d_valid,
  output [2:0]  io_d_bits_opcode,
  output [1:0]  io_d_bits_param,
  output [2:0]  io_d_bits_size,
  output [3:0]  io_d_bits_source,
  output [4:0]  io_d_bits_sink,
  output        io_d_bits_denied,
  output [31:0] io_d_bits_data,
  output        io_d_bits_corrupt,
  output        io_q_ready,
  input         io_q_valid,
  input  [31:0] io_q_bits,
  output [15:0] io_e_clSink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
`endif // RANDOMIZE_REG_INIT
  wire  cam_clock;
  wire  cam_reset;
  wire  cam_io_alloc_ready;
  wire  cam_io_alloc_valid;
  wire [15:0] cam_io_alloc_bits;
  wire [4:0] cam_io_key;
  wire [15:0] cam_io_data;
  reg [1:0] state;
  wire [2:0] opcode = io_q_bits[5:3];
  wire [2:0] param = io_q_bits[8:6];
  wire [3:0] size = io_q_bits[12:9];
  wire [2:0] domain = io_q_bits[15:13];
  wire [15:0] source = io_q_bits[31:16];
  wire  enable = state == 2'h0;
  reg [2:0] r_1;
  wire [2:0] _GEN_1 = enable ? opcode : r_1;
  reg [2:0] r_2;
  wire [2:0] _GEN_2 = enable ? param : r_2;
  reg [3:0] r_3;
  wire [3:0] _GEN_3 = enable ? size : r_3;
  reg [2:0] r_4;
  wire [2:0] _GEN_4 = enable ? domain : r_4;
  reg [15:0] r_5;
  wire [15:0] _GEN_5 = enable ? source : r_5;
  wire  q_sink_enable = state == 2'h1;
  reg [15:0] q_sink_r;
  wire  q_grant = _GEN_1 == 3'h4 | _GEN_1 == 3'h5;
  reg [4:0] q_last_count;
  wire [2:0] q_last_beats_beats_shiftAmount = size[2:0];
  wire [7:0] _q_last_beats_beats_T_1 = 8'h1 << q_last_beats_beats_shiftAmount;
  wire [3:0] q_last_beats_beats_hi = _q_last_beats_beats_T_1[6:3];
  wire  q_last_beats_beats_lo = size <= 4'h2;
  wire [4:0] q_last_beats_beats = {q_last_beats_beats_hi,q_last_beats_beats_lo};
  wire  q_last_beats_grant = opcode == 3'h4 | opcode == 3'h5;
  wire [4:0] _q_last_beats_c_T_1 = opcode[0] ? q_last_beats_beats : 5'h0;
  wire [4:0] _GEN_40 = {{4'd0}, q_last_beats_grant};
  wire [4:0] q_last_beats_d = _q_last_beats_c_T_1 + _GEN_40;
  wire  q_last_first = q_last_count == 5'h0;
  wire  q_last = q_last_count == 5'h1 | q_last_first & q_last_beats_d == 5'h0;
  wire  _q_last_T = io_q_ready & io_q_valid;
  wire [4:0] _q_last_count_T_1 = q_last_count - 5'h1;
  wire  _d_first_T = state != 2'h2;
  reg  d_first;
  wire [1:0] s_maybe_data = q_last ? 2'h0 : 2'h2;
  wire  _T_2 = 2'h0 == state;
  wire  _T_3 = 2'h1 == state;
  wire  _T_4 = 2'h2 == state;
  wire [1:0] _GEN_9 = _T_4 ? s_maybe_data : state;
  wire  sink_ok = ~q_grant | cam_io_alloc_ready;
  reg [4:0] sink_r;
  wire [4:0] _GEN_13 = d_first ? cam_io_key : sink_r;
  wire  stall = d_first & ~sink_ok;
  wire  xmit = q_last | state == 2'h2;
  wire [2:0] _GEN_15 = 3'h1 == _GEN_5[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_16 = 3'h2 == _GEN_5[2:0] ? 3'h2 : _GEN_15;
  wire [2:0] _GEN_17 = 3'h3 == _GEN_5[2:0] ? 3'h3 : _GEN_16;
  wire [2:0] _GEN_18 = 3'h4 == _GEN_5[2:0] ? 3'h4 : _GEN_17;
  wire [2:0] _GEN_19 = 3'h5 == _GEN_5[2:0] ? 3'h5 : _GEN_18;
  wire [2:0] _GEN_20 = 3'h6 == _GEN_5[2:0] ? 3'h6 : _GEN_19;
  wire [2:0] _GEN_21 = 3'h7 == _GEN_5[2:0] ? 3'h7 : _GEN_20;
  wire [3:0] _GEN_23 = 3'h1 == _GEN_5[2:0] ? 4'h9 : 4'h8;
  wire [3:0] _GEN_24 = 3'h2 == _GEN_5[2:0] ? 4'ha : _GEN_23;
  wire [3:0] _GEN_25 = 3'h3 == _GEN_5[2:0] ? 4'hb : _GEN_24;
  wire [3:0] _GEN_26 = 3'h4 == _GEN_5[2:0] ? 4'hc : _GEN_25;
  wire [3:0] _GEN_27 = 3'h5 == _GEN_5[2:0] ? 4'hd : _GEN_26;
  wire [3:0] _GEN_28 = 3'h6 == _GEN_5[2:0] ? 4'he : _GEN_27;
  wire [3:0] _GEN_29 = 3'h7 == _GEN_5[2:0] ? 4'hf : _GEN_28;
  wire [3:0] _io_d_bits_source_WIRE_1 = {{1'd0}, _GEN_21};
  wire [3:0] _GEN_31 = 3'h1 == _GEN_4 ? _io_d_bits_source_WIRE_1 : 4'h0;
  wire [3:0] _GEN_32 = 3'h2 == _GEN_4 ? _GEN_29 : _GEN_31;
  wire [3:0] _GEN_33 = 3'h3 == _GEN_4 ? 4'h0 : _GEN_32;
  wire [3:0] _GEN_34 = 3'h4 == _GEN_4 ? 4'h0 : _GEN_33;
  wire [3:0] _GEN_35 = 3'h5 == _GEN_4 ? 4'h0 : _GEN_34;
  wire [3:0] _GEN_36 = 3'h6 == _GEN_4 ? 4'h0 : _GEN_35;
  wire  io_d_bits_corrupt_opdata = io_d_bits_opcode[0];
  wire  _io_d_valid_T = ~stall;
  CHIPLINK_PREFIX_CAM_9 cam (
    .clock(cam_clock),
    .reset(cam_reset),
    .io_alloc_ready(cam_io_alloc_ready),
    .io_alloc_valid(cam_io_alloc_valid),
    .io_alloc_bits(cam_io_alloc_bits),
    .io_key(cam_io_key),
    .io_data(cam_io_data)
  );
  assign io_d_valid = io_q_valid & ~stall & xmit;
  assign io_d_bits_opcode = enable ? opcode : r_1;
  assign io_d_bits_param = _GEN_2[1:0];
  assign io_d_bits_size = _GEN_3[2:0];
  assign io_d_bits_source = 3'h7 == _GEN_4 ? 4'h0 : _GEN_36;
  assign io_d_bits_sink = q_grant ? _GEN_13 : 5'h0;
  assign io_d_bits_denied = _GEN_2[2];
  assign io_d_bits_data = io_q_bits;
  assign io_d_bits_corrupt = io_d_bits_denied & io_d_bits_corrupt_opdata;
  assign io_q_ready = io_d_ready & _io_d_valid_T | ~xmit;
  assign io_e_clSink = cam_io_data;
  assign cam_clock = clock;
  assign cam_reset = reset;
  assign cam_io_alloc_valid = q_grant & d_first & xmit & io_q_valid & io_d_ready;
  assign cam_io_alloc_bits = q_sink_enable ? io_q_bits[15:0] : q_sink_r;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
    end else if (_q_last_T) begin
      if (_T_2) begin
        if (q_grant) begin
          state <= 2'h1;
        end else begin
          state <= s_maybe_data;
        end
      end else if (_T_3) begin
        state <= s_maybe_data;
      end else begin
        state <= _GEN_9;
      end
    end
    if (enable) begin
      r_1 <= opcode;
    end
    if (enable) begin
      r_2 <= param;
    end
    if (enable) begin
      r_3 <= size;
    end
    if (enable) begin
      r_4 <= domain;
    end
    if (enable) begin
      r_5 <= source;
    end
    if (q_sink_enable) begin
      q_sink_r <= io_q_bits[15:0];
    end
    if (reset) begin
      q_last_count <= 5'h0;
    end else if (_q_last_T) begin
      if (q_last_first) begin
        q_last_count <= q_last_beats_d;
      end else begin
        q_last_count <= _q_last_count_T_1;
      end
    end
    if (_q_last_T) begin
      d_first <= _d_first_T;
    end
    if (d_first) begin
      sink_r <= cam_io_key;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  state = _RAND_0[1:0];
  _RAND_1 = {1{`RANDOM}};
  r_1 = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  r_2 = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  r_3 = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  r_4 = _RAND_4[2:0];
  _RAND_5 = {1{`RANDOM}};
  r_5 = _RAND_5[15:0];
  _RAND_6 = {1{`RANDOM}};
  q_sink_r = _RAND_6[15:0];
  _RAND_7 = {1{`RANDOM}};
  q_last_count = _RAND_7[4:0];
  _RAND_8 = {1{`RANDOM}};
  d_first = _RAND_8[0:0];
  _RAND_9 = {1{`RANDOM}};
  sink_r = _RAND_9[4:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_SourceE(
  input         io_e_ready,
  output        io_e_valid,
  output        io_e_bits_sink,
  output        io_q_ready,
  input         io_q_valid,
  input  [31:0] io_q_bits
);
  wire [15:0] q_sink = io_q_bits[31:16];
  assign io_e_valid = io_q_valid;
  assign io_e_bits_sink = q_sink[0];
  assign io_q_ready = io_e_ready;
endmodule
module CHIPLINK_PREFIX_HellaFlowQueue(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [31:0] io_enq_bits,
  input         io_deq_ready,
  output        io_deq_valid,
  output [31:0] io_deq_bits
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_REG_INIT
  wire [4:0] ram_R0_addr;
  wire  ram_R0_en;
  wire  ram_R0_clk;
  wire [31:0] ram_R0_data;
  wire [4:0] ram_W0_addr;
  wire  ram_W0_en;
  wire  ram_W0_clk;
  wire [31:0] ram_W0_data;
  wire  _do_enq_T = io_enq_ready & io_enq_valid;
  reg [4:0] enq_ptr;
  reg [4:0] deq_ptr;
  wire  ptr_match = enq_ptr == deq_ptr;
  reg  maybe_full;
  wire  empty = ptr_match & ~maybe_full;
  wire  do_flow = empty & io_deq_ready;
  wire  _do_enq_T_1 = ~do_flow;
  wire  do_enq = _do_enq_T & ~do_flow;
  wire  _do_deq_T = io_deq_ready & io_deq_valid;
  wire  do_deq = _do_deq_T & _do_enq_T_1;
  wire [4:0] _enq_ptr_wrap_value_T_1 = enq_ptr + 5'h1;
  wire  wrap_wrap = deq_ptr == 5'h1f;
  wire [4:0] _wrap_value_T_1 = deq_ptr + 5'h1;
  wire  deq_done = do_deq & wrap_wrap;
  wire  full = ptr_match & maybe_full;
  wire [4:0] _atLeastTwo_T_1 = enq_ptr - deq_ptr;
  wire  atLeastTwo = full | _atLeastTwo_T_1 >= 5'h2;
  wire [4:0] _raddr_T_2 = deq_done ? 5'h0 : _wrap_value_T_1;
  reg  ram_out_valid;
  CHIPLINK_PREFIX_ram ram (
    .R0_addr(ram_R0_addr),
    .R0_en(ram_R0_en),
    .R0_clk(ram_R0_clk),
    .R0_data(ram_R0_data),
    .W0_addr(ram_W0_addr),
    .W0_en(ram_W0_en),
    .W0_clk(ram_W0_clk),
    .W0_data(ram_W0_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = empty ? io_enq_valid : ram_out_valid;
  assign io_deq_bits = empty ? io_enq_bits : ram_R0_data;
  assign ram_R0_addr = io_deq_valid ? _raddr_T_2 : deq_ptr;
  assign ram_R0_en = io_deq_ready & (atLeastTwo | ~io_deq_valid & ~empty);
  assign ram_R0_clk = clock;
  assign ram_W0_addr = enq_ptr;
  assign ram_W0_en = _do_enq_T & ~do_flow;
  assign ram_W0_clk = clock;
  assign ram_W0_data = io_enq_bits;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr <= 5'h0;
    end else if (do_enq) begin
      enq_ptr <= _enq_ptr_wrap_value_T_1;
    end
    if (reset) begin
      deq_ptr <= 5'h0;
    end else if (do_deq) begin
      deq_ptr <= _wrap_value_T_1;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      maybe_full <= do_enq;
    end
    ram_out_valid <= io_deq_ready & (atLeastTwo | ~io_deq_valid & ~empty);
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  enq_ptr = _RAND_0[4:0];
  _RAND_1 = {1{`RANDOM}};
  deq_ptr = _RAND_1[4:0];
  _RAND_2 = {1{`RANDOM}};
  maybe_full = _RAND_2[0:0];
  _RAND_3 = {1{`RANDOM}};
  ram_out_valid = _RAND_3[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Queue_6(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [31:0] io_enq_bits,
  input         io_deq_ready,
  output        io_deq_valid,
  output [31:0] io_deq_bits
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_1;
`endif // RANDOMIZE_REG_INIT
  reg [31:0] ram [0:0];
  wire [31:0] ram_io_deq_bits_MPORT_data;
  wire  ram_io_deq_bits_MPORT_addr;
  wire [31:0] ram_MPORT_data;
  wire  ram_MPORT_addr;
  wire  ram_MPORT_mask;
  wire  ram_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  do_enq = io_enq_ready & io_enq_valid;
  wire  do_deq = io_deq_ready & io_deq_valid;
  assign ram_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_io_deq_bits_MPORT_data = ram[ram_io_deq_bits_MPORT_addr];
  assign ram_MPORT_data = io_enq_bits;
  assign ram_MPORT_addr = 1'h0;
  assign ram_MPORT_mask = 1'h1;
  assign ram_MPORT_en = io_enq_ready & io_enq_valid;
  assign io_enq_ready = io_deq_ready | empty;
  assign io_deq_valid = ~empty;
  assign io_deq_bits = ram_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_MPORT_en & ram_MPORT_mask) begin
      ram[ram_MPORT_addr] <= ram_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      maybe_full <= do_enq;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram[initvar] = _RAND_0[31:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_1 = {1{`RANDOM}};
  maybe_full = _RAND_1[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_HellaQueue(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [31:0] io_enq_bits,
  input         io_deq_ready,
  output        io_deq_valid,
  output [31:0] io_deq_bits
);
  wire  fq_clock;
  wire  fq_reset;
  wire  fq_io_enq_ready;
  wire  fq_io_enq_valid;
  wire [31:0] fq_io_enq_bits;
  wire  fq_io_deq_ready;
  wire  fq_io_deq_valid;
  wire [31:0] fq_io_deq_bits;
  wire  io_deq_q_clock;
  wire  io_deq_q_reset;
  wire  io_deq_q_io_enq_ready;
  wire  io_deq_q_io_enq_valid;
  wire [31:0] io_deq_q_io_enq_bits;
  wire  io_deq_q_io_deq_ready;
  wire  io_deq_q_io_deq_valid;
  wire [31:0] io_deq_q_io_deq_bits;
  CHIPLINK_PREFIX_HellaFlowQueue fq (
    .clock(fq_clock),
    .reset(fq_reset),
    .io_enq_ready(fq_io_enq_ready),
    .io_enq_valid(fq_io_enq_valid),
    .io_enq_bits(fq_io_enq_bits),
    .io_deq_ready(fq_io_deq_ready),
    .io_deq_valid(fq_io_deq_valid),
    .io_deq_bits(fq_io_deq_bits)
  );
  CHIPLINK_PREFIX_Queue_6 io_deq_q (
    .clock(io_deq_q_clock),
    .reset(io_deq_q_reset),
    .io_enq_ready(io_deq_q_io_enq_ready),
    .io_enq_valid(io_deq_q_io_enq_valid),
    .io_enq_bits(io_deq_q_io_enq_bits),
    .io_deq_ready(io_deq_q_io_deq_ready),
    .io_deq_valid(io_deq_q_io_deq_valid),
    .io_deq_bits(io_deq_q_io_deq_bits)
  );
  assign io_enq_ready = fq_io_enq_ready;
  assign io_deq_valid = io_deq_q_io_deq_valid;
  assign io_deq_bits = io_deq_q_io_deq_bits;
  assign fq_clock = clock;
  assign fq_reset = reset;
  assign fq_io_enq_valid = io_enq_valid;
  assign fq_io_enq_bits = io_enq_bits;
  assign fq_io_deq_ready = io_deq_q_io_enq_ready;
  assign io_deq_q_clock = clock;
  assign io_deq_q_reset = reset;
  assign io_deq_q_io_enq_valid = fq_io_deq_valid;
  assign io_deq_q_io_enq_bits = fq_io_deq_bits;
  assign io_deq_q_io_deq_ready = io_deq_ready;
endmodule
module CHIPLINK_PREFIX_AsyncResetSynchronizerPrimitiveShiftReg_d3_i0(
  input   clock,
  input   reset,
  input   io_d,
  output  io_q
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_REG_INIT
  reg  sync_0;
  reg  sync_1;
  reg  sync_2;
  assign io_q = sync_0;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      sync_0 <= 1'h0;
    end else begin
      sync_0 <= sync_1;
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      sync_1 <= 1'h0;
    end else begin
      sync_1 <= sync_2;
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      sync_2 <= 1'h0;
    end else begin
      sync_2 <= io_d;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  sync_0 = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  sync_1 = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  sync_2 = _RAND_2[0:0];
`endif // RANDOMIZE_REG_INIT
  if (reset) begin
    sync_0 = 1'h0;
  end
  if (reset) begin
    sync_1 = 1'h0;
  end
  if (reset) begin
    sync_2 = 1'h0;
  end
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_AsyncResetSynchronizerShiftReg_w4_d3_i0(
  input        clock,
  input        reset,
  input  [3:0] io_d,
  output [3:0] io_q
);
  wire  output_chain_clock;
  wire  output_chain_reset;
  wire  output_chain_io_d;
  wire  output_chain_io_q;
  wire  output_chain_1_clock;
  wire  output_chain_1_reset;
  wire  output_chain_1_io_d;
  wire  output_chain_1_io_q;
  wire  output_chain_2_clock;
  wire  output_chain_2_reset;
  wire  output_chain_2_io_d;
  wire  output_chain_2_io_q;
  wire  output_chain_3_clock;
  wire  output_chain_3_reset;
  wire  output_chain_3_io_d;
  wire  output_chain_3_io_q;
  wire  output_1 = output_chain_1_io_q;
  wire  output_0 = output_chain_io_q;
  wire [1:0] io_q_lo = {output_1,output_0};
  wire  output_3 = output_chain_3_io_q;
  wire  output_2 = output_chain_2_io_q;
  wire [1:0] io_q_hi = {output_3,output_2};
  CHIPLINK_PREFIX_AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain (
    .clock(output_chain_clock),
    .reset(output_chain_reset),
    .io_d(output_chain_io_d),
    .io_q(output_chain_io_q)
  );
  CHIPLINK_PREFIX_AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain_1 (
    .clock(output_chain_1_clock),
    .reset(output_chain_1_reset),
    .io_d(output_chain_1_io_d),
    .io_q(output_chain_1_io_q)
  );
  CHIPLINK_PREFIX_AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain_2 (
    .clock(output_chain_2_clock),
    .reset(output_chain_2_reset),
    .io_d(output_chain_2_io_d),
    .io_q(output_chain_2_io_q)
  );
  CHIPLINK_PREFIX_AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain_3 (
    .clock(output_chain_3_clock),
    .reset(output_chain_3_reset),
    .io_d(output_chain_3_io_d),
    .io_q(output_chain_3_io_q)
  );
  assign io_q = {io_q_hi,io_q_lo};
  assign output_chain_clock = clock;
  assign output_chain_reset = reset;
  assign output_chain_io_d = io_d[0];
  assign output_chain_1_clock = clock;
  assign output_chain_1_reset = reset;
  assign output_chain_1_io_d = io_d[1];
  assign output_chain_2_clock = clock;
  assign output_chain_2_reset = reset;
  assign output_chain_2_io_d = io_d[2];
  assign output_chain_3_clock = clock;
  assign output_chain_3_reset = reset;
  assign output_chain_3_io_d = io_d[3];
endmodule
module CHIPLINK_PREFIX_AsyncResetSynchronizerShiftReg_w1_d3_i0(
  input   clock,
  input   reset,
  input   io_d,
  output  io_q
);
  wire  output_chain_clock;
  wire  output_chain_reset;
  wire  output_chain_io_d;
  wire  output_chain_io_q;
  CHIPLINK_PREFIX_AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain (
    .clock(output_chain_clock),
    .reset(output_chain_reset),
    .io_d(output_chain_io_d),
    .io_q(output_chain_io_q)
  );
  assign io_q = output_chain_io_q;
  assign output_chain_clock = clock;
  assign output_chain_reset = reset;
  assign output_chain_io_d = io_d;
endmodule
module CHIPLINK_PREFIX_AsyncValidSync(
  input   io_in,
  output  io_out,
  input   clock,
  input   reset
);
  wire  io_out_source_valid_0_clock;
  wire  io_out_source_valid_0_reset;
  wire  io_out_source_valid_0_io_d;
  wire  io_out_source_valid_0_io_q;
  CHIPLINK_PREFIX_AsyncResetSynchronizerShiftReg_w1_d3_i0 io_out_source_valid_0 (
    .clock(io_out_source_valid_0_clock),
    .reset(io_out_source_valid_0_reset),
    .io_d(io_out_source_valid_0_io_d),
    .io_q(io_out_source_valid_0_io_q)
  );
  assign io_out = io_out_source_valid_0_io_q;
  assign io_out_source_valid_0_clock = clock;
  assign io_out_source_valid_0_reset = reset;
  assign io_out_source_valid_0_io_d = io_in;
endmodule
module CHIPLINK_PREFIX_AsyncQueueSource(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [31:0] io_enq_bits,
  output [31:0] io_async_mem_0,
  output [31:0] io_async_mem_1,
  output [31:0] io_async_mem_2,
  output [31:0] io_async_mem_3,
  output [31:0] io_async_mem_4,
  output [31:0] io_async_mem_5,
  output [31:0] io_async_mem_6,
  output [31:0] io_async_mem_7,
  input  [3:0]  io_async_ridx,
  output [3:0]  io_async_widx,
  input         io_async_safe_ridx_valid,
  output        io_async_safe_widx_valid,
  output        io_async_safe_source_reset_n,
  input         io_async_safe_sink_reset_n
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
`endif // RANDOMIZE_REG_INIT
  wire  ridx_ridx_gray_clock;
  wire  ridx_ridx_gray_reset;
  wire [3:0] ridx_ridx_gray_io_d;
  wire [3:0] ridx_ridx_gray_io_q;
  wire  source_valid_0_io_in;
  wire  source_valid_0_io_out;
  wire  source_valid_0_clock;
  wire  source_valid_0_reset;
  wire  source_valid_1_io_in;
  wire  source_valid_1_io_out;
  wire  source_valid_1_clock;
  wire  source_valid_1_reset;
  wire  sink_extend_io_in;
  wire  sink_extend_io_out;
  wire  sink_extend_clock;
  wire  sink_extend_reset;
  wire  sink_valid_io_in;
  wire  sink_valid_io_out;
  wire  sink_valid_clock;
  wire  sink_valid_reset;
  reg [31:0] mem_0;
  reg [31:0] mem_1;
  reg [31:0] mem_2;
  reg [31:0] mem_3;
  reg [31:0] mem_4;
  reg [31:0] mem_5;
  reg [31:0] mem_6;
  reg [31:0] mem_7;
  wire  _widx_T_1 = io_enq_ready & io_enq_valid;
  wire  sink_ready = sink_valid_io_out;
  wire  _widx_T_2 = ~sink_ready;
  reg [3:0] widx_widx_bin;
  wire [3:0] _GEN_16 = {{3'd0}, _widx_T_1};
  wire [3:0] _widx_incremented_T_1 = widx_widx_bin + _GEN_16;
  wire [3:0] widx_incremented = _widx_T_2 ? 4'h0 : _widx_incremented_T_1;
  wire [3:0] _GEN_17 = {{1'd0}, widx_incremented[3:1]};
  wire [3:0] widx = widx_incremented ^ _GEN_17;
  wire [3:0] ridx = ridx_ridx_gray_io_q;
  wire [3:0] _ready_T = ridx ^ 4'hc;
  wire [2:0] _index_T_2 = {io_async_widx[3], 2'h0};
  wire [2:0] index = io_async_widx[2:0] ^ _index_T_2;
  reg  ready_reg;
  reg [3:0] widx_gray;
  CHIPLINK_PREFIX_AsyncResetSynchronizerShiftReg_w4_d3_i0 ridx_ridx_gray (
    .clock(ridx_ridx_gray_clock),
    .reset(ridx_ridx_gray_reset),
    .io_d(ridx_ridx_gray_io_d),
    .io_q(ridx_ridx_gray_io_q)
  );
  CHIPLINK_PREFIX_AsyncValidSync source_valid_0 (
    .io_in(source_valid_0_io_in),
    .io_out(source_valid_0_io_out),
    .clock(source_valid_0_clock),
    .reset(source_valid_0_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync source_valid_1 (
    .io_in(source_valid_1_io_in),
    .io_out(source_valid_1_io_out),
    .clock(source_valid_1_clock),
    .reset(source_valid_1_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync sink_extend (
    .io_in(sink_extend_io_in),
    .io_out(sink_extend_io_out),
    .clock(sink_extend_clock),
    .reset(sink_extend_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync sink_valid (
    .io_in(sink_valid_io_in),
    .io_out(sink_valid_io_out),
    .clock(sink_valid_clock),
    .reset(sink_valid_reset)
  );
  assign io_enq_ready = ready_reg & sink_ready;
  assign io_async_mem_0 = mem_0;
  assign io_async_mem_1 = mem_1;
  assign io_async_mem_2 = mem_2;
  assign io_async_mem_3 = mem_3;
  assign io_async_mem_4 = mem_4;
  assign io_async_mem_5 = mem_5;
  assign io_async_mem_6 = mem_6;
  assign io_async_mem_7 = mem_7;
  assign io_async_widx = widx_gray;
  assign io_async_safe_widx_valid = source_valid_1_io_out;
  assign io_async_safe_source_reset_n = ~reset;
  assign ridx_ridx_gray_clock = clock;
  assign ridx_ridx_gray_reset = reset;
  assign ridx_ridx_gray_io_d = io_async_ridx;
  assign source_valid_0_io_in = 1'h1;
  assign source_valid_0_clock = clock;
  assign source_valid_0_reset = reset | ~io_async_safe_sink_reset_n;
  assign source_valid_1_io_in = source_valid_0_io_out;
  assign source_valid_1_clock = clock;
  assign source_valid_1_reset = reset | ~io_async_safe_sink_reset_n;
  assign sink_extend_io_in = io_async_safe_ridx_valid;
  assign sink_extend_clock = clock;
  assign sink_extend_reset = reset | ~io_async_safe_sink_reset_n;
  assign sink_valid_io_in = sink_extend_io_out;
  assign sink_valid_clock = clock;
  assign sink_valid_reset = reset;
  always @(posedge clock) begin
    if (_widx_T_1) begin
      if (3'h0 == index) begin
        mem_0 <= io_enq_bits;
      end
    end
    if (_widx_T_1) begin
      if (3'h1 == index) begin
        mem_1 <= io_enq_bits;
      end
    end
    if (_widx_T_1) begin
      if (3'h2 == index) begin
        mem_2 <= io_enq_bits;
      end
    end
    if (_widx_T_1) begin
      if (3'h3 == index) begin
        mem_3 <= io_enq_bits;
      end
    end
    if (_widx_T_1) begin
      if (3'h4 == index) begin
        mem_4 <= io_enq_bits;
      end
    end
    if (_widx_T_1) begin
      if (3'h5 == index) begin
        mem_5 <= io_enq_bits;
      end
    end
    if (_widx_T_1) begin
      if (3'h6 == index) begin
        mem_6 <= io_enq_bits;
      end
    end
    if (_widx_T_1) begin
      if (3'h7 == index) begin
        mem_7 <= io_enq_bits;
      end
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_widx_bin <= 4'h0;
    end else if (_widx_T_2) begin
      widx_widx_bin <= 4'h0;
    end else begin
      widx_widx_bin <= _widx_incremented_T_1;
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ready_reg <= 1'h0;
    end else begin
      ready_reg <= sink_ready & widx != _ready_T;
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_gray <= 4'h0;
    end else begin
      widx_gray <= widx_incremented ^ _GEN_17;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  mem_0 = _RAND_0[31:0];
  _RAND_1 = {1{`RANDOM}};
  mem_1 = _RAND_1[31:0];
  _RAND_2 = {1{`RANDOM}};
  mem_2 = _RAND_2[31:0];
  _RAND_3 = {1{`RANDOM}};
  mem_3 = _RAND_3[31:0];
  _RAND_4 = {1{`RANDOM}};
  mem_4 = _RAND_4[31:0];
  _RAND_5 = {1{`RANDOM}};
  mem_5 = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  mem_6 = _RAND_6[31:0];
  _RAND_7 = {1{`RANDOM}};
  mem_7 = _RAND_7[31:0];
  _RAND_8 = {1{`RANDOM}};
  widx_widx_bin = _RAND_8[3:0];
  _RAND_9 = {1{`RANDOM}};
  ready_reg = _RAND_9[0:0];
  _RAND_10 = {1{`RANDOM}};
  widx_gray = _RAND_10[3:0];
`endif // RANDOMIZE_REG_INIT
  if (reset) begin
    widx_widx_bin = 4'h0;
  end
  if (reset) begin
    ready_reg = 1'h0;
  end
  if (reset) begin
    widx_gray = 4'h0;
  end
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_AsyncResetSynchronizerShiftReg_w1_d3_i0_20(
  input   clock,
  input   reset,
  input   io_d,
  output  io_q
);
  wire  output_chain_clock;
  wire  output_chain_reset;
  wire  output_chain_io_d;
  wire  output_chain_io_q;
  CHIPLINK_PREFIX_AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain (
    .clock(output_chain_clock),
    .reset(output_chain_reset),
    .io_d(output_chain_io_d),
    .io_q(output_chain_io_q)
  );
  assign io_q = output_chain_io_q;
  assign output_chain_clock = clock;
  assign output_chain_reset = reset;
  assign output_chain_io_d = io_d;
endmodule
module CHIPLINK_PREFIX_AsyncQueueSource_5(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input  [19:0] io_enq_bits_a,
  input  [19:0] io_enq_bits_b,
  input  [19:0] io_enq_bits_c,
  input  [19:0] io_enq_bits_d,
  input  [19:0] io_enq_bits_e,
  output [19:0] io_async_mem_0_a,
  output [19:0] io_async_mem_0_b,
  output [19:0] io_async_mem_0_c,
  output [19:0] io_async_mem_0_d,
  output [19:0] io_async_mem_0_e,
  input         io_async_ridx,
  output        io_async_widx,
  input         io_async_safe_ridx_valid,
  output        io_async_safe_widx_valid,
  output        io_async_safe_source_reset_n,
  input         io_async_safe_sink_reset_n
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
`endif // RANDOMIZE_REG_INIT
  wire  ridx_ridx_gray_clock;
  wire  ridx_ridx_gray_reset;
  wire  ridx_ridx_gray_io_d;
  wire  ridx_ridx_gray_io_q;
  wire  source_valid_0_io_in;
  wire  source_valid_0_io_out;
  wire  source_valid_0_clock;
  wire  source_valid_0_reset;
  wire  source_valid_1_io_in;
  wire  source_valid_1_io_out;
  wire  source_valid_1_clock;
  wire  source_valid_1_reset;
  wire  sink_extend_io_in;
  wire  sink_extend_io_out;
  wire  sink_extend_clock;
  wire  sink_extend_reset;
  wire  sink_valid_io_in;
  wire  sink_valid_io_out;
  wire  sink_valid_clock;
  wire  sink_valid_reset;
  reg [19:0] mem_0_a;
  reg [19:0] mem_0_b;
  reg [19:0] mem_0_c;
  reg [19:0] mem_0_d;
  reg [19:0] mem_0_e;
  wire  sink_ready = sink_valid_io_out;
  wire  _widx_T_2 = ~sink_ready;
  reg  widx_widx_bin;
  wire  widx_incremented = _widx_T_2 ? 1'h0 : widx_widx_bin + io_enq_ready;
  wire  ridx = ridx_ridx_gray_io_q;
  reg  ready_reg;
  reg  widx_gray;
  CHIPLINK_PREFIX_AsyncResetSynchronizerShiftReg_w1_d3_i0_20 ridx_ridx_gray (
    .clock(ridx_ridx_gray_clock),
    .reset(ridx_ridx_gray_reset),
    .io_d(ridx_ridx_gray_io_d),
    .io_q(ridx_ridx_gray_io_q)
  );
  CHIPLINK_PREFIX_AsyncValidSync source_valid_0 (
    .io_in(source_valid_0_io_in),
    .io_out(source_valid_0_io_out),
    .clock(source_valid_0_clock),
    .reset(source_valid_0_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync source_valid_1 (
    .io_in(source_valid_1_io_in),
    .io_out(source_valid_1_io_out),
    .clock(source_valid_1_clock),
    .reset(source_valid_1_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync sink_extend (
    .io_in(sink_extend_io_in),
    .io_out(sink_extend_io_out),
    .clock(sink_extend_clock),
    .reset(sink_extend_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync sink_valid (
    .io_in(sink_valid_io_in),
    .io_out(sink_valid_io_out),
    .clock(sink_valid_clock),
    .reset(sink_valid_reset)
  );
  assign io_enq_ready = ready_reg & sink_ready;
  assign io_async_mem_0_a = mem_0_a;
  assign io_async_mem_0_b = mem_0_b;
  assign io_async_mem_0_c = mem_0_c;
  assign io_async_mem_0_d = mem_0_d;
  assign io_async_mem_0_e = mem_0_e;
  assign io_async_widx = widx_gray;
  assign io_async_safe_widx_valid = source_valid_1_io_out;
  assign io_async_safe_source_reset_n = ~reset;
  assign ridx_ridx_gray_clock = clock;
  assign ridx_ridx_gray_reset = reset;
  assign ridx_ridx_gray_io_d = io_async_ridx;
  assign source_valid_0_io_in = 1'h1;
  assign source_valid_0_clock = clock;
  assign source_valid_0_reset = reset | ~io_async_safe_sink_reset_n;
  assign source_valid_1_io_in = source_valid_0_io_out;
  assign source_valid_1_clock = clock;
  assign source_valid_1_reset = reset | ~io_async_safe_sink_reset_n;
  assign sink_extend_io_in = io_async_safe_ridx_valid;
  assign sink_extend_clock = clock;
  assign sink_extend_reset = reset | ~io_async_safe_sink_reset_n;
  assign sink_valid_io_in = sink_extend_io_out;
  assign sink_valid_clock = clock;
  assign sink_valid_reset = reset;
  always @(posedge clock) begin
    if (io_enq_ready) begin
      mem_0_a <= io_enq_bits_a;
    end
    if (io_enq_ready) begin
      mem_0_b <= io_enq_bits_b;
    end
    if (io_enq_ready) begin
      mem_0_c <= io_enq_bits_c;
    end
    if (io_enq_ready) begin
      mem_0_d <= io_enq_bits_d;
    end
    if (io_enq_ready) begin
      mem_0_e <= io_enq_bits_e;
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_widx_bin <= 1'h0;
    end else if (_widx_T_2) begin
      widx_widx_bin <= 1'h0;
    end else begin
      widx_widx_bin <= widx_widx_bin + io_enq_ready;
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ready_reg <= 1'h0;
    end else begin
      ready_reg <= sink_ready & widx_incremented != (ridx ^ 1'h1);
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_gray <= 1'h0;
    end else if (_widx_T_2) begin
      widx_gray <= 1'h0;
    end else begin
      widx_gray <= widx_widx_bin + io_enq_ready;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  mem_0_a = _RAND_0[19:0];
  _RAND_1 = {1{`RANDOM}};
  mem_0_b = _RAND_1[19:0];
  _RAND_2 = {1{`RANDOM}};
  mem_0_c = _RAND_2[19:0];
  _RAND_3 = {1{`RANDOM}};
  mem_0_d = _RAND_3[19:0];
  _RAND_4 = {1{`RANDOM}};
  mem_0_e = _RAND_4[19:0];
  _RAND_5 = {1{`RANDOM}};
  widx_widx_bin = _RAND_5[0:0];
  _RAND_6 = {1{`RANDOM}};
  ready_reg = _RAND_6[0:0];
  _RAND_7 = {1{`RANDOM}};
  widx_gray = _RAND_7[0:0];
`endif // RANDOMIZE_REG_INIT
  if (reset) begin
    widx_widx_bin = 1'h0;
  end
  if (reset) begin
    ready_reg = 1'h0;
  end
  if (reset) begin
    widx_gray = 1'h0;
  end
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_RX(
  input         clock,
  input         reset,
  input         io_b2c_send,
  input  [7:0]  io_b2c_data,
  output [31:0] io_a_mem_0,
  output [31:0] io_a_mem_1,
  output [31:0] io_a_mem_2,
  output [31:0] io_a_mem_3,
  output [31:0] io_a_mem_4,
  output [31:0] io_a_mem_5,
  output [31:0] io_a_mem_6,
  output [31:0] io_a_mem_7,
  input  [3:0]  io_a_ridx,
  output [3:0]  io_a_widx,
  input         io_a_safe_ridx_valid,
  output        io_a_safe_widx_valid,
  output        io_a_safe_source_reset_n,
  input         io_a_safe_sink_reset_n,
  output reg [31:0] b2c_data_concat,
  output reg  b2c_data_valid,
  output [31:0] io_bmem_0,
  output [31:0] io_bmem_1,
  output [31:0] io_bmem_2,
  output [31:0] io_bmem_3,
  output [31:0] io_bmem_4,
  output [31:0] io_bmem_5,
  output [31:0] io_bmem_6,
  output [31:0] io_bmem_7,
  input  [3:0]  io_bridx,
  output [3:0]  io_bwidx,
  input         io_bsafe_ridx_valid,
  output        io_bsafe_widx_valid,
  output        io_bsafe_source_reset_n,
  input         io_bsafe_sink_reset_n,
  output [31:0] io_c_mem_0,
  output [31:0] io_c_mem_1,
  output [31:0] io_c_mem_2,
  output [31:0] io_c_mem_3,
  output [31:0] io_c_mem_4,
  output [31:0] io_c_mem_5,
  output [31:0] io_c_mem_6,
  output [31:0] io_c_mem_7,
  input  [3:0]  io_c_ridx,
  output [3:0]  io_c_widx,
  input         io_c_safe_ridx_valid,
  output        io_c_safe_widx_valid,
  output        io_c_safe_source_reset_n,
  input         io_c_safe_sink_reset_n,
  output [31:0] io_d_mem_0,
  output [31:0] io_d_mem_1,
  output [31:0] io_d_mem_2,
  output [31:0] io_d_mem_3,
  output [31:0] io_d_mem_4,
  output [31:0] io_d_mem_5,
  output [31:0] io_d_mem_6,
  output [31:0] io_d_mem_7,
  input  [3:0]  io_d_ridx,
  output [3:0]  io_d_widx,
  input         io_d_safe_ridx_valid,
  output        io_d_safe_widx_valid,
  output        io_d_safe_source_reset_n,
  input         io_d_safe_sink_reset_n,
  output [31:0] io_e_mem_0,
  output [31:0] io_e_mem_1,
  output [31:0] io_e_mem_2,
  output [31:0] io_e_mem_3,
  output [31:0] io_e_mem_4,
  output [31:0] io_e_mem_5,
  output [31:0] io_e_mem_6,
  output [31:0] io_e_mem_7,
  input  [3:0]  io_e_ridx,
  output [3:0]  io_e_widx,
  input         io_e_safe_ridx_valid,
  output        io_e_safe_widx_valid,
  output        io_e_safe_source_reset_n,
  input         io_e_safe_sink_reset_n,
  output [19:0] io_rxc_mem_0_a,
  output [19:0] io_rxc_mem_0_b,
  output [19:0] io_rxc_mem_0_c,
  output [19:0] io_rxc_mem_0_d,
  output [19:0] io_rxc_mem_0_e,
  input         io_rxc_ridx,
  output        io_rxc_widx,
  input         io_rxc_safe_ridx_valid,
  output        io_rxc_safe_widx_valid,
  output        io_rxc_safe_source_reset_n,
  input         io_rxc_safe_sink_reset_n,
  output [19:0] io_txc_mem_0_a,
  output [19:0] io_txc_mem_0_b,
  output [19:0] io_txc_mem_0_c,
  output [19:0] io_txc_mem_0_d,
  output [19:0] io_txc_mem_0_e,
  input         io_txc_ridx,
  output        io_txc_widx,
  input         io_txc_safe_ridx_valid,
  output        io_txc_safe_widx_valid,
  output        io_txc_safe_source_reset_n,
  input         io_txc_safe_sink_reset_n
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [31:0] _RAND_18;
`endif // RANDOMIZE_REG_INIT
  wire  hqa_clock;
  wire  hqa_reset;
  wire  hqa_io_enq_ready;
  wire  hqa_io_enq_valid;
  wire [31:0] hqa_io_enq_bits;
  wire  hqa_io_deq_ready;
  wire  hqa_io_deq_valid;
  wire [31:0] hqa_io_deq_bits;
  wire  hqb_clock;
  wire  hqb_reset;
  wire  hqb_io_enq_ready;
  wire  hqb_io_enq_valid;
  wire [31:0] hqb_io_enq_bits;
  wire  hqb_io_deq_ready;
  wire  hqb_io_deq_valid;
  wire [31:0] hqb_io_deq_bits;
  wire  hqc_clock;
  wire  hqc_reset;
  wire  hqc_io_enq_ready;
  wire  hqc_io_enq_valid;
  wire [31:0] hqc_io_enq_bits;
  wire  hqc_io_deq_ready;
  wire  hqc_io_deq_valid;
  wire [31:0] hqc_io_deq_bits;
  wire  hqd_clock;
  wire  hqd_reset;
  wire  hqd_io_enq_ready;
  wire  hqd_io_enq_valid;
  wire [31:0] hqd_io_enq_bits;
  wire  hqd_io_deq_ready;
  wire  hqd_io_deq_valid;
  wire [31:0] hqd_io_deq_bits;
  wire  hqe_clock;
  wire  hqe_reset;
  wire  hqe_io_enq_ready;
  wire  hqe_io_enq_valid;
  wire [31:0] hqe_io_enq_bits;
  wire  hqe_io_deq_ready;
  wire  hqe_io_deq_valid;
  wire [31:0] hqe_io_deq_bits;
  wire  io_a_source_clock;
  wire  io_a_source_reset;
  wire  io_a_source_io_enq_ready;
  wire  io_a_source_io_enq_valid;
  wire [31:0] io_a_source_io_enq_bits;
  wire [31:0] io_a_source_io_async_mem_0;
  wire [31:0] io_a_source_io_async_mem_1;
  wire [31:0] io_a_source_io_async_mem_2;
  wire [31:0] io_a_source_io_async_mem_3;
  wire [31:0] io_a_source_io_async_mem_4;
  wire [31:0] io_a_source_io_async_mem_5;
  wire [31:0] io_a_source_io_async_mem_6;
  wire [31:0] io_a_source_io_async_mem_7;
  wire [3:0] io_a_source_io_async_ridx;
  wire [3:0] io_a_source_io_async_widx;
  wire  io_a_source_io_async_safe_ridx_valid;
  wire  io_a_source_io_async_safe_widx_valid;
  wire  io_a_source_io_async_safe_source_reset_n;
  wire  io_a_source_io_async_safe_sink_reset_n;
  wire  io_bsource_clock;
  wire  io_bsource_reset;
  wire  io_bsource_io_enq_ready;
  wire  io_bsource_io_enq_valid;
  wire [31:0] io_bsource_io_enq_bits;
  wire [31:0] io_bsource_io_async_mem_0;
  wire [31:0] io_bsource_io_async_mem_1;
  wire [31:0] io_bsource_io_async_mem_2;
  wire [31:0] io_bsource_io_async_mem_3;
  wire [31:0] io_bsource_io_async_mem_4;
  wire [31:0] io_bsource_io_async_mem_5;
  wire [31:0] io_bsource_io_async_mem_6;
  wire [31:0] io_bsource_io_async_mem_7;
  wire [3:0] io_bsource_io_async_ridx;
  wire [3:0] io_bsource_io_async_widx;
  wire  io_bsource_io_async_safe_ridx_valid;
  wire  io_bsource_io_async_safe_widx_valid;
  wire  io_bsource_io_async_safe_source_reset_n;
  wire  io_bsource_io_async_safe_sink_reset_n;
  wire  io_c_source_clock;
  wire  io_c_source_reset;
  wire  io_c_source_io_enq_ready;
  wire  io_c_source_io_enq_valid;
  wire [31:0] io_c_source_io_enq_bits;
  wire [31:0] io_c_source_io_async_mem_0;
  wire [31:0] io_c_source_io_async_mem_1;
  wire [31:0] io_c_source_io_async_mem_2;
  wire [31:0] io_c_source_io_async_mem_3;
  wire [31:0] io_c_source_io_async_mem_4;
  wire [31:0] io_c_source_io_async_mem_5;
  wire [31:0] io_c_source_io_async_mem_6;
  wire [31:0] io_c_source_io_async_mem_7;
  wire [3:0] io_c_source_io_async_ridx;
  wire [3:0] io_c_source_io_async_widx;
  wire  io_c_source_io_async_safe_ridx_valid;
  wire  io_c_source_io_async_safe_widx_valid;
  wire  io_c_source_io_async_safe_source_reset_n;
  wire  io_c_source_io_async_safe_sink_reset_n;
  wire  io_d_source_clock;
  wire  io_d_source_reset;
  wire  io_d_source_io_enq_ready;
  wire  io_d_source_io_enq_valid;
  wire [31:0] io_d_source_io_enq_bits;
  wire [31:0] io_d_source_io_async_mem_0;
  wire [31:0] io_d_source_io_async_mem_1;
  wire [31:0] io_d_source_io_async_mem_2;
  wire [31:0] io_d_source_io_async_mem_3;
  wire [31:0] io_d_source_io_async_mem_4;
  wire [31:0] io_d_source_io_async_mem_5;
  wire [31:0] io_d_source_io_async_mem_6;
  wire [31:0] io_d_source_io_async_mem_7;
  wire [3:0] io_d_source_io_async_ridx;
  wire [3:0] io_d_source_io_async_widx;
  wire  io_d_source_io_async_safe_ridx_valid;
  wire  io_d_source_io_async_safe_widx_valid;
  wire  io_d_source_io_async_safe_source_reset_n;
  wire  io_d_source_io_async_safe_sink_reset_n;
  wire  io_e_source_clock;
  wire  io_e_source_reset;
  wire  io_e_source_io_enq_ready;
  wire  io_e_source_io_enq_valid;
  wire [31:0] io_e_source_io_enq_bits;
  wire [31:0] io_e_source_io_async_mem_0;
  wire [31:0] io_e_source_io_async_mem_1;
  wire [31:0] io_e_source_io_async_mem_2;
  wire [31:0] io_e_source_io_async_mem_3;
  wire [31:0] io_e_source_io_async_mem_4;
  wire [31:0] io_e_source_io_async_mem_5;
  wire [31:0] io_e_source_io_async_mem_6;
  wire [31:0] io_e_source_io_async_mem_7;
  wire [3:0] io_e_source_io_async_ridx;
  wire [3:0] io_e_source_io_async_widx;
  wire  io_e_source_io_async_safe_ridx_valid;
  wire  io_e_source_io_async_safe_widx_valid;
  wire  io_e_source_io_async_safe_source_reset_n;
  wire  io_e_source_io_async_safe_sink_reset_n;
  wire  io_txc_source_clock;
  wire  io_txc_source_reset;
  wire  io_txc_source_io_enq_ready;
  wire [19:0] io_txc_source_io_enq_bits_a;
  wire [19:0] io_txc_source_io_enq_bits_b;
  wire [19:0] io_txc_source_io_enq_bits_c;
  wire [19:0] io_txc_source_io_enq_bits_d;
  wire [19:0] io_txc_source_io_enq_bits_e;
  wire [19:0] io_txc_source_io_async_mem_0_a;
  wire [19:0] io_txc_source_io_async_mem_0_b;
  wire [19:0] io_txc_source_io_async_mem_0_c;
  wire [19:0] io_txc_source_io_async_mem_0_d;
  wire [19:0] io_txc_source_io_async_mem_0_e;
  wire  io_txc_source_io_async_ridx;
  wire  io_txc_source_io_async_widx;
  wire  io_txc_source_io_async_safe_ridx_valid;
  wire  io_txc_source_io_async_safe_widx_valid;
  wire  io_txc_source_io_async_safe_source_reset_n;
  wire  io_txc_source_io_async_safe_sink_reset_n;
  wire  io_rxc_source_clock;
  wire  io_rxc_source_reset;
  wire  io_rxc_source_io_enq_ready;
  wire [19:0] io_rxc_source_io_enq_bits_a;
  wire [19:0] io_rxc_source_io_enq_bits_b;
  wire [19:0] io_rxc_source_io_enq_bits_c;
  wire [19:0] io_rxc_source_io_enq_bits_d;
  wire [19:0] io_rxc_source_io_enq_bits_e;
  wire [19:0] io_rxc_source_io_async_mem_0_a;
  wire [19:0] io_rxc_source_io_async_mem_0_b;
  wire [19:0] io_rxc_source_io_async_mem_0_c;
  wire [19:0] io_rxc_source_io_async_mem_0_d;
  wire [19:0] io_rxc_source_io_async_mem_0_e;
  wire  io_rxc_source_io_async_ridx;
  wire  io_rxc_source_io_async_widx;
  wire  io_rxc_source_io_async_safe_ridx_valid;
  wire  io_rxc_source_io_async_safe_widx_valid;
  wire  io_rxc_source_io_async_safe_source_reset_n;
  wire  io_rxc_source_io_async_safe_sink_reset_n;
  reg [7:0] b2c_data_REG;
  reg [7:0] b2c_data;
  reg  b2c_send_REG;
  reg  b2c_send;
  reg [1:0] beatCnt;
  wire [1:0] _beatCnt_T_1 = beatCnt + 2'h1;
  wire [39:0] _GEN_20 = {b2c_data_concat, 8'h0};
  wire [46:0] _b2c_data_concat_T = {{7'd0}, _GEN_20};
  wire [46:0] _GEN_21 = {{39'd0}, b2c_data};
  wire [46:0] _b2c_data_concat_T_1 = _b2c_data_concat_T | _GEN_21;
  wire [46:0] _GEN_1 = b2c_send ? _b2c_data_concat_T_1 : {{15'd0}, b2c_data_concat};
  reg [4:0] first_count;
  wire [2:0] first_beats_format = b2c_data_concat[2:0];
  wire [2:0] first_beats_opcode = b2c_data_concat[5:3];
  wire [3:0] first_beats_size = b2c_data_concat[12:9];
  wire [2:0] first_beats_beats_shiftAmount = first_beats_size[2:0];
  wire [7:0] _first_beats_beats_T_1 = 8'h1 << first_beats_beats_shiftAmount;
  wire [3:0] first_beats_beats_hi = _first_beats_beats_T_1[6:3];
  wire  first_beats_beats_lo = first_beats_size <= 4'h2;
  wire [4:0] first_beats_beats = {first_beats_beats_hi,first_beats_beats_lo};
  wire  first_beats_masks_hi = _first_beats_beats_T_1[6];
  wire  first_beats_masks_lo = first_beats_size <= 4'h5;
  wire [1:0] first_beats_masks = {first_beats_masks_hi,first_beats_masks_lo};
  wire  first_beats_grant = first_beats_opcode == 3'h4 | first_beats_opcode == 3'h5;
  wire  first_beats_partial = first_beats_opcode == 3'h1;
  wire [4:0] _first_beats_a_T_1 = first_beats_opcode[2] ? 5'h0 : first_beats_beats;
  wire [4:0] _first_beats_a_T_3 = _first_beats_a_T_1 + 5'h2;
  wire [1:0] _first_beats_a_T_4 = first_beats_partial ? first_beats_masks : 2'h0;
  wire [4:0] _GEN_22 = {{3'd0}, _first_beats_a_T_4};
  wire [4:0] first_beats_a = _first_beats_a_T_3 + _GEN_22;
  wire [4:0] _first_beats_c_T_1 = first_beats_opcode[0] ? first_beats_beats : 5'h0;
  wire [4:0] first_beats_c = _first_beats_c_T_1 + 5'h2;
  wire [4:0] _GEN_24 = {{4'd0}, first_beats_grant};
  wire [4:0] first_beats_d = _first_beats_c_T_1 + _GEN_24;
  wire  first = first_count == 5'h0;
  wire [4:0] _GEN_3 = 3'h1 == first_beats_format ? first_beats_a : first_beats_a;
  wire [4:0] _GEN_4 = 3'h2 == first_beats_format ? first_beats_c : _GEN_3;
  wire [4:0] _GEN_5 = 3'h3 == first_beats_format ? first_beats_d : _GEN_4;
  wire [4:0] _GEN_6 = 3'h4 == first_beats_format ? 5'h0 : _GEN_5;
  wire [4:0] _first_count_T_1 = first_count - 5'h1;
  wire  formatValid = b2c_data_valid & first;
  reg [2:0] format_r;
  wire [2:0] _GEN_9 = formatValid ? first_beats_format : format_r;
  wire [7:0] formatOH = 8'h1 << _GEN_9;
  reg [19:0] tx_a;
  reg [19:0] tx_b;
  reg [19:0] tx_c;
  reg [19:0] tx_d;
  reg [19:0] tx_e;
  reg [19:0] rx_a;
  reg [19:0] rx_b;
  reg [19:0] rx_c;
  reg [19:0] rx_d;
  reg [19:0] rx_e;
  wire  _rxInc_a_T = hqa_io_deq_ready & hqa_io_deq_valid;
  wire  _rxInc_bT = hqb_io_deq_ready & hqb_io_deq_valid;
  wire  _rxInc_c_T = hqc_io_deq_ready & hqc_io_deq_valid;
  wire  _rxInc_d_T = hqd_io_deq_ready & hqd_io_deq_valid;
  wire  _rxInc_e_T = hqe_io_deq_ready & hqe_io_deq_valid;
  wire [4:0] txInc_out_a_shiftAmount = b2c_data_concat[11:7];
  wire [31:0] _txInc_out_a_T_3 = 32'h1 << txInc_out_a_shiftAmount;
  wire [19:0] txInc_out_a = txInc_out_a_shiftAmount > 5'h14 ? 20'hfffff : _txInc_out_a_T_3[20:1];
  wire [4:0] txInc_out_bshiftAmount = b2c_data_concat[16:12];
  wire [31:0] _txInc_out_bT_3 = 32'h1 << txInc_out_bshiftAmount;
  wire [19:0] txInc_out_b = txInc_out_bshiftAmount > 5'h14 ? 20'hfffff : _txInc_out_bT_3[20:1];
  wire [4:0] txInc_out_c_shiftAmount = b2c_data_concat[21:17];
  wire [31:0] _txInc_out_c_T_3 = 32'h1 << txInc_out_c_shiftAmount;
  wire [19:0] txInc_out_c = txInc_out_c_shiftAmount > 5'h14 ? 20'hfffff : _txInc_out_c_T_3[20:1];
  wire [4:0] txInc_out_d_shiftAmount = b2c_data_concat[26:22];
  wire [31:0] _txInc_out_d_T_3 = 32'h1 << txInc_out_d_shiftAmount;
  wire [19:0] txInc_out_d = txInc_out_d_shiftAmount > 5'h14 ? 20'hfffff : _txInc_out_d_T_3[20:1];
  wire [4:0] txInc_out_e_shiftAmount = b2c_data_concat[31:27];
  wire [31:0] _txInc_out_e_T_3 = 32'h1 << txInc_out_e_shiftAmount;
  wire [19:0] txInc_out_e = txInc_out_e_shiftAmount > 5'h14 ? 20'hfffff : _txInc_out_e_T_3[20:1];
  wire [19:0] txInc_a = b2c_data_valid & formatOH[5] ? txInc_out_a : 20'h0;
  wire [19:0] txInc_b = b2c_data_valid & formatOH[5] ? txInc_out_b : 20'h0;
  wire [19:0] txInc_c = b2c_data_valid & formatOH[5] ? txInc_out_c : 20'h0;
  wire [19:0] txInc_d = b2c_data_valid & formatOH[5] ? txInc_out_d : 20'h0;
  wire [19:0] txInc_e = b2c_data_valid & formatOH[5] ? txInc_out_e : 20'h0;
  wire [20:0] tx_z = tx_a + txInc_a;
  wire [20:0] _tx_out_a_T_3 = |tx_z[20] ? 21'hfffff : tx_z;
  wire [20:0] tx_z_1 = tx_b + txInc_b;
  wire [20:0] _tx_out_bT_3 = |tx_z_1[20] ? 21'hfffff : tx_z_1;
  wire [20:0] tx_z_2 = tx_c + txInc_c;
  wire [20:0] _tx_out_c_T_3 = |tx_z_2[20] ? 21'hfffff : tx_z_2;
  wire [20:0] tx_z_3 = tx_d + txInc_d;
  wire [20:0] _tx_out_d_T_3 = |tx_z_3[20] ? 21'hfffff : tx_z_3;
  wire [20:0] tx_z_4 = tx_e + txInc_e;
  wire [20:0] _tx_out_e_T_3 = |tx_z_4[20] ? 21'hfffff : tx_z_4;
  wire [19:0] rxInc_a = {{19'd0}, _rxInc_a_T};
  wire [20:0] rx_z = rx_a + rxInc_a;
  wire [20:0] _rx_out_a_T_3 = |rx_z[20] ? 21'hfffff : rx_z;
  wire [19:0] rxInc_b = {{19'd0}, _rxInc_bT};
  wire [20:0] rx_z_1 = rx_b + rxInc_b;
  wire [20:0] _rx_out_bT_3 = |rx_z_1[20] ? 21'hfffff : rx_z_1;
  wire [19:0] rxInc_c = {{19'd0}, _rxInc_c_T};
  wire [20:0] rx_z_2 = rx_c + rxInc_c;
  wire [20:0] _rx_out_c_T_3 = |rx_z_2[20] ? 21'hfffff : rx_z_2;
  wire [19:0] rxInc_d = {{19'd0}, _rxInc_d_T};
  wire [20:0] rx_z_3 = rx_d + rxInc_d;
  wire [20:0] _rx_out_d_T_3 = |rx_z_3[20] ? 21'hfffff : rx_z_3;
  wire [19:0] rxInc_e = {{19'd0}, _rxInc_e_T};
  wire [20:0] rx_z_4 = rx_e + rxInc_e;
  wire [20:0] _rx_out_e_T_3 = |rx_z_4[20] ? 21'hfffff : rx_z_4;
  wire  txOut_ready = io_txc_source_io_enq_ready;
  wire [19:0] tx_out_1_a = _tx_out_a_T_3[19:0];
  wire [19:0] tx_out_1_b = _tx_out_bT_3[19:0];
  wire [19:0] tx_out_1_c = _tx_out_c_T_3[19:0];
  wire [19:0] tx_out_1_d = _tx_out_d_T_3[19:0];
  wire [19:0] tx_out_1_e = _tx_out_e_T_3[19:0];
  wire  rxOut_ready = io_rxc_source_io_enq_ready;
  wire [19:0] rx_out_1_a = _rx_out_a_T_3[19:0];
  wire [19:0] rx_out_1_b = _rx_out_bT_3[19:0];
  wire [19:0] rx_out_1_c = _rx_out_c_T_3[19:0];
  wire [19:0] rx_out_1_d = _rx_out_d_T_3[19:0];
  wire [19:0] rx_out_1_e = _rx_out_e_T_3[19:0];
  CHIPLINK_PREFIX_HellaQueue hqa (
    .clock(hqa_clock),
    .reset(hqa_reset),
    .io_enq_ready(hqa_io_enq_ready),
    .io_enq_valid(hqa_io_enq_valid),
    .io_enq_bits(hqa_io_enq_bits),
    .io_deq_ready(hqa_io_deq_ready),
    .io_deq_valid(hqa_io_deq_valid),
    .io_deq_bits(hqa_io_deq_bits)
  );
  CHIPLINK_PREFIX_HellaQueue hqb (
    .clock(hqb_clock),
    .reset(hqb_reset),
    .io_enq_ready(hqb_io_enq_ready),
    .io_enq_valid(hqb_io_enq_valid),
    .io_enq_bits(hqb_io_enq_bits),
    .io_deq_ready(hqb_io_deq_ready),
    .io_deq_valid(hqb_io_deq_valid),
    .io_deq_bits(hqb_io_deq_bits)
  );
  CHIPLINK_PREFIX_HellaQueue hqc (
    .clock(hqc_clock),
    .reset(hqc_reset),
    .io_enq_ready(hqc_io_enq_ready),
    .io_enq_valid(hqc_io_enq_valid),
    .io_enq_bits(hqc_io_enq_bits),
    .io_deq_ready(hqc_io_deq_ready),
    .io_deq_valid(hqc_io_deq_valid),
    .io_deq_bits(hqc_io_deq_bits)
  );
  CHIPLINK_PREFIX_HellaQueue hqd (
    .clock(hqd_clock),
    .reset(hqd_reset),
    .io_enq_ready(hqd_io_enq_ready),
    .io_enq_valid(hqd_io_enq_valid),
    .io_enq_bits(hqd_io_enq_bits),
    .io_deq_ready(hqd_io_deq_ready),
    .io_deq_valid(hqd_io_deq_valid),
    .io_deq_bits(hqd_io_deq_bits)
  );
  CHIPLINK_PREFIX_HellaQueue hqe (
    .clock(hqe_clock),
    .reset(hqe_reset),
    .io_enq_ready(hqe_io_enq_ready),
    .io_enq_valid(hqe_io_enq_valid),
    .io_enq_bits(hqe_io_enq_bits),
    .io_deq_ready(hqe_io_deq_ready),
    .io_deq_valid(hqe_io_deq_valid),
    .io_deq_bits(hqe_io_deq_bits)
  );
  CHIPLINK_PREFIX_AsyncQueueSource io_a_source (
    .clock(io_a_source_clock),
    .reset(io_a_source_reset),
    .io_enq_ready(io_a_source_io_enq_ready),
    .io_enq_valid(io_a_source_io_enq_valid),
    .io_enq_bits(io_a_source_io_enq_bits),
    .io_async_mem_0(io_a_source_io_async_mem_0),
    .io_async_mem_1(io_a_source_io_async_mem_1),
    .io_async_mem_2(io_a_source_io_async_mem_2),
    .io_async_mem_3(io_a_source_io_async_mem_3),
    .io_async_mem_4(io_a_source_io_async_mem_4),
    .io_async_mem_5(io_a_source_io_async_mem_5),
    .io_async_mem_6(io_a_source_io_async_mem_6),
    .io_async_mem_7(io_a_source_io_async_mem_7),
    .io_async_ridx(io_a_source_io_async_ridx),
    .io_async_widx(io_a_source_io_async_widx),
    .io_async_safe_ridx_valid(io_a_source_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(io_a_source_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(io_a_source_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(io_a_source_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSource io_bsource (
    .clock(io_bsource_clock),
    .reset(io_bsource_reset),
    .io_enq_ready(io_bsource_io_enq_ready),
    .io_enq_valid(io_bsource_io_enq_valid),
    .io_enq_bits(io_bsource_io_enq_bits),
    .io_async_mem_0(io_bsource_io_async_mem_0),
    .io_async_mem_1(io_bsource_io_async_mem_1),
    .io_async_mem_2(io_bsource_io_async_mem_2),
    .io_async_mem_3(io_bsource_io_async_mem_3),
    .io_async_mem_4(io_bsource_io_async_mem_4),
    .io_async_mem_5(io_bsource_io_async_mem_5),
    .io_async_mem_6(io_bsource_io_async_mem_6),
    .io_async_mem_7(io_bsource_io_async_mem_7),
    .io_async_ridx(io_bsource_io_async_ridx),
    .io_async_widx(io_bsource_io_async_widx),
    .io_async_safe_ridx_valid(io_bsource_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(io_bsource_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(io_bsource_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(io_bsource_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSource io_c_source (
    .clock(io_c_source_clock),
    .reset(io_c_source_reset),
    .io_enq_ready(io_c_source_io_enq_ready),
    .io_enq_valid(io_c_source_io_enq_valid),
    .io_enq_bits(io_c_source_io_enq_bits),
    .io_async_mem_0(io_c_source_io_async_mem_0),
    .io_async_mem_1(io_c_source_io_async_mem_1),
    .io_async_mem_2(io_c_source_io_async_mem_2),
    .io_async_mem_3(io_c_source_io_async_mem_3),
    .io_async_mem_4(io_c_source_io_async_mem_4),
    .io_async_mem_5(io_c_source_io_async_mem_5),
    .io_async_mem_6(io_c_source_io_async_mem_6),
    .io_async_mem_7(io_c_source_io_async_mem_7),
    .io_async_ridx(io_c_source_io_async_ridx),
    .io_async_widx(io_c_source_io_async_widx),
    .io_async_safe_ridx_valid(io_c_source_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(io_c_source_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(io_c_source_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(io_c_source_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSource io_d_source (
    .clock(io_d_source_clock),
    .reset(io_d_source_reset),
    .io_enq_ready(io_d_source_io_enq_ready),
    .io_enq_valid(io_d_source_io_enq_valid),
    .io_enq_bits(io_d_source_io_enq_bits),
    .io_async_mem_0(io_d_source_io_async_mem_0),
    .io_async_mem_1(io_d_source_io_async_mem_1),
    .io_async_mem_2(io_d_source_io_async_mem_2),
    .io_async_mem_3(io_d_source_io_async_mem_3),
    .io_async_mem_4(io_d_source_io_async_mem_4),
    .io_async_mem_5(io_d_source_io_async_mem_5),
    .io_async_mem_6(io_d_source_io_async_mem_6),
    .io_async_mem_7(io_d_source_io_async_mem_7),
    .io_async_ridx(io_d_source_io_async_ridx),
    .io_async_widx(io_d_source_io_async_widx),
    .io_async_safe_ridx_valid(io_d_source_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(io_d_source_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(io_d_source_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(io_d_source_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSource io_e_source (
    .clock(io_e_source_clock),
    .reset(io_e_source_reset),
    .io_enq_ready(io_e_source_io_enq_ready),
    .io_enq_valid(io_e_source_io_enq_valid),
    .io_enq_bits(io_e_source_io_enq_bits),
    .io_async_mem_0(io_e_source_io_async_mem_0),
    .io_async_mem_1(io_e_source_io_async_mem_1),
    .io_async_mem_2(io_e_source_io_async_mem_2),
    .io_async_mem_3(io_e_source_io_async_mem_3),
    .io_async_mem_4(io_e_source_io_async_mem_4),
    .io_async_mem_5(io_e_source_io_async_mem_5),
    .io_async_mem_6(io_e_source_io_async_mem_6),
    .io_async_mem_7(io_e_source_io_async_mem_7),
    .io_async_ridx(io_e_source_io_async_ridx),
    .io_async_widx(io_e_source_io_async_widx),
    .io_async_safe_ridx_valid(io_e_source_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(io_e_source_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(io_e_source_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(io_e_source_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSource_5 io_txc_source (
    .clock(io_txc_source_clock),
    .reset(io_txc_source_reset),
    .io_enq_ready(io_txc_source_io_enq_ready),
    .io_enq_bits_a(io_txc_source_io_enq_bits_a),
    .io_enq_bits_b(io_txc_source_io_enq_bits_b),
    .io_enq_bits_c(io_txc_source_io_enq_bits_c),
    .io_enq_bits_d(io_txc_source_io_enq_bits_d),
    .io_enq_bits_e(io_txc_source_io_enq_bits_e),
    .io_async_mem_0_a(io_txc_source_io_async_mem_0_a),
    .io_async_mem_0_b(io_txc_source_io_async_mem_0_b),
    .io_async_mem_0_c(io_txc_source_io_async_mem_0_c),
    .io_async_mem_0_d(io_txc_source_io_async_mem_0_d),
    .io_async_mem_0_e(io_txc_source_io_async_mem_0_e),
    .io_async_ridx(io_txc_source_io_async_ridx),
    .io_async_widx(io_txc_source_io_async_widx),
    .io_async_safe_ridx_valid(io_txc_source_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(io_txc_source_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(io_txc_source_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(io_txc_source_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSource_5 io_rxc_source (
    .clock(io_rxc_source_clock),
    .reset(io_rxc_source_reset),
    .io_enq_ready(io_rxc_source_io_enq_ready),
    .io_enq_bits_a(io_rxc_source_io_enq_bits_a),
    .io_enq_bits_b(io_rxc_source_io_enq_bits_b),
    .io_enq_bits_c(io_rxc_source_io_enq_bits_c),
    .io_enq_bits_d(io_rxc_source_io_enq_bits_d),
    .io_enq_bits_e(io_rxc_source_io_enq_bits_e),
    .io_async_mem_0_a(io_rxc_source_io_async_mem_0_a),
    .io_async_mem_0_b(io_rxc_source_io_async_mem_0_b),
    .io_async_mem_0_c(io_rxc_source_io_async_mem_0_c),
    .io_async_mem_0_d(io_rxc_source_io_async_mem_0_d),
    .io_async_mem_0_e(io_rxc_source_io_async_mem_0_e),
    .io_async_ridx(io_rxc_source_io_async_ridx),
    .io_async_widx(io_rxc_source_io_async_widx),
    .io_async_safe_ridx_valid(io_rxc_source_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(io_rxc_source_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(io_rxc_source_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(io_rxc_source_io_async_safe_sink_reset_n)
  );
  assign io_a_mem_0 = io_a_source_io_async_mem_0;
  assign io_a_mem_1 = io_a_source_io_async_mem_1;
  assign io_a_mem_2 = io_a_source_io_async_mem_2;
  assign io_a_mem_3 = io_a_source_io_async_mem_3;
  assign io_a_mem_4 = io_a_source_io_async_mem_4;
  assign io_a_mem_5 = io_a_source_io_async_mem_5;
  assign io_a_mem_6 = io_a_source_io_async_mem_6;
  assign io_a_mem_7 = io_a_source_io_async_mem_7;
  assign io_a_widx = io_a_source_io_async_widx;
  assign io_a_safe_widx_valid = io_a_source_io_async_safe_widx_valid;
  assign io_a_safe_source_reset_n = io_a_source_io_async_safe_source_reset_n;
  assign io_bmem_0 = io_bsource_io_async_mem_0;
  assign io_bmem_1 = io_bsource_io_async_mem_1;
  assign io_bmem_2 = io_bsource_io_async_mem_2;
  assign io_bmem_3 = io_bsource_io_async_mem_3;
  assign io_bmem_4 = io_bsource_io_async_mem_4;
  assign io_bmem_5 = io_bsource_io_async_mem_5;
  assign io_bmem_6 = io_bsource_io_async_mem_6;
  assign io_bmem_7 = io_bsource_io_async_mem_7;
  assign io_bwidx = io_bsource_io_async_widx;
  assign io_bsafe_widx_valid = io_bsource_io_async_safe_widx_valid;
  assign io_bsafe_source_reset_n = io_bsource_io_async_safe_source_reset_n;
  assign io_c_mem_0 = io_c_source_io_async_mem_0;
  assign io_c_mem_1 = io_c_source_io_async_mem_1;
  assign io_c_mem_2 = io_c_source_io_async_mem_2;
  assign io_c_mem_3 = io_c_source_io_async_mem_3;
  assign io_c_mem_4 = io_c_source_io_async_mem_4;
  assign io_c_mem_5 = io_c_source_io_async_mem_5;
  assign io_c_mem_6 = io_c_source_io_async_mem_6;
  assign io_c_mem_7 = io_c_source_io_async_mem_7;
  assign io_c_widx = io_c_source_io_async_widx;
  assign io_c_safe_widx_valid = io_c_source_io_async_safe_widx_valid;
  assign io_c_safe_source_reset_n = io_c_source_io_async_safe_source_reset_n;
  assign io_d_mem_0 = io_d_source_io_async_mem_0;
  assign io_d_mem_1 = io_d_source_io_async_mem_1;
  assign io_d_mem_2 = io_d_source_io_async_mem_2;
  assign io_d_mem_3 = io_d_source_io_async_mem_3;
  assign io_d_mem_4 = io_d_source_io_async_mem_4;
  assign io_d_mem_5 = io_d_source_io_async_mem_5;
  assign io_d_mem_6 = io_d_source_io_async_mem_6;
  assign io_d_mem_7 = io_d_source_io_async_mem_7;
  assign io_d_widx = io_d_source_io_async_widx;
  assign io_d_safe_widx_valid = io_d_source_io_async_safe_widx_valid;
  assign io_d_safe_source_reset_n = io_d_source_io_async_safe_source_reset_n;
  assign io_e_mem_0 = io_e_source_io_async_mem_0;
  assign io_e_mem_1 = io_e_source_io_async_mem_1;
  assign io_e_mem_2 = io_e_source_io_async_mem_2;
  assign io_e_mem_3 = io_e_source_io_async_mem_3;
  assign io_e_mem_4 = io_e_source_io_async_mem_4;
  assign io_e_mem_5 = io_e_source_io_async_mem_5;
  assign io_e_mem_6 = io_e_source_io_async_mem_6;
  assign io_e_mem_7 = io_e_source_io_async_mem_7;
  assign io_e_widx = io_e_source_io_async_widx;
  assign io_e_safe_widx_valid = io_e_source_io_async_safe_widx_valid;
  assign io_e_safe_source_reset_n = io_e_source_io_async_safe_source_reset_n;
  assign io_rxc_mem_0_a = io_rxc_source_io_async_mem_0_a;
  assign io_rxc_mem_0_b = io_rxc_source_io_async_mem_0_b;
  assign io_rxc_mem_0_c = io_rxc_source_io_async_mem_0_c;
  assign io_rxc_mem_0_d = io_rxc_source_io_async_mem_0_d;
  assign io_rxc_mem_0_e = io_rxc_source_io_async_mem_0_e;
  assign io_rxc_widx = io_rxc_source_io_async_widx;
  assign io_rxc_safe_widx_valid = io_rxc_source_io_async_safe_widx_valid;
  assign io_rxc_safe_source_reset_n = io_rxc_source_io_async_safe_source_reset_n;
  assign io_txc_mem_0_a = io_txc_source_io_async_mem_0_a;
  assign io_txc_mem_0_b = io_txc_source_io_async_mem_0_b;
  assign io_txc_mem_0_c = io_txc_source_io_async_mem_0_c;
  assign io_txc_mem_0_d = io_txc_source_io_async_mem_0_d;
  assign io_txc_mem_0_e = io_txc_source_io_async_mem_0_e;
  assign io_txc_widx = io_txc_source_io_async_widx;
  assign io_txc_safe_widx_valid = io_txc_source_io_async_safe_widx_valid;
  assign io_txc_safe_source_reset_n = io_txc_source_io_async_safe_source_reset_n;
  assign hqa_clock = clock;
  assign hqa_reset = reset;
  assign hqa_io_enq_valid = b2c_data_valid & formatOH[0];
  assign hqa_io_enq_bits = b2c_data_concat;
  assign hqa_io_deq_ready = io_a_source_io_enq_ready;
  assign hqb_clock = clock;
  assign hqb_reset = reset;
  assign hqb_io_enq_valid = b2c_data_valid & formatOH[1];
  assign hqb_io_enq_bits = b2c_data_concat;
  assign hqb_io_deq_ready = io_bsource_io_enq_ready;
  assign hqc_clock = clock;
  assign hqc_reset = reset;
  assign hqc_io_enq_valid = b2c_data_valid & formatOH[2];
  assign hqc_io_enq_bits = b2c_data_concat;
  assign hqc_io_deq_ready = io_c_source_io_enq_ready;
  assign hqd_clock = clock;
  assign hqd_reset = reset;
  assign hqd_io_enq_valid = b2c_data_valid & formatOH[3];
  assign hqd_io_enq_bits = b2c_data_concat;
  assign hqd_io_deq_ready = io_d_source_io_enq_ready;
  assign hqe_clock = clock;
  assign hqe_reset = reset;
  assign hqe_io_enq_valid = b2c_data_valid & formatOH[4];
  assign hqe_io_enq_bits = b2c_data_concat;
  assign hqe_io_deq_ready = io_e_source_io_enq_ready;
  assign io_a_source_clock = clock;
  assign io_a_source_reset = reset;
  assign io_a_source_io_enq_valid = hqa_io_deq_valid;
  assign io_a_source_io_enq_bits = hqa_io_deq_bits;
  assign io_a_source_io_async_ridx = io_a_ridx;
  assign io_a_source_io_async_safe_ridx_valid = io_a_safe_ridx_valid;
  assign io_a_source_io_async_safe_sink_reset_n = io_a_safe_sink_reset_n;
  assign io_bsource_clock = clock;
  assign io_bsource_reset = reset;
  assign io_bsource_io_enq_valid = hqb_io_deq_valid;
  assign io_bsource_io_enq_bits = hqb_io_deq_bits;
  assign io_bsource_io_async_ridx = io_bridx;
  assign io_bsource_io_async_safe_ridx_valid = io_bsafe_ridx_valid;
  assign io_bsource_io_async_safe_sink_reset_n = io_bsafe_sink_reset_n;
  assign io_c_source_clock = clock;
  assign io_c_source_reset = reset;
  assign io_c_source_io_enq_valid = hqc_io_deq_valid;
  assign io_c_source_io_enq_bits = hqc_io_deq_bits;
  assign io_c_source_io_async_ridx = io_c_ridx;
  assign io_c_source_io_async_safe_ridx_valid = io_c_safe_ridx_valid;
  assign io_c_source_io_async_safe_sink_reset_n = io_c_safe_sink_reset_n;
  assign io_d_source_clock = clock;
  assign io_d_source_reset = reset;
  assign io_d_source_io_enq_valid = hqd_io_deq_valid;
  assign io_d_source_io_enq_bits = hqd_io_deq_bits;
  assign io_d_source_io_async_ridx = io_d_ridx;
  assign io_d_source_io_async_safe_ridx_valid = io_d_safe_ridx_valid;
  assign io_d_source_io_async_safe_sink_reset_n = io_d_safe_sink_reset_n;
  assign io_e_source_clock = clock;
  assign io_e_source_reset = reset;
  assign io_e_source_io_enq_valid = hqe_io_deq_valid;
  assign io_e_source_io_enq_bits = hqe_io_deq_bits;
  assign io_e_source_io_async_ridx = io_e_ridx;
  assign io_e_source_io_async_safe_ridx_valid = io_e_safe_ridx_valid;
  assign io_e_source_io_async_safe_sink_reset_n = io_e_safe_sink_reset_n;
  assign io_txc_source_clock = clock;
  assign io_txc_source_reset = reset;
  assign io_txc_source_io_enq_bits_a = tx_a;
  assign io_txc_source_io_enq_bits_b = tx_b;
  assign io_txc_source_io_enq_bits_c = tx_c;
  assign io_txc_source_io_enq_bits_d = tx_d;
  assign io_txc_source_io_enq_bits_e = tx_e;
  assign io_txc_source_io_async_ridx = io_txc_ridx;
  assign io_txc_source_io_async_safe_ridx_valid = io_txc_safe_ridx_valid;
  assign io_txc_source_io_async_safe_sink_reset_n = io_txc_safe_sink_reset_n;
  assign io_rxc_source_clock = clock;
  assign io_rxc_source_reset = reset;
  assign io_rxc_source_io_enq_bits_a = rx_a;
  assign io_rxc_source_io_enq_bits_b = rx_b;
  assign io_rxc_source_io_enq_bits_c = rx_c;
  assign io_rxc_source_io_enq_bits_d = rx_d;
  assign io_rxc_source_io_enq_bits_e = rx_e;
  assign io_rxc_source_io_async_ridx = io_rxc_ridx;
  assign io_rxc_source_io_async_safe_ridx_valid = io_rxc_safe_ridx_valid;
  assign io_rxc_source_io_async_safe_sink_reset_n = io_rxc_safe_sink_reset_n;
  always @(posedge clock) begin
    b2c_data_REG <= io_b2c_data;
    b2c_data <= b2c_data_REG;
    b2c_send_REG <= io_b2c_send;
    if (reset) begin
      b2c_send <= 1'h0;
    end else begin
      b2c_send <= b2c_send_REG;
    end
    if (reset) begin
      beatCnt <= 2'h0;
    end else if (b2c_send) begin
      beatCnt <= _beatCnt_T_1;
    end
    if (reset) begin
      b2c_data_concat <= 32'h0;
    end else begin
      b2c_data_concat <= _GEN_1[31:0];
    end
    if (reset) begin
      b2c_data_valid <= 1'h0;
    end else begin
      b2c_data_valid <= beatCnt == 2'h3;
    end
    if (reset) begin
      first_count <= 5'h0;
    end else if (b2c_data_valid) begin
      if (first) begin
        if (3'h5 == first_beats_format) begin
          first_count <= 5'h0;
        end else begin
          first_count <= _GEN_6;
        end
      end else begin
        first_count <= _first_count_T_1;
      end
    end
    if (formatValid) begin
      format_r <= first_beats_format;
    end
    if (reset) begin
      tx_a <= 20'h0;
    end else if (txOut_ready) begin
      if (b2c_data_valid & formatOH[5]) begin
        if (txInc_out_a_shiftAmount > 5'h14) begin
          tx_a <= 20'hfffff;
        end else begin
          tx_a <= _txInc_out_a_T_3[20:1];
        end
      end else begin
        tx_a <= 20'h0;
      end
    end else begin
      tx_a <= tx_out_1_a;
    end
    if (reset) begin
      tx_b <= 20'h0;
    end else if (txOut_ready) begin
      if (b2c_data_valid & formatOH[5]) begin
        if (txInc_out_bshiftAmount > 5'h14) begin
          tx_b <= 20'hfffff;
        end else begin
          tx_b <= _txInc_out_bT_3[20:1];
        end
      end else begin
        tx_b <= 20'h0;
      end
    end else begin
      tx_b <= tx_out_1_b;
    end
    if (reset) begin
      tx_c <= 20'h0;
    end else if (txOut_ready) begin
      if (b2c_data_valid & formatOH[5]) begin
        if (txInc_out_c_shiftAmount > 5'h14) begin
          tx_c <= 20'hfffff;
        end else begin
          tx_c <= _txInc_out_c_T_3[20:1];
        end
      end else begin
        tx_c <= 20'h0;
      end
    end else begin
      tx_c <= tx_out_1_c;
    end
    if (reset) begin
      tx_d <= 20'h0;
    end else if (txOut_ready) begin
      if (b2c_data_valid & formatOH[5]) begin
        if (txInc_out_d_shiftAmount > 5'h14) begin
          tx_d <= 20'hfffff;
        end else begin
          tx_d <= _txInc_out_d_T_3[20:1];
        end
      end else begin
        tx_d <= 20'h0;
      end
    end else begin
      tx_d <= tx_out_1_d;
    end
    if (reset) begin
      tx_e <= 20'h0;
    end else if (txOut_ready) begin
      if (b2c_data_valid & formatOH[5]) begin
        if (txInc_out_e_shiftAmount > 5'h14) begin
          tx_e <= 20'hfffff;
        end else begin
          tx_e <= _txInc_out_e_T_3[20:1];
        end
      end else begin
        tx_e <= 20'h0;
      end
    end else begin
      tx_e <= tx_out_1_e;
    end
    if (reset) begin
      rx_a <= 20'h20;
    end else if (rxOut_ready) begin
      rx_a <= rxInc_a;
    end else begin
      rx_a <= rx_out_1_a;
    end
    if (reset) begin
      rx_b <= 20'h20;
    end else if (rxOut_ready) begin
      rx_b <= rxInc_b;
    end else begin
      rx_b <= rx_out_1_b;
    end
    if (reset) begin
      rx_c <= 20'h20;
    end else if (rxOut_ready) begin
      rx_c <= rxInc_c;
    end else begin
      rx_c <= rx_out_1_c;
    end
    if (reset) begin
      rx_d <= 20'h20;
    end else if (rxOut_ready) begin
      rx_d <= rxInc_d;
    end else begin
      rx_d <= rx_out_1_d;
    end
    if (reset) begin
      rx_e <= 20'h20;
    end else if (rxOut_ready) begin
      rx_e <= rxInc_e;
    end else begin
      rx_e <= rx_out_1_e;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~hqa_io_enq_valid | hqa_io_enq_ready | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at RX.scala:64 assert (!hq.io.enq.valid || hq.io.enq.ready) // overrun impossible\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~hqa_io_enq_valid | hqa_io_enq_ready | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~hqb_io_enq_valid | hqb_io_enq_ready | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at RX.scala:64 assert (!hq.io.enq.valid || hq.io.enq.ready) // overrun impossible\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~hqb_io_enq_valid | hqb_io_enq_ready | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~hqc_io_enq_valid | hqc_io_enq_ready | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at RX.scala:64 assert (!hq.io.enq.valid || hq.io.enq.ready) // overrun impossible\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~hqc_io_enq_valid | hqc_io_enq_ready | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~hqd_io_enq_valid | hqd_io_enq_ready | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at RX.scala:64 assert (!hq.io.enq.valid || hq.io.enq.ready) // overrun impossible\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~hqd_io_enq_valid | hqd_io_enq_ready | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~hqe_io_enq_valid | hqe_io_enq_ready | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at RX.scala:64 assert (!hq.io.enq.valid || hq.io.enq.ready) // overrun impossible\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~hqe_io_enq_valid | hqe_io_enq_ready | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  b2c_data_REG = _RAND_0[7:0];
  _RAND_1 = {1{`RANDOM}};
  b2c_data = _RAND_1[7:0];
  _RAND_2 = {1{`RANDOM}};
  b2c_send_REG = _RAND_2[0:0];
  _RAND_3 = {1{`RANDOM}};
  b2c_send = _RAND_3[0:0];
  _RAND_4 = {1{`RANDOM}};
  beatCnt = _RAND_4[1:0];
  _RAND_5 = {1{`RANDOM}};
  b2c_data_concat = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  b2c_data_valid = _RAND_6[0:0];
  _RAND_7 = {1{`RANDOM}};
  first_count = _RAND_7[4:0];
  _RAND_8 = {1{`RANDOM}};
  format_r = _RAND_8[2:0];
  _RAND_9 = {1{`RANDOM}};
  tx_a = _RAND_9[19:0];
  _RAND_10 = {1{`RANDOM}};
  tx_b = _RAND_10[19:0];
  _RAND_11 = {1{`RANDOM}};
  tx_c = _RAND_11[19:0];
  _RAND_12 = {1{`RANDOM}};
  tx_d = _RAND_12[19:0];
  _RAND_13 = {1{`RANDOM}};
  tx_e = _RAND_13[19:0];
  _RAND_14 = {1{`RANDOM}};
  rx_a = _RAND_14[19:0];
  _RAND_15 = {1{`RANDOM}};
  rx_b = _RAND_15[19:0];
  _RAND_16 = {1{`RANDOM}};
  rx_c = _RAND_16[19:0];
  _RAND_17 = {1{`RANDOM}};
  rx_d = _RAND_17[19:0];
  _RAND_18 = {1{`RANDOM}};
  rx_e = _RAND_18[19:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_AsyncResetReg(
  output  io_q,
  input   io_clk,
  input   io_rst
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_REG_INIT
  reg  reg_;
  assign io_q = reg_;
  always @(posedge io_clk or posedge io_rst) begin
    if (io_rst) begin
      reg_ <= 1'h1;
    end else begin
      reg_ <= 1'h0;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  reg_ = _RAND_0[0:0];
`endif // RANDOMIZE_REG_INIT
  if (io_rst) begin
    reg_ = 1'h1;
  end
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_ClockCrossingReg_w32(
  input         clock,
  input  [31:0] io_d,
  output [31:0] io_q,
  input         io_en
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_REG_INIT
  reg [31:0] cdc_reg;
  assign io_q = cdc_reg;
  always @(posedge clock) begin
    if (io_en) begin
      cdc_reg <= io_d;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  cdc_reg = _RAND_0[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_AsyncQueueSink(
  input         clock,
  input         reset,
  input         io_deq_ready,
  output        io_deq_valid,
  output [31:0] io_deq_bits,
  input  [31:0] io_async_mem_0,
  input  [31:0] io_async_mem_1,
  input  [31:0] io_async_mem_2,
  input  [31:0] io_async_mem_3,
  input  [31:0] io_async_mem_4,
  input  [31:0] io_async_mem_5,
  input  [31:0] io_async_mem_6,
  input  [31:0] io_async_mem_7,
  output [3:0]  io_async_ridx,
  input  [3:0]  io_async_widx,
  output        io_async_safe_ridx_valid,
  input         io_async_safe_widx_valid,
  input         io_async_safe_source_reset_n,
  output        io_async_safe_sink_reset_n
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_REG_INIT
  wire  widx_widx_gray_clock;
  wire  widx_widx_gray_reset;
  wire [3:0] widx_widx_gray_io_d;
  wire [3:0] widx_widx_gray_io_q;
  wire  io_deq_bits_deq_bits_reg_clock;
  wire [31:0] io_deq_bits_deq_bits_reg_io_d;
  wire [31:0] io_deq_bits_deq_bits_reg_io_q;
  wire  io_deq_bits_deq_bits_reg_io_en;
  wire  sink_valid_0_io_in;
  wire  sink_valid_0_io_out;
  wire  sink_valid_0_clock;
  wire  sink_valid_0_reset;
  wire  sink_valid_1_io_in;
  wire  sink_valid_1_io_out;
  wire  sink_valid_1_clock;
  wire  sink_valid_1_reset;
  wire  source_extend_io_in;
  wire  source_extend_io_out;
  wire  source_extend_clock;
  wire  source_extend_reset;
  wire  source_valid_io_in;
  wire  source_valid_io_out;
  wire  source_valid_clock;
  wire  source_valid_reset;
  wire  _ridx_T_1 = io_deq_ready & io_deq_valid;
  wire  source_ready = source_valid_io_out;
  wire  _ridx_T_2 = ~source_ready;
  reg [3:0] ridx_ridx_bin;
  wire [3:0] _GEN_8 = {{3'd0}, _ridx_T_1};
  wire [3:0] _ridx_incremented_T_1 = ridx_ridx_bin + _GEN_8;
  wire [3:0] ridx_incremented = _ridx_T_2 ? 4'h0 : _ridx_incremented_T_1;
  wire [3:0] _GEN_9 = {{1'd0}, ridx_incremented[3:1]};
  wire [3:0] ridx = ridx_incremented ^ _GEN_9;
  wire [3:0] widx = widx_widx_gray_io_q;
  wire [2:0] _index_T_2 = {ridx[3], 2'h0};
  wire [2:0] index = ridx[2:0] ^ _index_T_2;
  wire [31:0] _GEN_1 = 3'h1 == index ? io_async_mem_1 : io_async_mem_0;
  wire [31:0] _GEN_2 = 3'h2 == index ? io_async_mem_2 : _GEN_1;
  wire [31:0] _GEN_3 = 3'h3 == index ? io_async_mem_3 : _GEN_2;
  wire [31:0] _GEN_4 = 3'h4 == index ? io_async_mem_4 : _GEN_3;
  wire [31:0] _GEN_5 = 3'h5 == index ? io_async_mem_5 : _GEN_4;
  wire [31:0] _GEN_6 = 3'h6 == index ? io_async_mem_6 : _GEN_5;
  reg  valid_reg;
  reg [3:0] ridx_gray;
  CHIPLINK_PREFIX_AsyncResetSynchronizerShiftReg_w4_d3_i0 widx_widx_gray (
    .clock(widx_widx_gray_clock),
    .reset(widx_widx_gray_reset),
    .io_d(widx_widx_gray_io_d),
    .io_q(widx_widx_gray_io_q)
  );
  CHIPLINK_PREFIX_ClockCrossingReg_w32 io_deq_bits_deq_bits_reg (
    .clock(io_deq_bits_deq_bits_reg_clock),
    .io_d(io_deq_bits_deq_bits_reg_io_d),
    .io_q(io_deq_bits_deq_bits_reg_io_q),
    .io_en(io_deq_bits_deq_bits_reg_io_en)
  );
  CHIPLINK_PREFIX_AsyncValidSync sink_valid_0 (
    .io_in(sink_valid_0_io_in),
    .io_out(sink_valid_0_io_out),
    .clock(sink_valid_0_clock),
    .reset(sink_valid_0_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync sink_valid_1 (
    .io_in(sink_valid_1_io_in),
    .io_out(sink_valid_1_io_out),
    .clock(sink_valid_1_clock),
    .reset(sink_valid_1_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync source_extend (
    .io_in(source_extend_io_in),
    .io_out(source_extend_io_out),
    .clock(source_extend_clock),
    .reset(source_extend_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync source_valid (
    .io_in(source_valid_io_in),
    .io_out(source_valid_io_out),
    .clock(source_valid_clock),
    .reset(source_valid_reset)
  );
  assign io_deq_valid = valid_reg & source_ready;
  assign io_deq_bits = io_deq_bits_deq_bits_reg_io_q;
  assign io_async_ridx = ridx_gray;
  assign io_async_safe_ridx_valid = sink_valid_1_io_out;
  assign io_async_safe_sink_reset_n = ~reset;
  assign widx_widx_gray_clock = clock;
  assign widx_widx_gray_reset = reset;
  assign widx_widx_gray_io_d = io_async_widx;
  assign io_deq_bits_deq_bits_reg_clock = clock;
  assign io_deq_bits_deq_bits_reg_io_d = 3'h7 == index ? io_async_mem_7 : _GEN_6;
  assign io_deq_bits_deq_bits_reg_io_en = source_ready & ridx != widx;
  assign sink_valid_0_io_in = 1'h1;
  assign sink_valid_0_clock = clock;
  assign sink_valid_0_reset = reset | ~io_async_safe_source_reset_n;
  assign sink_valid_1_io_in = sink_valid_0_io_out;
  assign sink_valid_1_clock = clock;
  assign sink_valid_1_reset = reset | ~io_async_safe_source_reset_n;
  assign source_extend_io_in = io_async_safe_widx_valid;
  assign source_extend_clock = clock;
  assign source_extend_reset = reset | ~io_async_safe_source_reset_n;
  assign source_valid_io_in = source_extend_io_out;
  assign source_valid_clock = clock;
  assign source_valid_reset = reset;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ridx_ridx_bin <= 4'h0;
    end else if (_ridx_T_2) begin
      ridx_ridx_bin <= 4'h0;
    end else begin
      ridx_ridx_bin <= _ridx_incremented_T_1;
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      valid_reg <= 1'h0;
    end else begin
      valid_reg <= source_ready & ridx != widx;
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ridx_gray <= 4'h0;
    end else begin
      ridx_gray <= ridx_incremented ^ _GEN_9;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  ridx_ridx_bin = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  valid_reg = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  ridx_gray = _RAND_2[3:0];
`endif // RANDOMIZE_REG_INIT
  if (reset) begin
    ridx_ridx_bin = 4'h0;
  end
  if (reset) begin
    valid_reg = 1'h0;
  end
  if (reset) begin
    ridx_gray = 4'h0;
  end
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_ClockCrossingReg_w100(
  input         clock,
  input  [99:0] io_d,
  output [99:0] io_q,
  input         io_en
);
`ifdef RANDOMIZE_REG_INIT
  reg [127:0] _RAND_0;
`endif // RANDOMIZE_REG_INIT
  reg [99:0] cdc_reg;
  assign io_q = cdc_reg;
  always @(posedge clock) begin
    if (io_en) begin
      cdc_reg <= io_d;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {4{`RANDOM}};
  cdc_reg = _RAND_0[99:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_AsyncQueueSink_5(
  input         clock,
  input         reset,
  // input         io_deq_ready,
  output        io_deq_valid,
  output [19:0] io_deq_bits_a,
  output [19:0] io_deq_bits_b,
  output [19:0] io_deq_bits_c,
  output [19:0] io_deq_bits_d,
  output [19:0] io_deq_bits_e,
  input  [19:0] io_async_mem_0_a,
  input  [19:0] io_async_mem_0_b,
  input  [19:0] io_async_mem_0_c,
  input  [19:0] io_async_mem_0_d,
  input  [19:0] io_async_mem_0_e,
  output        io_async_ridx,
  input         io_async_widx,
  output        io_async_safe_ridx_valid,
  input         io_async_safe_widx_valid,
  input         io_async_safe_source_reset_n,
  output        io_async_safe_sink_reset_n
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_REG_INIT
  wire  widx_widx_gray_clock;
  wire  widx_widx_gray_reset;
  wire  widx_widx_gray_io_d;
  wire  widx_widx_gray_io_q;
  wire  io_deq_bits_deq_bits_reg_clock;
  wire [99:0] io_deq_bits_deq_bits_reg_io_d;
  wire [99:0] io_deq_bits_deq_bits_reg_io_q;
  wire  io_deq_bits_deq_bits_reg_io_en;
  wire  sink_valid_0_io_in;
  wire  sink_valid_0_io_out;
  wire  sink_valid_0_clock;
  wire  sink_valid_0_reset;
  wire  sink_valid_1_io_in;
  wire  sink_valid_1_io_out;
  wire  sink_valid_1_clock;
  wire  sink_valid_1_reset;
  wire  source_extend_io_in;
  wire  source_extend_io_out;
  wire  source_extend_clock;
  wire  source_extend_reset;
  wire  source_valid_io_in;
  wire  source_valid_io_out;
  wire  source_valid_clock;
  wire  source_valid_reset;
  wire  source_ready = source_valid_io_out;
  wire  _ridx_T_2 = ~source_ready;
  reg  ridx_ridx_bin;
  wire  ridx_incremented = _ridx_T_2 ? 1'h0 : ridx_ridx_bin + io_deq_valid;
  wire  widx = widx_widx_gray_io_q;
  wire [39:0] io_deq_bits_deq_bits_reg_io_d_lo = {io_async_mem_0_d,io_async_mem_0_e};
  wire [59:0] io_deq_bits_deq_bits_reg_io_d_hi = {io_async_mem_0_a,io_async_mem_0_b,io_async_mem_0_c};
  wire [99:0] _io_deq_bits_WIRE_1 = io_deq_bits_deq_bits_reg_io_q;
  reg  valid_reg;
  reg  ridx_gray;
  CHIPLINK_PREFIX_AsyncResetSynchronizerShiftReg_w1_d3_i0_20 widx_widx_gray (
    .clock(widx_widx_gray_clock),
    .reset(widx_widx_gray_reset),
    .io_d(widx_widx_gray_io_d),
    .io_q(widx_widx_gray_io_q)
  );
  CHIPLINK_PREFIX_ClockCrossingReg_w100 io_deq_bits_deq_bits_reg (
    .clock(io_deq_bits_deq_bits_reg_clock),
    .io_d(io_deq_bits_deq_bits_reg_io_d),
    .io_q(io_deq_bits_deq_bits_reg_io_q),
    .io_en(io_deq_bits_deq_bits_reg_io_en)
  );
  CHIPLINK_PREFIX_AsyncValidSync sink_valid_0 (
    .io_in(sink_valid_0_io_in),
    .io_out(sink_valid_0_io_out),
    .clock(sink_valid_0_clock),
    .reset(sink_valid_0_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync sink_valid_1 (
    .io_in(sink_valid_1_io_in),
    .io_out(sink_valid_1_io_out),
    .clock(sink_valid_1_clock),
    .reset(sink_valid_1_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync source_extend (
    .io_in(source_extend_io_in),
    .io_out(source_extend_io_out),
    .clock(source_extend_clock),
    .reset(source_extend_reset)
  );
  CHIPLINK_PREFIX_AsyncValidSync source_valid (
    .io_in(source_valid_io_in),
    .io_out(source_valid_io_out),
    .clock(source_valid_clock),
    .reset(source_valid_reset)
  );
  assign io_deq_valid = valid_reg & source_ready;
  assign io_deq_bits_a = _io_deq_bits_WIRE_1[99:80];
  assign io_deq_bits_b = _io_deq_bits_WIRE_1[79:60];
  assign io_deq_bits_c = _io_deq_bits_WIRE_1[59:40];
  assign io_deq_bits_d = _io_deq_bits_WIRE_1[39:20];
  assign io_deq_bits_e = _io_deq_bits_WIRE_1[19:0];
  assign io_async_ridx = ridx_gray;
  assign io_async_safe_ridx_valid = sink_valid_1_io_out;
  assign io_async_safe_sink_reset_n = ~reset;
  assign widx_widx_gray_clock = clock;
  assign widx_widx_gray_reset = reset;
  assign widx_widx_gray_io_d = io_async_widx;
  assign io_deq_bits_deq_bits_reg_clock = clock;
  assign io_deq_bits_deq_bits_reg_io_d = {io_deq_bits_deq_bits_reg_io_d_hi,io_deq_bits_deq_bits_reg_io_d_lo};
  assign io_deq_bits_deq_bits_reg_io_en = source_ready & ridx_incremented != widx;
  assign sink_valid_0_io_in = 1'h1;
  assign sink_valid_0_clock = clock;
  assign sink_valid_0_reset = reset | ~io_async_safe_source_reset_n;
  assign sink_valid_1_io_in = sink_valid_0_io_out;
  assign sink_valid_1_clock = clock;
  assign sink_valid_1_reset = reset | ~io_async_safe_source_reset_n;
  assign source_extend_io_in = io_async_safe_widx_valid;
  assign source_extend_clock = clock;
  assign source_extend_reset = reset | ~io_async_safe_source_reset_n;
  assign source_valid_io_in = source_extend_io_out;
  assign source_valid_clock = clock;
  assign source_valid_reset = reset;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ridx_ridx_bin <= 1'h0;
    end else if (_ridx_T_2) begin
      ridx_ridx_bin <= 1'h0;
    end else begin
      ridx_ridx_bin <= ridx_ridx_bin + io_deq_valid;
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      valid_reg <= 1'h0;
    end else begin
      valid_reg <= source_ready & ridx_incremented != widx;
    end
  end
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ridx_gray <= 1'h0;
    end else if (_ridx_T_2) begin
      ridx_gray <= 1'h0;
    end else begin
      ridx_gray <= ridx_ridx_bin + io_deq_valid;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  ridx_ridx_bin = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  valid_reg = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  ridx_gray = _RAND_2[0:0];
`endif // RANDOMIZE_REG_INIT
  if (reset) begin
    ridx_ridx_bin = 1'h0;
  end
  if (reset) begin
    valid_reg = 1'h0;
  end
  if (reset) begin
    ridx_gray = 1'h0;
  end
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_ShiftQueue(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [31:0] io_enq_bits_data,
  input         io_enq_bits_last,
  input  [6:0]  io_enq_bits_beats,
  input         io_deq_ready,
  output        io_deq_valid,
  output [31:0] io_deq_bits_data,
  output        io_deq_bits_last,
  output [6:0]  io_deq_bits_beats
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
`endif // RANDOMIZE_REG_INIT
  reg  valid_0;
  reg  valid_1;
  reg [31:0] elts_0_data;
  reg  elts_0_last;
  reg [6:0] elts_0_beats;
  reg [31:0] elts_1_data;
  reg  elts_1_last;
  reg [6:0] elts_1_beats;
  wire  _wen_T = io_enq_ready & io_enq_valid;
  wire  _wen_T_3 = valid_1 | _wen_T;
  wire  _wen_T_7 = _wen_T & ~valid_0;
  wire  wen = io_deq_ready ? _wen_T_3 : _wen_T_7;
  wire  _valid_0_T_6 = _wen_T | valid_0;
  wire  _wen_T_10 = _wen_T & valid_1;
  wire  _wen_T_13 = _wen_T & valid_0;
  wire  _wen_T_15 = _wen_T & valid_0 & ~valid_1;
  wire  wen_1 = io_deq_ready ? _wen_T_10 : _wen_T_15;
  wire  _valid_1_T_6 = _wen_T_13 | valid_1;
  assign io_enq_ready = ~valid_1;
  assign io_deq_valid = valid_0;
  assign io_deq_bits_data = elts_0_data;
  assign io_deq_bits_last = elts_0_last;
  assign io_deq_bits_beats = elts_0_beats;
  always @(posedge clock) begin
    if (reset) begin
      valid_0 <= 1'h0;
    end else if (io_deq_ready) begin
      valid_0 <= _wen_T_3;
    end else begin
      valid_0 <= _valid_0_T_6;
    end
    if (reset) begin
      valid_1 <= 1'h0;
    end else if (io_deq_ready) begin
      valid_1 <= _wen_T_10;
    end else begin
      valid_1 <= _valid_1_T_6;
    end
    if (wen) begin
      if (valid_1) begin
        elts_0_data <= elts_1_data;
      end else begin
        elts_0_data <= io_enq_bits_data;
      end
    end
    if (wen) begin
      if (valid_1) begin
        elts_0_last <= elts_1_last;
      end else begin
        elts_0_last <= io_enq_bits_last;
      end
    end
    if (wen) begin
      if (valid_1) begin
        elts_0_beats <= elts_1_beats;
      end else begin
        elts_0_beats <= io_enq_bits_beats;
      end
    end
    if (wen_1) begin
      elts_1_data <= io_enq_bits_data;
    end
    if (wen_1) begin
      elts_1_last <= io_enq_bits_last;
    end
    if (wen_1) begin
      elts_1_beats <= io_enq_bits_beats;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  valid_0 = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  valid_1 = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  elts_0_data = _RAND_2[31:0];
  _RAND_3 = {1{`RANDOM}};
  elts_0_last = _RAND_3[0:0];
  _RAND_4 = {1{`RANDOM}};
  elts_0_beats = _RAND_4[6:0];
  _RAND_5 = {1{`RANDOM}};
  elts_1_data = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  elts_1_last = _RAND_6[0:0];
  _RAND_7 = {1{`RANDOM}};
  elts_1_beats = _RAND_7[6:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TX(
  input         clock,
  input         reset,
  output        io_c2b_clk,
  output        io_c2b_rst,
  output        io_c2b_send,
  output [7:0]  io_c2b_data,
  output reg [31:0] transferDataReg,
  output reg    send_1p_valid,
  output        io_sa_ready,
  input         io_sa_valid,
  input  [31:0] io_sa_bits_data,
  input         io_sa_bits_last,
  input  [6:0]  io_sa_bits_beats,
  output        io_sb_ready,
  input  [31:0] io_sb_bits_data,
  input         io_sb_bits_last,
  output        io_sc_ready,
  input  [31:0] io_sc_bits_data,
  input         io_sc_bits_last,
  output        io_sd_ready,
  input         io_sd_valid,
  input  [31:0] io_sd_bits_data,
  input         io_sd_bits_last,
  input  [6:0]  io_sd_bits_beats,
  input  [31:0] io_se_bits_data,
  input  [19:0] io_rxc_mem_0_a,
  input  [19:0] io_rxc_mem_0_b,
  input  [19:0] io_rxc_mem_0_c,
  input  [19:0] io_rxc_mem_0_d,
  input  [19:0] io_rxc_mem_0_e,
  output        io_rxc_ridx,
  input         io_rxc_widx,
  output        io_rxc_safe_ridx_valid,
  input         io_rxc_safe_widx_valid,
  input         io_rxc_safe_source_reset_n,
  output        io_rxc_safe_sink_reset_n,
  input  [19:0] io_txc_mem_0_a,
  input  [19:0] io_txc_mem_0_b,
  input  [19:0] io_txc_mem_0_c,
  input  [19:0] io_txc_mem_0_d,
  input  [19:0] io_txc_mem_0_e,
  output        io_txc_ridx,
  input         io_txc_widx,
  output        io_txc_safe_ridx_valid,
  input         io_txc_safe_widx_valid,
  input         io_txc_safe_source_reset_n,
  output        io_txc_safe_sink_reset_n
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [31:0] _RAND_19;
  reg [31:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [31:0] _RAND_24;
  reg [31:0] _RAND_25;
`endif // RANDOMIZE_REG_INIT
  wire  rxInc_sink_clock;
  wire  rxInc_sink_reset;
  wire  rxInc_sink_io_deq_ready;
  wire  rxInc_sink_io_deq_valid;
  wire [19:0] rxInc_sink_io_deq_bits_a;
  wire [19:0] rxInc_sink_io_deq_bits_b;
  wire [19:0] rxInc_sink_io_deq_bits_c;
  wire [19:0] rxInc_sink_io_deq_bits_d;
  wire [19:0] rxInc_sink_io_deq_bits_e;
  wire [19:0] rxInc_sink_io_async_mem_0_a;
  wire [19:0] rxInc_sink_io_async_mem_0_b;
  wire [19:0] rxInc_sink_io_async_mem_0_c;
  wire [19:0] rxInc_sink_io_async_mem_0_d;
  wire [19:0] rxInc_sink_io_async_mem_0_e;
  wire  rxInc_sink_io_async_ridx;
  wire  rxInc_sink_io_async_widx;
  wire  rxInc_sink_io_async_safe_ridx_valid;
  wire  rxInc_sink_io_async_safe_widx_valid;
  wire  rxInc_sink_io_async_safe_source_reset_n;
  wire  rxInc_sink_io_async_safe_sink_reset_n;
  wire  txInc_sink_clock;
  wire  txInc_sink_reset;
  wire  txInc_sink_io_deq_ready;
  wire  txInc_sink_io_deq_valid;
  wire [19:0] txInc_sink_io_deq_bits_a;
  wire [19:0] txInc_sink_io_deq_bits_b;
  wire [19:0] txInc_sink_io_deq_bits_c;
  wire [19:0] txInc_sink_io_deq_bits_d;
  wire [19:0] txInc_sink_io_deq_bits_e;
  wire [19:0] txInc_sink_io_async_mem_0_a;
  wire [19:0] txInc_sink_io_async_mem_0_b;
  wire [19:0] txInc_sink_io_async_mem_0_c;
  wire [19:0] txInc_sink_io_async_mem_0_d;
  wire [19:0] txInc_sink_io_async_mem_0_e;
  wire  txInc_sink_io_async_ridx;
  wire  txInc_sink_io_async_widx;
  wire  txInc_sink_io_async_safe_ridx_valid;
  wire  txInc_sink_io_async_safe_widx_valid;
  wire  txInc_sink_io_async_safe_source_reset_n;
  wire  txInc_sink_io_async_safe_sink_reset_n;
  wire  qa_q_clock;
  wire  qa_q_reset;
  wire  qa_q_io_enq_ready;
  wire  qa_q_io_enq_valid;
  wire [31:0] qa_q_io_enq_bits_data;
  wire  qa_q_io_enq_bits_last;
  wire [6:0] qa_q_io_enq_bits_beats;
  wire  qa_q_io_deq_ready;
  wire  qa_q_io_deq_valid;
  wire [31:0] qa_q_io_deq_bits_data;
  wire  qa_q_io_deq_bits_last;
  wire [6:0] qa_q_io_deq_bits_beats;
  wire  qb_q_clock;
  wire  qb_q_reset;
  wire  qb_q_io_enq_ready;
  wire  qb_q_io_enq_valid;
  wire [31:0] qb_q_io_enq_bits_data;
  wire  qb_q_io_enq_bits_last;
  wire [6:0] qb_q_io_enq_bits_beats;
  wire  qb_q_io_deq_ready;
  wire  qb_q_io_deq_valid;
  wire [31:0] qb_q_io_deq_bits_data;
  wire  qb_q_io_deq_bits_last;
  wire [6:0] qb_q_io_deq_bits_beats;
  wire  qc_q_clock;
  wire  qc_q_reset;
  wire  qc_q_io_enq_ready;
  wire  qc_q_io_enq_valid;
  wire [31:0] qc_q_io_enq_bits_data;
  wire  qc_q_io_enq_bits_last;
  wire [6:0] qc_q_io_enq_bits_beats;
  wire  qc_q_io_deq_ready;
  wire  qc_q_io_deq_valid;
  wire [31:0] qc_q_io_deq_bits_data;
  wire  qc_q_io_deq_bits_last;
  wire [6:0] qc_q_io_deq_bits_beats;
  wire  qd_q_clock;
  wire  qd_q_reset;
  wire  qd_q_io_enq_ready;
  wire  qd_q_io_enq_valid;
  wire [31:0] qd_q_io_enq_bits_data;
  wire  qd_q_io_enq_bits_last;
  wire [6:0] qd_q_io_enq_bits_beats;
  wire  qd_q_io_deq_ready;
  wire  qd_q_io_deq_valid;
  wire [31:0] qd_q_io_deq_bits_data;
  wire  qd_q_io_deq_bits_last;
  wire [6:0] qd_q_io_deq_bits_beats;
  wire  qe_q_clock;
  wire  qe_q_reset;
  wire  qe_q_io_enq_ready;
  wire  qe_q_io_enq_valid;
  wire [31:0] qe_q_io_enq_bits_data;
  wire  qe_q_io_enq_bits_last;
  wire [6:0] qe_q_io_enq_bits_beats;
  wire  qe_q_io_deq_ready;
  wire  qe_q_io_deq_valid;
  wire [31:0] qe_q_io_deq_bits_data;
  wire  qe_q_io_deq_bits_last;
  wire [6:0] qe_q_io_deq_bits_beats;
  wire  ioX_cq_clock;
  wire  ioX_cq_reset;
  wire  ioX_cq_io_enq_ready;
  wire  ioX_cq_io_enq_valid;
  wire [31:0] ioX_cq_io_enq_bits_data;
  wire  ioX_cq_io_enq_bits_last;
  wire [6:0] ioX_cq_io_enq_bits_beats;
  wire  ioX_cq_io_deq_ready;
  wire  ioX_cq_io_deq_valid;
  wire [31:0] ioX_cq_io_deq_bits_data;
  wire  ioX_cq_io_deq_bits_last;
  wire [6:0] ioX_cq_io_deq_bits_beats;
  wire  ioX_cq_1_clock;
  wire  ioX_cq_1_reset;
  wire  ioX_cq_1_io_enq_ready;
  wire  ioX_cq_1_io_enq_valid;
  wire [31:0] ioX_cq_1_io_enq_bits_data;
  wire  ioX_cq_1_io_enq_bits_last;
  wire [6:0] ioX_cq_1_io_enq_bits_beats;
  wire  ioX_cq_1_io_deq_ready;
  wire  ioX_cq_1_io_deq_valid;
  wire [31:0] ioX_cq_1_io_deq_bits_data;
  wire  ioX_cq_1_io_deq_bits_last;
  wire [6:0] ioX_cq_1_io_deq_bits_beats;
  wire  ioX_cq_2_clock;
  wire  ioX_cq_2_reset;
  wire  ioX_cq_2_io_enq_ready;
  wire  ioX_cq_2_io_enq_valid;
  wire [31:0] ioX_cq_2_io_enq_bits_data;
  wire  ioX_cq_2_io_enq_bits_last;
  wire [6:0] ioX_cq_2_io_enq_bits_beats;
  wire  ioX_cq_2_io_deq_ready;
  wire  ioX_cq_2_io_deq_valid;
  wire [31:0] ioX_cq_2_io_deq_bits_data;
  wire  ioX_cq_2_io_deq_bits_last;
  wire [6:0] ioX_cq_2_io_deq_bits_beats;
  wire  ioX_cq_3_clock;
  wire  ioX_cq_3_reset;
  wire  ioX_cq_3_io_enq_ready;
  wire  ioX_cq_3_io_enq_valid;
  wire [31:0] ioX_cq_3_io_enq_bits_data;
  wire  ioX_cq_3_io_enq_bits_last;
  wire [6:0] ioX_cq_3_io_enq_bits_beats;
  wire  ioX_cq_3_io_deq_ready;
  wire  ioX_cq_3_io_deq_valid;
  wire [31:0] ioX_cq_3_io_deq_bits_data;
  wire  ioX_cq_3_io_deq_bits_last;
  wire [6:0] ioX_cq_3_io_deq_bits_beats;
  wire  ioX_cq_4_clock;
  wire  ioX_cq_4_reset;
  wire  ioX_cq_4_io_enq_ready;
  wire  ioX_cq_4_io_enq_valid;
  wire [31:0] ioX_cq_4_io_enq_bits_data;
  wire  ioX_cq_4_io_enq_bits_last;
  wire [6:0] ioX_cq_4_io_enq_bits_beats;
  wire  ioX_cq_4_io_deq_ready;
  wire  ioX_cq_4_io_deq_valid;
  wire [31:0] ioX_cq_4_io_deq_bits_data;
  wire  ioX_cq_4_io_deq_bits_last;
  wire [6:0] ioX_cq_4_io_deq_bits_beats;
  wire  rxQ_clock;
  wire  rxQ_reset;
  wire  rxQ_io_enq_ready;
  wire  rxQ_io_enq_valid;
  wire [31:0] rxQ_io_enq_bits_data;
  wire  rxQ_io_enq_bits_last;
  wire [6:0] rxQ_io_enq_bits_beats;
  wire  rxQ_io_deq_ready;
  wire  rxQ_io_deq_valid;
  wire [31:0] rxQ_io_deq_bits_data;
  wire  rxQ_io_deq_bits_last;
  wire [6:0] rxQ_io_deq_bits_beats;
  wire  io_c2b_rst_reg_io_q;
  wire  io_c2b_rst_reg_io_clk;
  wire  io_c2b_rst_reg_io_rst;
  reg [19:0] rx_a;
  reg [19:0] rx_b;
  reg [19:0] rx_c;
  reg [19:0] rx_d;
  reg [19:0] rx_e;
  reg [19:0] tx_a;
  reg [19:0] tx_b;
  reg [19:0] tx_c;
  reg [19:0] tx_d;
  reg [19:0] tx_e;
  wire  _ioX_first_T = qa_q_io_deq_ready & qa_q_io_deq_valid;
  reg  ioX_first;
  wire  _GEN_0 = _ioX_first_T ? qa_q_io_deq_bits_last : ioX_first;
  wire [19:0] _GEN_19 = {{13'd0}, qa_q_io_deq_bits_beats};
  wire [20:0] ioX_delta = tx_a - _GEN_19;
  wire [20:0] _ioX_allow_T_1 = tx_a - _GEN_19;
  wire  ioX_allow = ~ioX_first | $signed(_ioX_allow_T_1) >= 21'sh0;
  wire [20:0] _ioX_tx_a_T_2 = _ioX_first_T & ioX_first ? ioX_delta : {{1'd0}, tx_a};
  wire  _ioX_tx_a_T_3 = txInc_sink_io_deq_ready & txInc_sink_io_deq_valid;
  wire [19:0] _ioX_tx_a_T_4 = _ioX_tx_a_T_3 ? txInc_sink_io_deq_bits_a : 20'h0;
  wire [20:0] _GEN_20 = {{1'd0}, _ioX_tx_a_T_4};
  wire [20:0] _ioX_tx_a_T_6 = _ioX_tx_a_T_2 + _GEN_20;
  wire  _ioX_first_T_1 = qb_q_io_deq_ready & qb_q_io_deq_valid;
  reg  ioX_first_1;
  wire  _GEN_1 = _ioX_first_T_1 ? qb_q_io_deq_bits_last : ioX_first_1;
  wire [19:0] _GEN_21 = {{13'd0}, qb_q_io_deq_bits_beats};
  wire [20:0] ioX_delta_1 = tx_b - _GEN_21;
  wire [20:0] _ioX_allow_T_4 = tx_b - _GEN_21;
  wire  ioX_allow_1 = ~ioX_first_1 | $signed(_ioX_allow_T_4) >= 21'sh0;
  wire [20:0] _ioX_tx_bT_2 = _ioX_first_T_1 & ioX_first_1 ? ioX_delta_1 : {{1'd0}, tx_b};
  wire [19:0] _ioX_tx_bT_4 = _ioX_tx_a_T_3 ? txInc_sink_io_deq_bits_b : 20'h0;
  wire [20:0] _GEN_22 = {{1'd0}, _ioX_tx_bT_4};
  wire [20:0] _ioX_tx_bT_6 = _ioX_tx_bT_2 + _GEN_22;
  wire  _ioX_first_T_2 = qc_q_io_deq_ready & qc_q_io_deq_valid;
  reg  ioX_first_2;
  wire  _GEN_2 = _ioX_first_T_2 ? qc_q_io_deq_bits_last : ioX_first_2;
  wire [19:0] _GEN_23 = {{13'd0}, qc_q_io_deq_bits_beats};
  wire [20:0] ioX_delta_2 = tx_c - _GEN_23;
  wire [20:0] _ioX_allow_T_7 = tx_c - _GEN_23;
  wire  ioX_allow_2 = ~ioX_first_2 | $signed(_ioX_allow_T_7) >= 21'sh0;
  wire [20:0] _ioX_tx_c_T_2 = _ioX_first_T_2 & ioX_first_2 ? ioX_delta_2 : {{1'd0}, tx_c};
  wire [19:0] _ioX_tx_c_T_4 = _ioX_tx_a_T_3 ? txInc_sink_io_deq_bits_c : 20'h0;
  wire [20:0] _GEN_24 = {{1'd0}, _ioX_tx_c_T_4};
  wire [20:0] _ioX_tx_c_T_6 = _ioX_tx_c_T_2 + _GEN_24;
  wire  _ioX_first_T_3 = qd_q_io_deq_ready & qd_q_io_deq_valid;
  reg  ioX_first_3;
  wire  _GEN_3 = _ioX_first_T_3 ? qd_q_io_deq_bits_last : ioX_first_3;
  wire [19:0] _GEN_25 = {{13'd0}, qd_q_io_deq_bits_beats};
  wire [20:0] ioX_delta_3 = tx_d - _GEN_25;
  wire [20:0] _ioX_allow_T_10 = tx_d - _GEN_25;
  wire  ioX_allow_3 = ~ioX_first_3 | $signed(_ioX_allow_T_10) >= 21'sh0;
  wire [20:0] _ioX_tx_d_T_2 = _ioX_first_T_3 & ioX_first_3 ? ioX_delta_3 : {{1'd0}, tx_d};
  wire [19:0] _ioX_tx_d_T_4 = _ioX_tx_a_T_3 ? txInc_sink_io_deq_bits_d : 20'h0;
  wire [20:0] _GEN_26 = {{1'd0}, _ioX_tx_d_T_4};
  wire [20:0] _ioX_tx_d_T_6 = _ioX_tx_d_T_2 + _GEN_26;
  wire  _ioX_first_T_4 = qe_q_io_deq_ready & qe_q_io_deq_valid;
  reg  ioX_first_4;
  wire  _GEN_4 = _ioX_first_T_4 ? qe_q_io_deq_bits_last : ioX_first_4;
  wire [19:0] _GEN_27 = {{13'd0}, qe_q_io_deq_bits_beats};
  wire [20:0] ioX_delta_4 = tx_e - _GEN_27;
  wire [20:0] _ioX_allow_T_13 = tx_e - _GEN_27;
  wire  ioX_allow_4 = ~ioX_first_4 | $signed(_ioX_allow_T_13) >= 21'sh0;
  wire [20:0] _ioX_tx_e_T_2 = _ioX_first_T_4 & ioX_first_4 ? ioX_delta_4 : {{1'd0}, tx_e};
  wire [19:0] _ioX_tx_e_T_4 = _ioX_tx_a_T_3 ? txInc_sink_io_deq_bits_e : 20'h0;
  wire [20:0] _GEN_28 = {{1'd0}, _ioX_tx_e_T_4};
  wire [20:0] _ioX_tx_e_T_6 = _ioX_tx_e_T_2 + _GEN_28;
  wire [19:0] _GEN_29 = {{1'd0}, rx_a[19:1]};
  wire [19:0] _mask_T_1 = rx_a | _GEN_29;
  wire [19:0] _GEN_30 = {{2'd0}, _mask_T_1[19:2]};
  wire [19:0] _mask_T_3 = _mask_T_1 | _GEN_30;
  wire [19:0] _GEN_31 = {{4'd0}, _mask_T_3[19:4]};
  wire [19:0] _mask_T_5 = _mask_T_3 | _GEN_31;
  wire [19:0] _GEN_32 = {{8'd0}, _mask_T_5[19:8]};
  wire [19:0] _mask_T_7 = _mask_T_5 | _GEN_32;
  wire [19:0] _GEN_33 = {{16'd0}, _mask_T_7[19:16]};
  wire [19:0] _mask_T_9 = _mask_T_7 | _GEN_33;
  wire [18:0] mask = _mask_T_9[19:1];
  wire [19:0] _msbOH_T = ~rx_a;
  wire [19:0] _GEN_34 = {{1'd0}, mask};
  wire [19:0] _msbOH_T_1 = _msbOH_T | _GEN_34;
  wire [19:0] msbOH = ~_msbOH_T_1;
  wire [20:0] _msb_T = {msbOH, 1'h0};
  wire [4:0] msb_hi = _msb_T[20:16];
  wire [15:0] msb_lo = _msb_T[15:0];
  wire  msb_hi_1 = |msb_hi;
  wire [15:0] _GEN_35 = {{11'd0}, msb_hi};
  wire [15:0] _msb_T_1 = _GEN_35 | msb_lo;
  wire [7:0] msb_hi_2 = _msb_T_1[15:8];
  wire [7:0] msb_lo_1 = _msb_T_1[7:0];
  wire  msb_hi_3 = |msb_hi_2;
  wire [7:0] _msb_T_2 = msb_hi_2 | msb_lo_1;
  wire [3:0] msb_hi_4 = _msb_T_2[7:4];
  wire [3:0] msb_lo_2 = _msb_T_2[3:0];
  wire  msb_hi_5 = |msb_hi_4;
  wire [3:0] _msb_T_3 = msb_hi_4 | msb_lo_2;
  wire [1:0] msb_hi_6 = _msb_T_3[3:2];
  wire [1:0] msb_lo_3 = _msb_T_3[1:0];
  wire  msb_hi_7 = |msb_hi_6;
  wire [1:0] _msb_T_4 = msb_hi_6 | msb_lo_3;
  wire  msb_lo_4 = _msb_T_4[1];
  wire [19:0] a_rest = rx_a & _GEN_34;
  wire [19:0] _GEN_37 = {{1'd0}, rx_b[19:1]};
  wire [19:0] _mask_T_12 = rx_b | _GEN_37;
  wire [19:0] _GEN_38 = {{2'd0}, _mask_T_12[19:2]};
  wire [19:0] _mask_T_14 = _mask_T_12 | _GEN_38;
  wire [19:0] _GEN_39 = {{4'd0}, _mask_T_14[19:4]};
  wire [19:0] _mask_T_16 = _mask_T_14 | _GEN_39;
  wire [19:0] _GEN_40 = {{8'd0}, _mask_T_16[19:8]};
  wire [19:0] _mask_T_18 = _mask_T_16 | _GEN_40;
  wire [19:0] _GEN_41 = {{16'd0}, _mask_T_18[19:16]};
  wire [19:0] _mask_T_20 = _mask_T_18 | _GEN_41;
  wire [18:0] mask_1 = _mask_T_20[19:1];
  wire [19:0] _msbOH_T_2 = ~rx_b;
  wire [19:0] _GEN_42 = {{1'd0}, mask_1};
  wire [19:0] _msbOH_T_3 = _msbOH_T_2 | _GEN_42;
  wire [19:0] msbOH_1 = ~_msbOH_T_3;
  wire [20:0] _msb_T_5 = {msbOH_1, 1'h0};
  wire [4:0] msb_hi_8 = _msb_T_5[20:16];
  wire [15:0] msb_lo_8 = _msb_T_5[15:0];
  wire  msb_hi_9 = |msb_hi_8;
  wire [15:0] _GEN_43 = {{11'd0}, msb_hi_8};
  wire [15:0] _msb_T_6 = _GEN_43 | msb_lo_8;
  wire [7:0] msb_hi_10 = _msb_T_6[15:8];
  wire [7:0] msb_lo_9 = _msb_T_6[7:0];
  wire  msb_hi_11 = |msb_hi_10;
  wire [7:0] _msb_T_7 = msb_hi_10 | msb_lo_9;
  wire [3:0] msb_hi_12 = _msb_T_7[7:4];
  wire [3:0] msb_lo_10 = _msb_T_7[3:0];
  wire  msb_hi_13 = |msb_hi_12;
  wire [3:0] _msb_T_8 = msb_hi_12 | msb_lo_10;
  wire [1:0] msb_hi_14 = _msb_T_8[3:2];
  wire [1:0] msb_lo_11 = _msb_T_8[1:0];
  wire  msb_hi_15 = |msb_hi_14;
  wire [1:0] _msb_T_9 = msb_hi_14 | msb_lo_11;
  wire  msb_lo_12 = _msb_T_9[1];
  wire [19:0] b_rest = rx_b & _GEN_42;
  wire [19:0] _GEN_45 = {{1'd0}, rx_c[19:1]};
  wire [19:0] _mask_T_23 = rx_c | _GEN_45;
  wire [19:0] _GEN_46 = {{2'd0}, _mask_T_23[19:2]};
  wire [19:0] _mask_T_25 = _mask_T_23 | _GEN_46;
  wire [19:0] _GEN_47 = {{4'd0}, _mask_T_25[19:4]};
  wire [19:0] _mask_T_27 = _mask_T_25 | _GEN_47;
  wire [19:0] _GEN_48 = {{8'd0}, _mask_T_27[19:8]};
  wire [19:0] _mask_T_29 = _mask_T_27 | _GEN_48;
  wire [19:0] _GEN_49 = {{16'd0}, _mask_T_29[19:16]};
  wire [19:0] _mask_T_31 = _mask_T_29 | _GEN_49;
  wire [18:0] mask_2 = _mask_T_31[19:1];
  wire [19:0] _msbOH_T_4 = ~rx_c;
  wire [19:0] _GEN_50 = {{1'd0}, mask_2};
  wire [19:0] _msbOH_T_5 = _msbOH_T_4 | _GEN_50;
  wire [19:0] msbOH_2 = ~_msbOH_T_5;
  wire [20:0] _msb_T_10 = {msbOH_2, 1'h0};
  wire [4:0] msb_hi_16 = _msb_T_10[20:16];
  wire [15:0] msb_lo_16 = _msb_T_10[15:0];
  wire  msb_hi_17 = |msb_hi_16;
  wire [15:0] _GEN_51 = {{11'd0}, msb_hi_16};
  wire [15:0] _msb_T_11 = _GEN_51 | msb_lo_16;
  wire [7:0] msb_hi_18 = _msb_T_11[15:8];
  wire [7:0] msb_lo_17 = _msb_T_11[7:0];
  wire  msb_hi_19 = |msb_hi_18;
  wire [7:0] _msb_T_12 = msb_hi_18 | msb_lo_17;
  wire [3:0] msb_hi_20 = _msb_T_12[7:4];
  wire [3:0] msb_lo_18 = _msb_T_12[3:0];
  wire  msb_hi_21 = |msb_hi_20;
  wire [3:0] _msb_T_13 = msb_hi_20 | msb_lo_18;
  wire [1:0] msb_hi_22 = _msb_T_13[3:2];
  wire [1:0] msb_lo_19 = _msb_T_13[1:0];
  wire  msb_hi_23 = |msb_hi_22;
  wire [1:0] _msb_T_14 = msb_hi_22 | msb_lo_19;
  wire  msb_lo_20 = _msb_T_14[1];
  wire [19:0] c_rest = rx_c & _GEN_50;
  wire [19:0] _GEN_53 = {{1'd0}, rx_d[19:1]};
  wire [19:0] _mask_T_34 = rx_d | _GEN_53;
  wire [19:0] _GEN_54 = {{2'd0}, _mask_T_34[19:2]};
  wire [19:0] _mask_T_36 = _mask_T_34 | _GEN_54;
  wire [19:0] _GEN_55 = {{4'd0}, _mask_T_36[19:4]};
  wire [19:0] _mask_T_38 = _mask_T_36 | _GEN_55;
  wire [19:0] _GEN_56 = {{8'd0}, _mask_T_38[19:8]};
  wire [19:0] _mask_T_40 = _mask_T_38 | _GEN_56;
  wire [19:0] _GEN_57 = {{16'd0}, _mask_T_40[19:16]};
  wire [19:0] _mask_T_42 = _mask_T_40 | _GEN_57;
  wire [18:0] mask_3 = _mask_T_42[19:1];
  wire [19:0] _msbOH_T_6 = ~rx_d;
  wire [19:0] _GEN_58 = {{1'd0}, mask_3};
  wire [19:0] _msbOH_T_7 = _msbOH_T_6 | _GEN_58;
  wire [19:0] msbOH_3 = ~_msbOH_T_7;
  wire [20:0] _msb_T_15 = {msbOH_3, 1'h0};
  wire [4:0] msb_hi_24 = _msb_T_15[20:16];
  wire [15:0] msb_lo_24 = _msb_T_15[15:0];
  wire  msb_hi_25 = |msb_hi_24;
  wire [15:0] _GEN_59 = {{11'd0}, msb_hi_24};
  wire [15:0] _msb_T_16 = _GEN_59 | msb_lo_24;
  wire [7:0] msb_hi_26 = _msb_T_16[15:8];
  wire [7:0] msb_lo_25 = _msb_T_16[7:0];
  wire  msb_hi_27 = |msb_hi_26;
  wire [7:0] _msb_T_17 = msb_hi_26 | msb_lo_25;
  wire [3:0] msb_hi_28 = _msb_T_17[7:4];
  wire [3:0] msb_lo_26 = _msb_T_17[3:0];
  wire  msb_hi_29 = |msb_hi_28;
  wire [3:0] _msb_T_18 = msb_hi_28 | msb_lo_26;
  wire [1:0] msb_hi_30 = _msb_T_18[3:2];
  wire [1:0] msb_lo_27 = _msb_T_18[1:0];
  wire  msb_hi_31 = |msb_hi_30;
  wire [1:0] _msb_T_19 = msb_hi_30 | msb_lo_27;
  wire  msb_lo_28 = _msb_T_19[1];
  wire [19:0] d_rest = rx_d & _GEN_58;
  wire [19:0] _GEN_61 = {{1'd0}, rx_e[19:1]};
  wire [19:0] _mask_T_45 = rx_e | _GEN_61;
  wire [19:0] _GEN_62 = {{2'd0}, _mask_T_45[19:2]};
  wire [19:0] _mask_T_47 = _mask_T_45 | _GEN_62;
  wire [19:0] _GEN_63 = {{4'd0}, _mask_T_47[19:4]};
  wire [19:0] _mask_T_49 = _mask_T_47 | _GEN_63;
  wire [19:0] _GEN_64 = {{8'd0}, _mask_T_49[19:8]};
  wire [19:0] _mask_T_51 = _mask_T_49 | _GEN_64;
  wire [19:0] _GEN_65 = {{16'd0}, _mask_T_51[19:16]};
  wire [19:0] _mask_T_53 = _mask_T_51 | _GEN_65;
  wire [18:0] mask_4 = _mask_T_53[19:1];
  wire [19:0] _msbOH_T_8 = ~rx_e;
  wire [19:0] _GEN_66 = {{1'd0}, mask_4};
  wire [19:0] _msbOH_T_9 = _msbOH_T_8 | _GEN_66;
  wire [19:0] msbOH_4 = ~_msbOH_T_9;
  wire [20:0] _msb_T_20 = {msbOH_4, 1'h0};
  wire [4:0] msb_hi_32 = _msb_T_20[20:16];
  wire [15:0] msb_lo_32 = _msb_T_20[15:0];
  wire  msb_hi_33 = |msb_hi_32;
  wire [15:0] _GEN_67 = {{11'd0}, msb_hi_32};
  wire [15:0] _msb_T_21 = _GEN_67 | msb_lo_32;
  wire [7:0] msb_hi_34 = _msb_T_21[15:8];
  wire [7:0] msb_lo_33 = _msb_T_21[7:0];
  wire  msb_hi_35 = |msb_hi_34;
  wire [7:0] _msb_T_22 = msb_hi_34 | msb_lo_33;
  wire [3:0] msb_hi_36 = _msb_T_22[7:4];
  wire [3:0] msb_lo_34 = _msb_T_22[3:0];
  wire  msb_hi_37 = |msb_hi_36;
  wire [3:0] _msb_T_23 = msb_hi_36 | msb_lo_34;
  wire [1:0] msb_hi_38 = _msb_T_23[3:2];
  wire [1:0] msb_lo_35 = _msb_T_23[1:0];
  wire  msb_hi_39 = |msb_hi_38;
  wire [1:0] _msb_T_24 = msb_hi_38 | msb_lo_35;
  wire  msb_lo_36 = _msb_T_24[1];
  wire [19:0] e_rest = rx_e & _GEN_66;
  wire [11:0] header_lo = {msb_hi_1,msb_hi_3,msb_hi_5,msb_hi_7,msb_lo_4,4'h0,3'h5};
  wire [9:0] header_hi_lo = {msb_hi_17,msb_hi_19,msb_hi_21,msb_hi_23,msb_lo_20,msb_hi_9,msb_hi_11,msb_hi_13,msb_hi_15,
    msb_lo_12};
  wire [9:0] header_hi_hi = {msb_hi_33,msb_hi_35,msb_hi_37,msb_hi_39,msb_lo_36,msb_hi_25,msb_hi_27,msb_hi_29,msb_hi_31,
    msb_lo_28};
  wire [19:0] header_hi = {header_hi_hi,header_hi_lo};
  wire [31:0] rxHeader = {header_hi_hi,header_hi_lo,msb_hi_1,msb_hi_3,msb_hi_5,msb_hi_7,msb_lo_4,4'h0,3'h5};
  wire  _rx_T = rxQ_io_enq_ready & rxQ_io_enq_valid;
  wire [19:0] _rx_T_1_a = _rx_T ? a_rest : rx_a;
  wire [19:0] _rx_T_1_b = _rx_T ? b_rest : rx_b;
  wire [19:0] _rx_T_1_c = _rx_T ? c_rest : rx_c;
  wire [19:0] _rx_T_1_d = _rx_T ? d_rest : rx_d;
  wire [19:0] _rx_T_1_e = _rx_T ? e_rest : rx_e;
  wire  _rx_T_2 = rxInc_sink_io_deq_ready & rxInc_sink_io_deq_valid;
  wire [19:0] _rx_T_3_a = _rx_T_2 ? rxInc_sink_io_deq_bits_a : 20'h0;
  wire [19:0] _rx_T_3_b = _rx_T_2 ? rxInc_sink_io_deq_bits_b : 20'h0;
  wire [19:0] _rx_T_3_c = _rx_T_2 ? rxInc_sink_io_deq_bits_c : 20'h0;
  wire [19:0] _rx_T_3_d = _rx_T_2 ? rxInc_sink_io_deq_bits_d : 20'h0;
  wire [19:0] _rx_T_3_e = _rx_T_2 ? rxInc_sink_io_deq_bits_e : 20'h0;
  wire [20:0] rx_z = _rx_T_1_a + _rx_T_3_a;
  wire [20:0] _rx_out_a_T_3 = |rx_z[20] ? 21'hfffff : rx_z;
  wire [20:0] rx_z_1 = _rx_T_1_b + _rx_T_3_b;
  wire [20:0] _rx_out_bT_3 = |rx_z_1[20] ? 21'hfffff : rx_z_1;
  wire [20:0] rx_z_2 = _rx_T_1_c + _rx_T_3_c;
  wire [20:0] _rx_out_c_T_3 = |rx_z_2[20] ? 21'hfffff : rx_z_2;
  wire [20:0] rx_z_3 = _rx_T_1_d + _rx_T_3_d;
  wire [20:0] _rx_out_d_T_3 = |rx_z_3[20] ? 21'hfffff : rx_z_3;
  wire [20:0] rx_z_4 = _rx_T_1_e + _rx_T_3_e;
  wire [20:0] _rx_out_e_T_3 = |rx_z_4[20] ? 21'hfffff : rx_z_4;
  reg [1:0] xmit;
  wire  forceXmit = xmit == 2'h0;
  wire  allowReturn = ~(ioX_cq_io_deq_valid | ioX_cq_1_io_deq_valid | ioX_cq_2_io_deq_valid | ioX_cq_3_io_deq_valid |
    ioX_cq_4_io_deq_valid) | forceXmit;
  wire  f_valid = rxQ_io_deq_valid & allowReturn;
  wire [5:0] requests = {f_valid,ioX_cq_4_io_deq_valid,ioX_cq_3_io_deq_valid,ioX_cq_2_io_deq_valid,ioX_cq_1_io_deq_valid
    ,ioX_cq_io_deq_valid};
  wire  f_bits_last = rxQ_io_deq_bits_last;
  wire [5:0] lasts = {f_bits_last,ioX_cq_4_io_deq_bits_last,ioX_cq_3_io_deq_bits_last,ioX_cq_2_io_deq_bits_last,
    ioX_cq_1_io_deq_bits_last,ioX_cq_io_deq_bits_last};
  wire [1:0] _xmit_T_1 = xmit - 2'h1;
  reg  first;
  reg [5:0] readys_mask;
  wire [5:0] _readys_filter_T = ~readys_mask;
  wire [5:0] readys_filter_hi = requests & _readys_filter_T;
  wire [11:0] readys_filter = {readys_filter_hi,f_valid,ioX_cq_4_io_deq_valid,ioX_cq_3_io_deq_valid,
    ioX_cq_2_io_deq_valid,ioX_cq_1_io_deq_valid,ioX_cq_io_deq_valid};
  wire [11:0] _GEN_69 = {{1'd0}, readys_filter[11:1]};
  wire [11:0] _readys_unready_T_1 = readys_filter | _GEN_69;
  wire [11:0] _GEN_70 = {{2'd0}, _readys_unready_T_1[11:2]};
  wire [11:0] _readys_unready_T_3 = _readys_unready_T_1 | _GEN_70;
  wire [11:0] _GEN_71 = {{4'd0}, _readys_unready_T_3[11:4]};
  wire [11:0] _readys_unready_T_5 = _readys_unready_T_3 | _GEN_71;
  wire [11:0] _readys_unready_T_8 = {readys_mask, 6'h0};
  wire [11:0] _GEN_72 = {{1'd0}, _readys_unready_T_5[11:1]};
  wire [11:0] readys_unready = _GEN_72 | _readys_unready_T_8;
  wire [5:0] _readys_readys_T_2 = readys_unready[11:6] & readys_unready[5:0];
  wire [5:0] readys_readys = ~_readys_readys_T_2;
  reg [5:0] state;
  wire [5:0] allowed = first ? readys_readys : state;
  reg  txBusy;
  wire  f_ready = allowed[5] & ~txBusy;
  wire  _T_1 = f_ready & f_valid;
  wire [5:0] _readys_mask_T = readys_readys & requests;
  wire [6:0] _readys_mask_T_1 = {_readys_mask_T, 1'h0};
  wire [5:0] _readys_mask_T_3 = _readys_mask_T | _readys_mask_T_1[5:0];
  wire [7:0] _readys_mask_T_4 = {_readys_mask_T_3, 2'h0};
  wire [5:0] _readys_mask_T_6 = _readys_mask_T_3 | _readys_mask_T_4[5:0];
  wire [9:0] _readys_mask_T_7 = {_readys_mask_T_6, 4'h0};
  wire [5:0] _readys_mask_T_9 = _readys_mask_T_6 | _readys_mask_T_7[5:0];
  wire [5:0] grant = first ? _readys_mask_T : state;
  wire  _send_T = ioX_cq_io_deq_ready & ioX_cq_io_deq_valid;
  wire  _send_T_1 = ioX_cq_1_io_deq_ready & ioX_cq_1_io_deq_valid;
  wire  _send_T_2 = ioX_cq_2_io_deq_ready & ioX_cq_2_io_deq_valid;
  wire  _send_T_3 = ioX_cq_3_io_deq_ready & ioX_cq_3_io_deq_valid;
  wire  _send_T_4 = ioX_cq_4_io_deq_ready & ioX_cq_4_io_deq_valid;
  wire  send = _send_T | _send_T_1 | _send_T_2 | _send_T_3 | _send_T_4 | _T_1;
  wire [5:0] _first_T = grant & lasts;
  wire  _GEN_8 = send ? |_first_T : first;
  reg [1:0] transferByteCnt;
  wire  _GEN_10 = send | txBusy;
  wire [1:0] _transferByteCnt_T_1 = transferByteCnt + 2'h1;
  wire [31:0] _transferDataReg_WIRE__0 = ioX_cq_io_deq_bits_data;
  wire [31:0] _transferDataReg_T_6 = grant[0] ? _transferDataReg_WIRE__0 : 32'h0;
  wire [31:0] _transferDataReg_WIRE__1 = ioX_cq_1_io_deq_bits_data;
  wire [31:0] _transferDataReg_T_7 = grant[1] ? _transferDataReg_WIRE__1 : 32'h0;
  wire [31:0] _transferDataReg_WIRE__2 = ioX_cq_2_io_deq_bits_data;
  wire [31:0] _transferDataReg_T_8 = grant[2] ? _transferDataReg_WIRE__2 : 32'h0;
  wire [31:0] _transferDataReg_WIRE__3 = ioX_cq_3_io_deq_bits_data;
  wire [31:0] _transferDataReg_T_9 = grant[3] ? _transferDataReg_WIRE__3 : 32'h0;
  wire [31:0] _transferDataReg_WIRE__4 = ioX_cq_4_io_deq_bits_data;
  wire [31:0] _transferDataReg_T_10 = grant[4] ? _transferDataReg_WIRE__4 : 32'h0;
  wire [31:0] f_bits_data = rxQ_io_deq_bits_data;
  wire [31:0] _transferDataReg_T_11 = grant[5] ? f_bits_data : 32'h0;
  wire [31:0] _transferDataReg_T_12 = _transferDataReg_T_6 | _transferDataReg_T_7;
  wire [31:0] _transferDataReg_T_13 = _transferDataReg_T_12 | _transferDataReg_T_8;
  wire [31:0] _transferDataReg_T_14 = _transferDataReg_T_13 | _transferDataReg_T_9;
  wire [31:0] _transferDataReg_T_15 = _transferDataReg_T_14 | _transferDataReg_T_10;
  wire [31:0] _transferDataReg_T_16 = _transferDataReg_T_15 | _transferDataReg_T_11;
  wire [7:0] transferBytes_0 = transferDataReg[31:24];
  wire [7:0] transferBytes_1 = transferDataReg[23:16];
  wire [7:0] transferBytes_2 = transferDataReg[15:8];
  wire [7:0] transferBytes_3 = transferDataReg[7:0];
  reg  io_c2b_send_REG;
  reg  io_c2b_send_REG_1;
  reg [7:0] io_c2b_data_REG;
  reg [7:0] io_c2b_data_REG_1;
  wire [19:0] rx_out_2_a = _rx_out_a_T_3[19:0];
  wire [19:0] rx_out_2_b = _rx_out_bT_3[19:0];
  wire [19:0] rx_out_2_c = _rx_out_c_T_3[19:0];
  wire [19:0] rx_out_2_d = _rx_out_d_T_3[19:0];
  wire [19:0] rx_out_2_e = _rx_out_e_T_3[19:0];
  CHIPLINK_PREFIX_AsyncQueueSink_5 rxInc_sink (
    .clock(rxInc_sink_clock),
    .reset(rxInc_sink_reset),
    // .io_deq_ready(rxInc_sink_io_deq_ready),
    .io_deq_valid(rxInc_sink_io_deq_valid),
    .io_deq_bits_a(rxInc_sink_io_deq_bits_a),
    .io_deq_bits_b(rxInc_sink_io_deq_bits_b),
    .io_deq_bits_c(rxInc_sink_io_deq_bits_c),
    .io_deq_bits_d(rxInc_sink_io_deq_bits_d),
    .io_deq_bits_e(rxInc_sink_io_deq_bits_e),
    .io_async_mem_0_a(rxInc_sink_io_async_mem_0_a),
    .io_async_mem_0_b(rxInc_sink_io_async_mem_0_b),
    .io_async_mem_0_c(rxInc_sink_io_async_mem_0_c),
    .io_async_mem_0_d(rxInc_sink_io_async_mem_0_d),
    .io_async_mem_0_e(rxInc_sink_io_async_mem_0_e),
    .io_async_ridx(rxInc_sink_io_async_ridx),
    .io_async_widx(rxInc_sink_io_async_widx),
    .io_async_safe_ridx_valid(rxInc_sink_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(rxInc_sink_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(rxInc_sink_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(rxInc_sink_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSink_5 txInc_sink (
    .clock(txInc_sink_clock),
    .reset(txInc_sink_reset),
    // .io_deq_ready(txInc_sink_io_deq_ready),
    .io_deq_valid(txInc_sink_io_deq_valid),
    .io_deq_bits_a(txInc_sink_io_deq_bits_a),
    .io_deq_bits_b(txInc_sink_io_deq_bits_b),
    .io_deq_bits_c(txInc_sink_io_deq_bits_c),
    .io_deq_bits_d(txInc_sink_io_deq_bits_d),
    .io_deq_bits_e(txInc_sink_io_deq_bits_e),
    .io_async_mem_0_a(txInc_sink_io_async_mem_0_a),
    .io_async_mem_0_b(txInc_sink_io_async_mem_0_b),
    .io_async_mem_0_c(txInc_sink_io_async_mem_0_c),
    .io_async_mem_0_d(txInc_sink_io_async_mem_0_d),
    .io_async_mem_0_e(txInc_sink_io_async_mem_0_e),
    .io_async_ridx(txInc_sink_io_async_ridx),
    .io_async_widx(txInc_sink_io_async_widx),
    .io_async_safe_ridx_valid(txInc_sink_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(txInc_sink_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(txInc_sink_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(txInc_sink_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_ShiftQueue qa_q (
    .clock(qa_q_clock),
    .reset(qa_q_reset),
    .io_enq_ready(qa_q_io_enq_ready),
    .io_enq_valid(qa_q_io_enq_valid),
    .io_enq_bits_data(qa_q_io_enq_bits_data),
    .io_enq_bits_last(qa_q_io_enq_bits_last),
    .io_enq_bits_beats(qa_q_io_enq_bits_beats),
    .io_deq_ready(qa_q_io_deq_ready),
    .io_deq_valid(qa_q_io_deq_valid),
    .io_deq_bits_data(qa_q_io_deq_bits_data),
    .io_deq_bits_last(qa_q_io_deq_bits_last),
    .io_deq_bits_beats(qa_q_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_ShiftQueue qb_q (
    .clock(qb_q_clock),
    .reset(qb_q_reset),
    .io_enq_ready(qb_q_io_enq_ready),
    .io_enq_valid(qb_q_io_enq_valid),
    .io_enq_bits_data(qb_q_io_enq_bits_data),
    .io_enq_bits_last(qb_q_io_enq_bits_last),
    .io_enq_bits_beats(qb_q_io_enq_bits_beats),
    .io_deq_ready(qb_q_io_deq_ready),
    .io_deq_valid(qb_q_io_deq_valid),
    .io_deq_bits_data(qb_q_io_deq_bits_data),
    .io_deq_bits_last(qb_q_io_deq_bits_last),
    .io_deq_bits_beats(qb_q_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_ShiftQueue qc_q (
    .clock(qc_q_clock),
    .reset(qc_q_reset),
    .io_enq_ready(qc_q_io_enq_ready),
    .io_enq_valid(qc_q_io_enq_valid),
    .io_enq_bits_data(qc_q_io_enq_bits_data),
    .io_enq_bits_last(qc_q_io_enq_bits_last),
    .io_enq_bits_beats(qc_q_io_enq_bits_beats),
    .io_deq_ready(qc_q_io_deq_ready),
    .io_deq_valid(qc_q_io_deq_valid),
    .io_deq_bits_data(qc_q_io_deq_bits_data),
    .io_deq_bits_last(qc_q_io_deq_bits_last),
    .io_deq_bits_beats(qc_q_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_ShiftQueue qd_q (
    .clock(qd_q_clock),
    .reset(qd_q_reset),
    .io_enq_ready(qd_q_io_enq_ready),
    .io_enq_valid(qd_q_io_enq_valid),
    .io_enq_bits_data(qd_q_io_enq_bits_data),
    .io_enq_bits_last(qd_q_io_enq_bits_last),
    .io_enq_bits_beats(qd_q_io_enq_bits_beats),
    .io_deq_ready(qd_q_io_deq_ready),
    .io_deq_valid(qd_q_io_deq_valid),
    .io_deq_bits_data(qd_q_io_deq_bits_data),
    .io_deq_bits_last(qd_q_io_deq_bits_last),
    .io_deq_bits_beats(qd_q_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_ShiftQueue qe_q (
    .clock(qe_q_clock),
    .reset(qe_q_reset),
    .io_enq_ready(qe_q_io_enq_ready),
    .io_enq_valid(qe_q_io_enq_valid),
    .io_enq_bits_data(qe_q_io_enq_bits_data),
    .io_enq_bits_last(qe_q_io_enq_bits_last),
    .io_enq_bits_beats(qe_q_io_enq_bits_beats),
    .io_deq_ready(qe_q_io_deq_ready),
    .io_deq_valid(qe_q_io_deq_valid),
    .io_deq_bits_data(qe_q_io_deq_bits_data),
    .io_deq_bits_last(qe_q_io_deq_bits_last),
    .io_deq_bits_beats(qe_q_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_ShiftQueue ioX_cq (
    .clock(ioX_cq_clock),
    .reset(ioX_cq_reset),
    .io_enq_ready(ioX_cq_io_enq_ready),
    .io_enq_valid(ioX_cq_io_enq_valid),
    .io_enq_bits_data(ioX_cq_io_enq_bits_data),
    .io_enq_bits_last(ioX_cq_io_enq_bits_last),
    .io_enq_bits_beats(ioX_cq_io_enq_bits_beats),
    .io_deq_ready(ioX_cq_io_deq_ready),
    .io_deq_valid(ioX_cq_io_deq_valid),
    .io_deq_bits_data(ioX_cq_io_deq_bits_data),
    .io_deq_bits_last(ioX_cq_io_deq_bits_last),
    .io_deq_bits_beats(ioX_cq_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_ShiftQueue ioX_cq_1 (
    .clock(ioX_cq_1_clock),
    .reset(ioX_cq_1_reset),
    .io_enq_ready(ioX_cq_1_io_enq_ready),
    .io_enq_valid(ioX_cq_1_io_enq_valid),
    .io_enq_bits_data(ioX_cq_1_io_enq_bits_data),
    .io_enq_bits_last(ioX_cq_1_io_enq_bits_last),
    .io_enq_bits_beats(ioX_cq_1_io_enq_bits_beats),
    .io_deq_ready(ioX_cq_1_io_deq_ready),
    .io_deq_valid(ioX_cq_1_io_deq_valid),
    .io_deq_bits_data(ioX_cq_1_io_deq_bits_data),
    .io_deq_bits_last(ioX_cq_1_io_deq_bits_last),
    .io_deq_bits_beats(ioX_cq_1_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_ShiftQueue ioX_cq_2 (
    .clock(ioX_cq_2_clock),
    .reset(ioX_cq_2_reset),
    .io_enq_ready(ioX_cq_2_io_enq_ready),
    .io_enq_valid(ioX_cq_2_io_enq_valid),
    .io_enq_bits_data(ioX_cq_2_io_enq_bits_data),
    .io_enq_bits_last(ioX_cq_2_io_enq_bits_last),
    .io_enq_bits_beats(ioX_cq_2_io_enq_bits_beats),
    .io_deq_ready(ioX_cq_2_io_deq_ready),
    .io_deq_valid(ioX_cq_2_io_deq_valid),
    .io_deq_bits_data(ioX_cq_2_io_deq_bits_data),
    .io_deq_bits_last(ioX_cq_2_io_deq_bits_last),
    .io_deq_bits_beats(ioX_cq_2_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_ShiftQueue ioX_cq_3 (
    .clock(ioX_cq_3_clock),
    .reset(ioX_cq_3_reset),
    .io_enq_ready(ioX_cq_3_io_enq_ready),
    .io_enq_valid(ioX_cq_3_io_enq_valid),
    .io_enq_bits_data(ioX_cq_3_io_enq_bits_data),
    .io_enq_bits_last(ioX_cq_3_io_enq_bits_last),
    .io_enq_bits_beats(ioX_cq_3_io_enq_bits_beats),
    .io_deq_ready(ioX_cq_3_io_deq_ready),
    .io_deq_valid(ioX_cq_3_io_deq_valid),
    .io_deq_bits_data(ioX_cq_3_io_deq_bits_data),
    .io_deq_bits_last(ioX_cq_3_io_deq_bits_last),
    .io_deq_bits_beats(ioX_cq_3_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_ShiftQueue ioX_cq_4 (
    .clock(ioX_cq_4_clock),
    .reset(ioX_cq_4_reset),
    .io_enq_ready(ioX_cq_4_io_enq_ready),
    .io_enq_valid(ioX_cq_4_io_enq_valid),
    .io_enq_bits_data(ioX_cq_4_io_enq_bits_data),
    .io_enq_bits_last(ioX_cq_4_io_enq_bits_last),
    .io_enq_bits_beats(ioX_cq_4_io_enq_bits_beats),
    .io_deq_ready(ioX_cq_4_io_deq_ready),
    .io_deq_valid(ioX_cq_4_io_deq_valid),
    .io_deq_bits_data(ioX_cq_4_io_deq_bits_data),
    .io_deq_bits_last(ioX_cq_4_io_deq_bits_last),
    .io_deq_bits_beats(ioX_cq_4_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_ShiftQueue rxQ (
    .clock(rxQ_clock),
    .reset(rxQ_reset),
    .io_enq_ready(rxQ_io_enq_ready),
    .io_enq_valid(rxQ_io_enq_valid),
    .io_enq_bits_data(rxQ_io_enq_bits_data),
    .io_enq_bits_last(rxQ_io_enq_bits_last),
    .io_enq_bits_beats(rxQ_io_enq_bits_beats),
    .io_deq_ready(rxQ_io_deq_ready),
    .io_deq_valid(rxQ_io_deq_valid),
    .io_deq_bits_data(rxQ_io_deq_bits_data),
    .io_deq_bits_last(rxQ_io_deq_bits_last),
    .io_deq_bits_beats(rxQ_io_deq_bits_beats)
  );
  CHIPLINK_PREFIX_AsyncResetReg io_c2b_rst_reg (
    .io_q(io_c2b_rst_reg_io_q),
    .io_clk(io_c2b_rst_reg_io_clk),
    .io_rst(io_c2b_rst_reg_io_rst)
  );
  assign io_c2b_clk = clock;
  assign io_c2b_rst = io_c2b_rst_reg_io_q;
  assign io_c2b_send = io_c2b_send_REG_1;
  assign io_c2b_data = io_c2b_data_REG_1;
  assign io_sa_ready = qa_q_io_enq_ready;
  assign io_sb_ready = qb_q_io_enq_ready;
  assign io_sc_ready = qc_q_io_enq_ready;
  assign io_sd_ready = qd_q_io_enq_ready;
  assign io_rxc_ridx = rxInc_sink_io_async_ridx;
  assign io_rxc_safe_ridx_valid = rxInc_sink_io_async_safe_ridx_valid;
  assign io_rxc_safe_sink_reset_n = rxInc_sink_io_async_safe_sink_reset_n;
  assign io_txc_ridx = txInc_sink_io_async_ridx;
  assign io_txc_safe_ridx_valid = txInc_sink_io_async_safe_ridx_valid;
  assign io_txc_safe_sink_reset_n = txInc_sink_io_async_safe_sink_reset_n;
  assign rxInc_sink_clock = clock;
  assign rxInc_sink_reset = reset;
  assign rxInc_sink_io_deq_ready = 1'h1;
  assign rxInc_sink_io_async_mem_0_a = io_rxc_mem_0_a;
  assign rxInc_sink_io_async_mem_0_b = io_rxc_mem_0_b;
  assign rxInc_sink_io_async_mem_0_c = io_rxc_mem_0_c;
  assign rxInc_sink_io_async_mem_0_d = io_rxc_mem_0_d;
  assign rxInc_sink_io_async_mem_0_e = io_rxc_mem_0_e;
  assign rxInc_sink_io_async_widx = io_rxc_widx;
  assign rxInc_sink_io_async_safe_widx_valid = io_rxc_safe_widx_valid;
  assign rxInc_sink_io_async_safe_source_reset_n = io_rxc_safe_source_reset_n;
  assign txInc_sink_clock = clock;
  assign txInc_sink_reset = reset;
  assign txInc_sink_io_deq_ready = 1'h1;
  assign txInc_sink_io_async_mem_0_a = io_txc_mem_0_a;
  assign txInc_sink_io_async_mem_0_b = io_txc_mem_0_b;
  assign txInc_sink_io_async_mem_0_c = io_txc_mem_0_c;
  assign txInc_sink_io_async_mem_0_d = io_txc_mem_0_d;
  assign txInc_sink_io_async_mem_0_e = io_txc_mem_0_e;
  assign txInc_sink_io_async_widx = io_txc_widx;
  assign txInc_sink_io_async_safe_widx_valid = io_txc_safe_widx_valid;
  assign txInc_sink_io_async_safe_source_reset_n = io_txc_safe_source_reset_n;
  assign qa_q_clock = clock;
  assign qa_q_reset = reset;
  assign qa_q_io_enq_valid = io_sa_valid;
  assign qa_q_io_enq_bits_data = io_sa_bits_data;
  assign qa_q_io_enq_bits_last = io_sa_bits_last;
  assign qa_q_io_enq_bits_beats = io_sa_bits_beats;
  assign qa_q_io_deq_ready = ioX_cq_io_enq_ready & ioX_allow;
  assign qb_q_clock = clock;
  assign qb_q_reset = reset;
  assign qb_q_io_enq_valid = 1'h0;
  assign qb_q_io_enq_bits_data = io_sb_bits_data;
  assign qb_q_io_enq_bits_last = io_sb_bits_last;
  assign qb_q_io_enq_bits_beats = 7'h3;
  assign qb_q_io_deq_ready = ioX_cq_1_io_enq_ready & ioX_allow_1;
  assign qc_q_clock = clock;
  assign qc_q_reset = reset;
  assign qc_q_io_enq_valid = 1'h0;
  assign qc_q_io_enq_bits_data = io_sc_bits_data;
  assign qc_q_io_enq_bits_last = io_sc_bits_last;
  assign qc_q_io_enq_bits_beats = 7'h3;
  assign qc_q_io_deq_ready = ioX_cq_2_io_enq_ready & ioX_allow_2;
  assign qd_q_clock = clock;
  assign qd_q_reset = reset;
  assign qd_q_io_enq_valid = io_sd_valid;
  assign qd_q_io_enq_bits_data = io_sd_bits_data;
  assign qd_q_io_enq_bits_last = io_sd_bits_last;
  assign qd_q_io_enq_bits_beats = io_sd_bits_beats;
  assign qd_q_io_deq_ready = ioX_cq_3_io_enq_ready & ioX_allow_3;
  assign qe_q_clock = clock;
  assign qe_q_reset = reset;
  assign qe_q_io_enq_valid = 1'h0;
  assign qe_q_io_enq_bits_data = io_se_bits_data;
  assign qe_q_io_enq_bits_last = 1'h1;
  assign qe_q_io_enq_bits_beats = 7'h1;
  assign qe_q_io_deq_ready = ioX_cq_4_io_enq_ready & ioX_allow_4;
  assign ioX_cq_clock = clock;
  assign ioX_cq_reset = reset;
  assign ioX_cq_io_enq_valid = qa_q_io_deq_valid & ioX_allow;
  assign ioX_cq_io_enq_bits_data = qa_q_io_deq_bits_data;
  assign ioX_cq_io_enq_bits_last = qa_q_io_deq_bits_last;
  assign ioX_cq_io_enq_bits_beats = qa_q_io_deq_bits_beats;
  assign ioX_cq_io_deq_ready = allowed[0] & ~txBusy;
  assign ioX_cq_1_clock = clock;
  assign ioX_cq_1_reset = reset;
  assign ioX_cq_1_io_enq_valid = qb_q_io_deq_valid & ioX_allow_1;
  assign ioX_cq_1_io_enq_bits_data = qb_q_io_deq_bits_data;
  assign ioX_cq_1_io_enq_bits_last = qb_q_io_deq_bits_last;
  assign ioX_cq_1_io_enq_bits_beats = qb_q_io_deq_bits_beats;
  assign ioX_cq_1_io_deq_ready = allowed[1] & ~txBusy;
  assign ioX_cq_2_clock = clock;
  assign ioX_cq_2_reset = reset;
  assign ioX_cq_2_io_enq_valid = qc_q_io_deq_valid & ioX_allow_2;
  assign ioX_cq_2_io_enq_bits_data = qc_q_io_deq_bits_data;
  assign ioX_cq_2_io_enq_bits_last = qc_q_io_deq_bits_last;
  assign ioX_cq_2_io_enq_bits_beats = qc_q_io_deq_bits_beats;
  assign ioX_cq_2_io_deq_ready = allowed[2] & ~txBusy;
  assign ioX_cq_3_clock = clock;
  assign ioX_cq_3_reset = reset;
  assign ioX_cq_3_io_enq_valid = qd_q_io_deq_valid & ioX_allow_3;
  assign ioX_cq_3_io_enq_bits_data = qd_q_io_deq_bits_data;
  assign ioX_cq_3_io_enq_bits_last = qd_q_io_deq_bits_last;
  assign ioX_cq_3_io_enq_bits_beats = qd_q_io_deq_bits_beats;
  assign ioX_cq_3_io_deq_ready = allowed[3] & ~txBusy;
  assign ioX_cq_4_clock = clock;
  assign ioX_cq_4_reset = reset;
  assign ioX_cq_4_io_enq_valid = qe_q_io_deq_valid & ioX_allow_4;
  assign ioX_cq_4_io_enq_bits_data = qe_q_io_deq_bits_data;
  assign ioX_cq_4_io_enq_bits_last = qe_q_io_deq_bits_last;
  assign ioX_cq_4_io_enq_bits_beats = qe_q_io_deq_bits_beats;
  assign ioX_cq_4_io_deq_ready = allowed[4] & ~txBusy;
  assign rxQ_clock = clock;
  assign rxQ_reset = reset;
  assign rxQ_io_enq_valid = |rxHeader[31:7];
  assign rxQ_io_enq_bits_data = {header_hi,header_lo};
  assign rxQ_io_enq_bits_last = 1'h1;
  assign rxQ_io_enq_bits_beats = 7'h1;
  assign rxQ_io_deq_ready = f_ready & allowReturn;
  assign io_c2b_rst_reg_io_clk = clock;
  assign io_c2b_rst_reg_io_rst = reset;
  always @(posedge clock) begin
    if (reset) begin
      rx_a <= 20'h0;
    end else begin
      rx_a <= rx_out_2_a;
    end
    if (reset) begin
      rx_b <= 20'h0;
    end else begin
      rx_b <= rx_out_2_b;
    end
    if (reset) begin
      rx_c <= 20'h0;
    end else begin
      rx_c <= rx_out_2_c;
    end
    if (reset) begin
      rx_d <= 20'h0;
    end else begin
      rx_d <= rx_out_2_d;
    end
    if (reset) begin
      rx_e <= 20'h0;
    end else begin
      rx_e <= rx_out_2_e;
    end
    if (reset) begin
      tx_a <= 20'h0;
    end else begin
      tx_a <= _ioX_tx_a_T_6[19:0];
    end
    if (reset) begin
      tx_b <= 20'h0;
    end else begin
      tx_b <= _ioX_tx_bT_6[19:0];
    end
    if (reset) begin
      tx_c <= 20'h0;
    end else begin
      tx_c <= _ioX_tx_c_T_6[19:0];
    end
    if (reset) begin
      tx_d <= 20'h0;
    end else begin
      tx_d <= _ioX_tx_d_T_6[19:0];
    end
    if (reset) begin
      tx_e <= 20'h0;
    end else begin
      tx_e <= _ioX_tx_e_T_6[19:0];
    end
    ioX_first <= reset | _GEN_0;
    ioX_first_1 <= reset | _GEN_1;
    ioX_first_2 <= reset | _GEN_2;
    ioX_first_3 <= reset | _GEN_3;
    ioX_first_4 <= reset | _GEN_4;
    if (reset) begin
      xmit <= 2'h0;
    end else if (_T_1) begin
      xmit <= 2'h3;
    end else if (~forceXmit) begin
      xmit <= _xmit_T_1;
    end
    first <= reset | _GEN_8;
    if (reset) begin
      readys_mask <= 6'h3f;
    end else if (first & |requests) begin
      readys_mask <= _readys_mask_T_9;
    end
    if (first) begin
      state <= _readys_mask_T;
    end
    if (reset) begin
      txBusy <= 1'h0;
    end else if (txBusy) begin
      if (transferByteCnt == 2'h3) begin
        txBusy <= 1'h0;
      end else begin
        txBusy <= _GEN_10;
      end
    end else begin
      txBusy <= _GEN_10;
    end
    if (reset) begin
      transferByteCnt <= 2'h0;
    end else if (txBusy) begin
      transferByteCnt <= _transferByteCnt_T_1;
    end
    if (send) begin
      transferDataReg <= _transferDataReg_T_16;
    end
    io_c2b_send_REG <= txBusy;
    io_c2b_send_REG_1 <= io_c2b_send_REG;
    if (2'h3 == transferByteCnt) begin
      io_c2b_data_REG <= transferBytes_3;
    end else if (2'h2 == transferByteCnt) begin
      io_c2b_data_REG <= transferBytes_2;
    end else if (2'h1 == transferByteCnt) begin
      io_c2b_data_REG <= transferBytes_1;
    end else begin
      io_c2b_data_REG <= transferBytes_0;
    end
    io_c2b_data_REG_1 <= io_c2b_data_REG;
  end
  always @(posedge clock) begin
    send_1p_valid <= send;
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  rx_a = _RAND_0[19:0];
  _RAND_1 = {1{`RANDOM}};
  rx_b = _RAND_1[19:0];
  _RAND_2 = {1{`RANDOM}};
  rx_c = _RAND_2[19:0];
  _RAND_3 = {1{`RANDOM}};
  rx_d = _RAND_3[19:0];
  _RAND_4 = {1{`RANDOM}};
  rx_e = _RAND_4[19:0];
  _RAND_5 = {1{`RANDOM}};
  tx_a = _RAND_5[19:0];
  _RAND_6 = {1{`RANDOM}};
  tx_b = _RAND_6[19:0];
  _RAND_7 = {1{`RANDOM}};
  tx_c = _RAND_7[19:0];
  _RAND_8 = {1{`RANDOM}};
  tx_d = _RAND_8[19:0];
  _RAND_9 = {1{`RANDOM}};
  tx_e = _RAND_9[19:0];
  _RAND_10 = {1{`RANDOM}};
  ioX_first = _RAND_10[0:0];
  _RAND_11 = {1{`RANDOM}};
  ioX_first_1 = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  ioX_first_2 = _RAND_12[0:0];
  _RAND_13 = {1{`RANDOM}};
  ioX_first_3 = _RAND_13[0:0];
  _RAND_14 = {1{`RANDOM}};
  ioX_first_4 = _RAND_14[0:0];
  _RAND_15 = {1{`RANDOM}};
  xmit = _RAND_15[1:0];
  _RAND_16 = {1{`RANDOM}};
  first = _RAND_16[0:0];
  _RAND_17 = {1{`RANDOM}};
  readys_mask = _RAND_17[5:0];
  _RAND_18 = {1{`RANDOM}};
  state = _RAND_18[5:0];
  _RAND_19 = {1{`RANDOM}};
  txBusy = _RAND_19[0:0];
  _RAND_20 = {1{`RANDOM}};
  transferByteCnt = _RAND_20[1:0];
  _RAND_21 = {1{`RANDOM}};
  transferDataReg = _RAND_21[31:0];
  _RAND_22 = {1{`RANDOM}};
  io_c2b_send_REG = _RAND_22[0:0];
  _RAND_23 = {1{`RANDOM}};
  io_c2b_send_REG_1 = _RAND_23[0:0];
  _RAND_24 = {1{`RANDOM}};
  io_c2b_data_REG = _RAND_24[7:0];
  _RAND_25 = {1{`RANDOM}};
  io_c2b_data_REG_1 = _RAND_25[7:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_ResetCatchAndSync_d3(
  input   clock,
  input   reset,
  output  io_sync_reset
);
  wire  io_sync_reset_chain_clock;
  wire  io_sync_reset_chain_reset;
  wire  io_sync_reset_chain_io_d;
  wire  io_sync_reset_chain_io_q;
  wire  _io_sync_reset_WIRE = io_sync_reset_chain_io_q;
  CHIPLINK_PREFIX_AsyncResetSynchronizerShiftReg_w1_d3_i0_20 io_sync_reset_chain (
    .clock(io_sync_reset_chain_clock),
    .reset(io_sync_reset_chain_reset),
    .io_d(io_sync_reset_chain_io_d),
    .io_q(io_sync_reset_chain_io_q)
  );
  assign io_sync_reset = ~_io_sync_reset_WIRE;
  assign io_sync_reset_chain_clock = clock;
  assign io_sync_reset_chain_reset = reset;
  assign io_sync_reset_chain_io_d = 1'h1;
endmodule
module CHIPLINK_PREFIX_ChipLink(
  input         clock,
  input         reset,
  // tx dfx 
  output wire [31:0] transferDataReg,
  output wire        send_1p_valid,
  // rx dfx
  output wire [31:0] b2c_data_concat,
  output wire        b2c_data_valid,
  
  input         auto_mbypass_out_a_ready,
  output        auto_mbypass_out_a_valid,
  output [2:0]  auto_mbypass_out_a_bits_opcode,
  output [2:0]  auto_mbypass_out_a_bits_param,
  output [2:0]  auto_mbypass_out_a_bits_size,
  output [5:0]  auto_mbypass_out_a_bits_source,
  output [31:0] auto_mbypass_out_a_bits_address,
  output [3:0]  auto_mbypass_out_a_bits_mask,
  output [31:0] auto_mbypass_out_a_bits_data,
  input         auto_mbypass_out_c_ready,
  output        auto_mbypass_out_c_valid,
  output [2:0]  auto_mbypass_out_c_bits_opcode,
  output [2:0]  auto_mbypass_out_c_bits_param,
  output [2:0]  auto_mbypass_out_c_bits_size,
  output [5:0]  auto_mbypass_out_c_bits_source,
  output [31:0] auto_mbypass_out_c_bits_address,
  output        auto_mbypass_out_d_ready,
  input         auto_mbypass_out_d_valid,
  input  [2:0]  auto_mbypass_out_d_bits_opcode,
  input  [1:0]  auto_mbypass_out_d_bits_param,
  input  [2:0]  auto_mbypass_out_d_bits_size,
  input  [5:0]  auto_mbypass_out_d_bits_source,
  input         auto_mbypass_out_d_bits_denied,
  input  [31:0] auto_mbypass_out_d_bits_data,
  input         auto_mbypass_out_d_bits_corrupt,
  input         auto_mbypass_out_e_ready,
  output        auto_mbypass_out_e_valid,
  output        auto_mbypass_out_e_bits_sink,
  output        auto_sbypass_node_in_in_a_ready,
  input         auto_sbypass_node_in_in_a_valid,
  input  [2:0]  auto_sbypass_node_in_in_a_bits_opcode,
  input  [2:0]  auto_sbypass_node_in_in_a_bits_size,
  input  [3:0]  auto_sbypass_node_in_in_a_bits_source,
  input  [31:0] auto_sbypass_node_in_in_a_bits_address,
  input  [3:0]  auto_sbypass_node_in_in_a_bits_mask,
  input  [31:0] auto_sbypass_node_in_in_a_bits_data,
  input         auto_sbypass_node_in_in_d_ready,
  output        auto_sbypass_node_in_in_d_valid,
  output [2:0]  auto_sbypass_node_in_in_d_bits_opcode,
  output [1:0]  auto_sbypass_node_in_in_d_bits_param,
  output [2:0]  auto_sbypass_node_in_in_d_bits_size,
  output [3:0]  auto_sbypass_node_in_in_d_bits_source,
  output [4:0]  auto_sbypass_node_in_in_d_bits_sink,
  output        auto_sbypass_node_in_in_d_bits_denied,
  output [31:0] auto_sbypass_node_in_in_d_bits_data,
  output        auto_sbypass_node_in_in_d_bits_corrupt,
  output        auto_io_out_c2b_clk,
  output        auto_io_out_c2b_rst,
  output        auto_io_out_c2b_send,
  output [7:0]  auto_io_out_c2b_data,
  input         auto_io_out_b2c_clk,
  input         auto_io_out_b2c_rst,
  input         auto_io_out_b2c_send,
  input  [7:0]  auto_io_out_b2c_data
);
  wire  sbypass_clock;
  wire  sbypass_reset;
  wire  sbypass_auto_node_out_out_a_ready;
  wire  sbypass_auto_node_out_out_a_valid;
  wire [2:0] sbypass_auto_node_out_out_a_bits_opcode;
  wire [2:0] sbypass_auto_node_out_out_a_bits_size;
  wire [3:0] sbypass_auto_node_out_out_a_bits_source;
  wire [31:0] sbypass_auto_node_out_out_a_bits_address;
  wire [3:0] sbypass_auto_node_out_out_a_bits_mask;
  wire [31:0] sbypass_auto_node_out_out_a_bits_data;
  wire  sbypass_auto_node_out_out_d_ready;
  wire  sbypass_auto_node_out_out_d_valid;
  wire [2:0] sbypass_auto_node_out_out_d_bits_opcode;
  wire [1:0] sbypass_auto_node_out_out_d_bits_param;
  wire [2:0] sbypass_auto_node_out_out_d_bits_size;
  wire [3:0] sbypass_auto_node_out_out_d_bits_source;
  wire [4:0] sbypass_auto_node_out_out_d_bits_sink;
  wire  sbypass_auto_node_out_out_d_bits_denied;
  wire [31:0] sbypass_auto_node_out_out_d_bits_data;
  wire  sbypass_auto_node_out_out_d_bits_corrupt;
  wire  sbypass_auto_node_in_in_a_ready;
  wire  sbypass_auto_node_in_in_a_valid;
  wire [2:0] sbypass_auto_node_in_in_a_bits_opcode;
  wire [2:0] sbypass_auto_node_in_in_a_bits_size;
  wire [3:0] sbypass_auto_node_in_in_a_bits_source;
  wire [31:0] sbypass_auto_node_in_in_a_bits_address;
  wire [3:0] sbypass_auto_node_in_in_a_bits_mask;
  wire [31:0] sbypass_auto_node_in_in_a_bits_data;
  wire  sbypass_auto_node_in_in_d_ready;
  wire  sbypass_auto_node_in_in_d_valid;
  wire [2:0] sbypass_auto_node_in_in_d_bits_opcode;
  wire [1:0] sbypass_auto_node_in_in_d_bits_param;
  wire [2:0] sbypass_auto_node_in_in_d_bits_size;
  wire [3:0] sbypass_auto_node_in_in_d_bits_source;
  wire [4:0] sbypass_auto_node_in_in_d_bits_sink;
  wire  sbypass_auto_node_in_in_d_bits_denied;
  wire [31:0] sbypass_auto_node_in_in_d_bits_data;
  wire  sbypass_auto_node_in_in_d_bits_corrupt;
  wire  sbypass_io_bypass;
  wire  mbypass_clock;
  wire  mbypass_reset;
  wire  mbypass_auto_in_1_a_ready;
  wire  mbypass_auto_in_1_a_valid;
  wire [2:0] mbypass_auto_in_1_a_bits_opcode;
  wire [2:0] mbypass_auto_in_1_a_bits_param;
  wire [2:0] mbypass_auto_in_1_a_bits_size;
  wire [5:0] mbypass_auto_in_1_a_bits_source;
  wire [31:0] mbypass_auto_in_1_a_bits_address;
  wire [3:0] mbypass_auto_in_1_a_bits_mask;
  wire [31:0] mbypass_auto_in_1_a_bits_data;
  wire  mbypass_auto_in_1_c_ready;
  wire  mbypass_auto_in_1_c_valid;
  wire [2:0] mbypass_auto_in_1_c_bits_opcode;
  wire [2:0] mbypass_auto_in_1_c_bits_param;
  wire [2:0] mbypass_auto_in_1_c_bits_size;
  wire [5:0] mbypass_auto_in_1_c_bits_source;
  wire [31:0] mbypass_auto_in_1_c_bits_address;
  wire  mbypass_auto_in_1_d_ready;
  wire  mbypass_auto_in_1_d_valid;
  wire [2:0] mbypass_auto_in_1_d_bits_opcode;
  wire [1:0] mbypass_auto_in_1_d_bits_param;
  wire [2:0] mbypass_auto_in_1_d_bits_size;
  wire [5:0] mbypass_auto_in_1_d_bits_source;
  wire  mbypass_auto_in_1_d_bits_denied;
  wire [31:0] mbypass_auto_in_1_d_bits_data;
  wire  mbypass_auto_in_1_e_ready;
  wire  mbypass_auto_in_1_e_valid;
  wire  mbypass_auto_in_1_e_bits_sink;
  wire  mbypass_auto_out_a_ready;
  wire  mbypass_auto_out_a_valid;
  wire [2:0] mbypass_auto_out_a_bits_opcode;
  wire [2:0] mbypass_auto_out_a_bits_param;
  wire [2:0] mbypass_auto_out_a_bits_size;
  wire [5:0] mbypass_auto_out_a_bits_source;
  wire [31:0] mbypass_auto_out_a_bits_address;
  wire [3:0] mbypass_auto_out_a_bits_mask;
  wire [31:0] mbypass_auto_out_a_bits_data;
  wire  mbypass_auto_out_c_ready;
  wire  mbypass_auto_out_c_valid;
  wire [2:0] mbypass_auto_out_c_bits_opcode;
  wire [2:0] mbypass_auto_out_c_bits_param;
  wire [2:0] mbypass_auto_out_c_bits_size;
  wire [5:0] mbypass_auto_out_c_bits_source;
  wire [31:0] mbypass_auto_out_c_bits_address;
  wire  mbypass_auto_out_d_ready;
  wire  mbypass_auto_out_d_valid;
  wire [2:0] mbypass_auto_out_d_bits_opcode;
  wire [1:0] mbypass_auto_out_d_bits_param;
  wire [2:0] mbypass_auto_out_d_bits_size;
  wire [5:0] mbypass_auto_out_d_bits_source;
  wire  mbypass_auto_out_d_bits_denied;
  wire [31:0] mbypass_auto_out_d_bits_data;
  wire  mbypass_auto_out_d_bits_corrupt;
  wire  mbypass_auto_out_e_ready;
  wire  mbypass_auto_out_e_valid;
  wire  mbypass_auto_out_e_bits_sink;
  wire  mbypass_io_bypass;
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [3:0] monitor_io_in_a_bits_source;
  wire [31:0] monitor_io_in_a_bits_address;
  wire [3:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [3:0] monitor_io_in_d_bits_source;
  wire [4:0] monitor_io_in_d_bits_sink;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  sinkA_clock;
  wire  sinkA_reset;
  wire  sinkA_io_a_ready;
  wire  sinkA_io_a_valid;
  wire [2:0] sinkA_io_a_bits_opcode;
  wire [2:0] sinkA_io_a_bits_size;
  wire [3:0] sinkA_io_a_bits_source;
  wire [31:0] sinkA_io_a_bits_address;
  wire [3:0] sinkA_io_a_bits_mask;
  wire [31:0] sinkA_io_a_bits_data;
  wire  sinkA_io_q_ready;
  wire  sinkA_io_q_valid;
  wire [31:0] sinkA_io_q_bits_data;
  wire  sinkA_io_q_bits_last;
  wire [6:0] sinkA_io_q_bits_beats;
  wire  sinkB_clock;
  wire  sinkB_reset;
  wire  sinkB_io_q_ready;
  wire  sinkB_io_q_valid;
  wire [31:0] sinkB_io_q_bits_data;
  wire  sinkB_io_q_bits_last;
  wire  sinkC_clock;
  wire  sinkC_reset;
  wire  sinkC_io_q_ready;
  wire  sinkC_io_q_valid;
  wire [31:0] sinkC_io_q_bits_data;
  wire  sinkC_io_q_bits_last;
  wire  sinkD_clock;
  wire  sinkD_reset;
  wire  sinkD_io_d_ready;
  wire  sinkD_io_d_valid;
  wire [2:0] sinkD_io_d_bits_opcode;
  wire [1:0] sinkD_io_d_bits_param;
  wire [2:0] sinkD_io_d_bits_size;
  wire [5:0] sinkD_io_d_bits_source;
  wire  sinkD_io_d_bits_denied;
  wire [31:0] sinkD_io_d_bits_data;
  wire  sinkD_io_q_ready;
  wire  sinkD_io_q_valid;
  wire [31:0] sinkD_io_q_bits_data;
  wire  sinkD_io_q_bits_last;
  wire [6:0] sinkD_io_q_bits_beats;
  wire  sinkD_io_a_tlSource_valid;
  wire [5:0] sinkD_io_a_tlSource_bits;
  wire [15:0] sinkD_io_a_clSource;
  wire  sinkD_io_c_tlSource_valid;
  wire [5:0] sinkD_io_c_tlSource_bits;
  wire [15:0] sinkD_io_c_clSource;
  wire [31:0] sinkE_io_q_bits_data;
  wire [15:0] sinkE_io_d_clSink;
  wire  sourceA_clock;
  wire  sourceA_reset;
  wire  sourceA_io_a_ready;
  wire  sourceA_io_a_valid;
  wire [2:0] sourceA_io_a_bits_opcode;
  wire [2:0] sourceA_io_a_bits_param;
  wire [2:0] sourceA_io_a_bits_size;
  wire [5:0] sourceA_io_a_bits_source;
  wire [31:0] sourceA_io_a_bits_address;
  wire [3:0] sourceA_io_a_bits_mask;
  wire [31:0] sourceA_io_a_bits_data;
  wire  sourceA_io_q_ready;
  wire  sourceA_io_q_valid;
  wire [31:0] sourceA_io_q_bits;
  wire  sourceA_io_d_tlSource_valid;
  wire [5:0] sourceA_io_d_tlSource_bits;
  wire [15:0] sourceA_io_d_clSource;
  wire  sourceB_clock;
  wire  sourceB_reset;
  wire  sourceB_io_q_ready;
  wire  sourceB_io_q_valid;
  wire [31:0] sourceB_io_q_bits;
  wire  sourceC_clock;
  wire  sourceC_reset;
  wire  sourceC_io_c_ready;
  wire  sourceC_io_c_valid;
  wire [2:0] sourceC_io_c_bits_opcode;
  wire [2:0] sourceC_io_c_bits_param;
  wire [2:0] sourceC_io_c_bits_size;
  wire [5:0] sourceC_io_c_bits_source;
  wire [31:0] sourceC_io_c_bits_address;
  wire  sourceC_io_q_ready;
  wire  sourceC_io_q_valid;
  wire [31:0] sourceC_io_q_bits;
  wire  sourceC_io_d_tlSource_valid;
  wire [5:0] sourceC_io_d_tlSource_bits;
  wire [15:0] sourceC_io_d_clSource;
  wire  sourceD_clock;
  wire  sourceD_reset;
  wire  sourceD_io_d_ready;
  wire  sourceD_io_d_valid;
  wire [2:0] sourceD_io_d_bits_opcode;
  wire [1:0] sourceD_io_d_bits_param;
  wire [2:0] sourceD_io_d_bits_size;
  wire [3:0] sourceD_io_d_bits_source;
  wire [4:0] sourceD_io_d_bits_sink;
  wire  sourceD_io_d_bits_denied;
  wire [31:0] sourceD_io_d_bits_data;
  wire  sourceD_io_d_bits_corrupt;
  wire  sourceD_io_q_ready;
  wire  sourceD_io_q_valid;
  wire [31:0] sourceD_io_q_bits;
  wire [15:0] sourceD_io_e_clSink;
  wire  sourceE_io_e_ready;
  wire  sourceE_io_e_valid;
  wire  sourceE_io_e_bits_sink;
  wire  sourceE_io_q_ready;
  wire  sourceE_io_q_valid;
  wire [31:0] sourceE_io_q_bits;
  wire  rx_clock;
  wire  rx_reset;
  wire  rx_io_b2c_send;
  wire [7:0] rx_io_b2c_data;
  wire [31:0] rx_io_a_mem_0;
  wire [31:0] rx_io_a_mem_1;
  wire [31:0] rx_io_a_mem_2;
  wire [31:0] rx_io_a_mem_3;
  wire [31:0] rx_io_a_mem_4;
  wire [31:0] rx_io_a_mem_5;
  wire [31:0] rx_io_a_mem_6;
  wire [31:0] rx_io_a_mem_7;
  wire [3:0] rx_io_a_ridx;
  wire [3:0] rx_io_a_widx;
  wire  rx_io_a_safe_ridx_valid;
  wire  rx_io_a_safe_widx_valid;
  wire  rx_io_a_safe_source_reset_n;
  wire  rx_io_a_safe_sink_reset_n;
  wire [31:0] rx_io_bmem_0;
  wire [31:0] rx_io_bmem_1;
  wire [31:0] rx_io_bmem_2;
  wire [31:0] rx_io_bmem_3;
  wire [31:0] rx_io_bmem_4;
  wire [31:0] rx_io_bmem_5;
  wire [31:0] rx_io_bmem_6;
  wire [31:0] rx_io_bmem_7;
  wire [3:0] rx_io_bridx;
  wire [3:0] rx_io_bwidx;
  wire  rx_io_bsafe_ridx_valid;
  wire  rx_io_bsafe_widx_valid;
  wire  rx_io_bsafe_source_reset_n;
  wire  rx_io_bsafe_sink_reset_n;
  wire [31:0] rx_io_c_mem_0;
  wire [31:0] rx_io_c_mem_1;
  wire [31:0] rx_io_c_mem_2;
  wire [31:0] rx_io_c_mem_3;
  wire [31:0] rx_io_c_mem_4;
  wire [31:0] rx_io_c_mem_5;
  wire [31:0] rx_io_c_mem_6;
  wire [31:0] rx_io_c_mem_7;
  wire [3:0] rx_io_c_ridx;
  wire [3:0] rx_io_c_widx;
  wire  rx_io_c_safe_ridx_valid;
  wire  rx_io_c_safe_widx_valid;
  wire  rx_io_c_safe_source_reset_n;
  wire  rx_io_c_safe_sink_reset_n;
  wire [31:0] rx_io_d_mem_0;
  wire [31:0] rx_io_d_mem_1;
  wire [31:0] rx_io_d_mem_2;
  wire [31:0] rx_io_d_mem_3;
  wire [31:0] rx_io_d_mem_4;
  wire [31:0] rx_io_d_mem_5;
  wire [31:0] rx_io_d_mem_6;
  wire [31:0] rx_io_d_mem_7;
  wire [3:0] rx_io_d_ridx;
  wire [3:0] rx_io_d_widx;
  wire  rx_io_d_safe_ridx_valid;
  wire  rx_io_d_safe_widx_valid;
  wire  rx_io_d_safe_source_reset_n;
  wire  rx_io_d_safe_sink_reset_n;
  wire [31:0] rx_io_e_mem_0;
  wire [31:0] rx_io_e_mem_1;
  wire [31:0] rx_io_e_mem_2;
  wire [31:0] rx_io_e_mem_3;
  wire [31:0] rx_io_e_mem_4;
  wire [31:0] rx_io_e_mem_5;
  wire [31:0] rx_io_e_mem_6;
  wire [31:0] rx_io_e_mem_7;
  wire [3:0] rx_io_e_ridx;
  wire [3:0] rx_io_e_widx;
  wire  rx_io_e_safe_ridx_valid;
  wire  rx_io_e_safe_widx_valid;
  wire  rx_io_e_safe_source_reset_n;
  wire  rx_io_e_safe_sink_reset_n;
  wire [19:0] rx_io_rxc_mem_0_a;
  wire [19:0] rx_io_rxc_mem_0_b;
  wire [19:0] rx_io_rxc_mem_0_c;
  wire [19:0] rx_io_rxc_mem_0_d;
  wire [19:0] rx_io_rxc_mem_0_e;
  wire  rx_io_rxc_ridx;
  wire  rx_io_rxc_widx;
  wire  rx_io_rxc_safe_ridx_valid;
  wire  rx_io_rxc_safe_widx_valid;
  wire  rx_io_rxc_safe_source_reset_n;
  wire  rx_io_rxc_safe_sink_reset_n;
  wire [19:0] rx_io_txc_mem_0_a;
  wire [19:0] rx_io_txc_mem_0_b;
  wire [19:0] rx_io_txc_mem_0_c;
  wire [19:0] rx_io_txc_mem_0_d;
  wire [19:0] rx_io_txc_mem_0_e;
  wire  rx_io_txc_ridx;
  wire  rx_io_txc_widx;
  wire  rx_io_txc_safe_ridx_valid;
  wire  rx_io_txc_safe_widx_valid;
  wire  rx_io_txc_safe_source_reset_n;
  wire  rx_io_txc_safe_sink_reset_n;
  wire  rx_reset_reg_io_q;
  wire  rx_reset_reg_io_clk;
  wire  rx_reset_reg_io_rst;
  wire  sourceA_io_q_sink_clock;
  wire  sourceA_io_q_sink_reset;
  wire  sourceA_io_q_sink_io_deq_ready;
  wire  sourceA_io_q_sink_io_deq_valid;
  wire [31:0] sourceA_io_q_sink_io_deq_bits;
  wire [31:0] sourceA_io_q_sink_io_async_mem_0;
  wire [31:0] sourceA_io_q_sink_io_async_mem_1;
  wire [31:0] sourceA_io_q_sink_io_async_mem_2;
  wire [31:0] sourceA_io_q_sink_io_async_mem_3;
  wire [31:0] sourceA_io_q_sink_io_async_mem_4;
  wire [31:0] sourceA_io_q_sink_io_async_mem_5;
  wire [31:0] sourceA_io_q_sink_io_async_mem_6;
  wire [31:0] sourceA_io_q_sink_io_async_mem_7;
  wire [3:0] sourceA_io_q_sink_io_async_ridx;
  wire [3:0] sourceA_io_q_sink_io_async_widx;
  wire  sourceA_io_q_sink_io_async_safe_ridx_valid;
  wire  sourceA_io_q_sink_io_async_safe_widx_valid;
  wire  sourceA_io_q_sink_io_async_safe_source_reset_n;
  wire  sourceA_io_q_sink_io_async_safe_sink_reset_n;
  wire  sourceB_io_q_sink_clock;
  wire  sourceB_io_q_sink_reset;
  wire  sourceB_io_q_sink_io_deq_ready;
  wire  sourceB_io_q_sink_io_deq_valid;
  wire [31:0] sourceB_io_q_sink_io_deq_bits;
  wire [31:0] sourceB_io_q_sink_io_async_mem_0;
  wire [31:0] sourceB_io_q_sink_io_async_mem_1;
  wire [31:0] sourceB_io_q_sink_io_async_mem_2;
  wire [31:0] sourceB_io_q_sink_io_async_mem_3;
  wire [31:0] sourceB_io_q_sink_io_async_mem_4;
  wire [31:0] sourceB_io_q_sink_io_async_mem_5;
  wire [31:0] sourceB_io_q_sink_io_async_mem_6;
  wire [31:0] sourceB_io_q_sink_io_async_mem_7;
  wire [3:0] sourceB_io_q_sink_io_async_ridx;
  wire [3:0] sourceB_io_q_sink_io_async_widx;
  wire  sourceB_io_q_sink_io_async_safe_ridx_valid;
  wire  sourceB_io_q_sink_io_async_safe_widx_valid;
  wire  sourceB_io_q_sink_io_async_safe_source_reset_n;
  wire  sourceB_io_q_sink_io_async_safe_sink_reset_n;
  wire  sourceC_io_q_sink_clock;
  wire  sourceC_io_q_sink_reset;
  wire  sourceC_io_q_sink_io_deq_ready;
  wire  sourceC_io_q_sink_io_deq_valid;
  wire [31:0] sourceC_io_q_sink_io_deq_bits;
  wire [31:0] sourceC_io_q_sink_io_async_mem_0;
  wire [31:0] sourceC_io_q_sink_io_async_mem_1;
  wire [31:0] sourceC_io_q_sink_io_async_mem_2;
  wire [31:0] sourceC_io_q_sink_io_async_mem_3;
  wire [31:0] sourceC_io_q_sink_io_async_mem_4;
  wire [31:0] sourceC_io_q_sink_io_async_mem_5;
  wire [31:0] sourceC_io_q_sink_io_async_mem_6;
  wire [31:0] sourceC_io_q_sink_io_async_mem_7;
  wire [3:0] sourceC_io_q_sink_io_async_ridx;
  wire [3:0] sourceC_io_q_sink_io_async_widx;
  wire  sourceC_io_q_sink_io_async_safe_ridx_valid;
  wire  sourceC_io_q_sink_io_async_safe_widx_valid;
  wire  sourceC_io_q_sink_io_async_safe_source_reset_n;
  wire  sourceC_io_q_sink_io_async_safe_sink_reset_n;
  wire  sourceD_io_q_sink_clock;
  wire  sourceD_io_q_sink_reset;
  wire  sourceD_io_q_sink_io_deq_ready;
  wire  sourceD_io_q_sink_io_deq_valid;
  wire [31:0] sourceD_io_q_sink_io_deq_bits;
  wire [31:0] sourceD_io_q_sink_io_async_mem_0;
  wire [31:0] sourceD_io_q_sink_io_async_mem_1;
  wire [31:0] sourceD_io_q_sink_io_async_mem_2;
  wire [31:0] sourceD_io_q_sink_io_async_mem_3;
  wire [31:0] sourceD_io_q_sink_io_async_mem_4;
  wire [31:0] sourceD_io_q_sink_io_async_mem_5;
  wire [31:0] sourceD_io_q_sink_io_async_mem_6;
  wire [31:0] sourceD_io_q_sink_io_async_mem_7;
  wire [3:0] sourceD_io_q_sink_io_async_ridx;
  wire [3:0] sourceD_io_q_sink_io_async_widx;
  wire  sourceD_io_q_sink_io_async_safe_ridx_valid;
  wire  sourceD_io_q_sink_io_async_safe_widx_valid;
  wire  sourceD_io_q_sink_io_async_safe_source_reset_n;
  wire  sourceD_io_q_sink_io_async_safe_sink_reset_n;
  wire  sourceE_io_q_sink_clock;
  wire  sourceE_io_q_sink_reset;
  wire  sourceE_io_q_sink_io_deq_ready;
  wire  sourceE_io_q_sink_io_deq_valid;
  wire [31:0] sourceE_io_q_sink_io_deq_bits;
  wire [31:0] sourceE_io_q_sink_io_async_mem_0;
  wire [31:0] sourceE_io_q_sink_io_async_mem_1;
  wire [31:0] sourceE_io_q_sink_io_async_mem_2;
  wire [31:0] sourceE_io_q_sink_io_async_mem_3;
  wire [31:0] sourceE_io_q_sink_io_async_mem_4;
  wire [31:0] sourceE_io_q_sink_io_async_mem_5;
  wire [31:0] sourceE_io_q_sink_io_async_mem_6;
  wire [31:0] sourceE_io_q_sink_io_async_mem_7;
  wire [3:0] sourceE_io_q_sink_io_async_ridx;
  wire [3:0] sourceE_io_q_sink_io_async_widx;
  wire  sourceE_io_q_sink_io_async_safe_ridx_valid;
  wire  sourceE_io_q_sink_io_async_safe_widx_valid;
  wire  sourceE_io_q_sink_io_async_safe_source_reset_n;
  wire  sourceE_io_q_sink_io_async_safe_sink_reset_n;
  wire  tx_clock;
  wire  tx_reset;
  wire  tx_io_c2b_clk;
  wire  tx_io_c2b_rst;
  wire  tx_io_c2b_send;
  wire [7:0] tx_io_c2b_data;
  wire  tx_io_sa_ready;
  wire  tx_io_sa_valid;
  wire [31:0] tx_io_sa_bits_data;
  wire  tx_io_sa_bits_last;
  wire [6:0] tx_io_sa_bits_beats;
  wire  tx_io_sb_ready;
  wire [31:0] tx_io_sb_bits_data;
  wire  tx_io_sb_bits_last;
  wire  tx_io_sc_ready;
  wire [31:0] tx_io_sc_bits_data;
  wire  tx_io_sc_bits_last;
  wire  tx_io_sd_ready;
  wire  tx_io_sd_valid;
  wire [31:0] tx_io_sd_bits_data;
  wire  tx_io_sd_bits_last;
  wire [6:0] tx_io_sd_bits_beats;
  wire [31:0] tx_io_se_bits_data;
  wire [19:0] tx_io_rxc_mem_0_a;
  wire [19:0] tx_io_rxc_mem_0_b;
  wire [19:0] tx_io_rxc_mem_0_c;
  wire [19:0] tx_io_rxc_mem_0_d;
  wire [19:0] tx_io_rxc_mem_0_e;
  wire  tx_io_rxc_ridx;
  wire  tx_io_rxc_widx;
  wire  tx_io_rxc_safe_ridx_valid;
  wire  tx_io_rxc_safe_widx_valid;
  wire  tx_io_rxc_safe_source_reset_n;
  wire  tx_io_rxc_safe_sink_reset_n;
  wire [19:0] tx_io_txc_mem_0_a;
  wire [19:0] tx_io_txc_mem_0_b;
  wire [19:0] tx_io_txc_mem_0_c;
  wire [19:0] tx_io_txc_mem_0_d;
  wire [19:0] tx_io_txc_mem_0_e;
  wire  tx_io_txc_ridx;
  wire  tx_io_txc_widx;
  wire  tx_io_txc_safe_ridx_valid;
  wire  tx_io_txc_safe_widx_valid;
  wire  tx_io_txc_safe_source_reset_n;
  wire  tx_io_txc_safe_sink_reset_n;
  wire  do_bypass_catcher_clock;
  wire  do_bypass_catcher_reset;
  wire  do_bypass_catcher_io_sync_reset;
  wire  do_bypass_catcher_1_clock;
  wire  do_bypass_catcher_1_reset;
  wire  do_bypass_catcher_1_io_sync_reset;
  CHIPLINK_PREFIX_TLBusBypass sbypass (
    .clock(sbypass_clock),
    .reset(sbypass_reset),
    .auto_node_out_out_a_ready(sbypass_auto_node_out_out_a_ready),
    .auto_node_out_out_a_valid(sbypass_auto_node_out_out_a_valid),
    .auto_node_out_out_a_bits_opcode(sbypass_auto_node_out_out_a_bits_opcode),
    .auto_node_out_out_a_bits_size(sbypass_auto_node_out_out_a_bits_size),
    .auto_node_out_out_a_bits_source(sbypass_auto_node_out_out_a_bits_source),
    .auto_node_out_out_a_bits_address(sbypass_auto_node_out_out_a_bits_address),
    .auto_node_out_out_a_bits_mask(sbypass_auto_node_out_out_a_bits_mask),
    .auto_node_out_out_a_bits_data(sbypass_auto_node_out_out_a_bits_data),
    .auto_node_out_out_d_ready(sbypass_auto_node_out_out_d_ready),
    .auto_node_out_out_d_valid(sbypass_auto_node_out_out_d_valid),
    .auto_node_out_out_d_bits_opcode(sbypass_auto_node_out_out_d_bits_opcode),
    .auto_node_out_out_d_bits_param(sbypass_auto_node_out_out_d_bits_param),
    .auto_node_out_out_d_bits_size(sbypass_auto_node_out_out_d_bits_size),
    .auto_node_out_out_d_bits_source(sbypass_auto_node_out_out_d_bits_source),
    .auto_node_out_out_d_bits_sink(sbypass_auto_node_out_out_d_bits_sink),
    .auto_node_out_out_d_bits_denied(sbypass_auto_node_out_out_d_bits_denied),
    .auto_node_out_out_d_bits_data(sbypass_auto_node_out_out_d_bits_data),
    .auto_node_out_out_d_bits_corrupt(sbypass_auto_node_out_out_d_bits_corrupt),
    .auto_node_in_in_a_ready(sbypass_auto_node_in_in_a_ready),
    .auto_node_in_in_a_valid(sbypass_auto_node_in_in_a_valid),
    .auto_node_in_in_a_bits_opcode(sbypass_auto_node_in_in_a_bits_opcode),
    .auto_node_in_in_a_bits_size(sbypass_auto_node_in_in_a_bits_size),
    .auto_node_in_in_a_bits_source(sbypass_auto_node_in_in_a_bits_source),
    .auto_node_in_in_a_bits_address(sbypass_auto_node_in_in_a_bits_address),
    .auto_node_in_in_a_bits_mask(sbypass_auto_node_in_in_a_bits_mask),
    .auto_node_in_in_a_bits_data(sbypass_auto_node_in_in_a_bits_data),
    .auto_node_in_in_d_ready(sbypass_auto_node_in_in_d_ready),
    .auto_node_in_in_d_valid(sbypass_auto_node_in_in_d_valid),
    .auto_node_in_in_d_bits_opcode(sbypass_auto_node_in_in_d_bits_opcode),
    .auto_node_in_in_d_bits_param(sbypass_auto_node_in_in_d_bits_param),
    .auto_node_in_in_d_bits_size(sbypass_auto_node_in_in_d_bits_size),
    .auto_node_in_in_d_bits_source(sbypass_auto_node_in_in_d_bits_source),
    .auto_node_in_in_d_bits_sink(sbypass_auto_node_in_in_d_bits_sink),
    .auto_node_in_in_d_bits_denied(sbypass_auto_node_in_in_d_bits_denied),
    .auto_node_in_in_d_bits_data(sbypass_auto_node_in_in_d_bits_data),
    .auto_node_in_in_d_bits_corrupt(sbypass_auto_node_in_in_d_bits_corrupt),
    .io_bypass(sbypass_io_bypass)
  );
  
  CHIPLINK_PREFIX_StuckSnooper mbypass (
    .clock(mbypass_clock),
    .reset(mbypass_reset),
    .auto_in_1_a_ready(mbypass_auto_in_1_a_ready),
    .auto_in_1_a_valid(mbypass_auto_in_1_a_valid),
    .auto_in_1_a_bits_opcode(mbypass_auto_in_1_a_bits_opcode),
    .auto_in_1_a_bits_param(mbypass_auto_in_1_a_bits_param),
    .auto_in_1_a_bits_size(mbypass_auto_in_1_a_bits_size),
    .auto_in_1_a_bits_source(mbypass_auto_in_1_a_bits_source),
    .auto_in_1_a_bits_address(mbypass_auto_in_1_a_bits_address),
    .auto_in_1_a_bits_mask(mbypass_auto_in_1_a_bits_mask),
    .auto_in_1_a_bits_data(mbypass_auto_in_1_a_bits_data),
    .auto_in_1_c_ready(mbypass_auto_in_1_c_ready),
    .auto_in_1_c_valid(mbypass_auto_in_1_c_valid),
    .auto_in_1_c_bits_opcode(mbypass_auto_in_1_c_bits_opcode),
    .auto_in_1_c_bits_param(mbypass_auto_in_1_c_bits_param),
    .auto_in_1_c_bits_size(mbypass_auto_in_1_c_bits_size),
    .auto_in_1_c_bits_source(mbypass_auto_in_1_c_bits_source),
    .auto_in_1_c_bits_address(mbypass_auto_in_1_c_bits_address),
    .auto_in_1_d_ready(mbypass_auto_in_1_d_ready),
    .auto_in_1_d_valid(mbypass_auto_in_1_d_valid),
    .auto_in_1_d_bits_opcode(mbypass_auto_in_1_d_bits_opcode),
    .auto_in_1_d_bits_param(mbypass_auto_in_1_d_bits_param),
    .auto_in_1_d_bits_size(mbypass_auto_in_1_d_bits_size),
    .auto_in_1_d_bits_source(mbypass_auto_in_1_d_bits_source),
    .auto_in_1_d_bits_denied(mbypass_auto_in_1_d_bits_denied),
    .auto_in_1_d_bits_data(mbypass_auto_in_1_d_bits_data),
    .auto_in_1_e_ready(mbypass_auto_in_1_e_ready),
    .auto_in_1_e_valid(mbypass_auto_in_1_e_valid),
    .auto_in_1_e_bits_sink(mbypass_auto_in_1_e_bits_sink),
    .auto_out_a_ready(mbypass_auto_out_a_ready),
    .auto_out_a_valid(mbypass_auto_out_a_valid),
    .auto_out_a_bits_opcode(mbypass_auto_out_a_bits_opcode),
    .auto_out_a_bits_param(mbypass_auto_out_a_bits_param),
    .auto_out_a_bits_size(mbypass_auto_out_a_bits_size),
    .auto_out_a_bits_source(mbypass_auto_out_a_bits_source),
    .auto_out_a_bits_address(mbypass_auto_out_a_bits_address),
    .auto_out_a_bits_mask(mbypass_auto_out_a_bits_mask),
    .auto_out_a_bits_data(mbypass_auto_out_a_bits_data),
    .auto_out_c_ready(mbypass_auto_out_c_ready),
    .auto_out_c_valid(mbypass_auto_out_c_valid),
    .auto_out_c_bits_opcode(mbypass_auto_out_c_bits_opcode),
    .auto_out_c_bits_param(mbypass_auto_out_c_bits_param),
    .auto_out_c_bits_size(mbypass_auto_out_c_bits_size),
    .auto_out_c_bits_source(mbypass_auto_out_c_bits_source),
    .auto_out_c_bits_address(mbypass_auto_out_c_bits_address),
    .auto_out_d_ready(mbypass_auto_out_d_ready),
    .auto_out_d_valid(mbypass_auto_out_d_valid),
    .auto_out_d_bits_opcode(mbypass_auto_out_d_bits_opcode),
    .auto_out_d_bits_param(mbypass_auto_out_d_bits_param),
    .auto_out_d_bits_size(mbypass_auto_out_d_bits_size),
    .auto_out_d_bits_source(mbypass_auto_out_d_bits_source),
    .auto_out_d_bits_denied(mbypass_auto_out_d_bits_denied),
    .auto_out_d_bits_data(mbypass_auto_out_d_bits_data),
    .auto_out_d_bits_corrupt(mbypass_auto_out_d_bits_corrupt),
    .auto_out_e_ready(mbypass_auto_out_e_ready),
    .auto_out_e_valid(mbypass_auto_out_e_valid),
    .auto_out_e_bits_sink(mbypass_auto_out_e_bits_sink),
    .io_bypass(mbypass_io_bypass)
  );

  CHIPLINK_PREFIX_Chiplink_TLMonitor_7 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_sink(monitor_io_in_d_bits_sink),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt)
  );
  CHIPLINK_PREFIX_SinkA sinkA (
    .clock(sinkA_clock),
    .reset(sinkA_reset),
    .io_a_ready(sinkA_io_a_ready),
    .io_a_valid(sinkA_io_a_valid),
    .io_a_bits_opcode(sinkA_io_a_bits_opcode),
    .io_a_bits_size(sinkA_io_a_bits_size),
    .io_a_bits_source(sinkA_io_a_bits_source),
    .io_a_bits_address(sinkA_io_a_bits_address),
    .io_a_bits_mask(sinkA_io_a_bits_mask),
    .io_a_bits_data(sinkA_io_a_bits_data),
    .io_q_ready(sinkA_io_q_ready),
    .io_q_valid(sinkA_io_q_valid),
    .io_q_bits_data(sinkA_io_q_bits_data),
    .io_q_bits_last(sinkA_io_q_bits_last),
    .io_q_bits_beats(sinkA_io_q_bits_beats)
  );
  CHIPLINK_PREFIX_SinkB sinkB (
    .clock(sinkB_clock),
    .reset(sinkB_reset),
    .io_q_ready(sinkB_io_q_ready),
    .io_q_valid(sinkB_io_q_valid),
    .io_q_bits_data(sinkB_io_q_bits_data),
    .io_q_bits_last(sinkB_io_q_bits_last)
  );
  CHIPLINK_PREFIX_SinkC sinkC (
    .clock(sinkC_clock),
    .reset(sinkC_reset),
    .io_q_ready(sinkC_io_q_ready),
    .io_q_valid(sinkC_io_q_valid),
    .io_q_bits_data(sinkC_io_q_bits_data),
    .io_q_bits_last(sinkC_io_q_bits_last)
  );
  CHIPLINK_PREFIX_SinkD sinkD (
    .clock(sinkD_clock),
    .reset(sinkD_reset),
    .io_d_ready(sinkD_io_d_ready),
    .io_d_valid(sinkD_io_d_valid),
    .io_d_bits_opcode(sinkD_io_d_bits_opcode),
    .io_d_bits_param(sinkD_io_d_bits_param),
    .io_d_bits_size(sinkD_io_d_bits_size),
    .io_d_bits_source(sinkD_io_d_bits_source),
    .io_d_bits_denied(sinkD_io_d_bits_denied),
    .io_d_bits_data(sinkD_io_d_bits_data),
    .io_q_ready(sinkD_io_q_ready),
    .io_q_valid(sinkD_io_q_valid),
    .io_q_bits_data(sinkD_io_q_bits_data),
    .io_q_bits_last(sinkD_io_q_bits_last),
    .io_q_bits_beats(sinkD_io_q_bits_beats),
    .io_a_tlSource_valid(sinkD_io_a_tlSource_valid),
    .io_a_tlSource_bits(sinkD_io_a_tlSource_bits),
    .io_a_clSource(sinkD_io_a_clSource),
    .io_c_tlSource_valid(sinkD_io_c_tlSource_valid),
    .io_c_tlSource_bits(sinkD_io_c_tlSource_bits),
    .io_c_clSource(sinkD_io_c_clSource)
  );
  CHIPLINK_PREFIX_SinkE sinkE (
    .io_q_bits_data(sinkE_io_q_bits_data),
    .io_d_clSink(sinkE_io_d_clSink)
  );
  CHIPLINK_PREFIX_SourceA sourceA (
    .clock(sourceA_clock),
    .reset(sourceA_reset),
    .io_a_ready(sourceA_io_a_ready),
    .io_a_valid(sourceA_io_a_valid),
    .io_a_bits_opcode(sourceA_io_a_bits_opcode),
    .io_a_bits_param(sourceA_io_a_bits_param),
    .io_a_bits_size(sourceA_io_a_bits_size),
    .io_a_bits_source(sourceA_io_a_bits_source),
    .io_a_bits_address(sourceA_io_a_bits_address),
    .io_a_bits_mask(sourceA_io_a_bits_mask),
    .io_a_bits_data(sourceA_io_a_bits_data),
    .io_q_ready(sourceA_io_q_ready),
    .io_q_valid(sourceA_io_q_valid),
    .io_q_bits(sourceA_io_q_bits),
    .io_d_tlSource_valid(sourceA_io_d_tlSource_valid),
    .io_d_tlSource_bits(sourceA_io_d_tlSource_bits),
    .io_d_clSource(sourceA_io_d_clSource)
  );
  CHIPLINK_PREFIX_SourceB sourceB (
    .clock(sourceB_clock),
    .reset(sourceB_reset),
    .io_q_ready(sourceB_io_q_ready),
    .io_q_valid(sourceB_io_q_valid),
    .io_q_bits(sourceB_io_q_bits)
  );
  CHIPLINK_PREFIX_SourceC sourceC (
    .clock(sourceC_clock),
    .reset(sourceC_reset),
    .io_c_ready(sourceC_io_c_ready),
    .io_c_valid(sourceC_io_c_valid),
    .io_c_bits_opcode(sourceC_io_c_bits_opcode),
    .io_c_bits_param(sourceC_io_c_bits_param),
    .io_c_bits_size(sourceC_io_c_bits_size),
    .io_c_bits_source(sourceC_io_c_bits_source),
    .io_c_bits_address(sourceC_io_c_bits_address),
    .io_q_ready(sourceC_io_q_ready),
    .io_q_valid(sourceC_io_q_valid),
    .io_q_bits(sourceC_io_q_bits),
    .io_d_tlSource_valid(sourceC_io_d_tlSource_valid),
    .io_d_tlSource_bits(sourceC_io_d_tlSource_bits),
    .io_d_clSource(sourceC_io_d_clSource)
  );
  CHIPLINK_PREFIX_SourceD sourceD (
    .clock(sourceD_clock),
    .reset(sourceD_reset),
    .io_d_ready(sourceD_io_d_ready),
    .io_d_valid(sourceD_io_d_valid),
    .io_d_bits_opcode(sourceD_io_d_bits_opcode),
    .io_d_bits_param(sourceD_io_d_bits_param),
    .io_d_bits_size(sourceD_io_d_bits_size),
    .io_d_bits_source(sourceD_io_d_bits_source),
    .io_d_bits_sink(sourceD_io_d_bits_sink),
    .io_d_bits_denied(sourceD_io_d_bits_denied),
    .io_d_bits_data(sourceD_io_d_bits_data),
    .io_d_bits_corrupt(sourceD_io_d_bits_corrupt),
    .io_q_ready(sourceD_io_q_ready),
    .io_q_valid(sourceD_io_q_valid),
    .io_q_bits(sourceD_io_q_bits),
    .io_e_clSink(sourceD_io_e_clSink)
  );
  CHIPLINK_PREFIX_SourceE sourceE (
    .io_e_ready(sourceE_io_e_ready),
    .io_e_valid(sourceE_io_e_valid),
    .io_e_bits_sink(sourceE_io_e_bits_sink),
    .io_q_ready(sourceE_io_q_ready),
    .io_q_valid(sourceE_io_q_valid),
    .io_q_bits(sourceE_io_q_bits)
  );
  CHIPLINK_PREFIX_RX rx (
    .clock(rx_clock),
    .reset(rx_reset),
    .io_b2c_send(rx_io_b2c_send),
    .io_b2c_data(rx_io_b2c_data),
    .b2c_data_concat(b2c_data_concat),
    .b2c_data_valid(b2c_data_valid),
    .io_a_mem_0(rx_io_a_mem_0),
    .io_a_mem_1(rx_io_a_mem_1),
    .io_a_mem_2(rx_io_a_mem_2),
    .io_a_mem_3(rx_io_a_mem_3),
    .io_a_mem_4(rx_io_a_mem_4),
    .io_a_mem_5(rx_io_a_mem_5),
    .io_a_mem_6(rx_io_a_mem_6),
    .io_a_mem_7(rx_io_a_mem_7),
    .io_a_ridx(rx_io_a_ridx),
    .io_a_widx(rx_io_a_widx),
    .io_a_safe_ridx_valid(rx_io_a_safe_ridx_valid),
    .io_a_safe_widx_valid(rx_io_a_safe_widx_valid),
    .io_a_safe_source_reset_n(rx_io_a_safe_source_reset_n),
    .io_a_safe_sink_reset_n(rx_io_a_safe_sink_reset_n),
    .io_bmem_0(rx_io_bmem_0),
    .io_bmem_1(rx_io_bmem_1),
    .io_bmem_2(rx_io_bmem_2),
    .io_bmem_3(rx_io_bmem_3),
    .io_bmem_4(rx_io_bmem_4),
    .io_bmem_5(rx_io_bmem_5),
    .io_bmem_6(rx_io_bmem_6),
    .io_bmem_7(rx_io_bmem_7),
    .io_bridx(rx_io_bridx),
    .io_bwidx(rx_io_bwidx),
    .io_bsafe_ridx_valid(rx_io_bsafe_ridx_valid),
    .io_bsafe_widx_valid(rx_io_bsafe_widx_valid),
    .io_bsafe_source_reset_n(rx_io_bsafe_source_reset_n),
    .io_bsafe_sink_reset_n(rx_io_bsafe_sink_reset_n),
    .io_c_mem_0(rx_io_c_mem_0),
    .io_c_mem_1(rx_io_c_mem_1),
    .io_c_mem_2(rx_io_c_mem_2),
    .io_c_mem_3(rx_io_c_mem_3),
    .io_c_mem_4(rx_io_c_mem_4),
    .io_c_mem_5(rx_io_c_mem_5),
    .io_c_mem_6(rx_io_c_mem_6),
    .io_c_mem_7(rx_io_c_mem_7),
    .io_c_ridx(rx_io_c_ridx),
    .io_c_widx(rx_io_c_widx),
    .io_c_safe_ridx_valid(rx_io_c_safe_ridx_valid),
    .io_c_safe_widx_valid(rx_io_c_safe_widx_valid),
    .io_c_safe_source_reset_n(rx_io_c_safe_source_reset_n),
    .io_c_safe_sink_reset_n(rx_io_c_safe_sink_reset_n),
    .io_d_mem_0(rx_io_d_mem_0),
    .io_d_mem_1(rx_io_d_mem_1),
    .io_d_mem_2(rx_io_d_mem_2),
    .io_d_mem_3(rx_io_d_mem_3),
    .io_d_mem_4(rx_io_d_mem_4),
    .io_d_mem_5(rx_io_d_mem_5),
    .io_d_mem_6(rx_io_d_mem_6),
    .io_d_mem_7(rx_io_d_mem_7),
    .io_d_ridx(rx_io_d_ridx),
    .io_d_widx(rx_io_d_widx),
    .io_d_safe_ridx_valid(rx_io_d_safe_ridx_valid),
    .io_d_safe_widx_valid(rx_io_d_safe_widx_valid),
    .io_d_safe_source_reset_n(rx_io_d_safe_source_reset_n),
    .io_d_safe_sink_reset_n(rx_io_d_safe_sink_reset_n),
    .io_e_mem_0(rx_io_e_mem_0),
    .io_e_mem_1(rx_io_e_mem_1),
    .io_e_mem_2(rx_io_e_mem_2),
    .io_e_mem_3(rx_io_e_mem_3),
    .io_e_mem_4(rx_io_e_mem_4),
    .io_e_mem_5(rx_io_e_mem_5),
    .io_e_mem_6(rx_io_e_mem_6),
    .io_e_mem_7(rx_io_e_mem_7),
    .io_e_ridx(rx_io_e_ridx),
    .io_e_widx(rx_io_e_widx),
    .io_e_safe_ridx_valid(rx_io_e_safe_ridx_valid),
    .io_e_safe_widx_valid(rx_io_e_safe_widx_valid),
    .io_e_safe_source_reset_n(rx_io_e_safe_source_reset_n),
    .io_e_safe_sink_reset_n(rx_io_e_safe_sink_reset_n),
    .io_rxc_mem_0_a(rx_io_rxc_mem_0_a),
    .io_rxc_mem_0_b(rx_io_rxc_mem_0_b),
    .io_rxc_mem_0_c(rx_io_rxc_mem_0_c),
    .io_rxc_mem_0_d(rx_io_rxc_mem_0_d),
    .io_rxc_mem_0_e(rx_io_rxc_mem_0_e),
    .io_rxc_ridx(rx_io_rxc_ridx),
    .io_rxc_widx(rx_io_rxc_widx),
    .io_rxc_safe_ridx_valid(rx_io_rxc_safe_ridx_valid),
    .io_rxc_safe_widx_valid(rx_io_rxc_safe_widx_valid),
    .io_rxc_safe_source_reset_n(rx_io_rxc_safe_source_reset_n),
    .io_rxc_safe_sink_reset_n(rx_io_rxc_safe_sink_reset_n),
    .io_txc_mem_0_a(rx_io_txc_mem_0_a),
    .io_txc_mem_0_b(rx_io_txc_mem_0_b),
    .io_txc_mem_0_c(rx_io_txc_mem_0_c),
    .io_txc_mem_0_d(rx_io_txc_mem_0_d),
    .io_txc_mem_0_e(rx_io_txc_mem_0_e),
    .io_txc_ridx(rx_io_txc_ridx),
    .io_txc_widx(rx_io_txc_widx),
    .io_txc_safe_ridx_valid(rx_io_txc_safe_ridx_valid),
    .io_txc_safe_widx_valid(rx_io_txc_safe_widx_valid),
    .io_txc_safe_source_reset_n(rx_io_txc_safe_source_reset_n),
    .io_txc_safe_sink_reset_n(rx_io_txc_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncResetReg rx_reset_reg (
    .io_q(rx_reset_reg_io_q),
    .io_clk(rx_reset_reg_io_clk),
    .io_rst(rx_reset_reg_io_rst)
  );
  CHIPLINK_PREFIX_AsyncQueueSink sourceA_io_q_sink (
    .clock(sourceA_io_q_sink_clock),
    .reset(sourceA_io_q_sink_reset),
    .io_deq_ready(sourceA_io_q_sink_io_deq_ready),
    .io_deq_valid(sourceA_io_q_sink_io_deq_valid),
    .io_deq_bits(sourceA_io_q_sink_io_deq_bits),
    .io_async_mem_0(sourceA_io_q_sink_io_async_mem_0),
    .io_async_mem_1(sourceA_io_q_sink_io_async_mem_1),
    .io_async_mem_2(sourceA_io_q_sink_io_async_mem_2),
    .io_async_mem_3(sourceA_io_q_sink_io_async_mem_3),
    .io_async_mem_4(sourceA_io_q_sink_io_async_mem_4),
    .io_async_mem_5(sourceA_io_q_sink_io_async_mem_5),
    .io_async_mem_6(sourceA_io_q_sink_io_async_mem_6),
    .io_async_mem_7(sourceA_io_q_sink_io_async_mem_7),
    .io_async_ridx(sourceA_io_q_sink_io_async_ridx),
    .io_async_widx(sourceA_io_q_sink_io_async_widx),
    .io_async_safe_ridx_valid(sourceA_io_q_sink_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(sourceA_io_q_sink_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(sourceA_io_q_sink_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(sourceA_io_q_sink_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSink sourceB_io_q_sink (
    .clock(sourceB_io_q_sink_clock),
    .reset(sourceB_io_q_sink_reset),
    .io_deq_ready(sourceB_io_q_sink_io_deq_ready),
    .io_deq_valid(sourceB_io_q_sink_io_deq_valid),
    .io_deq_bits(sourceB_io_q_sink_io_deq_bits),
    .io_async_mem_0(sourceB_io_q_sink_io_async_mem_0),
    .io_async_mem_1(sourceB_io_q_sink_io_async_mem_1),
    .io_async_mem_2(sourceB_io_q_sink_io_async_mem_2),
    .io_async_mem_3(sourceB_io_q_sink_io_async_mem_3),
    .io_async_mem_4(sourceB_io_q_sink_io_async_mem_4),
    .io_async_mem_5(sourceB_io_q_sink_io_async_mem_5),
    .io_async_mem_6(sourceB_io_q_sink_io_async_mem_6),
    .io_async_mem_7(sourceB_io_q_sink_io_async_mem_7),
    .io_async_ridx(sourceB_io_q_sink_io_async_ridx),
    .io_async_widx(sourceB_io_q_sink_io_async_widx),
    .io_async_safe_ridx_valid(sourceB_io_q_sink_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(sourceB_io_q_sink_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(sourceB_io_q_sink_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(sourceB_io_q_sink_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSink sourceC_io_q_sink (
    .clock(sourceC_io_q_sink_clock),
    .reset(sourceC_io_q_sink_reset),
    .io_deq_ready(sourceC_io_q_sink_io_deq_ready),
    .io_deq_valid(sourceC_io_q_sink_io_deq_valid),
    .io_deq_bits(sourceC_io_q_sink_io_deq_bits),
    .io_async_mem_0(sourceC_io_q_sink_io_async_mem_0),
    .io_async_mem_1(sourceC_io_q_sink_io_async_mem_1),
    .io_async_mem_2(sourceC_io_q_sink_io_async_mem_2),
    .io_async_mem_3(sourceC_io_q_sink_io_async_mem_3),
    .io_async_mem_4(sourceC_io_q_sink_io_async_mem_4),
    .io_async_mem_5(sourceC_io_q_sink_io_async_mem_5),
    .io_async_mem_6(sourceC_io_q_sink_io_async_mem_6),
    .io_async_mem_7(sourceC_io_q_sink_io_async_mem_7),
    .io_async_ridx(sourceC_io_q_sink_io_async_ridx),
    .io_async_widx(sourceC_io_q_sink_io_async_widx),
    .io_async_safe_ridx_valid(sourceC_io_q_sink_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(sourceC_io_q_sink_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(sourceC_io_q_sink_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(sourceC_io_q_sink_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSink sourceD_io_q_sink (
    .clock(sourceD_io_q_sink_clock),
    .reset(sourceD_io_q_sink_reset),
    .io_deq_ready(sourceD_io_q_sink_io_deq_ready),
    .io_deq_valid(sourceD_io_q_sink_io_deq_valid),
    .io_deq_bits(sourceD_io_q_sink_io_deq_bits),
    .io_async_mem_0(sourceD_io_q_sink_io_async_mem_0),
    .io_async_mem_1(sourceD_io_q_sink_io_async_mem_1),
    .io_async_mem_2(sourceD_io_q_sink_io_async_mem_2),
    .io_async_mem_3(sourceD_io_q_sink_io_async_mem_3),
    .io_async_mem_4(sourceD_io_q_sink_io_async_mem_4),
    .io_async_mem_5(sourceD_io_q_sink_io_async_mem_5),
    .io_async_mem_6(sourceD_io_q_sink_io_async_mem_6),
    .io_async_mem_7(sourceD_io_q_sink_io_async_mem_7),
    .io_async_ridx(sourceD_io_q_sink_io_async_ridx),
    .io_async_widx(sourceD_io_q_sink_io_async_widx),
    .io_async_safe_ridx_valid(sourceD_io_q_sink_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(sourceD_io_q_sink_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(sourceD_io_q_sink_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(sourceD_io_q_sink_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_AsyncQueueSink sourceE_io_q_sink (
    .clock(sourceE_io_q_sink_clock),
    .reset(sourceE_io_q_sink_reset),
    .io_deq_ready(sourceE_io_q_sink_io_deq_ready),
    .io_deq_valid(sourceE_io_q_sink_io_deq_valid),
    .io_deq_bits(sourceE_io_q_sink_io_deq_bits),
    .io_async_mem_0(sourceE_io_q_sink_io_async_mem_0),
    .io_async_mem_1(sourceE_io_q_sink_io_async_mem_1),
    .io_async_mem_2(sourceE_io_q_sink_io_async_mem_2),
    .io_async_mem_3(sourceE_io_q_sink_io_async_mem_3),
    .io_async_mem_4(sourceE_io_q_sink_io_async_mem_4),
    .io_async_mem_5(sourceE_io_q_sink_io_async_mem_5),
    .io_async_mem_6(sourceE_io_q_sink_io_async_mem_6),
    .io_async_mem_7(sourceE_io_q_sink_io_async_mem_7),
    .io_async_ridx(sourceE_io_q_sink_io_async_ridx),
    .io_async_widx(sourceE_io_q_sink_io_async_widx),
    .io_async_safe_ridx_valid(sourceE_io_q_sink_io_async_safe_ridx_valid),
    .io_async_safe_widx_valid(sourceE_io_q_sink_io_async_safe_widx_valid),
    .io_async_safe_source_reset_n(sourceE_io_q_sink_io_async_safe_source_reset_n),
    .io_async_safe_sink_reset_n(sourceE_io_q_sink_io_async_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_TX tx (
    .clock(tx_clock),
    .reset(tx_reset),
    .io_c2b_clk(tx_io_c2b_clk),
    .io_c2b_rst(tx_io_c2b_rst),
    .io_c2b_send(tx_io_c2b_send),
    .io_c2b_data(tx_io_c2b_data),
    .io_sa_ready(tx_io_sa_ready),
    .io_sa_valid(tx_io_sa_valid),
    .transferDataReg(transferDataReg),
    .send_1p_valid(send_1p_valid),
    .io_sa_bits_data(tx_io_sa_bits_data),
    .io_sa_bits_last(tx_io_sa_bits_last),
    .io_sa_bits_beats(tx_io_sa_bits_beats),
    .io_sb_ready(tx_io_sb_ready),
    .io_sb_bits_data(tx_io_sb_bits_data),
    .io_sb_bits_last(tx_io_sb_bits_last),
    .io_sc_ready(tx_io_sc_ready),
    .io_sc_bits_data(tx_io_sc_bits_data),
    .io_sc_bits_last(tx_io_sc_bits_last),
    .io_sd_ready(tx_io_sd_ready),
    .io_sd_valid(tx_io_sd_valid),
    .io_sd_bits_data(tx_io_sd_bits_data),
    .io_sd_bits_last(tx_io_sd_bits_last),
    .io_sd_bits_beats(tx_io_sd_bits_beats),
    .io_se_bits_data(tx_io_se_bits_data),
    .io_rxc_mem_0_a(tx_io_rxc_mem_0_a),
    .io_rxc_mem_0_b(tx_io_rxc_mem_0_b),
    .io_rxc_mem_0_c(tx_io_rxc_mem_0_c),
    .io_rxc_mem_0_d(tx_io_rxc_mem_0_d),
    .io_rxc_mem_0_e(tx_io_rxc_mem_0_e),
    .io_rxc_ridx(tx_io_rxc_ridx),
    .io_rxc_widx(tx_io_rxc_widx),
    .io_rxc_safe_ridx_valid(tx_io_rxc_safe_ridx_valid),
    .io_rxc_safe_widx_valid(tx_io_rxc_safe_widx_valid),
    .io_rxc_safe_source_reset_n(tx_io_rxc_safe_source_reset_n),
    .io_rxc_safe_sink_reset_n(tx_io_rxc_safe_sink_reset_n),
    .io_txc_mem_0_a(tx_io_txc_mem_0_a),
    .io_txc_mem_0_b(tx_io_txc_mem_0_b),
    .io_txc_mem_0_c(tx_io_txc_mem_0_c),
    .io_txc_mem_0_d(tx_io_txc_mem_0_d),
    .io_txc_mem_0_e(tx_io_txc_mem_0_e),
    .io_txc_ridx(tx_io_txc_ridx),
    .io_txc_widx(tx_io_txc_widx),
    .io_txc_safe_ridx_valid(tx_io_txc_safe_ridx_valid),
    .io_txc_safe_widx_valid(tx_io_txc_safe_widx_valid),
    .io_txc_safe_source_reset_n(tx_io_txc_safe_source_reset_n),
    .io_txc_safe_sink_reset_n(tx_io_txc_safe_sink_reset_n)
  );
  CHIPLINK_PREFIX_ResetCatchAndSync_d3 do_bypass_catcher (
    .clock(do_bypass_catcher_clock),
    .reset(do_bypass_catcher_reset),
    .io_sync_reset(do_bypass_catcher_io_sync_reset)
  );
  CHIPLINK_PREFIX_ResetCatchAndSync_d3 do_bypass_catcher_1 (
    .clock(do_bypass_catcher_1_clock),
    .reset(do_bypass_catcher_1_reset),
    .io_sync_reset(do_bypass_catcher_1_io_sync_reset)
  );
  assign auto_mbypass_out_a_valid = mbypass_auto_out_a_valid;
  assign auto_mbypass_out_a_bits_opcode = mbypass_auto_out_a_bits_opcode;
  assign auto_mbypass_out_a_bits_param = mbypass_auto_out_a_bits_param;
  assign auto_mbypass_out_a_bits_size = mbypass_auto_out_a_bits_size;
  assign auto_mbypass_out_a_bits_source = mbypass_auto_out_a_bits_source;
  assign auto_mbypass_out_a_bits_address = mbypass_auto_out_a_bits_address;
  assign auto_mbypass_out_a_bits_mask = mbypass_auto_out_a_bits_mask;
  assign auto_mbypass_out_a_bits_data = mbypass_auto_out_a_bits_data;
  assign auto_mbypass_out_c_valid = mbypass_auto_out_c_valid;
  assign auto_mbypass_out_c_bits_opcode = mbypass_auto_out_c_bits_opcode;
  assign auto_mbypass_out_c_bits_param = mbypass_auto_out_c_bits_param;
  assign auto_mbypass_out_c_bits_size = mbypass_auto_out_c_bits_size;
  assign auto_mbypass_out_c_bits_source = mbypass_auto_out_c_bits_source;
  assign auto_mbypass_out_c_bits_address = mbypass_auto_out_c_bits_address;
  assign auto_mbypass_out_d_ready = mbypass_auto_out_d_ready;
  assign auto_mbypass_out_e_valid = mbypass_auto_out_e_valid;
  assign auto_mbypass_out_e_bits_sink = mbypass_auto_out_e_bits_sink;
  assign auto_sbypass_node_in_in_a_ready = sbypass_auto_node_in_in_a_ready;
  assign auto_sbypass_node_in_in_d_valid = sbypass_auto_node_in_in_d_valid;
  assign auto_sbypass_node_in_in_d_bits_opcode = sbypass_auto_node_in_in_d_bits_opcode;
  assign auto_sbypass_node_in_in_d_bits_param = sbypass_auto_node_in_in_d_bits_param;
  assign auto_sbypass_node_in_in_d_bits_size = sbypass_auto_node_in_in_d_bits_size;
  assign auto_sbypass_node_in_in_d_bits_source = sbypass_auto_node_in_in_d_bits_source;
  assign auto_sbypass_node_in_in_d_bits_sink = sbypass_auto_node_in_in_d_bits_sink;
  assign auto_sbypass_node_in_in_d_bits_denied = sbypass_auto_node_in_in_d_bits_denied;
  assign auto_sbypass_node_in_in_d_bits_data = sbypass_auto_node_in_in_d_bits_data;
  assign auto_sbypass_node_in_in_d_bits_corrupt = sbypass_auto_node_in_in_d_bits_corrupt;
  assign auto_io_out_c2b_clk = tx_io_c2b_clk;
  assign auto_io_out_c2b_rst = tx_io_c2b_rst;
  assign auto_io_out_c2b_send = tx_io_c2b_send;
  assign auto_io_out_c2b_data = tx_io_c2b_data;
  assign sbypass_clock = clock;
  assign sbypass_reset = reset;
  assign sbypass_auto_node_out_out_a_ready = sinkA_io_a_ready;
  assign sbypass_auto_node_out_out_d_valid = sourceD_io_d_valid;
  assign sbypass_auto_node_out_out_d_bits_opcode = sourceD_io_d_bits_opcode;
  assign sbypass_auto_node_out_out_d_bits_param = sourceD_io_d_bits_param;
  assign sbypass_auto_node_out_out_d_bits_size = sourceD_io_d_bits_size;
  assign sbypass_auto_node_out_out_d_bits_source = sourceD_io_d_bits_source;
  assign sbypass_auto_node_out_out_d_bits_sink = sourceD_io_d_bits_sink;
  assign sbypass_auto_node_out_out_d_bits_denied = sourceD_io_d_bits_denied;
  assign sbypass_auto_node_out_out_d_bits_data = sourceD_io_d_bits_data;
  assign sbypass_auto_node_out_out_d_bits_corrupt = sourceD_io_d_bits_corrupt;
  assign sbypass_auto_node_in_in_a_valid = auto_sbypass_node_in_in_a_valid;
  assign sbypass_auto_node_in_in_a_bits_opcode = auto_sbypass_node_in_in_a_bits_opcode;
  assign sbypass_auto_node_in_in_a_bits_size = auto_sbypass_node_in_in_a_bits_size;
  assign sbypass_auto_node_in_in_a_bits_source = auto_sbypass_node_in_in_a_bits_source;
  assign sbypass_auto_node_in_in_a_bits_address = auto_sbypass_node_in_in_a_bits_address;
  assign sbypass_auto_node_in_in_a_bits_mask = auto_sbypass_node_in_in_a_bits_mask;
  assign sbypass_auto_node_in_in_a_bits_data = auto_sbypass_node_in_in_a_bits_data;
  assign sbypass_auto_node_in_in_d_ready = auto_sbypass_node_in_in_d_ready;
  assign sbypass_io_bypass = do_bypass_catcher_io_sync_reset | do_bypass_catcher_1_io_sync_reset;
  assign mbypass_clock = clock;
  assign mbypass_reset = reset;
  assign mbypass_auto_in_1_a_valid = sourceA_io_a_valid;
  assign mbypass_auto_in_1_a_bits_opcode = sourceA_io_a_bits_opcode;
  assign mbypass_auto_in_1_a_bits_param = sourceA_io_a_bits_param;
  assign mbypass_auto_in_1_a_bits_size = sourceA_io_a_bits_size;
  assign mbypass_auto_in_1_a_bits_source = sourceA_io_a_bits_source;
  assign mbypass_auto_in_1_a_bits_address = sourceA_io_a_bits_address;
  assign mbypass_auto_in_1_a_bits_mask = sourceA_io_a_bits_mask;
  assign mbypass_auto_in_1_a_bits_data = sourceA_io_a_bits_data;
  assign mbypass_auto_in_1_c_valid = sourceC_io_c_valid;
  assign mbypass_auto_in_1_c_bits_opcode = sourceC_io_c_bits_opcode;
  assign mbypass_auto_in_1_c_bits_param = sourceC_io_c_bits_param;
  assign mbypass_auto_in_1_c_bits_size = sourceC_io_c_bits_size;
  assign mbypass_auto_in_1_c_bits_source = sourceC_io_c_bits_source;
  assign mbypass_auto_in_1_c_bits_address = sourceC_io_c_bits_address;
  assign mbypass_auto_in_1_d_ready = sinkD_io_d_ready;
  assign mbypass_auto_in_1_e_valid = sourceE_io_e_valid;
  assign mbypass_auto_in_1_e_bits_sink = sourceE_io_e_bits_sink;
  assign mbypass_auto_out_a_ready = auto_mbypass_out_a_ready;
  assign mbypass_auto_out_c_ready = auto_mbypass_out_c_ready;
  assign mbypass_auto_out_d_valid = auto_mbypass_out_d_valid;
  assign mbypass_auto_out_d_bits_opcode = auto_mbypass_out_d_bits_opcode;
  assign mbypass_auto_out_d_bits_param = auto_mbypass_out_d_bits_param;
  assign mbypass_auto_out_d_bits_size = auto_mbypass_out_d_bits_size;
  assign mbypass_auto_out_d_bits_source = auto_mbypass_out_d_bits_source;
  assign mbypass_auto_out_d_bits_denied = auto_mbypass_out_d_bits_denied;
  assign mbypass_auto_out_d_bits_data = auto_mbypass_out_d_bits_data;
  assign mbypass_auto_out_d_bits_corrupt = auto_mbypass_out_d_bits_corrupt;
  assign mbypass_auto_out_e_ready = auto_mbypass_out_e_ready;
  assign mbypass_io_bypass = do_bypass_catcher_io_sync_reset | do_bypass_catcher_1_io_sync_reset;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = sinkA_io_a_ready;
  assign monitor_io_in_a_valid = sbypass_auto_node_out_out_a_valid;
  assign monitor_io_in_a_bits_opcode = sbypass_auto_node_out_out_a_bits_opcode;
  assign monitor_io_in_a_bits_size = sbypass_auto_node_out_out_a_bits_size;
  assign monitor_io_in_a_bits_source = sbypass_auto_node_out_out_a_bits_source;
  assign monitor_io_in_a_bits_address = sbypass_auto_node_out_out_a_bits_address;
  assign monitor_io_in_a_bits_mask = sbypass_auto_node_out_out_a_bits_mask;
  assign monitor_io_in_d_ready = sbypass_auto_node_out_out_d_ready;
  assign monitor_io_in_d_valid = sourceD_io_d_valid;
  assign monitor_io_in_d_bits_opcode = sourceD_io_d_bits_opcode;
  assign monitor_io_in_d_bits_param = sourceD_io_d_bits_param;
  assign monitor_io_in_d_bits_size = sourceD_io_d_bits_size;
  assign monitor_io_in_d_bits_source = sourceD_io_d_bits_source;
  assign monitor_io_in_d_bits_sink = sourceD_io_d_bits_sink;
  assign monitor_io_in_d_bits_denied = sourceD_io_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = sourceD_io_d_bits_corrupt;
  assign sinkA_clock = clock;
  assign sinkA_reset = reset;
  assign sinkA_io_a_valid = sbypass_auto_node_out_out_a_valid;
  assign sinkA_io_a_bits_opcode = sbypass_auto_node_out_out_a_bits_opcode;
  assign sinkA_io_a_bits_size = sbypass_auto_node_out_out_a_bits_size;
  assign sinkA_io_a_bits_source = sbypass_auto_node_out_out_a_bits_source;
  assign sinkA_io_a_bits_address = sbypass_auto_node_out_out_a_bits_address;
  assign sinkA_io_a_bits_mask = sbypass_auto_node_out_out_a_bits_mask;
  assign sinkA_io_a_bits_data = sbypass_auto_node_out_out_a_bits_data;
  assign sinkA_io_q_ready = tx_io_sa_ready;
  assign sinkB_clock = clock;
  assign sinkB_reset = reset;
  assign sinkB_io_q_ready = tx_io_sb_ready;
  assign sinkC_clock = clock;
  assign sinkC_reset = reset;
  assign sinkC_io_q_ready = tx_io_sc_ready;
  assign sinkD_clock = clock;
  assign sinkD_reset = reset;
  assign sinkD_io_d_valid = mbypass_auto_in_1_d_valid;
  assign sinkD_io_d_bits_opcode = mbypass_auto_in_1_d_bits_opcode;
  assign sinkD_io_d_bits_param = mbypass_auto_in_1_d_bits_param;
  assign sinkD_io_d_bits_size = mbypass_auto_in_1_d_bits_size;
  assign sinkD_io_d_bits_source = mbypass_auto_in_1_d_bits_source;
  assign sinkD_io_d_bits_denied = mbypass_auto_in_1_d_bits_denied;
  assign sinkD_io_d_bits_data = mbypass_auto_in_1_d_bits_data;
  assign sinkD_io_q_ready = tx_io_sd_ready;
  assign sinkD_io_a_clSource = sourceA_io_d_clSource;
  assign sinkD_io_c_clSource = sourceC_io_d_clSource;
  assign sinkE_io_d_clSink = sourceD_io_e_clSink;
  assign sourceA_clock = clock;
  assign sourceA_reset = reset;
  assign sourceA_io_a_ready = mbypass_auto_in_1_a_ready;
  assign sourceA_io_q_valid = sourceA_io_q_sink_io_deq_valid;
  assign sourceA_io_q_bits = sourceA_io_q_sink_io_deq_bits;
  assign sourceA_io_d_tlSource_valid = sinkD_io_a_tlSource_valid;
  assign sourceA_io_d_tlSource_bits = sinkD_io_a_tlSource_bits;
  assign sourceB_clock = clock;
  assign sourceB_reset = reset;
  assign sourceB_io_q_valid = sourceB_io_q_sink_io_deq_valid;
  assign sourceB_io_q_bits = sourceB_io_q_sink_io_deq_bits;
  assign sourceC_clock = clock;
  assign sourceC_reset = reset;
  assign sourceC_io_c_ready = mbypass_auto_in_1_c_ready;
  assign sourceC_io_q_valid = sourceC_io_q_sink_io_deq_valid;
  assign sourceC_io_q_bits = sourceC_io_q_sink_io_deq_bits;
  assign sourceC_io_d_tlSource_valid = sinkD_io_c_tlSource_valid;
  assign sourceC_io_d_tlSource_bits = sinkD_io_c_tlSource_bits;
  assign sourceD_clock = clock;
  assign sourceD_reset = reset;
  assign sourceD_io_d_ready = sbypass_auto_node_out_out_d_ready;
  assign sourceD_io_q_valid = sourceD_io_q_sink_io_deq_valid;
  assign sourceD_io_q_bits = sourceD_io_q_sink_io_deq_bits;
  assign sourceE_io_e_ready = mbypass_auto_in_1_e_ready;
  assign sourceE_io_q_valid = sourceE_io_q_sink_io_deq_valid;
  assign sourceE_io_q_bits = sourceE_io_q_sink_io_deq_bits;
  assign rx_clock = auto_io_out_b2c_clk;
  assign rx_reset = rx_reset_reg_io_q;
  assign rx_io_b2c_send = auto_io_out_b2c_send;
  assign rx_io_b2c_data = auto_io_out_b2c_data;
  assign rx_io_a_ridx = sourceA_io_q_sink_io_async_ridx;
  assign rx_io_a_safe_ridx_valid = sourceA_io_q_sink_io_async_safe_ridx_valid;
  assign rx_io_a_safe_sink_reset_n = sourceA_io_q_sink_io_async_safe_sink_reset_n;
  assign rx_io_bridx = sourceB_io_q_sink_io_async_ridx;
  assign rx_io_bsafe_ridx_valid = sourceB_io_q_sink_io_async_safe_ridx_valid;
  assign rx_io_bsafe_sink_reset_n = sourceB_io_q_sink_io_async_safe_sink_reset_n;
  assign rx_io_c_ridx = sourceC_io_q_sink_io_async_ridx;
  assign rx_io_c_safe_ridx_valid = sourceC_io_q_sink_io_async_safe_ridx_valid;
  assign rx_io_c_safe_sink_reset_n = sourceC_io_q_sink_io_async_safe_sink_reset_n;
  assign rx_io_d_ridx = sourceD_io_q_sink_io_async_ridx;
  assign rx_io_d_safe_ridx_valid = sourceD_io_q_sink_io_async_safe_ridx_valid;
  assign rx_io_d_safe_sink_reset_n = sourceD_io_q_sink_io_async_safe_sink_reset_n;
  assign rx_io_e_ridx = sourceE_io_q_sink_io_async_ridx;
  assign rx_io_e_safe_ridx_valid = sourceE_io_q_sink_io_async_safe_ridx_valid;
  assign rx_io_e_safe_sink_reset_n = sourceE_io_q_sink_io_async_safe_sink_reset_n;
  assign rx_io_rxc_ridx = tx_io_rxc_ridx;
  assign rx_io_rxc_safe_ridx_valid = tx_io_rxc_safe_ridx_valid;
  assign rx_io_rxc_safe_sink_reset_n = tx_io_rxc_safe_sink_reset_n;
  assign rx_io_txc_ridx = tx_io_txc_ridx;
  assign rx_io_txc_safe_ridx_valid = tx_io_txc_safe_ridx_valid;
  assign rx_io_txc_safe_sink_reset_n = tx_io_txc_safe_sink_reset_n;
  assign rx_reset_reg_io_clk = auto_io_out_b2c_clk;
  assign rx_reset_reg_io_rst = auto_io_out_b2c_rst;
  assign sourceA_io_q_sink_clock = clock;
  assign sourceA_io_q_sink_reset = reset;
  assign sourceA_io_q_sink_io_deq_ready = sourceA_io_q_ready;
  assign sourceA_io_q_sink_io_async_mem_0 = rx_io_a_mem_0;
  assign sourceA_io_q_sink_io_async_mem_1 = rx_io_a_mem_1;
  assign sourceA_io_q_sink_io_async_mem_2 = rx_io_a_mem_2;
  assign sourceA_io_q_sink_io_async_mem_3 = rx_io_a_mem_3;
  assign sourceA_io_q_sink_io_async_mem_4 = rx_io_a_mem_4;
  assign sourceA_io_q_sink_io_async_mem_5 = rx_io_a_mem_5;
  assign sourceA_io_q_sink_io_async_mem_6 = rx_io_a_mem_6;
  assign sourceA_io_q_sink_io_async_mem_7 = rx_io_a_mem_7;
  assign sourceA_io_q_sink_io_async_widx = rx_io_a_widx;
  assign sourceA_io_q_sink_io_async_safe_widx_valid = rx_io_a_safe_widx_valid;
  assign sourceA_io_q_sink_io_async_safe_source_reset_n = rx_io_a_safe_source_reset_n;
  assign sourceB_io_q_sink_clock = clock;
  assign sourceB_io_q_sink_reset = reset;
  assign sourceB_io_q_sink_io_deq_ready = sourceB_io_q_ready;
  assign sourceB_io_q_sink_io_async_mem_0 = rx_io_bmem_0;
  assign sourceB_io_q_sink_io_async_mem_1 = rx_io_bmem_1;
  assign sourceB_io_q_sink_io_async_mem_2 = rx_io_bmem_2;
  assign sourceB_io_q_sink_io_async_mem_3 = rx_io_bmem_3;
  assign sourceB_io_q_sink_io_async_mem_4 = rx_io_bmem_4;
  assign sourceB_io_q_sink_io_async_mem_5 = rx_io_bmem_5;
  assign sourceB_io_q_sink_io_async_mem_6 = rx_io_bmem_6;
  assign sourceB_io_q_sink_io_async_mem_7 = rx_io_bmem_7;
  assign sourceB_io_q_sink_io_async_widx = rx_io_bwidx;
  assign sourceB_io_q_sink_io_async_safe_widx_valid = rx_io_bsafe_widx_valid;
  assign sourceB_io_q_sink_io_async_safe_source_reset_n = rx_io_bsafe_source_reset_n;
  assign sourceC_io_q_sink_clock = clock;
  assign sourceC_io_q_sink_reset = reset;
  assign sourceC_io_q_sink_io_deq_ready = sourceC_io_q_ready;
  assign sourceC_io_q_sink_io_async_mem_0 = rx_io_c_mem_0;
  assign sourceC_io_q_sink_io_async_mem_1 = rx_io_c_mem_1;
  assign sourceC_io_q_sink_io_async_mem_2 = rx_io_c_mem_2;
  assign sourceC_io_q_sink_io_async_mem_3 = rx_io_c_mem_3;
  assign sourceC_io_q_sink_io_async_mem_4 = rx_io_c_mem_4;
  assign sourceC_io_q_sink_io_async_mem_5 = rx_io_c_mem_5;
  assign sourceC_io_q_sink_io_async_mem_6 = rx_io_c_mem_6;
  assign sourceC_io_q_sink_io_async_mem_7 = rx_io_c_mem_7;
  assign sourceC_io_q_sink_io_async_widx = rx_io_c_widx;
  assign sourceC_io_q_sink_io_async_safe_widx_valid = rx_io_c_safe_widx_valid;
  assign sourceC_io_q_sink_io_async_safe_source_reset_n = rx_io_c_safe_source_reset_n;
  assign sourceD_io_q_sink_clock = clock;
  assign sourceD_io_q_sink_reset = reset;
  assign sourceD_io_q_sink_io_deq_ready = sourceD_io_q_ready;
  assign sourceD_io_q_sink_io_async_mem_0 = rx_io_d_mem_0;
  assign sourceD_io_q_sink_io_async_mem_1 = rx_io_d_mem_1;
  assign sourceD_io_q_sink_io_async_mem_2 = rx_io_d_mem_2;
  assign sourceD_io_q_sink_io_async_mem_3 = rx_io_d_mem_3;
  assign sourceD_io_q_sink_io_async_mem_4 = rx_io_d_mem_4;
  assign sourceD_io_q_sink_io_async_mem_5 = rx_io_d_mem_5;
  assign sourceD_io_q_sink_io_async_mem_6 = rx_io_d_mem_6;
  assign sourceD_io_q_sink_io_async_mem_7 = rx_io_d_mem_7;
  assign sourceD_io_q_sink_io_async_widx = rx_io_d_widx;
  assign sourceD_io_q_sink_io_async_safe_widx_valid = rx_io_d_safe_widx_valid;
  assign sourceD_io_q_sink_io_async_safe_source_reset_n = rx_io_d_safe_source_reset_n;
  assign sourceE_io_q_sink_clock = clock;
  assign sourceE_io_q_sink_reset = reset;
  assign sourceE_io_q_sink_io_deq_ready = sourceE_io_q_ready;
  assign sourceE_io_q_sink_io_async_mem_0 = rx_io_e_mem_0;
  assign sourceE_io_q_sink_io_async_mem_1 = rx_io_e_mem_1;
  assign sourceE_io_q_sink_io_async_mem_2 = rx_io_e_mem_2;
  assign sourceE_io_q_sink_io_async_mem_3 = rx_io_e_mem_3;
  assign sourceE_io_q_sink_io_async_mem_4 = rx_io_e_mem_4;
  assign sourceE_io_q_sink_io_async_mem_5 = rx_io_e_mem_5;
  assign sourceE_io_q_sink_io_async_mem_6 = rx_io_e_mem_6;
  assign sourceE_io_q_sink_io_async_mem_7 = rx_io_e_mem_7;
  assign sourceE_io_q_sink_io_async_widx = rx_io_e_widx;
  assign sourceE_io_q_sink_io_async_safe_widx_valid = rx_io_e_safe_widx_valid;
  assign sourceE_io_q_sink_io_async_safe_source_reset_n = rx_io_e_safe_source_reset_n;
  assign tx_clock = clock;
  assign tx_reset = reset;
  assign tx_io_sa_valid = sinkA_io_q_valid;
  assign tx_io_sa_bits_data = sinkA_io_q_bits_data;
  assign tx_io_sa_bits_last = sinkA_io_q_bits_last;
  assign tx_io_sa_bits_beats = sinkA_io_q_bits_beats;
  assign tx_io_sb_bits_data = sinkB_io_q_bits_data;
  assign tx_io_sb_bits_last = sinkB_io_q_bits_last;
  assign tx_io_sc_bits_data = sinkC_io_q_bits_data;
  assign tx_io_sc_bits_last = sinkC_io_q_bits_last;
  assign tx_io_sd_valid = sinkD_io_q_valid;
  assign tx_io_sd_bits_data = sinkD_io_q_bits_data;
  assign tx_io_sd_bits_last = sinkD_io_q_bits_last;
  assign tx_io_sd_bits_beats = sinkD_io_q_bits_beats;
  assign tx_io_se_bits_data = sinkE_io_q_bits_data;
  assign tx_io_rxc_mem_0_a = rx_io_rxc_mem_0_a;
  assign tx_io_rxc_mem_0_b = rx_io_rxc_mem_0_b;
  assign tx_io_rxc_mem_0_c = rx_io_rxc_mem_0_c;
  assign tx_io_rxc_mem_0_d = rx_io_rxc_mem_0_d;
  assign tx_io_rxc_mem_0_e = rx_io_rxc_mem_0_e;
  assign tx_io_rxc_widx = rx_io_rxc_widx;
  assign tx_io_rxc_safe_widx_valid = rx_io_rxc_safe_widx_valid;
  assign tx_io_rxc_safe_source_reset_n = rx_io_rxc_safe_source_reset_n;
  assign tx_io_txc_mem_0_a = rx_io_txc_mem_0_a;
  assign tx_io_txc_mem_0_b = rx_io_txc_mem_0_b;
  assign tx_io_txc_mem_0_c = rx_io_txc_mem_0_c;
  assign tx_io_txc_mem_0_d = rx_io_txc_mem_0_d;
  assign tx_io_txc_mem_0_e = rx_io_txc_mem_0_e;
  assign tx_io_txc_widx = rx_io_txc_widx;
  assign tx_io_txc_safe_widx_valid = rx_io_txc_safe_widx_valid;
  assign tx_io_txc_safe_source_reset_n = rx_io_txc_safe_source_reset_n;
  assign do_bypass_catcher_clock = clock;
  assign do_bypass_catcher_reset = rx_reset;
  assign do_bypass_catcher_1_clock = clock;
  assign do_bypass_catcher_1_reset = tx_reset;
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_8(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_size,
  input  [3:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [3:0]  io_in_a_bits_mask,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [3:0]  io_in_d_bits_source,
  input  [5:0]  io_in_d_bits_sink,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [63:0] _RAND_13;
  reg [63:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [63:0] _RAND_19;
  reg [31:0] _RAND_20;
  reg [31:0] _RAND_21;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = ~io_in_a_bits_source[3];
  wire  source_ok = _source_ok_T_1 | io_in_a_bits_source[3];
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_71 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_71;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire  mask_sizeOH_shiftAmount = io_in_a_bits_size[0];
  wire [1:0] _mask_sizeOH_T_1 = 2'h1 << mask_sizeOH_shiftAmount;
  wire [1:0] mask_sizeOH = _mask_sizeOH_T_1 | 2'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h2;
  wire  mask_size = mask_sizeOH[1];
  wire  mask_bit = io_in_a_bits_address[1];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[0];
  wire  mask_bit_1 = io_in_a_bits_address[0];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_lo_lo = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_lo_hi = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_hi_lo = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_hi_hi = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire [3:0] mask = {mask_hi_hi,mask_hi_lo,mask_lo_hi,mask_lo_lo};
  wire  _T_34 = io_in_a_bits_opcode == 3'h6;
  wire  _T_60 = 3'h6 == io_in_a_bits_size;
  wire [31:0] _T_62 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_63 = {1'b0,$signed(_T_62)};
  wire [32:0] _T_65 = $signed(_T_63) & -33'sh10000000;
  wire  _T_66 = $signed(_T_65) == 33'sh0;
  wire [31:0] _T_67 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_68 = {1'b0,$signed(_T_67)};
  wire [32:0] _T_70 = $signed(_T_68) & -33'sh20000000;
  wire  _T_71 = $signed(_T_70) == 33'sh0;
  wire [31:0] _T_72 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_73 = {1'b0,$signed(_T_72)};
  wire [32:0] _T_75 = $signed(_T_73) & -33'sh40000000;
  wire  _T_76 = $signed(_T_75) == 33'sh0;
  wire [31:0] _T_77 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_78 = {1'b0,$signed(_T_77)};
  wire [32:0] _T_80 = $signed(_T_78) & -33'sh40000000;
  wire  _T_81 = $signed(_T_80) == 33'sh0;
  wire [31:0] _T_82 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_83 = {1'b0,$signed(_T_82)};
  wire [32:0] _T_85 = $signed(_T_83) & -33'sh20000000;
  wire  _T_86 = $signed(_T_85) == 33'sh0;
  wire  _T_90 = _T_66 | _T_71 | _T_76 | _T_81 | _T_86;
  wire  _T_91 = _T_60 & _T_90;
  wire  _T_93 = io_in_a_bits_size <= 3'h6;
  wire [31:0] _T_96 = io_in_a_bits_address ^ 32'h1000;
  wire [32:0] _T_97 = {1'b0,$signed(_T_96)};
  wire [32:0] _T_99 = $signed(_T_97) & -33'sh1000;
  wire  _T_100 = $signed(_T_99) == 33'sh0;
  wire  _T_101 = _T_93 & _T_100;
  wire  _T_104 = _T_91 | _T_101;
  wire  _T_105 = source_ok & _T_104;
  wire [32:0] _T_136 = $signed(_T_78) & -33'sh80000000;
  wire  _T_137 = $signed(_T_136) == 33'sh0;
  wire  _T_141 = _T_100 | _T_66 | _T_71 | _T_76 | _T_137;
  wire [3:0] _T_162 = ~io_in_a_bits_mask;
  wire  _T_163 = _T_162 == 4'h0;
  wire  _T_171 = io_in_a_bits_opcode == 3'h7;
  wire  _T_312 = io_in_a_bits_opcode == 3'h4;
  wire  _T_367 = _T_93 & _T_141;
  wire  _T_382 = io_in_a_bits_mask == mask;
  wire  _T_390 = io_in_a_bits_opcode == 3'h0;
  wire  _T_444 = source_ok & _T_367;
  wire  _T_462 = io_in_a_bits_opcode == 3'h1;
  wire [3:0] _T_530 = ~mask;
  wire [3:0] _T_531 = io_in_a_bits_mask & _T_530;
  wire  _T_532 = _T_531 == 4'h0;
  wire  _T_536 = io_in_a_bits_opcode == 3'h2;
  wire  _T_556 = io_in_a_bits_size <= 3'h3;
  wire  _T_581 = _T_66 | _T_71 | _T_76 | _T_137;
  wire  _T_582 = _T_556 & _T_581;
  wire  _T_594 = _T_582 | _T_101;
  wire  _T_595 = source_ok & _T_594;
  wire  _T_613 = io_in_a_bits_opcode == 3'h3;
  wire  _T_690 = io_in_a_bits_opcode == 3'h5;
  wire  _T_766 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_13 = ~io_in_d_bits_source[3];
  wire  source_ok_1 = _source_ok_T_13 | io_in_d_bits_source[3];
  wire  sink_ok = io_in_d_bits_sink < 6'h21;
  wire  _T_770 = io_in_d_bits_opcode == 3'h6;
  wire  _T_774 = io_in_d_bits_size >= 3'h2;
  wire  _T_778 = io_in_d_bits_param == 2'h0;
  wire  _T_782 = ~io_in_d_bits_corrupt;
  wire  _T_786 = ~io_in_d_bits_denied;
  wire  _T_790 = io_in_d_bits_opcode == 3'h4;
  wire  _T_801 = io_in_d_bits_param <= 2'h2;
  wire  _T_805 = io_in_d_bits_param != 2'h2;
  wire  _T_818 = io_in_d_bits_opcode == 3'h5;
  wire  _T_838 = _T_786 | io_in_d_bits_corrupt;
  wire  _T_847 = io_in_d_bits_opcode == 3'h0;
  wire  _T_864 = io_in_d_bits_opcode == 3'h1;
  wire  _T_882 = io_in_d_bits_opcode == 3'h2;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [3:0] a_first_beats1_decode = is_aligned_mask[5:2];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [3:0] a_first_counter;
  wire [3:0] a_first_counter1 = a_first_counter - 4'h1;
  wire  a_first = a_first_counter == 4'h0;
  reg [2:0] opcode;
  reg [2:0] size;
  reg [3:0] source;
  reg [31:0] address;
  wire  _T_912 = io_in_a_valid & ~a_first;
  wire  _T_913 = io_in_a_bits_opcode == opcode;
  wire  _T_921 = io_in_a_bits_size == size;
  wire  _T_925 = io_in_a_bits_source == source;
  wire  _T_929 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [3:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:2];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [3:0] d_first_counter;
  wire [3:0] d_first_counter1 = d_first_counter - 4'h1;
  wire  d_first = d_first_counter == 4'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [3:0] source_1;
  reg [5:0] sink;
  reg  denied;
  wire  _T_936 = io_in_d_valid & ~d_first;
  wire  _T_937 = io_in_d_bits_opcode == opcode_1;
  wire  _T_941 = io_in_d_bits_param == param_1;
  wire  _T_945 = io_in_d_bits_size == size_1;
  wire  _T_949 = io_in_d_bits_source == source_1;
  wire  _T_953 = io_in_d_bits_sink == sink;
  wire  _T_957 = io_in_d_bits_denied == denied;
  reg [15:0] inflight;
  reg [63:0] inflight_opcodes;
  reg [63:0] inflight_sizes;
  reg [3:0] a_first_counter_1;
  wire [3:0] a_first_counter1_1 = a_first_counter_1 - 4'h1;
  wire  a_first_1 = a_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_1;
  wire [3:0] d_first_counter1_1 = d_first_counter_1 - 4'h1;
  wire  d_first_1 = d_first_counter_1 == 4'h0;
  wire [5:0] _GEN_72 = {io_in_d_bits_source, 2'h0};
  wire [6:0] _a_opcode_lookup_T = {{1'd0}, _GEN_72};
  wire [63:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [63:0] _GEN_73 = {{48'd0}, _a_opcode_lookup_T_5};
  wire [63:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_73;
  wire [63:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[63:1]};
  wire [63:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [63:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_73;
  wire [63:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[63:1]};
  wire  _T_963 = io_in_a_valid & a_first_1;
  wire [15:0] _a_set_wo_ready_T = 16'h1 << io_in_a_bits_source;
  wire  _T_966 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [5:0] _GEN_78 = {io_in_a_bits_source, 2'h0};
  wire [6:0] _a_opcodes_set_T = {{1'd0}, _GEN_78};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_79 = {{127'd0}, a_opcodes_set_interm};
  wire [130:0] _a_opcodes_set_T_1 = _GEN_79 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_81 = {{127'd0}, a_sizes_set_interm};
  wire [130:0] _a_sizes_set_T_1 = _GEN_81 << _a_opcodes_set_T;
  wire [15:0] _T_968 = inflight >> io_in_a_bits_source;
  wire  _T_970 = ~_T_968[0];
  wire [15:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 16'h0;
  wire [130:0] _GEN_19 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 131'h0;
  wire [130:0] _GEN_20 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 131'h0;
  wire  _T_974 = io_in_d_valid & d_first_1;
  wire  _T_976 = ~_T_770;
  wire  _T_977 = io_in_d_valid & d_first_1 & ~_T_770;
  wire [15:0] _d_clr_wo_ready_T = 16'h1 << io_in_d_bits_source;
  wire [142:0] _GEN_83 = {{127'd0}, _a_opcode_lookup_T_5};
  wire [142:0] _d_opcodes_clr_T_5 = _GEN_83 << _a_opcode_lookup_T;
  wire [15:0] d_clr = _d_first_T & d_first_1 & _T_976 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_23 = _d_first_T & d_first_1 & _T_976 ? _d_opcodes_clr_T_5 : 143'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_963 & io_in_a_bits_source == io_in_d_bits_source;
  wire [15:0] _T_987 = inflight >> io_in_d_bits_source;
  wire  _T_989 = _T_987[0] | same_cycle_resp;
  wire [2:0] _GEN_27 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_28 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_27;
  wire [2:0] _GEN_29 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_28;
  wire [2:0] _GEN_30 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_29;
  wire [2:0] _GEN_31 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_30;
  wire [2:0] _GEN_32 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_31;
  wire [2:0] _GEN_39 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_30;
  wire [2:0] _GEN_40 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_39;
  wire  _T_994 = io_in_d_bits_opcode == _GEN_40;
  wire  _T_995 = io_in_d_bits_opcode == _GEN_32 | _T_994;
  wire  _T_999 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_43 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_44 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_43;
  wire [2:0] _GEN_45 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_44;
  wire [2:0] _GEN_46 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_45;
  wire [2:0] _GEN_47 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_46;
  wire [2:0] _GEN_48 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_47;
  wire [2:0] _GEN_55 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_46;
  wire [2:0] _GEN_56 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_55;
  wire  _T_1006 = io_in_d_bits_opcode == _GEN_56;
  wire  _T_1007 = io_in_d_bits_opcode == _GEN_48 | _T_1006;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_86 = {{1'd0}, io_in_d_bits_size};
  wire  _T_1011 = _GEN_86 == a_size_lookup;
  wire  _T_1021 = _T_974 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_976;
  wire  _T_1023 = ~io_in_d_ready | io_in_a_ready;
  wire [15:0] _inflight_T = inflight | a_set;
  wire [15:0] _inflight_T_1 = ~d_clr;
  wire [15:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [63:0] a_opcodes_set = _GEN_19[63:0];
  wire [63:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [63:0] d_opcodes_clr = _GEN_23[63:0];
  wire [63:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [63:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [63:0] a_sizes_set = _GEN_20[63:0];
  wire [63:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [63:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_1032 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [15:0] inflight_1;
  reg [63:0] inflight_sizes_1;
  reg [3:0] d_first_counter_2;
  wire [3:0] d_first_counter1_2 = d_first_counter_2 - 4'h1;
  wire  d_first_2 = d_first_counter_2 == 4'h0;
  wire [63:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [63:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_73;
  wire [63:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[63:1]};
  wire  _T_1058 = io_in_d_valid & d_first_2 & _T_770;
  wire [15:0] d_clr_1 = _d_first_T & d_first_2 & _T_770 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_68 = _d_first_T & d_first_2 & _T_770 ? _d_opcodes_clr_T_5 : 143'h0;
  wire [15:0] _T_1066 = inflight_1 >> io_in_d_bits_source;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_1076 = _GEN_86 == c_size_lookup;
  wire [15:0] _inflight_T_4 = ~d_clr_1;
  wire [15:0] _inflight_T_5 = inflight_1 & _inflight_T_4;
  wire [63:0] d_opcodes_clr_1 = _GEN_68[63:0];
  wire [63:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [63:0] _inflight_sizes_T_5 = inflight_sizes_1 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_1096 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 4'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 4'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      sink <= io_in_d_bits_sink;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      inflight <= 16'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 64'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 64'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 4'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 4'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 16'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 64'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      d_first_counter_2 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 4'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_105 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_105 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_163 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_163 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_105 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_105 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_163 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_163 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_367 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_367 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_444 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_444 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_444 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_444 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_532 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_532 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_595 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_595 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_595 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_595 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_444 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_444 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_766 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_766 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_774 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_774 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_786 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_786 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(sink_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(sink_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_774 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_774 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_801 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_801 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_805 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_805 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(sink_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(sink_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_774 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_774 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_801 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_801 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_805 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_805 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_838 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_838 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_838 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_838 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_913 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_913 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_921 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_921 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_925 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_925 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_929 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_929 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_937 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_937 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_941 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_941 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_945 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_945 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_949 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_949 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_953 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel sink changed with multibeat operation (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_953 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_957 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_957 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_966 & ~(_T_970 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_966 & ~(_T_970 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & ~(_T_989 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & ~(_T_989 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_995 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_995 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_999 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_999 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1007 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1007 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1011 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1011 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1021 & ~(_T_1023 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1021 & ~(_T_1023 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1032 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1032 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1058 & ~(_T_1066[0] | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1058 & ~(_T_1066[0] | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1058 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1058 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1096 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:102:43)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1096 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  size = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  source = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  address = _RAND_4[31:0];
  _RAND_5 = {1{`RANDOM}};
  d_first_counter = _RAND_5[3:0];
  _RAND_6 = {1{`RANDOM}};
  opcode_1 = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  param_1 = _RAND_7[1:0];
  _RAND_8 = {1{`RANDOM}};
  size_1 = _RAND_8[2:0];
  _RAND_9 = {1{`RANDOM}};
  source_1 = _RAND_9[3:0];
  _RAND_10 = {1{`RANDOM}};
  sink = _RAND_10[5:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  inflight = _RAND_12[15:0];
  _RAND_13 = {2{`RANDOM}};
  inflight_opcodes = _RAND_13[63:0];
  _RAND_14 = {2{`RANDOM}};
  inflight_sizes = _RAND_14[63:0];
  _RAND_15 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_15[3:0];
  _RAND_16 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_16[3:0];
  _RAND_17 = {1{`RANDOM}};
  watchdog = _RAND_17[31:0];
  _RAND_18 = {1{`RANDOM}};
  inflight_1 = _RAND_18[15:0];
  _RAND_19 = {2{`RANDOM}};
  inflight_sizes_1 = _RAND_19[63:0];
  _RAND_20 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_20[3:0];
  _RAND_21 = {1{`RANDOM}};
  watchdog_1 = _RAND_21[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLFIFOFixer(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_size,
  input  [3:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [3:0]  auto_in_a_bits_mask,
  input  [31:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [3:0]  auto_in_d_bits_source,
  output [5:0]  auto_in_d_bits_sink,
  output        auto_in_d_bits_denied,
  output [31:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [2:0]  auto_out_a_bits_size,
  output [3:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [3:0]  auto_out_a_bits_mask,
  output [31:0] auto_out_a_bits_data,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [3:0]  auto_out_d_bits_source,
  input  [5:0]  auto_out_d_bits_sink,
  input         auto_out_d_bits_denied,
  input  [31:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [31:0] _RAND_19;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [3:0] monitor_io_in_a_bits_source;
  wire [31:0] monitor_io_in_a_bits_address;
  wire [3:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [3:0] monitor_io_in_d_bits_source;
  wire [5:0] monitor_io_in_d_bits_sink;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire [32:0] _a_notFIFO_T_1 = {1'b0,$signed(auto_in_a_bits_address)};
  wire [31:0] _a_id_T = auto_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _a_id_T_1 = {1'b0,$signed(_a_id_T)};
  wire [32:0] _a_id_T_3 = $signed(_a_id_T_1) & 33'shf0000000;
  wire  _a_id_T_4 = $signed(_a_id_T_3) == 33'sh0;
  wire [31:0] _a_id_T_5 = auto_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _a_id_T_6 = {1'b0,$signed(_a_id_T_5)};
  wire [32:0] _a_id_T_8 = $signed(_a_id_T_6) & 33'she0000000;
  wire  _a_id_T_9 = $signed(_a_id_T_8) == 33'sh0;
  wire [31:0] _a_id_T_10 = auto_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _a_id_T_11 = {1'b0,$signed(_a_id_T_10)};
  wire [32:0] _a_id_T_13 = $signed(_a_id_T_11) & 33'shc0000000;
  wire  _a_id_T_14 = $signed(_a_id_T_13) == 33'sh0;
  wire [31:0] _a_id_T_15 = auto_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _a_id_T_16 = {1'b0,$signed(_a_id_T_15)};
  wire [32:0] _a_id_T_18 = $signed(_a_id_T_16) & 33'sh80000000;
  wire  _a_id_T_19 = $signed(_a_id_T_18) == 33'sh0;
  wire  _a_id_T_22 = _a_id_T_4 | _a_id_T_9 | _a_id_T_14 | _a_id_T_19;
  wire [32:0] _a_id_T_26 = $signed(_a_notFIFO_T_1) & 33'shf0000000;
  wire  _a_id_T_27 = $signed(_a_id_T_26) == 33'sh0;
  wire [1:0] _a_id_T_29 = _a_id_T_27 ? 2'h2 : 2'h0;
  wire [1:0] _GEN_70 = {{1'd0}, _a_id_T_22};
  wire [1:0] a_id = _GEN_70 | _a_id_T_29;
  wire  a_noDomain = a_id == 2'h0;
  wire  stalls_a_sel = ~auto_in_a_bits_source[3];
  reg [3:0] a_first_counter;
  wire  a_first = a_first_counter == 4'h0;
  reg  flight_0;
  reg  flight_1;
  reg  flight_2;
  reg  flight_3;
  reg  flight_4;
  reg  flight_5;
  reg  flight_6;
  reg  flight_7;
  reg [1:0] stalls_id;
  wire  stalls_0 = stalls_a_sel & a_first & (flight_0 | flight_1 | flight_2 | flight_3 | flight_4 | flight_5 | flight_6
     | flight_7) & (a_noDomain | stalls_id != a_id);
  reg  flight_8;
  reg  flight_9;
  reg  flight_10;
  reg  flight_11;
  reg  flight_12;
  reg  flight_13;
  reg  flight_14;
  reg  flight_15;
  reg [1:0] stalls_id_1;
  wire  stalls_1 = auto_in_a_bits_source[3] & a_first & (flight_8 | flight_9 | flight_10 | flight_11 | flight_12 |
    flight_13 | flight_14 | flight_15) & (a_noDomain | stalls_id_1 != a_id);
  wire  stall = stalls_0 | stalls_1;
  wire  _bundleIn_0_a_ready_T = ~stall;
  wire  bundleIn_0_a_ready = auto_out_a_ready & ~stall;
  wire  _a_first_T = bundleIn_0_a_ready & auto_in_a_valid;
  wire [12:0] _a_first_beats1_decode_T_1 = 13'h3f << auto_in_a_bits_size;
  wire [5:0] _a_first_beats1_decode_T_3 = ~_a_first_beats1_decode_T_1[5:0];
  wire [3:0] a_first_beats1_decode = _a_first_beats1_decode_T_3[5:2];
  wire  a_first_beats1_opdata = ~auto_in_a_bits_opcode[2];
  wire [3:0] a_first_counter1 = a_first_counter - 4'h1;
  wire  _d_first_T = auto_in_d_ready & auto_out_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << auto_out_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [3:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:2];
  wire  d_first_beats1_opdata = auto_out_d_bits_opcode[0];
  reg [3:0] d_first_counter;
  wire [3:0] d_first_counter1 = d_first_counter - 4'h1;
  wire  d_first_first = d_first_counter == 4'h0;
  wire  d_first = d_first_first & auto_out_d_bits_opcode != 3'h6;
  wire  _GEN_18 = a_first & _a_first_T ? 4'h0 == auto_in_a_bits_source | flight_0 : flight_0;
  wire  _GEN_19 = a_first & _a_first_T ? 4'h1 == auto_in_a_bits_source | flight_1 : flight_1;
  wire  _GEN_20 = a_first & _a_first_T ? 4'h2 == auto_in_a_bits_source | flight_2 : flight_2;
  wire  _GEN_21 = a_first & _a_first_T ? 4'h3 == auto_in_a_bits_source | flight_3 : flight_3;
  wire  _GEN_22 = a_first & _a_first_T ? 4'h4 == auto_in_a_bits_source | flight_4 : flight_4;
  wire  _GEN_23 = a_first & _a_first_T ? 4'h5 == auto_in_a_bits_source | flight_5 : flight_5;
  wire  _GEN_24 = a_first & _a_first_T ? 4'h6 == auto_in_a_bits_source | flight_6 : flight_6;
  wire  _GEN_25 = a_first & _a_first_T ? 4'h7 == auto_in_a_bits_source | flight_7 : flight_7;
  wire  _GEN_26 = a_first & _a_first_T ? 4'h8 == auto_in_a_bits_source | flight_8 : flight_8;
  wire  _GEN_27 = a_first & _a_first_T ? 4'h9 == auto_in_a_bits_source | flight_9 : flight_9;
  wire  _GEN_28 = a_first & _a_first_T ? 4'ha == auto_in_a_bits_source | flight_10 : flight_10;
  wire  _GEN_29 = a_first & _a_first_T ? 4'hb == auto_in_a_bits_source | flight_11 : flight_11;
  wire  _GEN_30 = a_first & _a_first_T ? 4'hc == auto_in_a_bits_source | flight_12 : flight_12;
  wire  _GEN_31 = a_first & _a_first_T ? 4'hd == auto_in_a_bits_source | flight_13 : flight_13;
  wire  _GEN_32 = a_first & _a_first_T ? 4'he == auto_in_a_bits_source | flight_14 : flight_14;
  wire  _GEN_33 = a_first & _a_first_T ? 4'hf == auto_in_a_bits_source | flight_15 : flight_15;
  wire  _stalls_id_T_1 = _a_first_T & stalls_a_sel;
  wire  _stalls_id_T_5 = _a_first_T & auto_in_a_bits_source[3];
  CHIPLINK_PREFIX_Chiplink_TLMonitor_8 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_sink(monitor_io_in_d_bits_sink),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt)
  );
  assign auto_in_a_ready = auto_out_a_ready & ~stall;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_sink = auto_out_d_bits_sink;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_out_a_valid = auto_in_a_valid & _bundleIn_0_a_ready_T;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = auto_in_d_ready;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = auto_out_a_ready & ~stall;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = auto_out_d_valid;
  assign monitor_io_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign monitor_io_in_d_bits_param = auto_out_d_bits_param;
  assign monitor_io_in_d_bits_size = auto_out_d_bits_size;
  assign monitor_io_in_d_bits_source = auto_out_d_bits_source;
  assign monitor_io_in_d_bits_sink = auto_out_d_bits_sink;
  assign monitor_io_in_d_bits_denied = auto_out_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 4'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (reset) begin
      flight_0 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'h0 == auto_out_d_bits_source) begin
        flight_0 <= 1'h0;
      end else begin
        flight_0 <= _GEN_18;
      end
    end else begin
      flight_0 <= _GEN_18;
    end
    if (reset) begin
      flight_1 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'h1 == auto_out_d_bits_source) begin
        flight_1 <= 1'h0;
      end else begin
        flight_1 <= _GEN_19;
      end
    end else begin
      flight_1 <= _GEN_19;
    end
    if (reset) begin
      flight_2 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'h2 == auto_out_d_bits_source) begin
        flight_2 <= 1'h0;
      end else begin
        flight_2 <= _GEN_20;
      end
    end else begin
      flight_2 <= _GEN_20;
    end
    if (reset) begin
      flight_3 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'h3 == auto_out_d_bits_source) begin
        flight_3 <= 1'h0;
      end else begin
        flight_3 <= _GEN_21;
      end
    end else begin
      flight_3 <= _GEN_21;
    end
    if (reset) begin
      flight_4 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'h4 == auto_out_d_bits_source) begin
        flight_4 <= 1'h0;
      end else begin
        flight_4 <= _GEN_22;
      end
    end else begin
      flight_4 <= _GEN_22;
    end
    if (reset) begin
      flight_5 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'h5 == auto_out_d_bits_source) begin
        flight_5 <= 1'h0;
      end else begin
        flight_5 <= _GEN_23;
      end
    end else begin
      flight_5 <= _GEN_23;
    end
    if (reset) begin
      flight_6 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'h6 == auto_out_d_bits_source) begin
        flight_6 <= 1'h0;
      end else begin
        flight_6 <= _GEN_24;
      end
    end else begin
      flight_6 <= _GEN_24;
    end
    if (reset) begin
      flight_7 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'h7 == auto_out_d_bits_source) begin
        flight_7 <= 1'h0;
      end else begin
        flight_7 <= _GEN_25;
      end
    end else begin
      flight_7 <= _GEN_25;
    end
    if (_stalls_id_T_1) begin
      stalls_id <= a_id;
    end
    if (reset) begin
      flight_8 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'h8 == auto_out_d_bits_source) begin
        flight_8 <= 1'h0;
      end else begin
        flight_8 <= _GEN_26;
      end
    end else begin
      flight_8 <= _GEN_26;
    end
    if (reset) begin
      flight_9 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'h9 == auto_out_d_bits_source) begin
        flight_9 <= 1'h0;
      end else begin
        flight_9 <= _GEN_27;
      end
    end else begin
      flight_9 <= _GEN_27;
    end
    if (reset) begin
      flight_10 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'ha == auto_out_d_bits_source) begin
        flight_10 <= 1'h0;
      end else begin
        flight_10 <= _GEN_28;
      end
    end else begin
      flight_10 <= _GEN_28;
    end
    if (reset) begin
      flight_11 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'hb == auto_out_d_bits_source) begin
        flight_11 <= 1'h0;
      end else begin
        flight_11 <= _GEN_29;
      end
    end else begin
      flight_11 <= _GEN_29;
    end
    if (reset) begin
      flight_12 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'hc == auto_out_d_bits_source) begin
        flight_12 <= 1'h0;
      end else begin
        flight_12 <= _GEN_30;
      end
    end else begin
      flight_12 <= _GEN_30;
    end
    if (reset) begin
      flight_13 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'hd == auto_out_d_bits_source) begin
        flight_13 <= 1'h0;
      end else begin
        flight_13 <= _GEN_31;
      end
    end else begin
      flight_13 <= _GEN_31;
    end
    if (reset) begin
      flight_14 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'he == auto_out_d_bits_source) begin
        flight_14 <= 1'h0;
      end else begin
        flight_14 <= _GEN_32;
      end
    end else begin
      flight_14 <= _GEN_32;
    end
    if (reset) begin
      flight_15 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (4'hf == auto_out_d_bits_source) begin
        flight_15 <= 1'h0;
      end else begin
        flight_15 <= _GEN_33;
      end
    end else begin
      flight_15 <= _GEN_33;
    end
    if (_stalls_id_T_5) begin
      stalls_id_1 <= a_id;
    end
    if (reset) begin
      d_first_counter <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 4'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  flight_0 = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  flight_1 = _RAND_2[0:0];
  _RAND_3 = {1{`RANDOM}};
  flight_2 = _RAND_3[0:0];
  _RAND_4 = {1{`RANDOM}};
  flight_3 = _RAND_4[0:0];
  _RAND_5 = {1{`RANDOM}};
  flight_4 = _RAND_5[0:0];
  _RAND_6 = {1{`RANDOM}};
  flight_5 = _RAND_6[0:0];
  _RAND_7 = {1{`RANDOM}};
  flight_6 = _RAND_7[0:0];
  _RAND_8 = {1{`RANDOM}};
  flight_7 = _RAND_8[0:0];
  _RAND_9 = {1{`RANDOM}};
  stalls_id = _RAND_9[1:0];
  _RAND_10 = {1{`RANDOM}};
  flight_8 = _RAND_10[0:0];
  _RAND_11 = {1{`RANDOM}};
  flight_9 = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  flight_10 = _RAND_12[0:0];
  _RAND_13 = {1{`RANDOM}};
  flight_11 = _RAND_13[0:0];
  _RAND_14 = {1{`RANDOM}};
  flight_12 = _RAND_14[0:0];
  _RAND_15 = {1{`RANDOM}};
  flight_13 = _RAND_15[0:0];
  _RAND_16 = {1{`RANDOM}};
  flight_14 = _RAND_16[0:0];
  _RAND_17 = {1{`RANDOM}};
  flight_15 = _RAND_17[0:0];
  _RAND_18 = {1{`RANDOM}};
  stalls_id_1 = _RAND_18[1:0];
  _RAND_19 = {1{`RANDOM}};
  d_first_counter = _RAND_19[3:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_9(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_size,
  input  [3:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [3:0]  io_in_d_bits_source,
  input  [5:0]  io_in_d_bits_sink,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [63:0] _RAND_13;
  reg [63:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [63:0] _RAND_19;
  reg [31:0] _RAND_20;
  reg [31:0] _RAND_21;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = ~io_in_a_bits_source[3];
  wire  source_ok = _source_ok_T_1 | io_in_a_bits_source[3];
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_71 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_71;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire [1:0] mask_sizeOH_shiftAmount = io_in_a_bits_size[1:0];
  wire [3:0] _mask_sizeOH_T_1 = 4'h1 << mask_sizeOH_shiftAmount;
  wire [2:0] mask_sizeOH = _mask_sizeOH_T_1[2:0] | 3'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h3;
  wire  mask_size = mask_sizeOH[2];
  wire  mask_bit = io_in_a_bits_address[2];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[1];
  wire  mask_bit_1 = io_in_a_bits_address[1];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire  mask_size_2 = mask_sizeOH[0];
  wire  mask_bit_2 = io_in_a_bits_address[0];
  wire  mask_nbit_2 = ~mask_bit_2;
  wire  mask_eq_6 = mask_eq_2 & mask_nbit_2;
  wire  mask_lo_lo_lo = mask_acc_2 | mask_size_2 & mask_eq_6;
  wire  mask_eq_7 = mask_eq_2 & mask_bit_2;
  wire  mask_lo_lo_hi = mask_acc_2 | mask_size_2 & mask_eq_7;
  wire  mask_eq_8 = mask_eq_3 & mask_nbit_2;
  wire  mask_lo_hi_lo = mask_acc_3 | mask_size_2 & mask_eq_8;
  wire  mask_eq_9 = mask_eq_3 & mask_bit_2;
  wire  mask_lo_hi_hi = mask_acc_3 | mask_size_2 & mask_eq_9;
  wire  mask_eq_10 = mask_eq_4 & mask_nbit_2;
  wire  mask_hi_lo_lo = mask_acc_4 | mask_size_2 & mask_eq_10;
  wire  mask_eq_11 = mask_eq_4 & mask_bit_2;
  wire  mask_hi_lo_hi = mask_acc_4 | mask_size_2 & mask_eq_11;
  wire  mask_eq_12 = mask_eq_5 & mask_nbit_2;
  wire  mask_hi_hi_lo = mask_acc_5 | mask_size_2 & mask_eq_12;
  wire  mask_eq_13 = mask_eq_5 & mask_bit_2;
  wire  mask_hi_hi_hi = mask_acc_5 | mask_size_2 & mask_eq_13;
  wire [7:0] mask = {mask_hi_hi_hi,mask_hi_hi_lo,mask_hi_lo_hi,mask_hi_lo_lo,mask_lo_hi_hi,mask_lo_hi_lo,mask_lo_lo_hi,
    mask_lo_lo_lo};
  wire  _T_34 = io_in_a_bits_opcode == 3'h6;
  wire  _T_60 = 3'h6 == io_in_a_bits_size;
  wire [31:0] _T_62 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_63 = {1'b0,$signed(_T_62)};
  wire [32:0] _T_65 = $signed(_T_63) & -33'sh10000000;
  wire  _T_66 = $signed(_T_65) == 33'sh0;
  wire [31:0] _T_67 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_68 = {1'b0,$signed(_T_67)};
  wire [32:0] _T_70 = $signed(_T_68) & -33'sh20000000;
  wire  _T_71 = $signed(_T_70) == 33'sh0;
  wire [31:0] _T_72 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_73 = {1'b0,$signed(_T_72)};
  wire [32:0] _T_75 = $signed(_T_73) & -33'sh40000000;
  wire  _T_76 = $signed(_T_75) == 33'sh0;
  wire [31:0] _T_77 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_78 = {1'b0,$signed(_T_77)};
  wire [32:0] _T_80 = $signed(_T_78) & -33'sh40000000;
  wire  _T_81 = $signed(_T_80) == 33'sh0;
  wire [31:0] _T_82 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_83 = {1'b0,$signed(_T_82)};
  wire [32:0] _T_85 = $signed(_T_83) & -33'sh20000000;
  wire  _T_86 = $signed(_T_85) == 33'sh0;
  wire  _T_90 = _T_66 | _T_71 | _T_76 | _T_81 | _T_86;
  wire  _T_91 = _T_60 & _T_90;
  wire  _T_93 = io_in_a_bits_size <= 3'h6;
  wire [31:0] _T_96 = io_in_a_bits_address ^ 32'h1000;
  wire [32:0] _T_97 = {1'b0,$signed(_T_96)};
  wire [32:0] _T_99 = $signed(_T_97) & -33'sh1000;
  wire  _T_100 = $signed(_T_99) == 33'sh0;
  wire  _T_101 = _T_93 & _T_100;
  wire  _T_104 = _T_91 | _T_101;
  wire  _T_105 = source_ok & _T_104;
  wire [32:0] _T_136 = $signed(_T_78) & -33'sh80000000;
  wire  _T_137 = $signed(_T_136) == 33'sh0;
  wire  _T_141 = _T_100 | _T_66 | _T_71 | _T_76 | _T_137;
  wire [7:0] _T_162 = ~io_in_a_bits_mask;
  wire  _T_163 = _T_162 == 8'h0;
  wire  _T_171 = io_in_a_bits_opcode == 3'h7;
  wire  _T_312 = io_in_a_bits_opcode == 3'h4;
  wire  _T_367 = _T_93 & _T_141;
  wire  _T_382 = io_in_a_bits_mask == mask;
  wire  _T_390 = io_in_a_bits_opcode == 3'h0;
  wire  _T_444 = source_ok & _T_367;
  wire  _T_462 = io_in_a_bits_opcode == 3'h1;
  wire [7:0] _T_530 = ~mask;
  wire [7:0] _T_531 = io_in_a_bits_mask & _T_530;
  wire  _T_532 = _T_531 == 8'h0;
  wire  _T_536 = io_in_a_bits_opcode == 3'h2;
  wire  _T_556 = io_in_a_bits_size <= 3'h3;
  wire  _T_581 = _T_66 | _T_71 | _T_76 | _T_137;
  wire  _T_582 = _T_556 & _T_581;
  wire  _T_594 = _T_582 | _T_101;
  wire  _T_595 = source_ok & _T_594;
  wire  _T_613 = io_in_a_bits_opcode == 3'h3;
  wire  _T_690 = io_in_a_bits_opcode == 3'h5;
  wire  _T_766 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_13 = ~io_in_d_bits_source[3];
  wire  source_ok_1 = _source_ok_T_13 | io_in_d_bits_source[3];
  wire  sink_ok = io_in_d_bits_sink < 6'h21;
  wire  _T_770 = io_in_d_bits_opcode == 3'h6;
  wire  _T_774 = io_in_d_bits_size >= 3'h3;
  wire  _T_778 = io_in_d_bits_param == 2'h0;
  wire  _T_782 = ~io_in_d_bits_corrupt;
  wire  _T_786 = ~io_in_d_bits_denied;
  wire  _T_790 = io_in_d_bits_opcode == 3'h4;
  wire  _T_801 = io_in_d_bits_param <= 2'h2;
  wire  _T_805 = io_in_d_bits_param != 2'h2;
  wire  _T_818 = io_in_d_bits_opcode == 3'h5;
  wire  _T_838 = _T_786 | io_in_d_bits_corrupt;
  wire  _T_847 = io_in_d_bits_opcode == 3'h0;
  wire  _T_864 = io_in_d_bits_opcode == 3'h1;
  wire  _T_882 = io_in_d_bits_opcode == 3'h2;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [2:0] a_first_beats1_decode = is_aligned_mask[5:3];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [2:0] a_first_counter;
  wire [2:0] a_first_counter1 = a_first_counter - 3'h1;
  wire  a_first = a_first_counter == 3'h0;
  reg [2:0] opcode;
  reg [2:0] size;
  reg [3:0] source;
  reg [31:0] address;
  wire  _T_912 = io_in_a_valid & ~a_first;
  wire  _T_913 = io_in_a_bits_opcode == opcode;
  wire  _T_921 = io_in_a_bits_size == size;
  wire  _T_925 = io_in_a_bits_source == source;
  wire  _T_929 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [2:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:3];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [2:0] d_first_counter;
  wire [2:0] d_first_counter1 = d_first_counter - 3'h1;
  wire  d_first = d_first_counter == 3'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [3:0] source_1;
  reg [5:0] sink;
  reg  denied;
  wire  _T_936 = io_in_d_valid & ~d_first;
  wire  _T_937 = io_in_d_bits_opcode == opcode_1;
  wire  _T_941 = io_in_d_bits_param == param_1;
  wire  _T_945 = io_in_d_bits_size == size_1;
  wire  _T_949 = io_in_d_bits_source == source_1;
  wire  _T_953 = io_in_d_bits_sink == sink;
  wire  _T_957 = io_in_d_bits_denied == denied;
  reg [15:0] inflight;
  reg [63:0] inflight_opcodes;
  reg [63:0] inflight_sizes;
  reg [2:0] a_first_counter_1;
  wire [2:0] a_first_counter1_1 = a_first_counter_1 - 3'h1;
  wire  a_first_1 = a_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_1;
  wire [2:0] d_first_counter1_1 = d_first_counter_1 - 3'h1;
  wire  d_first_1 = d_first_counter_1 == 3'h0;
  wire [5:0] _GEN_72 = {io_in_d_bits_source, 2'h0};
  wire [6:0] _a_opcode_lookup_T = {{1'd0}, _GEN_72};
  wire [63:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [63:0] _GEN_73 = {{48'd0}, _a_opcode_lookup_T_5};
  wire [63:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_73;
  wire [63:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[63:1]};
  wire [63:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [63:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_73;
  wire [63:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[63:1]};
  wire  _T_963 = io_in_a_valid & a_first_1;
  wire [15:0] _a_set_wo_ready_T = 16'h1 << io_in_a_bits_source;
  wire  _T_966 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [5:0] _GEN_78 = {io_in_a_bits_source, 2'h0};
  wire [6:0] _a_opcodes_set_T = {{1'd0}, _GEN_78};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_79 = {{127'd0}, a_opcodes_set_interm};
  wire [130:0] _a_opcodes_set_T_1 = _GEN_79 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [130:0] _GEN_81 = {{127'd0}, a_sizes_set_interm};
  wire [130:0] _a_sizes_set_T_1 = _GEN_81 << _a_opcodes_set_T;
  wire [15:0] _T_968 = inflight >> io_in_a_bits_source;
  wire  _T_970 = ~_T_968[0];
  wire [15:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 16'h0;
  wire [130:0] _GEN_19 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 131'h0;
  wire [130:0] _GEN_20 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 131'h0;
  wire  _T_974 = io_in_d_valid & d_first_1;
  wire  _T_976 = ~_T_770;
  wire  _T_977 = io_in_d_valid & d_first_1 & ~_T_770;
  wire [15:0] _d_clr_wo_ready_T = 16'h1 << io_in_d_bits_source;
  wire [142:0] _GEN_83 = {{127'd0}, _a_opcode_lookup_T_5};
  wire [142:0] _d_opcodes_clr_T_5 = _GEN_83 << _a_opcode_lookup_T;
  wire [15:0] d_clr = _d_first_T & d_first_1 & _T_976 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_23 = _d_first_T & d_first_1 & _T_976 ? _d_opcodes_clr_T_5 : 143'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_963 & io_in_a_bits_source == io_in_d_bits_source;
  wire [15:0] _T_987 = inflight >> io_in_d_bits_source;
  wire  _T_989 = _T_987[0] | same_cycle_resp;
  wire [2:0] _GEN_27 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_28 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_27;
  wire [2:0] _GEN_29 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_28;
  wire [2:0] _GEN_30 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_29;
  wire [2:0] _GEN_31 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_30;
  wire [2:0] _GEN_32 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_31;
  wire [2:0] _GEN_39 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_30;
  wire [2:0] _GEN_40 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_39;
  wire  _T_994 = io_in_d_bits_opcode == _GEN_40;
  wire  _T_995 = io_in_d_bits_opcode == _GEN_32 | _T_994;
  wire  _T_999 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_43 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_44 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_43;
  wire [2:0] _GEN_45 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_44;
  wire [2:0] _GEN_46 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_45;
  wire [2:0] _GEN_47 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_46;
  wire [2:0] _GEN_48 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_47;
  wire [2:0] _GEN_55 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_46;
  wire [2:0] _GEN_56 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_55;
  wire  _T_1006 = io_in_d_bits_opcode == _GEN_56;
  wire  _T_1007 = io_in_d_bits_opcode == _GEN_48 | _T_1006;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_86 = {{1'd0}, io_in_d_bits_size};
  wire  _T_1011 = _GEN_86 == a_size_lookup;
  wire  _T_1021 = _T_974 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_976;
  wire  _T_1023 = ~io_in_d_ready | io_in_a_ready;
  wire [15:0] _inflight_T = inflight | a_set;
  wire [15:0] _inflight_T_1 = ~d_clr;
  wire [15:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [63:0] a_opcodes_set = _GEN_19[63:0];
  wire [63:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [63:0] d_opcodes_clr = _GEN_23[63:0];
  wire [63:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [63:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [63:0] a_sizes_set = _GEN_20[63:0];
  wire [63:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [63:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_1032 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [15:0] inflight_1;
  reg [63:0] inflight_sizes_1;
  reg [2:0] d_first_counter_2;
  wire [2:0] d_first_counter1_2 = d_first_counter_2 - 3'h1;
  wire  d_first_2 = d_first_counter_2 == 3'h0;
  wire [63:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [63:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_73;
  wire [63:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[63:1]};
  wire  _T_1058 = io_in_d_valid & d_first_2 & _T_770;
  wire [15:0] d_clr_1 = _d_first_T & d_first_2 & _T_770 ? _d_clr_wo_ready_T : 16'h0;
  wire [142:0] _GEN_68 = _d_first_T & d_first_2 & _T_770 ? _d_opcodes_clr_T_5 : 143'h0;
  wire [15:0] _T_1066 = inflight_1 >> io_in_d_bits_source;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_1076 = _GEN_86 == c_size_lookup;
  wire [15:0] _inflight_T_4 = ~d_clr_1;
  wire [15:0] _inflight_T_5 = inflight_1 & _inflight_T_4;
  wire [63:0] d_opcodes_clr_1 = _GEN_68[63:0];
  wire [63:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [63:0] _inflight_sizes_T_5 = inflight_sizes_1 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_1096 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 3'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 3'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      sink <= io_in_d_bits_sink;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      inflight <= 16'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 64'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 64'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 3'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 3'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 16'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 64'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      d_first_counter_2 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 3'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_105 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_105 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_163 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_34 & ~(_T_163 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_105 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_105 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_163 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_171 & ~(_T_163 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_367 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_367 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_312 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_444 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_444 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_390 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_444 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_444 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_532 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_462 & ~(_T_532 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_595 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_595 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_536 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_595 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_595 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_613 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_444 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_444 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_382 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_690 & ~(_T_382 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_766 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_766 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_774 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_774 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_786 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_770 & ~(_T_786 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(sink_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(sink_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_774 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_774 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_801 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_801 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_805 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_805 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_790 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(sink_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(sink_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_774 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_774 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_801 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_801 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_805 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_805 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_838 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_818 & ~(_T_838 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_847 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_838 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_864 & ~(_T_838 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_778 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_778 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_782 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_882 & ~(_T_782 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_913 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_913 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_921 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_921 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_925 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_925 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_912 & ~(_T_929 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_912 & ~(_T_929 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_937 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_937 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_941 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_941 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_945 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_945 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_949 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_949 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_953 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel sink changed with multibeat operation (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_953 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_936 & ~(_T_957 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_936 & ~(_T_957 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_966 & ~(_T_970 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_966 & ~(_T_970 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & ~(_T_989 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & ~(_T_989 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_995 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_995 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_999 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & same_cycle_resp & ~(_T_999 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1007 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1007 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1011 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_977 & ~same_cycle_resp & ~(_T_1011 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1021 & ~(_T_1023 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1021 & ~(_T_1023 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1032 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1032 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1058 & ~(_T_1066[0] | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1058 & ~(_T_1066[0] | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1058 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1058 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1096 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:103:7)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1096 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  size = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  source = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  address = _RAND_4[31:0];
  _RAND_5 = {1{`RANDOM}};
  d_first_counter = _RAND_5[2:0];
  _RAND_6 = {1{`RANDOM}};
  opcode_1 = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  param_1 = _RAND_7[1:0];
  _RAND_8 = {1{`RANDOM}};
  size_1 = _RAND_8[2:0];
  _RAND_9 = {1{`RANDOM}};
  source_1 = _RAND_9[3:0];
  _RAND_10 = {1{`RANDOM}};
  sink = _RAND_10[5:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  inflight = _RAND_12[15:0];
  _RAND_13 = {2{`RANDOM}};
  inflight_opcodes = _RAND_13[63:0];
  _RAND_14 = {2{`RANDOM}};
  inflight_sizes = _RAND_14[63:0];
  _RAND_15 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_15[2:0];
  _RAND_16 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_16[2:0];
  _RAND_17 = {1{`RANDOM}};
  watchdog = _RAND_17[31:0];
  _RAND_18 = {1{`RANDOM}};
  inflight_1 = _RAND_18[15:0];
  _RAND_19 = {2{`RANDOM}};
  inflight_sizes_1 = _RAND_19[63:0];
  _RAND_20 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_20[2:0];
  _RAND_21 = {1{`RANDOM}};
  watchdog_1 = _RAND_21[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Repeater(
  input         clock,
  input         reset,
  input         io_repeat,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [2:0]  io_enq_bits_size,
  input  [3:0]  io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [2:0]  io_deq_bits_size,
  output [3:0]  io_deq_bits_source,
  output [31:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [63:0] _RAND_6;
`endif // RANDOMIZE_REG_INIT
  reg  full;
  reg [2:0] saved_opcode;
  reg [2:0] saved_size;
  reg [3:0] saved_source;
  reg [31:0] saved_address;
  reg [7:0] saved_mask;
  reg [63:0] saved_data;
  wire  _T = io_enq_ready & io_enq_valid;
  wire  _GEN_0 = _T & io_repeat | full;
  wire  _T_2 = io_deq_ready & io_deq_valid;
  assign io_enq_ready = io_deq_ready & ~full;
  assign io_deq_valid = io_enq_valid | full;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
  assign io_deq_bits_data = full ? saved_data : io_enq_bits_data;
  always @(posedge clock) begin
    if (reset) begin
      full <= 1'h0;
    end else if (_T_2 & ~io_repeat) begin
      full <= 1'h0;
    end else begin
      full <= _GEN_0;
    end
    if (_T & io_repeat) begin
      saved_opcode <= io_enq_bits_opcode;
    end
    if (_T & io_repeat) begin
      saved_size <= io_enq_bits_size;
    end
    if (_T & io_repeat) begin
      saved_source <= io_enq_bits_source;
    end
    if (_T & io_repeat) begin
      saved_address <= io_enq_bits_address;
    end
    if (_T & io_repeat) begin
      saved_mask <= io_enq_bits_mask;
    end
    if (_T & io_repeat) begin
      saved_data <= io_enq_bits_data;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  full = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  saved_opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  saved_size = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  saved_source = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  saved_address = _RAND_4[31:0];
  _RAND_5 = {1{`RANDOM}};
  saved_mask = _RAND_5[7:0];
  _RAND_6 = {2{`RANDOM}};
  saved_data = _RAND_6[63:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLWidthWidget(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_size,
  input  [3:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [2:0]  auto_in_d_bits_size,
  output [3:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [2:0]  auto_out_a_bits_size,
  output [3:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [3:0]  auto_out_a_bits_mask,
  output [31:0] auto_out_a_bits_data,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [3:0]  auto_out_d_bits_source,
  input  [5:0]  auto_out_d_bits_sink,
  input         auto_out_d_bits_denied,
  input  [31:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [3:0] monitor_io_in_a_bits_source;
  wire [31:0] monitor_io_in_a_bits_address;
  wire [7:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [3:0] monitor_io_in_d_bits_source;
  wire [5:0] monitor_io_in_d_bits_sink;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  repeated_repeater_clock;
  wire  repeated_repeater_reset;
  wire  repeated_repeater_io_repeat;
  wire  repeated_repeater_io_enq_ready;
  wire  repeated_repeater_io_enq_valid;
  wire [2:0] repeated_repeater_io_enq_bits_opcode;
  wire [2:0] repeated_repeater_io_enq_bits_size;
  wire [3:0] repeated_repeater_io_enq_bits_source;
  wire [31:0] repeated_repeater_io_enq_bits_address;
  wire [7:0] repeated_repeater_io_enq_bits_mask;
  wire [63:0] repeated_repeater_io_enq_bits_data;
  wire  repeated_repeater_io_deq_ready;
  wire  repeated_repeater_io_deq_valid;
  wire [2:0] repeated_repeater_io_deq_bits_opcode;
  wire [2:0] repeated_repeater_io_deq_bits_size;
  wire [3:0] repeated_repeater_io_deq_bits_source;
  wire [31:0] repeated_repeater_io_deq_bits_address;
  wire [7:0] repeated_repeater_io_deq_bits_mask;
  wire [63:0] repeated_repeater_io_deq_bits_data;
  wire [31:0] cated_bits_data_hi = repeated_repeater_io_deq_bits_data[63:32];
  wire [31:0] cated_bits_data_lo = auto_in_a_bits_data[31:0];
  wire [63:0] cated_bits_data = {cated_bits_data_hi,cated_bits_data_lo};
  wire [2:0] cated_bits_opcode = repeated_repeater_io_deq_bits_opcode;
  wire  repeat_hasData = ~cated_bits_opcode[2];
  wire [2:0] cated_bits_size = repeated_repeater_io_deq_bits_size;
  wire [9:0] _repeat_limit_T_1 = 10'h7 << cated_bits_size;
  wire [2:0] _repeat_limit_T_3 = ~_repeat_limit_T_1[2:0];
  wire  repeat_limit = _repeat_limit_T_3[2];
  reg  repeat_count;
  wire  repeat_last = repeat_count == repeat_limit | ~repeat_hasData;
  wire  cated_valid = repeated_repeater_io_deq_valid;
  wire  _repeat_T = auto_out_a_ready & cated_valid;
  wire [31:0] cated_bits_address = repeated_repeater_io_deq_bits_address;
  wire  repeat_sel = cated_bits_address[2];
  wire  repeat_index = repeat_sel | repeat_count;
  wire [31:0] repeat_bundleOut_0_a_bits_data_mux_0 = cated_bits_data[31:0];
  wire [31:0] repeat_bundleOut_0_a_bits_data_mux_1 = cated_bits_data[63:32];
  wire [7:0] cated_bits_mask = repeated_repeater_io_deq_bits_mask;
  wire [3:0] repeat_bundleOut_0_a_bits_mask_mux_0 = cated_bits_mask[3:0];
  wire [3:0] repeat_bundleOut_0_a_bits_mask_mux_1 = cated_bits_mask[7:4];
  wire  hasData = auto_out_d_bits_opcode[0];
  wire [9:0] _limit_T_1 = 10'h7 << auto_out_d_bits_size;
  wire [2:0] _limit_T_3 = ~_limit_T_1[2:0];
  wire  limit = _limit_T_3[2];
  reg  count;
  wire  last = count == limit | ~hasData;
  wire  enable_0 = ~(|(count & limit));
  reg  corrupt_reg;
  wire  corrupt_out = auto_out_d_bits_corrupt | corrupt_reg;
  wire  _bundleOut_0_d_ready_T = ~last;
  wire  bundleOut_0_d_ready = auto_in_d_ready | ~last;
  wire  _T = bundleOut_0_d_ready & auto_out_d_valid;
  reg  bundleIn_0_d_bits_data_rdata_written_once;
  wire  bundleIn_0_d_bits_data_masked_enable_0 = enable_0 | ~bundleIn_0_d_bits_data_rdata_written_once;
  reg [31:0] bundleIn_0_d_bits_data_rdata_0;
  wire [31:0] bundleIn_0_d_bits_data_lo = bundleIn_0_d_bits_data_masked_enable_0 ? auto_out_d_bits_data :
    bundleIn_0_d_bits_data_rdata_0;
  wire  _GEN_10 = _T & _bundleOut_0_d_ready_T | bundleIn_0_d_bits_data_rdata_written_once;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_9 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_sink(monitor_io_in_d_bits_sink),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt)
  );
  CHIPLINK_PREFIX_Repeater repeated_repeater (
    .clock(repeated_repeater_clock),
    .reset(repeated_repeater_reset),
    .io_repeat(repeated_repeater_io_repeat),
    .io_enq_ready(repeated_repeater_io_enq_ready),
    .io_enq_valid(repeated_repeater_io_enq_valid),
    .io_enq_bits_opcode(repeated_repeater_io_enq_bits_opcode),
    .io_enq_bits_size(repeated_repeater_io_enq_bits_size),
    .io_enq_bits_source(repeated_repeater_io_enq_bits_source),
    .io_enq_bits_address(repeated_repeater_io_enq_bits_address),
    .io_enq_bits_mask(repeated_repeater_io_enq_bits_mask),
    .io_enq_bits_data(repeated_repeater_io_enq_bits_data),
    .io_deq_ready(repeated_repeater_io_deq_ready),
    .io_deq_valid(repeated_repeater_io_deq_valid),
    .io_deq_bits_opcode(repeated_repeater_io_deq_bits_opcode),
    .io_deq_bits_size(repeated_repeater_io_deq_bits_size),
    .io_deq_bits_source(repeated_repeater_io_deq_bits_source),
    .io_deq_bits_address(repeated_repeater_io_deq_bits_address),
    .io_deq_bits_mask(repeated_repeater_io_deq_bits_mask),
    .io_deq_bits_data(repeated_repeater_io_deq_bits_data)
  );
  assign auto_in_a_ready = repeated_repeater_io_enq_ready;
  assign auto_in_d_valid = auto_out_d_valid & last;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = {auto_out_d_bits_data,bundleIn_0_d_bits_data_lo};
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt | corrupt_reg;
  assign auto_out_a_valid = repeated_repeater_io_deq_valid;
  assign auto_out_a_bits_opcode = repeated_repeater_io_deq_bits_opcode;
  assign auto_out_a_bits_size = repeated_repeater_io_deq_bits_size;
  assign auto_out_a_bits_source = repeated_repeater_io_deq_bits_source;
  assign auto_out_a_bits_address = repeated_repeater_io_deq_bits_address;
  assign auto_out_a_bits_mask = repeat_index ? repeat_bundleOut_0_a_bits_mask_mux_1 :
    repeat_bundleOut_0_a_bits_mask_mux_0;
  assign auto_out_a_bits_data = repeat_index ? repeat_bundleOut_0_a_bits_data_mux_1 :
    repeat_bundleOut_0_a_bits_data_mux_0;
  assign auto_out_d_ready = auto_in_d_ready | ~last;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = repeated_repeater_io_enq_ready;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = auto_out_d_valid & last;
  assign monitor_io_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign monitor_io_in_d_bits_param = auto_out_d_bits_param;
  assign monitor_io_in_d_bits_size = auto_out_d_bits_size;
  assign monitor_io_in_d_bits_source = auto_out_d_bits_source;
  assign monitor_io_in_d_bits_sink = auto_out_d_bits_sink;
  assign monitor_io_in_d_bits_denied = auto_out_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = auto_out_d_bits_corrupt | corrupt_reg;
  assign repeated_repeater_clock = clock;
  assign repeated_repeater_reset = reset;
  assign repeated_repeater_io_repeat = ~repeat_last;
  assign repeated_repeater_io_enq_valid = auto_in_a_valid;
  assign repeated_repeater_io_enq_bits_opcode = auto_in_a_bits_opcode;
  assign repeated_repeater_io_enq_bits_size = auto_in_a_bits_size;
  assign repeated_repeater_io_enq_bits_source = auto_in_a_bits_source;
  assign repeated_repeater_io_enq_bits_address = auto_in_a_bits_address;
  assign repeated_repeater_io_enq_bits_mask = auto_in_a_bits_mask;
  assign repeated_repeater_io_enq_bits_data = auto_in_a_bits_data;
  assign repeated_repeater_io_deq_ready = auto_out_a_ready;
  always @(posedge clock) begin
    if (reset) begin
      repeat_count <= 1'h0;
    end else if (_repeat_T) begin
      if (repeat_last) begin
        repeat_count <= 1'h0;
      end else begin
        repeat_count <= repeat_count + 1'h1;
      end
    end
    if (reset) begin
      count <= 1'h0;
    end else if (_T) begin
      if (last) begin
        count <= 1'h0;
      end else begin
        count <= count + 1'h1;
      end
    end
    if (reset) begin
      corrupt_reg <= 1'h0;
    end else if (_T) begin
      if (last) begin
        corrupt_reg <= 1'h0;
      end else begin
        corrupt_reg <= corrupt_out;
      end
    end
    if (reset) begin
      bundleIn_0_d_bits_data_rdata_written_once <= 1'h0;
    end else begin
      bundleIn_0_d_bits_data_rdata_written_once <= _GEN_10;
    end
    if (_T & _bundleOut_0_d_ready_T) begin
      if (bundleIn_0_d_bits_data_masked_enable_0) begin
        bundleIn_0_d_bits_data_rdata_0 <= auto_out_d_bits_data;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  repeat_count = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  count = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  corrupt_reg = _RAND_2[0:0];
  _RAND_3 = {1{`RANDOM}};
  bundleIn_0_d_bits_data_rdata_written_once = _RAND_3[0:0];
  _RAND_4 = {1{`RANDOM}};
  bundleIn_0_d_bits_data_rdata_0 = _RAND_4[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Queue_11(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input         io_enq_bits_id,
  input  [63:0] io_enq_bits_data,
  input  [1:0]  io_enq_bits_resp,
  input         io_enq_bits_last,
  input         io_deq_ready,
  output        io_deq_valid,
  output        io_deq_bits_id,
  output [63:0] io_deq_bits_data,
  output [1:0]  io_deq_bits_resp,
  output        io_deq_bits_last
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [63:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_4;
`endif // RANDOMIZE_REG_INIT
  reg  ram_id [0:0];
  wire  ram_id_io_deq_bits_MPORT_data;
  wire  ram_id_io_deq_bits_MPORT_addr;
  wire  ram_id_MPORT_data;
  wire  ram_id_MPORT_addr;
  wire  ram_id_MPORT_mask;
  wire  ram_id_MPORT_en;
  reg [63:0] ram_data [0:0];
  wire [63:0] ram_data_io_deq_bits_MPORT_data;
  wire  ram_data_io_deq_bits_MPORT_addr;
  wire [63:0] ram_data_MPORT_data;
  wire  ram_data_MPORT_addr;
  wire  ram_data_MPORT_mask;
  wire  ram_data_MPORT_en;
  reg [1:0] ram_resp [0:0];
  wire [1:0] ram_resp_io_deq_bits_MPORT_data;
  wire  ram_resp_io_deq_bits_MPORT_addr;
  wire [1:0] ram_resp_MPORT_data;
  wire  ram_resp_MPORT_addr;
  wire  ram_resp_MPORT_mask;
  wire  ram_resp_MPORT_en;
  reg  ram_last [0:0];
  wire  ram_last_io_deq_bits_MPORT_data;
  wire  ram_last_io_deq_bits_MPORT_addr;
  wire  ram_last_MPORT_data;
  wire  ram_last_MPORT_addr;
  wire  ram_last_MPORT_mask;
  wire  ram_last_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  _do_enq_T = io_enq_ready & io_enq_valid;
  wire  _do_deq_T = io_deq_ready & io_deq_valid;
  wire  _GEN_10 = io_deq_ready ? 1'h0 : _do_enq_T;
  wire  do_enq = empty ? _GEN_10 : _do_enq_T;
  wire  do_deq = empty ? 1'h0 : _do_deq_T;
  assign ram_id_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_id_io_deq_bits_MPORT_data = ram_id[ram_id_io_deq_bits_MPORT_addr];
  assign ram_id_MPORT_data = io_enq_bits_id;
  assign ram_id_MPORT_addr = 1'h0;
  assign ram_id_MPORT_mask = 1'h1;
  assign ram_id_MPORT_en = empty ? _GEN_10 : _do_enq_T;
  assign ram_data_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_data_io_deq_bits_MPORT_data = ram_data[ram_data_io_deq_bits_MPORT_addr];
  assign ram_data_MPORT_data = io_enq_bits_data;
  assign ram_data_MPORT_addr = 1'h0;
  assign ram_data_MPORT_mask = 1'h1;
  assign ram_data_MPORT_en = empty ? _GEN_10 : _do_enq_T;
  assign ram_resp_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_resp_io_deq_bits_MPORT_data = ram_resp[ram_resp_io_deq_bits_MPORT_addr];
  assign ram_resp_MPORT_data = io_enq_bits_resp;
  assign ram_resp_MPORT_addr = 1'h0;
  assign ram_resp_MPORT_mask = 1'h1;
  assign ram_resp_MPORT_en = empty ? _GEN_10 : _do_enq_T;
  assign ram_last_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_last_io_deq_bits_MPORT_data = ram_last[ram_last_io_deq_bits_MPORT_addr];
  assign ram_last_MPORT_data = io_enq_bits_last;
  assign ram_last_MPORT_addr = 1'h0;
  assign ram_last_MPORT_mask = 1'h1;
  assign ram_last_MPORT_en = empty ? _GEN_10 : _do_enq_T;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = io_enq_valid | ~empty;
  assign io_deq_bits_id = empty ? io_enq_bits_id : ram_id_io_deq_bits_MPORT_data;
  assign io_deq_bits_data = empty ? io_enq_bits_data : ram_data_io_deq_bits_MPORT_data;
  assign io_deq_bits_resp = empty ? io_enq_bits_resp : ram_resp_io_deq_bits_MPORT_data;
  assign io_deq_bits_last = empty ? io_enq_bits_last : ram_last_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_id_MPORT_en & ram_id_MPORT_mask) begin
      ram_id[ram_id_MPORT_addr] <= ram_id_MPORT_data;
    end
    if(ram_data_MPORT_en & ram_data_MPORT_mask) begin
      ram_data[ram_data_MPORT_addr] <= ram_data_MPORT_data;
    end
    if(ram_resp_MPORT_en & ram_resp_MPORT_mask) begin
      ram_resp[ram_resp_MPORT_addr] <= ram_resp_MPORT_data;
    end
    if(ram_last_MPORT_en & ram_last_MPORT_mask) begin
      ram_last[ram_last_MPORT_addr] <= ram_last_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      if (empty) begin
        if (io_deq_ready) begin
          maybe_full <= 1'h0;
        end else begin
          maybe_full <= _do_enq_T;
        end
      end else begin
        maybe_full <= _do_enq_T;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_id[initvar] = _RAND_0[0:0];
  _RAND_1 = {2{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_data[initvar] = _RAND_1[63:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_resp[initvar] = _RAND_2[1:0];
  _RAND_3 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_last[initvar] = _RAND_3[0:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_4 = {1{`RANDOM}};
  maybe_full = _RAND_4[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Queue_12(
  input        clock,
  input        reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input        io_enq_bits_id,
  input  [1:0] io_enq_bits_resp,
  input        io_deq_ready,
  output       io_deq_valid,
  output       io_deq_bits_id,
  output [1:0] io_deq_bits_resp
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_REG_INIT
  reg  ram_id [0:0];
  wire  ram_id_io_deq_bits_MPORT_data;
  wire  ram_id_io_deq_bits_MPORT_addr;
  wire  ram_id_MPORT_data;
  wire  ram_id_MPORT_addr;
  wire  ram_id_MPORT_mask;
  wire  ram_id_MPORT_en;
  reg [1:0] ram_resp [0:0];
  wire [1:0] ram_resp_io_deq_bits_MPORT_data;
  wire  ram_resp_io_deq_bits_MPORT_addr;
  wire [1:0] ram_resp_MPORT_data;
  wire  ram_resp_MPORT_addr;
  wire  ram_resp_MPORT_mask;
  wire  ram_resp_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  _do_enq_T = io_enq_ready & io_enq_valid;
  wire  _do_deq_T = io_deq_ready & io_deq_valid;
  wire  _GEN_8 = io_deq_ready ? 1'h0 : _do_enq_T;
  wire  do_enq = empty ? _GEN_8 : _do_enq_T;
  wire  do_deq = empty ? 1'h0 : _do_deq_T;
  assign ram_id_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_id_io_deq_bits_MPORT_data = ram_id[ram_id_io_deq_bits_MPORT_addr];
  assign ram_id_MPORT_data = io_enq_bits_id;
  assign ram_id_MPORT_addr = 1'h0;
  assign ram_id_MPORT_mask = 1'h1;
  assign ram_id_MPORT_en = empty ? _GEN_8 : _do_enq_T;
  assign ram_resp_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_resp_io_deq_bits_MPORT_data = ram_resp[ram_resp_io_deq_bits_MPORT_addr];
  assign ram_resp_MPORT_data = io_enq_bits_resp;
  assign ram_resp_MPORT_addr = 1'h0;
  assign ram_resp_MPORT_mask = 1'h1;
  assign ram_resp_MPORT_en = empty ? _GEN_8 : _do_enq_T;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = io_enq_valid | ~empty;
  assign io_deq_bits_id = empty ? io_enq_bits_id : ram_id_io_deq_bits_MPORT_data;
  assign io_deq_bits_resp = empty ? io_enq_bits_resp : ram_resp_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_id_MPORT_en & ram_id_MPORT_mask) begin
      ram_id[ram_id_MPORT_addr] <= ram_id_MPORT_data;
    end
    if(ram_resp_MPORT_en & ram_resp_MPORT_mask) begin
      ram_resp[ram_resp_MPORT_addr] <= ram_resp_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      if (empty) begin
        if (io_deq_ready) begin
          maybe_full <= 1'h0;
        end else begin
          maybe_full <= _do_enq_T;
        end
      end else begin
        maybe_full <= _do_enq_T;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_id[initvar] = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_resp[initvar] = _RAND_1[1:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_2 = {1{`RANDOM}};
  maybe_full = _RAND_2[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_AXI4ToTL(
  input         clock,
  input         reset,
  output        auto_in_awready,
  input         auto_in_awvalid,
  input         auto_in_awid,
  input  [31:0] auto_in_awaddr,
  input  [7:0]  auto_in_awlen,
  input  [2:0]  auto_in_awsize,
  output        auto_in_wready,
  input         auto_in_wvalid,
  input  [63:0] auto_in_wdata,
  input  [7:0]  auto_in_wstrb,
  input         auto_in_wlast,
  input         auto_in_bready,
  output        auto_in_bvalid,
  output        auto_in_bid,
  output [1:0]  auto_in_bresp,
  output        auto_in_arready,
  input         auto_in_arvalid,
  input         auto_in_arid,
  input  [31:0] auto_in_araddr,
  input  [7:0]  auto_in_arlen,
  input  [2:0]  auto_in_arsize,
  input         auto_in_rready,
  output        auto_in_rvalid,
  output        auto_in_rid,
  output [63:0] auto_in_rdata,
  output [1:0]  auto_in_rresp,
  output        auto_in_rlast,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [2:0]  auto_out_a_bits_size,
  output [3:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [2:0]  auto_out_d_bits_size,
  input  [3:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
`endif // RANDOMIZE_REG_INIT
  wire  deq_clock;
  wire  deq_reset;
  wire  deq_io_enq_ready;
  wire  deq_io_enq_valid;
  wire  deq_io_enq_bits_id;
  wire [63:0] deq_io_enq_bits_data;
  wire [1:0] deq_io_enq_bits_resp;
  wire  deq_io_enq_bits_last;
  wire  deq_io_deq_ready;
  wire  deq_io_deq_valid;
  wire  deq_io_deq_bits_id;
  wire [63:0] deq_io_deq_bits_data;
  wire [1:0] deq_io_deq_bits_resp;
  wire  deq_io_deq_bits_last;
  wire  q_bdeq_clock;
  wire  q_bdeq_reset;
  wire  q_bdeq_io_enq_ready;
  wire  q_bdeq_io_enq_valid;
  wire  q_bdeq_io_enq_bits_id;
  wire [1:0] q_bdeq_io_enq_bits_resp;
  wire  q_bdeq_io_deq_ready;
  wire  q_bdeq_io_deq_valid;
  wire  q_bdeq_io_deq_bits_id;
  wire [1:0] q_bdeq_io_deq_bits_resp;
  wire [15:0] _rsize1_T = {auto_in_arlen,8'hff};
  wire [22:0] _GEN_16 = {{7'd0}, _rsize1_T};
  wire [22:0] _rsize1_T_1 = _GEN_16 << auto_in_arsize;
  wire [14:0] r_size_lo = _rsize1_T_1[22:8];
  wire [15:0] _rsize_T = {r_size_lo, 1'h0};
  wire [15:0] _rsize_T_1 = _rsize_T | 16'h1;
  wire [15:0] _rsize_T_2 = {1'h0,r_size_lo};
  wire [15:0] _rsize_T_3 = ~_rsize_T_2;
  wire [15:0] _rsize_T_4 = _rsize_T_1 & _rsize_T_3;
  wire [7:0] r_size_hi = _rsize_T_4[15:8];
  wire [7:0] r_size_lo_1 = _rsize_T_4[7:0];
  wire  r_size_hi_1 = |r_size_hi;
  wire [7:0] _rsize_T_5 = r_size_hi | r_size_lo_1;
  wire [3:0] r_size_hi_2 = _rsize_T_5[7:4];
  wire [3:0] r_size_lo_2 = _rsize_T_5[3:0];
  wire  r_size_hi_3 = |r_size_hi_2;
  wire [3:0] _rsize_T_6 = r_size_hi_2 | r_size_lo_2;
  wire [1:0] r_size_hi_4 = _rsize_T_6[3:2];
  wire [1:0] r_size_lo_3 = _rsize_T_6[1:0];
  wire  r_size_hi_5 = |r_size_hi_4;
  wire [1:0] _rsize_T_7 = r_size_hi_4 | r_size_lo_3;
  wire  r_size_lo_4 = _rsize_T_7[1];
  wire [3:0] r_size = {r_size_hi_1,r_size_hi_3,r_size_hi_5,r_size_lo_4};
  wire  _rok_T_1 = r_size <= 4'h6;
  wire [31:0] _rok_T_4 = auto_in_araddr ^ 32'h1000;
  wire [32:0] _rok_T_5 = {1'b0,$signed(_rok_T_4)};
  wire [32:0] _rok_T_7 = $signed(_rok_T_5) & -33'sh1000;
  wire  _rok_T_8 = $signed(_rok_T_7) == 33'sh0;
  wire [31:0] _rok_T_9 = auto_in_araddr ^ 32'h10000000;
  wire [32:0] _rok_T_10 = {1'b0,$signed(_rok_T_9)};
  wire [32:0] _rok_T_12 = $signed(_rok_T_10) & -33'sh10000000;
  wire  _rok_T_13 = $signed(_rok_T_12) == 33'sh0;
  wire [31:0] _rok_T_14 = auto_in_araddr ^ 32'h20000000;
  wire [32:0] _rok_T_15 = {1'b0,$signed(_rok_T_14)};
  wire [32:0] _rok_T_17 = $signed(_rok_T_15) & -33'sh20000000;
  wire  _rok_T_18 = $signed(_rok_T_17) == 33'sh0;
  wire [31:0] _rok_T_19 = auto_in_araddr ^ 32'h40000000;
  wire [32:0] _rok_T_20 = {1'b0,$signed(_rok_T_19)};
  wire [32:0] _rok_T_22 = $signed(_rok_T_20) & -33'sh40000000;
  wire  _rok_T_23 = $signed(_rok_T_22) == 33'sh0;
  wire [31:0] _rok_T_24 = auto_in_araddr ^ 32'h80000000;
  wire [32:0] _rok_T_25 = {1'b0,$signed(_rok_T_24)};
  wire [32:0] _rok_T_27 = $signed(_rok_T_25) & -33'sh80000000;
  wire  _rok_T_28 = $signed(_rok_T_27) == 33'sh0;
  wire  _rok_T_32 = _rok_T_8 | _rok_T_13 | _rok_T_18 | _rok_T_23 | _rok_T_28;
  wire  r_ok = _rok_T_1 & _rok_T_32;
  wire [12:0] _GEN_17 = {{10'd0}, auto_in_araddr[2:0]};
  wire [12:0] _raddr_T_1 = 13'h1000 | _GEN_17;
  wire [31:0] r_addr = r_ok ? auto_in_araddr : {{19'd0}, _raddr_T_1};
  reg [2:0] r_count_0;
  reg [2:0] r_count_1;
  wire [2:0] _GEN_1 = auto_in_arid ? r_count_1 : r_count_0;
  wire [1:0] r_id_hi_lo = _GEN_1[1:0];
  wire [3:0] r_id = {auto_in_arid,r_id_hi_lo,1'h0};
  wire [29:0] _T_2 = 30'h7fff << r_size;
  wire [14:0] _T_4 = ~_T_2[14:0];
  wire [1:0] a_mask_sizeOH_shiftAmount = r_size[1:0];
  wire [3:0] _a_mask_sizeOH_T_1 = 4'h1 << a_mask_sizeOH_shiftAmount;
  wire [2:0] a_mask_sizeOH = _a_mask_sizeOH_T_1[2:0] | 3'h1;
  wire  _a_mask_T = r_size >= 4'h3;
  wire  a_mask_size = a_mask_sizeOH[2];
  wire  a_mask_bit = r_addr[2];
  wire  a_mask_nbit = ~a_mask_bit;
  wire  a_mask_acc = _a_mask_T | a_mask_size & a_mask_nbit;
  wire  a_mask_acc_1 = _a_mask_T | a_mask_size & a_mask_bit;
  wire  a_mask_size_1 = a_mask_sizeOH[1];
  wire  a_mask_bit_1 = r_addr[1];
  wire  a_mask_nbit_1 = ~a_mask_bit_1;
  wire  a_mask_eq_2 = a_mask_nbit & a_mask_nbit_1;
  wire  a_mask_acc_2 = a_mask_acc | a_mask_size_1 & a_mask_eq_2;
  wire  a_mask_eq_3 = a_mask_nbit & a_mask_bit_1;
  wire  a_mask_acc_3 = a_mask_acc | a_mask_size_1 & a_mask_eq_3;
  wire  a_mask_eq_4 = a_mask_bit & a_mask_nbit_1;
  wire  a_mask_acc_4 = a_mask_acc_1 | a_mask_size_1 & a_mask_eq_4;
  wire  a_mask_eq_5 = a_mask_bit & a_mask_bit_1;
  wire  a_mask_acc_5 = a_mask_acc_1 | a_mask_size_1 & a_mask_eq_5;
  wire  a_mask_size_2 = a_mask_sizeOH[0];
  wire  a_mask_bit_2 = r_addr[0];
  wire  a_mask_nbit_2 = ~a_mask_bit_2;
  wire  a_mask_eq_6 = a_mask_eq_2 & a_mask_nbit_2;
  wire  a_mask_lo_lo_lo = a_mask_acc_2 | a_mask_size_2 & a_mask_eq_6;
  wire  a_mask_eq_7 = a_mask_eq_2 & a_mask_bit_2;
  wire  a_mask_lo_lo_hi = a_mask_acc_2 | a_mask_size_2 & a_mask_eq_7;
  wire  a_mask_eq_8 = a_mask_eq_3 & a_mask_nbit_2;
  wire  a_mask_lo_hi_lo = a_mask_acc_3 | a_mask_size_2 & a_mask_eq_8;
  wire  a_mask_eq_9 = a_mask_eq_3 & a_mask_bit_2;
  wire  a_mask_lo_hi_hi = a_mask_acc_3 | a_mask_size_2 & a_mask_eq_9;
  wire  a_mask_eq_10 = a_mask_eq_4 & a_mask_nbit_2;
  wire  a_mask_hi_lo_lo = a_mask_acc_4 | a_mask_size_2 & a_mask_eq_10;
  wire  a_mask_eq_11 = a_mask_eq_4 & a_mask_bit_2;
  wire  a_mask_hi_lo_hi = a_mask_acc_4 | a_mask_size_2 & a_mask_eq_11;
  wire  a_mask_eq_12 = a_mask_eq_5 & a_mask_nbit_2;
  wire  a_mask_hi_hi_lo = a_mask_acc_5 | a_mask_size_2 & a_mask_eq_12;
  wire  a_mask_eq_13 = a_mask_eq_5 & a_mask_bit_2;
  wire  a_mask_hi_hi_hi = a_mask_acc_5 | a_mask_size_2 & a_mask_eq_13;
  wire [7:0] a_mask = {a_mask_hi_hi_hi,a_mask_hi_hi_lo,a_mask_hi_lo_hi,a_mask_hi_lo_lo,a_mask_lo_hi_hi,a_mask_lo_hi_lo,
    a_mask_lo_lo_hi,a_mask_lo_lo_lo};
  wire [1:0] r_sel = 2'h1 << auto_in_arid;
  reg [7:0] beatsLeft;
  wire  idle = beatsLeft == 8'h0;
  wire  w_out_valid = auto_in_awvalid & auto_in_wvalid;
  wire [1:0] readys_filter_lo = {w_out_valid,auto_in_arvalid};
  reg [1:0] readys_mask;
  wire [1:0] _readys_filter_T = ~readys_mask;
  wire [1:0] readys_filter_hi = readys_filter_lo & _readys_filter_T;
  wire [3:0] readys_filter = {readys_filter_hi,w_out_valid,auto_in_arvalid};
  wire [3:0] _GEN_18 = {{1'd0}, readys_filter[3:1]};
  wire [3:0] _readys_unready_T_1 = readys_filter | _GEN_18;
  wire [3:0] _readys_unready_T_4 = {readys_mask, 2'h0};
  wire [3:0] _GEN_19 = {{1'd0}, _readys_unready_T_1[3:1]};
  wire [3:0] readys_unready = _GEN_19 | _readys_unready_T_4;
  wire [1:0] _readys_readys_T_2 = readys_unready[3:2] & readys_unready[1:0];
  wire [1:0] readys_readys = ~_readys_readys_T_2;
  wire  readys_0 = readys_readys[0];
  reg  state_0;
  wire  allowed_0 = idle ? readys_0 : state_0;
  wire  out_ready = auto_out_a_ready & allowed_0;
  wire  _T_12 = out_ready & auto_in_arvalid;
  wire [2:0] _rcount_0_T_1 = r_count_0 + 3'h1;
  wire [2:0] _rcount_1_T_1 = r_count_1 + 3'h1;
  wire [15:0] _wsize1_T = {auto_in_awlen,8'hff};
  wire [22:0] _GEN_20 = {{7'd0}, _wsize1_T};
  wire [22:0] _wsize1_T_1 = _GEN_20 << auto_in_awsize;
  wire [14:0] w_size_lo = _wsize1_T_1[22:8];
  wire [15:0] _wsize_T = {w_size_lo, 1'h0};
  wire [15:0] _wsize_T_1 = _wsize_T | 16'h1;
  wire [15:0] _wsize_T_2 = {1'h0,w_size_lo};
  wire [15:0] _wsize_T_3 = ~_wsize_T_2;
  wire [15:0] _wsize_T_4 = _wsize_T_1 & _wsize_T_3;
  wire [7:0] w_size_hi = _wsize_T_4[15:8];
  wire [7:0] w_size_lo_1 = _wsize_T_4[7:0];
  wire  w_size_hi_1 = |w_size_hi;
  wire [7:0] _wsize_T_5 = w_size_hi | w_size_lo_1;
  wire [3:0] w_size_hi_2 = _wsize_T_5[7:4];
  wire [3:0] w_size_lo_2 = _wsize_T_5[3:0];
  wire  w_size_hi_3 = |w_size_hi_2;
  wire [3:0] _wsize_T_6 = w_size_hi_2 | w_size_lo_2;
  wire [1:0] w_size_hi_4 = _wsize_T_6[3:2];
  wire [1:0] w_size_lo_3 = _wsize_T_6[1:0];
  wire  w_size_hi_5 = |w_size_hi_4;
  wire [1:0] _wsize_T_7 = w_size_hi_4 | w_size_lo_3;
  wire  w_size_lo_4 = _wsize_T_7[1];
  wire [3:0] w_size = {w_size_hi_1,w_size_hi_3,w_size_hi_5,w_size_lo_4};
  wire  _wok_T_1 = w_size <= 4'h6;
  wire [31:0] _wok_T_4 = auto_in_awaddr ^ 32'h1000;
  wire [32:0] _wok_T_5 = {1'b0,$signed(_wok_T_4)};
  wire [32:0] _wok_T_7 = $signed(_wok_T_5) & -33'sh1000;
  wire  _wok_T_8 = $signed(_wok_T_7) == 33'sh0;
  wire [31:0] _wok_T_9 = auto_in_awaddr ^ 32'h10000000;
  wire [32:0] _wok_T_10 = {1'b0,$signed(_wok_T_9)};
  wire [32:0] _wok_T_12 = $signed(_wok_T_10) & -33'sh10000000;
  wire  _wok_T_13 = $signed(_wok_T_12) == 33'sh0;
  wire [31:0] _wok_T_14 = auto_in_awaddr ^ 32'h20000000;
  wire [32:0] _wok_T_15 = {1'b0,$signed(_wok_T_14)};
  wire [32:0] _wok_T_17 = $signed(_wok_T_15) & -33'sh20000000;
  wire  _wok_T_18 = $signed(_wok_T_17) == 33'sh0;
  wire [31:0] _wok_T_19 = auto_in_awaddr ^ 32'h40000000;
  wire [32:0] _wok_T_20 = {1'b0,$signed(_wok_T_19)};
  wire [32:0] _wok_T_22 = $signed(_wok_T_20) & -33'sh40000000;
  wire  _wok_T_23 = $signed(_wok_T_22) == 33'sh0;
  wire [31:0] _wok_T_24 = auto_in_awaddr ^ 32'h80000000;
  wire [32:0] _wok_T_25 = {1'b0,$signed(_wok_T_24)};
  wire [32:0] _wok_T_27 = $signed(_wok_T_25) & -33'sh80000000;
  wire  _wok_T_28 = $signed(_wok_T_27) == 33'sh0;
  wire  _wok_T_32 = _wok_T_8 | _wok_T_13 | _wok_T_18 | _wok_T_23 | _wok_T_28;
  wire  w_ok = _wok_T_1 & _wok_T_32;
  wire [12:0] _GEN_21 = {{10'd0}, auto_in_awaddr[2:0]};
  wire [12:0] _waddr_T_1 = 13'h1000 | _GEN_21;
  wire [31:0] w_addr = w_ok ? auto_in_awaddr : {{19'd0}, _waddr_T_1};
  reg [2:0] w_count_0;
  reg [2:0] w_count_1;
  wire [2:0] _GEN_5 = auto_in_awid ? w_count_1 : w_count_0;
  wire [1:0] w_id_hi_lo = _GEN_5[1:0];
  wire [3:0] w_id = {auto_in_awid,w_id_hi_lo,1'h1};
  wire  _T_16 = ~auto_in_awvalid;
  wire [29:0] _T_18 = 30'h7fff << w_size;
  wire [14:0] _T_20 = ~_T_18[14:0];
  wire  readys_1 = readys_readys[1];
  reg  state_1;
  wire  allowed_1 = idle ? readys_1 : state_1;
  wire  out_1_ready = auto_out_a_ready & allowed_1;
  wire  bundleIn_0_awready = out_1_ready & auto_in_wvalid & auto_in_wlast;
  wire [1:0] w_sel = 2'h1 << auto_in_awid;
  wire  _T_36 = bundleIn_0_awready & auto_in_awvalid;
  wire [2:0] _wcount_0_T_1 = w_count_0 + 3'h1;
  wire [2:0] _wcount_1_T_1 = w_count_1 + 3'h1;
  wire  latch = idle & auto_out_a_ready;
  wire [1:0] _readys_mask_T = readys_readys & readys_filter_lo;
  wire [2:0] _readys_mask_T_1 = {_readys_mask_T, 1'h0};
  wire [1:0] _readys_mask_T_3 = _readys_mask_T | _readys_mask_T_1[1:0];
  wire  earlyWinner_0 = readys_0 & auto_in_arvalid;
  wire  earlyWinner_1 = readys_1 & w_out_valid;
  wire  _prefixOR_T = earlyWinner_0 | earlyWinner_1;
  wire  _T_50 = auto_in_arvalid | w_out_valid;
  wire  _T_51 = ~(auto_in_arvalid | w_out_valid);
  wire  muxStateEarly_0 = idle ? earlyWinner_0 : state_0;
  wire  muxStateEarly_1 = idle ? earlyWinner_1 : state_1;
  wire  _sink_ACancel_earlyValid_T_3 = state_0 & auto_in_arvalid | state_1 & w_out_valid;
  wire  sink_ACancel_earlyValid = idle ? _T_50 : _sink_ACancel_earlyValid_T_3;
  wire  _beatsLeft_T_2 = auto_out_a_ready & sink_ACancel_earlyValid;
  wire [7:0] _GEN_22 = {{7'd0}, _beatsLeft_T_2};
  wire [7:0] _beatsLeft_T_4 = beatsLeft - _GEN_22;
  wire [7:0] _T_70 = muxStateEarly_0 ? a_mask : 8'h0;
  wire [7:0] _T_71 = muxStateEarly_1 ? auto_in_wstrb : 8'h0;
  wire [31:0] _T_73 = muxStateEarly_0 ? r_addr : 32'h0;
  wire [31:0] _T_74 = muxStateEarly_1 ? w_addr : 32'h0;
  wire [3:0] _T_76 = muxStateEarly_0 ? r_id : 4'h0;
  wire [3:0] _T_77 = muxStateEarly_1 ? w_id : 4'h0;
  wire [2:0] a_size = r_size[2:0];
  wire [2:0] _T_79 = muxStateEarly_0 ? a_size : 3'h0;
  wire [2:0] a_1_size = w_size[2:0];
  wire [2:0] _T_80 = muxStateEarly_1 ? a_1_size : 3'h0;
  wire [2:0] _T_85 = muxStateEarly_0 ? 3'h4 : 3'h0;
  wire [2:0] _T_86 = muxStateEarly_1 ? 3'h1 : 3'h0;
  wire  d_hasData = auto_out_d_bits_opcode[0];
  wire  ok_rready = deq_io_enq_ready;
  wire  ok_bready = q_bdeq_io_enq_ready;
  wire  bundleOut_0_d_ready = d_hasData ? ok_rready : ok_bready;
  wire  _d_last_T = bundleOut_0_d_ready & auto_out_d_valid;
  wire [12:0] _d_last_beats1_decode_T_1 = 13'h3f << auto_out_d_bits_size;
  wire [5:0] _d_last_beats1_decode_T_3 = ~_d_last_beats1_decode_T_1[5:0];
  wire [2:0] d_last_beats1_decode = _d_last_beats1_decode_T_3[5:3];
  wire [2:0] d_last_beats1 = d_hasData ? d_last_beats1_decode : 3'h0;
  reg [2:0] d_last_counter;
  wire [2:0] d_last_counter1 = d_last_counter - 3'h1;
  wire  d_last_first = d_last_counter == 3'h0;
  reg [2:0] b_count_0;
  reg [2:0] b_count_1;
  wire  q_bid = q_bdeq_io_deq_bits_id;
  wire [2:0] _GEN_11 = q_bid ? b_count_1 : b_count_0;
  wire [2:0] _GEN_13 = q_bid ? w_count_1 : w_count_0;
  wire  b_allow = _GEN_11 != _GEN_13;
  wire [1:0] b_sel = 2'h1 << q_bid;
  wire  q_bvalid = q_bdeq_io_deq_valid;
  wire  bundleIn_0_bvalid = q_bvalid & b_allow;
  wire  _T_90 = auto_in_bready & bundleIn_0_bvalid;
  wire [2:0] _bcount_0_T_1 = b_count_0 + 3'h1;
  wire [2:0] _bcount_1_T_1 = b_count_1 + 3'h1;
  CHIPLINK_PREFIX_Queue_11 deq (
    .clock(deq_clock),
    .reset(deq_reset),
    .io_enq_ready(deq_io_enq_ready),
    .io_enq_valid(deq_io_enq_valid),
    .io_enq_bits_id(deq_io_enq_bits_id),
    .io_enq_bits_data(deq_io_enq_bits_data),
    .io_enq_bits_resp(deq_io_enq_bits_resp),
    .io_enq_bits_last(deq_io_enq_bits_last),
    .io_deq_ready(deq_io_deq_ready),
    .io_deq_valid(deq_io_deq_valid),
    .io_deq_bits_id(deq_io_deq_bits_id),
    .io_deq_bits_data(deq_io_deq_bits_data),
    .io_deq_bits_resp(deq_io_deq_bits_resp),
    .io_deq_bits_last(deq_io_deq_bits_last)
  );
  CHIPLINK_PREFIX_Queue_12 q_bdeq (
    .clock(q_bdeq_clock),
    .reset(q_bdeq_reset),
    .io_enq_ready(q_bdeq_io_enq_ready),
    .io_enq_valid(q_bdeq_io_enq_valid),
    .io_enq_bits_id(q_bdeq_io_enq_bits_id),
    .io_enq_bits_resp(q_bdeq_io_enq_bits_resp),
    .io_deq_ready(q_bdeq_io_deq_ready),
    .io_deq_valid(q_bdeq_io_deq_valid),
    .io_deq_bits_id(q_bdeq_io_deq_bits_id),
    .io_deq_bits_resp(q_bdeq_io_deq_bits_resp)
  );
  assign auto_in_awready = out_1_ready & auto_in_wvalid & auto_in_wlast;
  assign auto_in_wready = out_1_ready & auto_in_awvalid;
  assign auto_in_bvalid = q_bvalid & b_allow;
  assign auto_in_bid = q_bdeq_io_deq_bits_id;
  assign auto_in_bresp = q_bdeq_io_deq_bits_resp;
  assign auto_in_arready = auto_out_a_ready & allowed_0;
  assign auto_in_rvalid = deq_io_deq_valid;
  assign auto_in_rid = deq_io_deq_bits_id;
  assign auto_in_rdata = deq_io_deq_bits_data;
  assign auto_in_rresp = deq_io_deq_bits_resp;
  assign auto_in_rlast = deq_io_deq_bits_last;
  assign auto_out_a_valid = idle ? _T_50 : _sink_ACancel_earlyValid_T_3;
  assign auto_out_a_bits_opcode = _T_85 | _T_86;
  assign auto_out_a_bits_size = _T_79 | _T_80;
  assign auto_out_a_bits_source = _T_76 | _T_77;
  assign auto_out_a_bits_address = _T_73 | _T_74;
  assign auto_out_a_bits_mask = _T_70 | _T_71;
  assign auto_out_a_bits_data = muxStateEarly_1 ? auto_in_wdata : 64'h0;
  assign auto_out_d_ready = d_hasData ? ok_rready : ok_bready;
  assign deq_clock = clock;
  assign deq_reset = reset;
  assign deq_io_enq_valid = auto_out_d_valid & d_hasData;
  assign deq_io_enq_bits_id = auto_out_d_bits_source[3];
  assign deq_io_enq_bits_data = auto_out_d_bits_data;
  assign deq_io_enq_bits_resp = auto_out_d_bits_denied | auto_out_d_bits_corrupt ? 2'h2 : 2'h0;
  assign deq_io_enq_bits_last = d_last_counter == 3'h1 | d_last_beats1 == 3'h0;
  assign deq_io_deq_ready = auto_in_rready;
  assign q_bdeq_clock = clock;
  assign q_bdeq_reset = reset;
  assign q_bdeq_io_enq_valid = auto_out_d_valid & ~d_hasData;
  assign q_bdeq_io_enq_bits_id = auto_out_d_bits_source[3];
  assign q_bdeq_io_enq_bits_resp = auto_out_d_bits_denied | auto_out_d_bits_corrupt ? 2'h2 : 2'h0;
  assign q_bdeq_io_deq_ready = auto_in_bready & b_allow;
  always @(posedge clock) begin
    if (reset) begin
      r_count_0 <= 3'h0;
    end else if (_T_12 & r_sel[0]) begin
      r_count_0 <= _rcount_0_T_1;
    end
    if (reset) begin
      r_count_1 <= 3'h0;
    end else if (_T_12 & r_sel[1]) begin
      r_count_1 <= _rcount_1_T_1;
    end
    if (reset) begin
      beatsLeft <= 8'h0;
    end else if (latch) begin
      if (earlyWinner_1) begin
        beatsLeft <= auto_in_awlen;
      end else begin
        beatsLeft <= 8'h0;
      end
    end else begin
      beatsLeft <= _beatsLeft_T_4;
    end
    if (reset) begin
      readys_mask <= 2'h3;
    end else if (latch & |readys_filter_lo) begin
      readys_mask <= _readys_mask_T_3;
    end
    if (reset) begin
      state_0 <= 1'h0;
    end else if (idle) begin
      state_0 <= earlyWinner_0;
    end
    if (reset) begin
      w_count_0 <= 3'h0;
    end else if (_T_36 & w_sel[0]) begin
      w_count_0 <= _wcount_0_T_1;
    end
    if (reset) begin
      w_count_1 <= 3'h0;
    end else if (_T_36 & w_sel[1]) begin
      w_count_1 <= _wcount_1_T_1;
    end
    if (reset) begin
      state_1 <= 1'h0;
    end else if (idle) begin
      state_1 <= earlyWinner_1;
    end
    if (reset) begin
      d_last_counter <= 3'h0;
    end else if (_d_last_T) begin
      if (d_last_first) begin
        if (d_hasData) begin
          d_last_counter <= d_last_beats1_decode;
        end else begin
          d_last_counter <= 3'h0;
        end
      end else begin
        d_last_counter <= d_last_counter1;
      end
    end
    if (reset) begin
      b_count_0 <= 3'h0;
    end else if (_T_90 & b_sel[0]) begin
      b_count_0 <= _bcount_0_T_1;
    end
    if (reset) begin
      b_count_1 <= 3'h0;
    end else if (_T_90 & b_sel[1]) begin
      b_count_1 <= _bcount_1_T_1;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~auto_in_arvalid | r_size_lo == _T_4 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at ToTL.scala:98 assert (!in.ar.valid || r_size1 === UIntToOH1(r_size, beatCountBits)) // because aligned\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~auto_in_arvalid | r_size_lo == _T_4 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~auto_in_awvalid | w_size_lo == _T_20 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at ToTL.scala:131 assert (!in.aw.valid || w_size1 === UIntToOH1(w_size, beatCountBits)) // because aligned\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~auto_in_awvalid | w_size_lo == _T_20 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_16 | auto_in_awlen == 8'h0 | auto_in_awsize == 3'h3 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at ToTL.scala:132 assert (!in.aw.valid || in.aw.bits.len === UInt(0) || in.aw.bits.size === UInt(log2Ceil(beatBytes))) // because aligned\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_16 | auto_in_awlen == 8'h0 | auto_in_awsize == 3'h3 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~earlyWinner_0 | ~earlyWinner_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~earlyWinner_0 | ~earlyWinner_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~(auto_in_arvalid | w_out_valid) | _prefixOR_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~(auto_in_arvalid | w_out_valid) | _prefixOR_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_51 | _T_50 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:108 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_51 | _T_50 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  r_count_0 = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  r_count_1 = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  beatsLeft = _RAND_2[7:0];
  _RAND_3 = {1{`RANDOM}};
  readys_mask = _RAND_3[1:0];
  _RAND_4 = {1{`RANDOM}};
  state_0 = _RAND_4[0:0];
  _RAND_5 = {1{`RANDOM}};
  w_count_0 = _RAND_5[2:0];
  _RAND_6 = {1{`RANDOM}};
  w_count_1 = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  state_1 = _RAND_7[0:0];
  _RAND_8 = {1{`RANDOM}};
  d_last_counter = _RAND_8[2:0];
  _RAND_9 = {1{`RANDOM}};
  b_count_0 = _RAND_9[2:0];
  _RAND_10 = {1{`RANDOM}};
  b_count_1 = _RAND_10[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_QueueCompatibility(
  input        clock,
  input        reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input  [2:0] io_enq_bits_extra_id,
  input        io_enq_bits_real_last,
  input        io_deq_ready,
  output       io_deq_valid,
  output [2:0] io_deq_bits_extra_id,
  output       io_deq_bits_real_last
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
`endif // RANDOMIZE_REG_INIT
  reg [2:0] ram_extra_id [0:3];
  wire [2:0] ram_extra_id_io_deq_bits_MPORT_data;
  wire [1:0] ram_extra_id_io_deq_bits_MPORT_addr;
  wire [2:0] ram_extra_id_MPORT_data;
  wire [1:0] ram_extra_id_MPORT_addr;
  wire  ram_extra_id_MPORT_mask;
  wire  ram_extra_id_MPORT_en;
  reg  ram_real_last [0:3];
  wire  ram_real_last_io_deq_bits_MPORT_data;
  wire [1:0] ram_real_last_io_deq_bits_MPORT_addr;
  wire  ram_real_last_MPORT_data;
  wire [1:0] ram_real_last_MPORT_addr;
  wire  ram_real_last_MPORT_mask;
  wire  ram_real_last_MPORT_en;
  reg [1:0] enq_ptr_value;
  reg [1:0] deq_ptr_value;
  reg  maybe_full;
  wire  ptr_match = enq_ptr_value == deq_ptr_value;
  wire  empty = ptr_match & ~maybe_full;
  wire  full = ptr_match & maybe_full;
  wire  _do_enq_T = io_enq_ready & io_enq_valid;
  wire  _do_deq_T = io_deq_ready & io_deq_valid;
  wire [1:0] _value_T_1 = enq_ptr_value + 2'h1;
  wire  _GEN_10 = io_deq_ready ? 1'h0 : _do_enq_T;
  wire  do_enq = empty ? _GEN_10 : _do_enq_T;
  wire [1:0] _value_T_3 = deq_ptr_value + 2'h1;
  wire  do_deq = empty ? 1'h0 : _do_deq_T;
  assign ram_extra_id_io_deq_bits_MPORT_addr = deq_ptr_value;
  assign ram_extra_id_io_deq_bits_MPORT_data = ram_extra_id[ram_extra_id_io_deq_bits_MPORT_addr];
  assign ram_extra_id_MPORT_data = io_enq_bits_extra_id;
  assign ram_extra_id_MPORT_addr = enq_ptr_value;
  assign ram_extra_id_MPORT_mask = 1'h1;
  assign ram_extra_id_MPORT_en = empty ? _GEN_10 : _do_enq_T;
  assign ram_real_last_io_deq_bits_MPORT_addr = deq_ptr_value;
  assign ram_real_last_io_deq_bits_MPORT_data = ram_real_last[ram_real_last_io_deq_bits_MPORT_addr];
  assign ram_real_last_MPORT_data = io_enq_bits_real_last;
  assign ram_real_last_MPORT_addr = enq_ptr_value;
  assign ram_real_last_MPORT_mask = 1'h1;
  assign ram_real_last_MPORT_en = empty ? _GEN_10 : _do_enq_T;
  assign io_enq_ready = ~full;
  assign io_deq_valid = io_enq_valid | ~empty;
  assign io_deq_bits_extra_id = empty ? io_enq_bits_extra_id : ram_extra_id_io_deq_bits_MPORT_data;
  assign io_deq_bits_real_last = empty ? io_enq_bits_real_last : ram_real_last_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_extra_id_MPORT_en & ram_extra_id_MPORT_mask) begin
      ram_extra_id[ram_extra_id_MPORT_addr] <= ram_extra_id_MPORT_data;
    end
    if(ram_real_last_MPORT_en & ram_real_last_MPORT_mask) begin
      ram_real_last[ram_real_last_MPORT_addr] <= ram_real_last_MPORT_data;
    end
    if (reset) begin
      enq_ptr_value <= 2'h0;
    end else if (do_enq) begin
      enq_ptr_value <= _value_T_1;
    end
    if (reset) begin
      deq_ptr_value <= 2'h0;
    end else if (do_deq) begin
      deq_ptr_value <= _value_T_3;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      if (empty) begin
        if (io_deq_ready) begin
          maybe_full <= 1'h0;
        end else begin
          maybe_full <= _do_enq_T;
        end
      end else begin
        maybe_full <= _do_enq_T;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 4; initvar = initvar+1)
    ram_extra_id[initvar] = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 4; initvar = initvar+1)
    ram_real_last[initvar] = _RAND_1[0:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_2 = {1{`RANDOM}};
  enq_ptr_value = _RAND_2[1:0];
  _RAND_3 = {1{`RANDOM}};
  deq_ptr_value = _RAND_3[1:0];
  _RAND_4 = {1{`RANDOM}};
  maybe_full = _RAND_4[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_AXI4UserYanker(
  input         clock,
  input         reset,
  output        auto_in_awready,
  input         auto_in_awvalid,
  input         auto_in_awid,
  input  [31:0] auto_in_awaddr,
  input  [7:0]  auto_in_awlen,
  input  [2:0]  auto_in_awsize,
  input  [2:0]  auto_in_awecho_extra_id,
  input         auto_in_awecho_real_last,
  output        auto_in_wready,
  input         auto_in_wvalid,
  input  [63:0] auto_in_wdata,
  input  [7:0]  auto_in_wstrb,
  input         auto_in_wlast,
  input         auto_in_bready,
  output        auto_in_bvalid,
  output        auto_in_bid,
  output [1:0]  auto_in_bresp,
  output [2:0]  auto_in_becho_extra_id,
  output        auto_in_becho_real_last,
  output        auto_in_arready,
  input         auto_in_arvalid,
  input         auto_in_arid,
  input  [31:0] auto_in_araddr,
  input  [7:0]  auto_in_arlen,
  input  [2:0]  auto_in_arsize,
  input  [2:0]  auto_in_arecho_extra_id,
  input         auto_in_arecho_real_last,
  input         auto_in_rready,
  output        auto_in_rvalid,
  output        auto_in_rid,
  output [63:0] auto_in_rdata,
  output [1:0]  auto_in_rresp,
  output [2:0]  auto_in_recho_extra_id,
  output        auto_in_recho_real_last,
  output        auto_in_rlast,
  input         auto_out_awready,
  output        auto_out_awvalid,
  output        auto_out_awid,
  output [31:0] auto_out_awaddr,
  output [7:0]  auto_out_awlen,
  output [2:0]  auto_out_awsize,
  input         auto_out_wready,
  output        auto_out_wvalid,
  output [63:0] auto_out_wdata,
  output [7:0]  auto_out_wstrb,
  output        auto_out_wlast,
  output        auto_out_bready,
  input         auto_out_bvalid,
  input         auto_out_bid,
  input  [1:0]  auto_out_bresp,
  input         auto_out_arready,
  output        auto_out_arvalid,
  output        auto_out_arid,
  output [31:0] auto_out_araddr,
  output [7:0]  auto_out_arlen,
  output [2:0]  auto_out_arsize,
  output        auto_out_rready,
  input         auto_out_rvalid,
  input         auto_out_rid,
  input  [63:0] auto_out_rdata,
  input  [1:0]  auto_out_rresp,
  input         auto_out_rlast
);
  wire  QueueCompatibility_clock;
  wire  QueueCompatibility_reset;
  wire  QueueCompatibility_io_enq_ready;
  wire  QueueCompatibility_io_enq_valid;
  wire [2:0] QueueCompatibility_io_enq_bits_extra_id;
  wire  QueueCompatibility_io_enq_bits_real_last;
  wire  QueueCompatibility_io_deq_ready;
  wire  QueueCompatibility_io_deq_valid;
  wire [2:0] QueueCompatibility_io_deq_bits_extra_id;
  wire  QueueCompatibility_io_deq_bits_real_last;
  wire  QueueCompatibility_1_clock;
  wire  QueueCompatibility_1_reset;
  wire  QueueCompatibility_1_io_enq_ready;
  wire  QueueCompatibility_1_io_enq_valid;
  wire [2:0] QueueCompatibility_1_io_enq_bits_extra_id;
  wire  QueueCompatibility_1_io_enq_bits_real_last;
  wire  QueueCompatibility_1_io_deq_ready;
  wire  QueueCompatibility_1_io_deq_valid;
  wire [2:0] QueueCompatibility_1_io_deq_bits_extra_id;
  wire  QueueCompatibility_1_io_deq_bits_real_last;
  wire  QueueCompatibility_2_clock;
  wire  QueueCompatibility_2_reset;
  wire  QueueCompatibility_2_io_enq_ready;
  wire  QueueCompatibility_2_io_enq_valid;
  wire [2:0] QueueCompatibility_2_io_enq_bits_extra_id;
  wire  QueueCompatibility_2_io_enq_bits_real_last;
  wire  QueueCompatibility_2_io_deq_ready;
  wire  QueueCompatibility_2_io_deq_valid;
  wire [2:0] QueueCompatibility_2_io_deq_bits_extra_id;
  wire  QueueCompatibility_2_io_deq_bits_real_last;
  wire  QueueCompatibility_3_clock;
  wire  QueueCompatibility_3_reset;
  wire  QueueCompatibility_3_io_enq_ready;
  wire  QueueCompatibility_3_io_enq_valid;
  wire [2:0] QueueCompatibility_3_io_enq_bits_extra_id;
  wire  QueueCompatibility_3_io_enq_bits_real_last;
  wire  QueueCompatibility_3_io_deq_ready;
  wire  QueueCompatibility_3_io_deq_valid;
  wire [2:0] QueueCompatibility_3_io_deq_bits_extra_id;
  wire  QueueCompatibility_3_io_deq_bits_real_last;
  wire  _arready_WIRE_0 = QueueCompatibility_io_enq_ready;
  wire  _arready_WIRE_1 = QueueCompatibility_1_io_enq_ready;
  wire  _GEN_1 = auto_in_arid ? _arready_WIRE_1 : _arready_WIRE_0;
  wire  _rvalid_WIRE_0 = QueueCompatibility_io_deq_valid;
  wire  _rvalid_WIRE_1 = QueueCompatibility_1_io_deq_valid;
  wire  _GEN_3 = auto_out_rid ? _rvalid_WIRE_1 : _rvalid_WIRE_0;
  wire  _rWIRE_0_real_last = QueueCompatibility_io_deq_bits_real_last;
  wire  _rWIRE_1_real_last = QueueCompatibility_1_io_deq_bits_real_last;
  wire [2:0] _rWIRE_0_extra_id = QueueCompatibility_io_deq_bits_extra_id;
  wire [2:0] _rWIRE_1_extra_id = QueueCompatibility_1_io_deq_bits_extra_id;
  wire [1:0] _arsel_T = 2'h1 << auto_in_arid;
  wire  arsel_0 = _arsel_T[0];
  wire  arsel_1 = _arsel_T[1];
  wire [1:0] _rsel_T = 2'h1 << auto_out_rid;
  wire  rsel_0 = _rsel_T[0];
  wire  rsel_1 = _rsel_T[1];
  wire  _awready_WIRE_0 = QueueCompatibility_2_io_enq_ready;
  wire  _awready_WIRE_1 = QueueCompatibility_3_io_enq_ready;
  wire  _GEN_9 = auto_in_awid ? _awready_WIRE_1 : _awready_WIRE_0;
  wire  _bvalid_WIRE_0 = QueueCompatibility_2_io_deq_valid;
  wire  _bvalid_WIRE_1 = QueueCompatibility_3_io_deq_valid;
  wire  _GEN_11 = auto_out_bid ? _bvalid_WIRE_1 : _bvalid_WIRE_0;
  wire  _bWIRE_0_real_last = QueueCompatibility_2_io_deq_bits_real_last;
  wire  _bWIRE_1_real_last = QueueCompatibility_3_io_deq_bits_real_last;
  wire [2:0] _bWIRE_0_extra_id = QueueCompatibility_2_io_deq_bits_extra_id;
  wire [2:0] _bWIRE_1_extra_id = QueueCompatibility_3_io_deq_bits_extra_id;
  wire [1:0] _awsel_T = 2'h1 << auto_in_awid;
  wire  awsel_0 = _awsel_T[0];
  wire  awsel_1 = _awsel_T[1];
  wire [1:0] _bsel_T = 2'h1 << auto_out_bid;
  wire  bsel_0 = _bsel_T[0];
  wire  bsel_1 = _bsel_T[1];
  CHIPLINK_PREFIX_QueueCompatibility QueueCompatibility (
    .clock(QueueCompatibility_clock),
    .reset(QueueCompatibility_reset),
    .io_enq_ready(QueueCompatibility_io_enq_ready),
    .io_enq_valid(QueueCompatibility_io_enq_valid),
    .io_enq_bits_extra_id(QueueCompatibility_io_enq_bits_extra_id),
    .io_enq_bits_real_last(QueueCompatibility_io_enq_bits_real_last),
    .io_deq_ready(QueueCompatibility_io_deq_ready),
    .io_deq_valid(QueueCompatibility_io_deq_valid),
    .io_deq_bits_extra_id(QueueCompatibility_io_deq_bits_extra_id),
    .io_deq_bits_real_last(QueueCompatibility_io_deq_bits_real_last)
  );
  CHIPLINK_PREFIX_QueueCompatibility QueueCompatibility_1 (
    .clock(QueueCompatibility_1_clock),
    .reset(QueueCompatibility_1_reset),
    .io_enq_ready(QueueCompatibility_1_io_enq_ready),
    .io_enq_valid(QueueCompatibility_1_io_enq_valid),
    .io_enq_bits_extra_id(QueueCompatibility_1_io_enq_bits_extra_id),
    .io_enq_bits_real_last(QueueCompatibility_1_io_enq_bits_real_last),
    .io_deq_ready(QueueCompatibility_1_io_deq_ready),
    .io_deq_valid(QueueCompatibility_1_io_deq_valid),
    .io_deq_bits_extra_id(QueueCompatibility_1_io_deq_bits_extra_id),
    .io_deq_bits_real_last(QueueCompatibility_1_io_deq_bits_real_last)
  );
  CHIPLINK_PREFIX_QueueCompatibility QueueCompatibility_2 (
    .clock(QueueCompatibility_2_clock),
    .reset(QueueCompatibility_2_reset),
    .io_enq_ready(QueueCompatibility_2_io_enq_ready),
    .io_enq_valid(QueueCompatibility_2_io_enq_valid),
    .io_enq_bits_extra_id(QueueCompatibility_2_io_enq_bits_extra_id),
    .io_enq_bits_real_last(QueueCompatibility_2_io_enq_bits_real_last),
    .io_deq_ready(QueueCompatibility_2_io_deq_ready),
    .io_deq_valid(QueueCompatibility_2_io_deq_valid),
    .io_deq_bits_extra_id(QueueCompatibility_2_io_deq_bits_extra_id),
    .io_deq_bits_real_last(QueueCompatibility_2_io_deq_bits_real_last)
  );
  CHIPLINK_PREFIX_QueueCompatibility QueueCompatibility_3 (
    .clock(QueueCompatibility_3_clock),
    .reset(QueueCompatibility_3_reset),
    .io_enq_ready(QueueCompatibility_3_io_enq_ready),
    .io_enq_valid(QueueCompatibility_3_io_enq_valid),
    .io_enq_bits_extra_id(QueueCompatibility_3_io_enq_bits_extra_id),
    .io_enq_bits_real_last(QueueCompatibility_3_io_enq_bits_real_last),
    .io_deq_ready(QueueCompatibility_3_io_deq_ready),
    .io_deq_valid(QueueCompatibility_3_io_deq_valid),
    .io_deq_bits_extra_id(QueueCompatibility_3_io_deq_bits_extra_id),
    .io_deq_bits_real_last(QueueCompatibility_3_io_deq_bits_real_last)
  );
  assign auto_in_awready = auto_out_awready & _GEN_9;
  assign auto_in_wready = auto_out_wready;
  assign auto_in_bvalid = auto_out_bvalid;
  assign auto_in_bid = auto_out_bid;
  assign auto_in_bresp = auto_out_bresp;
  assign auto_in_becho_extra_id = auto_out_bid ? _bWIRE_1_extra_id : _bWIRE_0_extra_id;
  assign auto_in_becho_real_last = auto_out_bid ? _bWIRE_1_real_last : _bWIRE_0_real_last;
  assign auto_in_arready = auto_out_arready & _GEN_1;
  assign auto_in_rvalid = auto_out_rvalid;
  assign auto_in_rid = auto_out_rid;
  assign auto_in_rdata = auto_out_rdata;
  assign auto_in_rresp = auto_out_rresp;
  assign auto_in_recho_extra_id = auto_out_rid ? _rWIRE_1_extra_id : _rWIRE_0_extra_id;
  assign auto_in_recho_real_last = auto_out_rid ? _rWIRE_1_real_last : _rWIRE_0_real_last;
  assign auto_in_rlast = auto_out_rlast;
  assign auto_out_awvalid = auto_in_awvalid & _GEN_9;
  assign auto_out_awid = auto_in_awid;
  assign auto_out_awaddr = auto_in_awaddr;
  assign auto_out_awlen = auto_in_awlen;
  assign auto_out_awsize = auto_in_awsize;
  assign auto_out_wvalid = auto_in_wvalid;
  assign auto_out_wdata = auto_in_wdata;
  assign auto_out_wstrb = auto_in_wstrb;
  assign auto_out_wlast = auto_in_wlast;
  assign auto_out_bready = auto_in_bready;
  assign auto_out_arvalid = auto_in_arvalid & _GEN_1;
  assign auto_out_arid = auto_in_arid;
  assign auto_out_araddr = auto_in_araddr;
  assign auto_out_arlen = auto_in_arlen;
  assign auto_out_arsize = auto_in_arsize;
  assign auto_out_rready = auto_in_rready;
  assign QueueCompatibility_clock = clock;
  assign QueueCompatibility_reset = reset;
  assign QueueCompatibility_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_0;
  assign QueueCompatibility_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_io_enq_bits_real_last = auto_in_arecho_real_last;
  assign QueueCompatibility_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_0 & auto_out_rlast;
  assign QueueCompatibility_1_clock = clock;
  assign QueueCompatibility_1_reset = reset;
  assign QueueCompatibility_1_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_1;
  assign QueueCompatibility_1_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_1_io_enq_bits_real_last = auto_in_arecho_real_last;
  assign QueueCompatibility_1_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_1 & auto_out_rlast;
  assign QueueCompatibility_2_clock = clock;
  assign QueueCompatibility_2_reset = reset;
  assign QueueCompatibility_2_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_0;
  assign QueueCompatibility_2_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_2_io_enq_bits_real_last = auto_in_awecho_real_last;
  assign QueueCompatibility_2_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_0;
  assign QueueCompatibility_3_clock = clock;
  assign QueueCompatibility_3_reset = reset;
  assign QueueCompatibility_3_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_1;
  assign QueueCompatibility_3_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_3_io_enq_bits_real_last = auto_in_awecho_real_last;
  assign QueueCompatibility_3_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_1;
  always @(posedge clock) begin
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~auto_out_rvalid | _GEN_3 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at UserYanker.scala:63 assert (!out.r.valid || r_valid) // Q must be ready faster than the response\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~auto_out_rvalid | _GEN_3 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~auto_out_bvalid | _GEN_11 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at UserYanker.scala:84 assert (!out.b.valid || b_valid) // Q must be ready faster than the response\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~auto_out_bvalid | _GEN_11 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
endmodule
module CHIPLINK_PREFIX_Queue_13(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input         io_enq_bits_id,
  input  [31:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_burst,
  input  [2:0]  io_enq_bits_echo_extra_id,
  input         io_deq_ready,
  output        io_deq_valid,
  output        io_deq_bits_id,
  output [31:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output [2:0]  io_deq_bits_echo_extra_id
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_6;
`endif // RANDOMIZE_REG_INIT
  reg  ram_id [0:0];
  wire  ram_id_io_deq_bits_MPORT_data;
  wire  ram_id_io_deq_bits_MPORT_addr;
  wire  ram_id_MPORT_data;
  wire  ram_id_MPORT_addr;
  wire  ram_id_MPORT_mask;
  wire  ram_id_MPORT_en;
  reg [31:0] ram_addr [0:0];
  wire [31:0] ram_addr_io_deq_bits_MPORT_data;
  wire  ram_addr_io_deq_bits_MPORT_addr;
  wire [31:0] ram_addr_MPORT_data;
  wire  ram_addr_MPORT_addr;
  wire  ram_addr_MPORT_mask;
  wire  ram_addr_MPORT_en;
  reg [7:0] ram_len [0:0];
  wire [7:0] ram_len_io_deq_bits_MPORT_data;
  wire  ram_len_io_deq_bits_MPORT_addr;
  wire [7:0] ram_len_MPORT_data;
  wire  ram_len_MPORT_addr;
  wire  ram_len_MPORT_mask;
  wire  ram_len_MPORT_en;
  reg [2:0] ram_size [0:0];
  wire [2:0] ram_size_io_deq_bits_MPORT_data;
  wire  ram_size_io_deq_bits_MPORT_addr;
  wire [2:0] ram_size_MPORT_data;
  wire  ram_size_MPORT_addr;
  wire  ram_size_MPORT_mask;
  wire  ram_size_MPORT_en;
  reg [1:0] ram_burst [0:0];
  wire [1:0] ram_burst_io_deq_bits_MPORT_data;
  wire  ram_burst_io_deq_bits_MPORT_addr;
  wire [1:0] ram_burst_MPORT_data;
  wire  ram_burst_MPORT_addr;
  wire  ram_burst_MPORT_mask;
  wire  ram_burst_MPORT_en;
  reg [2:0] ram_echo_extra_id [0:0];
  wire [2:0] ram_echo_extra_id_io_deq_bits_MPORT_data;
  wire  ram_echo_extra_id_io_deq_bits_MPORT_addr;
  wire [2:0] ram_echo_extra_id_MPORT_data;
  wire  ram_echo_extra_id_MPORT_addr;
  wire  ram_echo_extra_id_MPORT_mask;
  wire  ram_echo_extra_id_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  _do_enq_T = io_enq_ready & io_enq_valid;
  wire  _do_deq_T = io_deq_ready & io_deq_valid;
  wire  _GEN_16 = io_deq_ready ? 1'h0 : _do_enq_T;
  wire  do_enq = empty ? _GEN_16 : _do_enq_T;
  wire  do_deq = empty ? 1'h0 : _do_deq_T;
  assign ram_id_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_id_io_deq_bits_MPORT_data = ram_id[ram_id_io_deq_bits_MPORT_addr];
  assign ram_id_MPORT_data = io_enq_bits_id;
  assign ram_id_MPORT_addr = 1'h0;
  assign ram_id_MPORT_mask = 1'h1;
  assign ram_id_MPORT_en = empty ? _GEN_16 : _do_enq_T;
  assign ram_addr_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_addr_io_deq_bits_MPORT_data = ram_addr[ram_addr_io_deq_bits_MPORT_addr];
  assign ram_addr_MPORT_data = io_enq_bits_addr;
  assign ram_addr_MPORT_addr = 1'h0;
  assign ram_addr_MPORT_mask = 1'h1;
  assign ram_addr_MPORT_en = empty ? _GEN_16 : _do_enq_T;
  assign ram_len_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_len_io_deq_bits_MPORT_data = ram_len[ram_len_io_deq_bits_MPORT_addr];
  assign ram_len_MPORT_data = io_enq_bits_len;
  assign ram_len_MPORT_addr = 1'h0;
  assign ram_len_MPORT_mask = 1'h1;
  assign ram_len_MPORT_en = empty ? _GEN_16 : _do_enq_T;
  assign ram_size_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_size_io_deq_bits_MPORT_data = ram_size[ram_size_io_deq_bits_MPORT_addr];
  assign ram_size_MPORT_data = io_enq_bits_size;
  assign ram_size_MPORT_addr = 1'h0;
  assign ram_size_MPORT_mask = 1'h1;
  assign ram_size_MPORT_en = empty ? _GEN_16 : _do_enq_T;
  assign ram_burst_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_burst_io_deq_bits_MPORT_data = ram_burst[ram_burst_io_deq_bits_MPORT_addr];
  assign ram_burst_MPORT_data = io_enq_bits_burst;
  assign ram_burst_MPORT_addr = 1'h0;
  assign ram_burst_MPORT_mask = 1'h1;
  assign ram_burst_MPORT_en = empty ? _GEN_16 : _do_enq_T;
  assign ram_echo_extra_id_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_echo_extra_id_io_deq_bits_MPORT_data = ram_echo_extra_id[ram_echo_extra_id_io_deq_bits_MPORT_addr];
  assign ram_echo_extra_id_MPORT_data = io_enq_bits_echo_extra_id;
  assign ram_echo_extra_id_MPORT_addr = 1'h0;
  assign ram_echo_extra_id_MPORT_mask = 1'h1;
  assign ram_echo_extra_id_MPORT_en = empty ? _GEN_16 : _do_enq_T;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = io_enq_valid | ~empty;
  assign io_deq_bits_id = empty ? io_enq_bits_id : ram_id_io_deq_bits_MPORT_data;
  assign io_deq_bits_addr = empty ? io_enq_bits_addr : ram_addr_io_deq_bits_MPORT_data;
  assign io_deq_bits_len = empty ? io_enq_bits_len : ram_len_io_deq_bits_MPORT_data;
  assign io_deq_bits_size = empty ? io_enq_bits_size : ram_size_io_deq_bits_MPORT_data;
  assign io_deq_bits_burst = empty ? io_enq_bits_burst : ram_burst_io_deq_bits_MPORT_data;
  assign io_deq_bits_echo_extra_id = empty ? io_enq_bits_echo_extra_id : ram_echo_extra_id_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_id_MPORT_en & ram_id_MPORT_mask) begin
      ram_id[ram_id_MPORT_addr] <= ram_id_MPORT_data;
    end
    if(ram_addr_MPORT_en & ram_addr_MPORT_mask) begin
      ram_addr[ram_addr_MPORT_addr] <= ram_addr_MPORT_data;
    end
    if(ram_len_MPORT_en & ram_len_MPORT_mask) begin
      ram_len[ram_len_MPORT_addr] <= ram_len_MPORT_data;
    end
    if(ram_size_MPORT_en & ram_size_MPORT_mask) begin
      ram_size[ram_size_MPORT_addr] <= ram_size_MPORT_data;
    end
    if(ram_burst_MPORT_en & ram_burst_MPORT_mask) begin
      ram_burst[ram_burst_MPORT_addr] <= ram_burst_MPORT_data;
    end
    if(ram_echo_extra_id_MPORT_en & ram_echo_extra_id_MPORT_mask) begin
      ram_echo_extra_id[ram_echo_extra_id_MPORT_addr] <= ram_echo_extra_id_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      if (empty) begin
        if (io_deq_ready) begin
          maybe_full <= 1'h0;
        end else begin
          maybe_full <= _do_enq_T;
        end
      end else begin
        maybe_full <= _do_enq_T;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_id[initvar] = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_addr[initvar] = _RAND_1[31:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_len[initvar] = _RAND_2[7:0];
  _RAND_3 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_size[initvar] = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_burst[initvar] = _RAND_4[1:0];
  _RAND_5 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_echo_extra_id[initvar] = _RAND_5[2:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_6 = {1{`RANDOM}};
  maybe_full = _RAND_6[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Queue_15(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [63:0] io_enq_bits_data,
  input  [7:0]  io_enq_bits_strb,
  input         io_enq_bits_last,
  input         io_deq_ready,
  output        io_deq_valid,
  output [63:0] io_deq_bits_data,
  output [7:0]  io_deq_bits_strb,
  output        io_deq_bits_last
);
`ifdef RANDOMIZE_MEM_INIT
  reg [63:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_REG_INIT
  reg [63:0] ram_data [0:0];
  wire [63:0] ram_data_io_deq_bits_MPORT_data;
  wire  ram_data_io_deq_bits_MPORT_addr;
  wire [63:0] ram_data_MPORT_data;
  wire  ram_data_MPORT_addr;
  wire  ram_data_MPORT_mask;
  wire  ram_data_MPORT_en;
  reg [7:0] ram_strb [0:0];
  wire [7:0] ram_strb_io_deq_bits_MPORT_data;
  wire  ram_strb_io_deq_bits_MPORT_addr;
  wire [7:0] ram_strb_MPORT_data;
  wire  ram_strb_MPORT_addr;
  wire  ram_strb_MPORT_mask;
  wire  ram_strb_MPORT_en;
  reg  ram_last [0:0];
  wire  ram_last_io_deq_bits_MPORT_data;
  wire  ram_last_io_deq_bits_MPORT_addr;
  wire  ram_last_MPORT_data;
  wire  ram_last_MPORT_addr;
  wire  ram_last_MPORT_mask;
  wire  ram_last_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  _do_enq_T = io_enq_ready & io_enq_valid;
  wire  _do_deq_T = io_deq_ready & io_deq_valid;
  wire  _GEN_9 = io_deq_ready ? 1'h0 : _do_enq_T;
  wire  do_enq = empty ? _GEN_9 : _do_enq_T;
  wire  do_deq = empty ? 1'h0 : _do_deq_T;
  assign ram_data_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_data_io_deq_bits_MPORT_data = ram_data[ram_data_io_deq_bits_MPORT_addr];
  assign ram_data_MPORT_data = io_enq_bits_data;
  assign ram_data_MPORT_addr = 1'h0;
  assign ram_data_MPORT_mask = 1'h1;
  assign ram_data_MPORT_en = empty ? _GEN_9 : _do_enq_T;
  assign ram_strb_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_strb_io_deq_bits_MPORT_data = ram_strb[ram_strb_io_deq_bits_MPORT_addr];
  assign ram_strb_MPORT_data = io_enq_bits_strb;
  assign ram_strb_MPORT_addr = 1'h0;
  assign ram_strb_MPORT_mask = 1'h1;
  assign ram_strb_MPORT_en = empty ? _GEN_9 : _do_enq_T;
  assign ram_last_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_last_io_deq_bits_MPORT_data = ram_last[ram_last_io_deq_bits_MPORT_addr];
  assign ram_last_MPORT_data = io_enq_bits_last;
  assign ram_last_MPORT_addr = 1'h0;
  assign ram_last_MPORT_mask = 1'h1;
  assign ram_last_MPORT_en = empty ? _GEN_9 : _do_enq_T;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = io_enq_valid | ~empty;
  assign io_deq_bits_data = empty ? io_enq_bits_data : ram_data_io_deq_bits_MPORT_data;
  assign io_deq_bits_strb = empty ? io_enq_bits_strb : ram_strb_io_deq_bits_MPORT_data;
  assign io_deq_bits_last = empty ? io_enq_bits_last : ram_last_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_data_MPORT_en & ram_data_MPORT_mask) begin
      ram_data[ram_data_MPORT_addr] <= ram_data_MPORT_data;
    end
    if(ram_strb_MPORT_en & ram_strb_MPORT_mask) begin
      ram_strb[ram_strb_MPORT_addr] <= ram_strb_MPORT_data;
    end
    if(ram_last_MPORT_en & ram_last_MPORT_mask) begin
      ram_last[ram_last_MPORT_addr] <= ram_last_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      if (empty) begin
        if (io_deq_ready) begin
          maybe_full <= 1'h0;
        end else begin
          maybe_full <= _do_enq_T;
        end
      end else begin
        maybe_full <= _do_enq_T;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {2{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_data[initvar] = _RAND_0[63:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_strb[initvar] = _RAND_1[7:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_last[initvar] = _RAND_2[0:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_3 = {1{`RANDOM}};
  maybe_full = _RAND_3[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_AXI4Fragmenter(
  input         clock,
  input         reset,
  output        auto_in_awready,
  input         auto_in_awvalid,
  input         auto_in_awid,
  input  [31:0] auto_in_awaddr,
  input  [7:0]  auto_in_awlen,
  input  [2:0]  auto_in_awsize,
  input  [1:0]  auto_in_awburst,
  input  [2:0]  auto_in_awecho_extra_id,
  output        auto_in_wready,
  input         auto_in_wvalid,
  input  [63:0] auto_in_wdata,
  input  [7:0]  auto_in_wstrb,
  input         auto_in_wlast,
  input         auto_in_bready,
  output        auto_in_bvalid,
  output        auto_in_bid,
  output [1:0]  auto_in_bresp,
  output [2:0]  auto_in_becho_extra_id,
  output        auto_in_arready,
  input         auto_in_arvalid,
  input         auto_in_arid,
  input  [31:0] auto_in_araddr,
  input  [7:0]  auto_in_arlen,
  input  [2:0]  auto_in_arsize,
  input  [1:0]  auto_in_arburst,
  input  [2:0]  auto_in_arecho_extra_id,
  input         auto_in_rready,
  output        auto_in_rvalid,
  output        auto_in_rid,
  output [63:0] auto_in_rdata,
  output [1:0]  auto_in_rresp,
  output [2:0]  auto_in_recho_extra_id,
  output        auto_in_rlast,
  input         auto_out_awready,
  output        auto_out_awvalid,
  output        auto_out_awid,
  output [31:0] auto_out_awaddr,
  output [7:0]  auto_out_awlen,
  output [2:0]  auto_out_awsize,
  output [2:0]  auto_out_awecho_extra_id,
  output        auto_out_awecho_real_last,
  input         auto_out_wready,
  output        auto_out_wvalid,
  output [63:0] auto_out_wdata,
  output [7:0]  auto_out_wstrb,
  output        auto_out_wlast,
  output        auto_out_bready,
  input         auto_out_bvalid,
  input         auto_out_bid,
  input  [1:0]  auto_out_bresp,
  input  [2:0]  auto_out_becho_extra_id,
  input         auto_out_becho_real_last,
  input         auto_out_arready,
  output        auto_out_arvalid,
  output        auto_out_arid,
  output [31:0] auto_out_araddr,
  output [7:0]  auto_out_arlen,
  output [2:0]  auto_out_arsize,
  output [2:0]  auto_out_arecho_extra_id,
  output        auto_out_arecho_real_last,
  output        auto_out_rready,
  input         auto_out_rvalid,
  input         auto_out_rid,
  input  [63:0] auto_out_rdata,
  input  [1:0]  auto_out_rresp,
  input  [2:0]  auto_out_recho_extra_id,
  input         auto_out_recho_real_last,
  input         auto_out_rlast
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
`endif // RANDOMIZE_REG_INIT
  wire  deq_clock;
  wire  deq_reset;
  wire  deq_io_enq_ready;
  wire  deq_io_enq_valid;
  wire  deq_io_enq_bits_id;
  wire [31:0] deq_io_enq_bits_addr;
  wire [7:0] deq_io_enq_bits_len;
  wire [2:0] deq_io_enq_bits_size;
  wire [1:0] deq_io_enq_bits_burst;
  wire [2:0] deq_io_enq_bits_echo_extra_id;
  wire  deq_io_deq_ready;
  wire  deq_io_deq_valid;
  wire  deq_io_deq_bits_id;
  wire [31:0] deq_io_deq_bits_addr;
  wire [7:0] deq_io_deq_bits_len;
  wire [2:0] deq_io_deq_bits_size;
  wire [1:0] deq_io_deq_bits_burst;
  wire [2:0] deq_io_deq_bits_echo_extra_id;
  wire  deq_1_clock;
  wire  deq_1_reset;
  wire  deq_1_io_enq_ready;
  wire  deq_1_io_enq_valid;
  wire  deq_1_io_enq_bits_id;
  wire [31:0] deq_1_io_enq_bits_addr;
  wire [7:0] deq_1_io_enq_bits_len;
  wire [2:0] deq_1_io_enq_bits_size;
  wire [1:0] deq_1_io_enq_bits_burst;
  wire [2:0] deq_1_io_enq_bits_echo_extra_id;
  wire  deq_1_io_deq_ready;
  wire  deq_1_io_deq_valid;
  wire  deq_1_io_deq_bits_id;
  wire [31:0] deq_1_io_deq_bits_addr;
  wire [7:0] deq_1_io_deq_bits_len;
  wire [2:0] deq_1_io_deq_bits_size;
  wire [1:0] deq_1_io_deq_bits_burst;
  wire [2:0] deq_1_io_deq_bits_echo_extra_id;
  wire  in_wdeq_clock;
  wire  in_wdeq_reset;
  wire  in_wdeq_io_enq_ready;
  wire  in_wdeq_io_enq_valid;
  wire [63:0] in_wdeq_io_enq_bits_data;
  wire [7:0] in_wdeq_io_enq_bits_strb;
  wire  in_wdeq_io_enq_bits_last;
  wire  in_wdeq_io_deq_ready;
  wire  in_wdeq_io_deq_valid;
  wire [63:0] in_wdeq_io_deq_bits_data;
  wire [7:0] in_wdeq_io_deq_bits_strb;
  wire  in_wdeq_io_deq_bits_last;
  reg  busy;
  reg [31:0] r_addr;
  reg [7:0] r_len;
  wire [7:0] irr_bits_len = deq_io_deq_bits_len;
  wire [7:0] len = busy ? r_len : irr_bits_len;
  wire [31:0] irr_bits_addr = deq_io_deq_bits_addr;
  wire [31:0] addr = busy ? r_addr : irr_bits_addr;
  wire [7:0] alignment = addr[10:3];
  wire [7:0] _GEN_16 = {{1'd0}, len[7:1]};
  wire [7:0] _fillLow_T_1 = len | _GEN_16;
  wire [7:0] _GEN_17 = {{2'd0}, _fillLow_T_1[7:2]};
  wire [7:0] _fillLow_T_3 = _fillLow_T_1 | _GEN_17;
  wire [7:0] _GEN_18 = {{4'd0}, _fillLow_T_3[7:4]};
  wire [7:0] _fillLow_T_5 = _fillLow_T_3 | _GEN_18;
  wire [6:0] fillLow = _fillLow_T_5[7:1];
  wire [7:0] _wipeHigh_T = ~len;
  wire [8:0] _wipeHigh_T_1 = {_wipeHigh_T, 1'h0};
  wire [7:0] _wipeHigh_T_3 = _wipeHigh_T | _wipeHigh_T_1[7:0];
  wire [9:0] _wipeHigh_T_4 = {_wipeHigh_T_3, 2'h0};
  wire [7:0] _wipeHigh_T_6 = _wipeHigh_T_3 | _wipeHigh_T_4[7:0];
  wire [11:0] _wipeHigh_T_7 = {_wipeHigh_T_6, 4'h0};
  wire [7:0] _wipeHigh_T_9 = _wipeHigh_T_6 | _wipeHigh_T_7[7:0];
  wire [7:0] wipeHigh = ~_wipeHigh_T_9;
  wire [7:0] _GEN_19 = {{1'd0}, fillLow};
  wire [7:0] remain1 = _GEN_19 | wipeHigh;
  wire [8:0] _align1_T = {alignment, 1'h0};
  wire [7:0] _align1_T_2 = alignment | _align1_T[7:0];
  wire [9:0] _align1_T_3 = {_align1_T_2, 2'h0};
  wire [7:0] _align1_T_5 = _align1_T_2 | _align1_T_3[7:0];
  wire [11:0] _align1_T_6 = {_align1_T_5, 4'h0};
  wire [7:0] _align1_T_8 = _align1_T_5 | _align1_T_6[7:0];
  wire [7:0] align1 = ~_align1_T_8;
  wire [7:0] _maxSupported1_T = remain1 & align1;
  wire [7:0] maxSupported1 = _maxSupported1_T & 8'h7;
  wire [1:0] irr_bits_burst = deq_io_deq_bits_burst;
  wire  fixed = irr_bits_burst == 2'h0;
  wire [2:0] irr_bits_size = deq_io_deq_bits_size;
  wire  narrow = irr_bits_size != 3'h3;
  wire  bad = fixed | narrow;
  wire [7:0] beats_lo = bad ? 8'h0 : maxSupported1;
  wire [8:0] _beats_T = {beats_lo, 1'h0};
  wire [8:0] _beats_T_1 = _beats_T | 9'h1;
  wire [8:0] _beats_T_2 = {1'h0,beats_lo};
  wire [8:0] _beats_T_3 = ~_beats_T_2;
  wire [8:0] beats = _beats_T_1 & _beats_T_3;
  wire [15:0] _GEN_20 = {{7'd0}, beats};
  wire [15:0] _inc_addr_T = _GEN_20 << irr_bits_size;
  wire [31:0] _GEN_21 = {{16'd0}, _inc_addr_T};
  wire [31:0] inc_addr = addr + _GEN_21;
  wire [15:0] _wrapMask_T = {irr_bits_len,8'hff};
  wire [22:0] _GEN_22 = {{7'd0}, _wrapMask_T};
  wire [22:0] _wrapMask_T_1 = _GEN_22 << irr_bits_size;
  wire [14:0] wrapMask = _wrapMask_T_1[22:8];
  wire [31:0] _GEN_23 = {{17'd0}, wrapMask};
  wire [31:0] _mux_addr_T = inc_addr & _GEN_23;
  wire [31:0] _mux_addr_T_1 = ~irr_bits_addr;
  wire [31:0] _mux_addr_T_2 = _mux_addr_T_1 | _GEN_23;
  wire [31:0] _mux_addr_T_3 = ~_mux_addr_T_2;
  wire [31:0] _mux_addr_T_4 = _mux_addr_T | _mux_addr_T_3;
  wire  ar_last = beats_lo == len;
  wire [31:0] _out_bits_addr_T = ~addr;
  wire [9:0] _out_bits_addr_T_2 = 10'h7 << irr_bits_size;
  wire [2:0] _out_bits_addr_T_4 = ~_out_bits_addr_T_2[2:0];
  wire [31:0] _GEN_25 = {{29'd0}, _out_bits_addr_T_4};
  wire [31:0] _out_bits_addr_T_5 = _out_bits_addr_T | _GEN_25;
  wire  irr_valid = deq_io_deq_valid;
  wire  _T_2 = auto_out_arready & irr_valid;
  wire [8:0] _GEN_26 = {{1'd0}, len};
  wire [8:0] _rlen_T_1 = _GEN_26 - beats;
  wire [8:0] _GEN_4 = _T_2 ? _rlen_T_1 : {{1'd0}, r_len};
  reg  busy_1;
  reg [31:0] r_addr_1;
  reg [7:0] r_len_1;
  wire [7:0] irr_1_bits_len = deq_1_io_deq_bits_len;
  wire [7:0] len_1 = busy_1 ? r_len_1 : irr_1_bits_len;
  wire [31:0] irr_1_bits_addr = deq_1_io_deq_bits_addr;
  wire [31:0] addr_1 = busy_1 ? r_addr_1 : irr_1_bits_addr;
  wire [7:0] alignment_1 = addr_1[10:3];
  wire [7:0] _GEN_27 = {{1'd0}, len_1[7:1]};
  wire [7:0] _fillLow_T_8 = len_1 | _GEN_27;
  wire [7:0] _GEN_28 = {{2'd0}, _fillLow_T_8[7:2]};
  wire [7:0] _fillLow_T_10 = _fillLow_T_8 | _GEN_28;
  wire [7:0] _GEN_29 = {{4'd0}, _fillLow_T_10[7:4]};
  wire [7:0] _fillLow_T_12 = _fillLow_T_10 | _GEN_29;
  wire [6:0] fillLow_1 = _fillLow_T_12[7:1];
  wire [7:0] _wipeHigh_T_11 = ~len_1;
  wire [8:0] _wipeHigh_T_12 = {_wipeHigh_T_11, 1'h0};
  wire [7:0] _wipeHigh_T_14 = _wipeHigh_T_11 | _wipeHigh_T_12[7:0];
  wire [9:0] _wipeHigh_T_15 = {_wipeHigh_T_14, 2'h0};
  wire [7:0] _wipeHigh_T_17 = _wipeHigh_T_14 | _wipeHigh_T_15[7:0];
  wire [11:0] _wipeHigh_T_18 = {_wipeHigh_T_17, 4'h0};
  wire [7:0] _wipeHigh_T_20 = _wipeHigh_T_17 | _wipeHigh_T_18[7:0];
  wire [7:0] wipeHigh_1 = ~_wipeHigh_T_20;
  wire [7:0] _GEN_30 = {{1'd0}, fillLow_1};
  wire [7:0] remain1_1 = _GEN_30 | wipeHigh_1;
  wire [8:0] _align1_T_10 = {alignment_1, 1'h0};
  wire [7:0] _align1_T_12 = alignment_1 | _align1_T_10[7:0];
  wire [9:0] _align1_T_13 = {_align1_T_12, 2'h0};
  wire [7:0] _align1_T_15 = _align1_T_12 | _align1_T_13[7:0];
  wire [11:0] _align1_T_16 = {_align1_T_15, 4'h0};
  wire [7:0] _align1_T_18 = _align1_T_15 | _align1_T_16[7:0];
  wire [7:0] align1_1 = ~_align1_T_18;
  wire [7:0] _maxSupported1_T_1 = remain1_1 & align1_1;
  wire [7:0] maxSupported1_1 = _maxSupported1_T_1 & 8'h7;
  wire [1:0] irr_1_bits_burst = deq_1_io_deq_bits_burst;
  wire  fixed_1 = irr_1_bits_burst == 2'h0;
  wire [2:0] irr_1_bits_size = deq_1_io_deq_bits_size;
  wire  narrow_1 = irr_1_bits_size != 3'h3;
  wire  bad_1 = fixed_1 | narrow_1;
  wire [7:0] beats_lo_1 = bad_1 ? 8'h0 : maxSupported1_1;
  wire [8:0] _beats_T_4 = {beats_lo_1, 1'h0};
  wire [8:0] _beats_T_5 = _beats_T_4 | 9'h1;
  wire [8:0] _beats_T_6 = {1'h0,beats_lo_1};
  wire [8:0] _beats_T_7 = ~_beats_T_6;
  wire [8:0] w_beats = _beats_T_5 & _beats_T_7;
  wire [15:0] _GEN_31 = {{7'd0}, w_beats};
  wire [15:0] _inc_addr_T_2 = _GEN_31 << irr_1_bits_size;
  wire [31:0] _GEN_32 = {{16'd0}, _inc_addr_T_2};
  wire [31:0] inc_addr_1 = addr_1 + _GEN_32;
  wire [15:0] _wrapMask_T_2 = {irr_1_bits_len,8'hff};
  wire [22:0] _GEN_33 = {{7'd0}, _wrapMask_T_2};
  wire [22:0] _wrapMask_T_3 = _GEN_33 << irr_1_bits_size;
  wire [14:0] wrapMask_1 = _wrapMask_T_3[22:8];
  wire [31:0] _GEN_34 = {{17'd0}, wrapMask_1};
  wire [31:0] _mux_addr_T_5 = inc_addr_1 & _GEN_34;
  wire [31:0] _mux_addr_T_6 = ~irr_1_bits_addr;
  wire [31:0] _mux_addr_T_7 = _mux_addr_T_6 | _GEN_34;
  wire [31:0] _mux_addr_T_8 = ~_mux_addr_T_7;
  wire [31:0] _mux_addr_T_9 = _mux_addr_T_5 | _mux_addr_T_8;
  wire  aw_last = beats_lo_1 == len_1;
  reg [8:0] w_counter;
  wire  w_idle = w_counter == 9'h0;
  reg  wbeats_latched;
  wire  _in_awready_T = w_idle | wbeats_latched;
  wire  in_awready = auto_out_awready & (w_idle | wbeats_latched);
  wire [31:0] _out_bits_addr_T_7 = ~addr_1;
  wire [9:0] _out_bits_addr_T_9 = 10'h7 << irr_1_bits_size;
  wire [2:0] _out_bits_addr_T_11 = ~_out_bits_addr_T_9[2:0];
  wire [31:0] _GEN_36 = {{29'd0}, _out_bits_addr_T_11};
  wire [31:0] _out_bits_addr_T_12 = _out_bits_addr_T_7 | _GEN_36;
  wire  irr_1_valid = deq_1_io_deq_valid;
  wire  _T_5 = in_awready & irr_1_valid;
  wire [8:0] _GEN_37 = {{1'd0}, len_1};
  wire [8:0] _rlen_T_3 = _GEN_37 - w_beats;
  wire [8:0] _GEN_9 = _T_5 ? _rlen_T_3 : {{1'd0}, r_len_1};
  wire  wbeats_valid = irr_1_valid & ~wbeats_latched;
  wire  _GEN_10 = wbeats_valid & w_idle | wbeats_latched;
  wire  bundleOut_0_awvalid = irr_1_valid & _in_awready_T;
  wire  _T_7 = auto_out_awready & bundleOut_0_awvalid;
  wire [8:0] _wtodo_T = wbeats_valid ? w_beats : 9'h0;
  wire [8:0] w_todo = w_idle ? _wtodo_T : w_counter;
  wire  w_last = w_todo == 9'h1;
  wire  in_wvalid = in_wdeq_io_deq_valid;
  wire  _bundleOut_0_wvalid_T_1 = ~w_idle | wbeats_valid;
  wire  bundleOut_0_wvalid = in_wvalid & (~w_idle | wbeats_valid);
  wire  _wcounter_T = auto_out_wready & bundleOut_0_wvalid;
  wire [8:0] _GEN_38 = {{8'd0}, _wcounter_T};
  wire [8:0] _wcounter_T_2 = w_todo - _GEN_38;
  wire  in_wlast = in_wdeq_io_deq_bits_last;
  wire  bundleOut_0_bready = auto_in_bready | ~auto_out_becho_real_last;
  reg [1:0] error_0;
  reg [1:0] error_1;
  wire [1:0] _GEN_13 = auto_out_bid ? error_1 : error_0;
  wire [1:0] _T_22 = 2'h1 << auto_out_bid;
  wire  _T_26 = bundleOut_0_bready & auto_out_bvalid;
  wire [1:0] _error_0_T = error_0 | auto_out_bresp;
  wire [1:0] _error_1_T = error_1 | auto_out_bresp;
  CHIPLINK_PREFIX_Queue_13 deq (
    .clock(deq_clock),
    .reset(deq_reset),
    .io_enq_ready(deq_io_enq_ready),
    .io_enq_valid(deq_io_enq_valid),
    .io_enq_bits_id(deq_io_enq_bits_id),
    .io_enq_bits_addr(deq_io_enq_bits_addr),
    .io_enq_bits_len(deq_io_enq_bits_len),
    .io_enq_bits_size(deq_io_enq_bits_size),
    .io_enq_bits_burst(deq_io_enq_bits_burst),
    .io_enq_bits_echo_extra_id(deq_io_enq_bits_echo_extra_id),
    .io_deq_ready(deq_io_deq_ready),
    .io_deq_valid(deq_io_deq_valid),
    .io_deq_bits_id(deq_io_deq_bits_id),
    .io_deq_bits_addr(deq_io_deq_bits_addr),
    .io_deq_bits_len(deq_io_deq_bits_len),
    .io_deq_bits_size(deq_io_deq_bits_size),
    .io_deq_bits_burst(deq_io_deq_bits_burst),
    .io_deq_bits_echo_extra_id(deq_io_deq_bits_echo_extra_id)
  );
  CHIPLINK_PREFIX_Queue_13 deq_1 (
    .clock(deq_1_clock),
    .reset(deq_1_reset),
    .io_enq_ready(deq_1_io_enq_ready),
    .io_enq_valid(deq_1_io_enq_valid),
    .io_enq_bits_id(deq_1_io_enq_bits_id),
    .io_enq_bits_addr(deq_1_io_enq_bits_addr),
    .io_enq_bits_len(deq_1_io_enq_bits_len),
    .io_enq_bits_size(deq_1_io_enq_bits_size),
    .io_enq_bits_burst(deq_1_io_enq_bits_burst),
    .io_enq_bits_echo_extra_id(deq_1_io_enq_bits_echo_extra_id),
    .io_deq_ready(deq_1_io_deq_ready),
    .io_deq_valid(deq_1_io_deq_valid),
    .io_deq_bits_id(deq_1_io_deq_bits_id),
    .io_deq_bits_addr(deq_1_io_deq_bits_addr),
    .io_deq_bits_len(deq_1_io_deq_bits_len),
    .io_deq_bits_size(deq_1_io_deq_bits_size),
    .io_deq_bits_burst(deq_1_io_deq_bits_burst),
    .io_deq_bits_echo_extra_id(deq_1_io_deq_bits_echo_extra_id)
  );
  CHIPLINK_PREFIX_Queue_15 in_wdeq (
    .clock(in_wdeq_clock),
    .reset(in_wdeq_reset),
    .io_enq_ready(in_wdeq_io_enq_ready),
    .io_enq_valid(in_wdeq_io_enq_valid),
    .io_enq_bits_data(in_wdeq_io_enq_bits_data),
    .io_enq_bits_strb(in_wdeq_io_enq_bits_strb),
    .io_enq_bits_last(in_wdeq_io_enq_bits_last),
    .io_deq_ready(in_wdeq_io_deq_ready),
    .io_deq_valid(in_wdeq_io_deq_valid),
    .io_deq_bits_data(in_wdeq_io_deq_bits_data),
    .io_deq_bits_strb(in_wdeq_io_deq_bits_strb),
    .io_deq_bits_last(in_wdeq_io_deq_bits_last)
  );
  assign auto_in_awready = deq_1_io_enq_ready;
  assign auto_in_wready = in_wdeq_io_enq_ready;
  assign auto_in_bvalid = auto_out_bvalid & auto_out_becho_real_last;
  assign auto_in_bid = auto_out_bid;
  assign auto_in_bresp = auto_out_bresp | _GEN_13;
  assign auto_in_becho_extra_id = auto_out_becho_extra_id;
  assign auto_in_arready = deq_io_enq_ready;
  assign auto_in_rvalid = auto_out_rvalid;
  assign auto_in_rid = auto_out_rid;
  assign auto_in_rdata = auto_out_rdata;
  assign auto_in_rresp = auto_out_rresp;
  assign auto_in_recho_extra_id = auto_out_recho_extra_id;
  assign auto_in_rlast = auto_out_rlast & auto_out_recho_real_last;
  assign auto_out_awvalid = irr_1_valid & _in_awready_T;
  assign auto_out_awid = deq_1_io_deq_bits_id;
  assign auto_out_awaddr = ~_out_bits_addr_T_12;
  assign auto_out_awlen = bad_1 ? 8'h0 : maxSupported1_1;
  assign auto_out_awsize = deq_1_io_deq_bits_size;
  assign auto_out_awecho_extra_id = deq_1_io_deq_bits_echo_extra_id;
  assign auto_out_awecho_real_last = beats_lo_1 == len_1;
  assign auto_out_wvalid = in_wvalid & (~w_idle | wbeats_valid);
  assign auto_out_wdata = in_wdeq_io_deq_bits_data;
  assign auto_out_wstrb = in_wdeq_io_deq_bits_strb;
  assign auto_out_wlast = w_todo == 9'h1;
  assign auto_out_bready = auto_in_bready | ~auto_out_becho_real_last;
  assign auto_out_arvalid = deq_io_deq_valid;
  assign auto_out_arid = deq_io_deq_bits_id;
  assign auto_out_araddr = ~_out_bits_addr_T_5;
  assign auto_out_arlen = bad ? 8'h0 : maxSupported1;
  assign auto_out_arsize = deq_io_deq_bits_size;
  assign auto_out_arecho_extra_id = deq_io_deq_bits_echo_extra_id;
  assign auto_out_arecho_real_last = beats_lo == len;
  assign auto_out_rready = auto_in_rready;
  assign deq_clock = clock;
  assign deq_reset = reset;
  assign deq_io_enq_valid = auto_in_arvalid;
  assign deq_io_enq_bits_id = auto_in_arid;
  assign deq_io_enq_bits_addr = auto_in_araddr;
  assign deq_io_enq_bits_len = auto_in_arlen;
  assign deq_io_enq_bits_size = auto_in_arsize;
  assign deq_io_enq_bits_burst = auto_in_arburst;
  assign deq_io_enq_bits_echo_extra_id = auto_in_arecho_extra_id;
  assign deq_io_deq_ready = auto_out_arready & ar_last;
  assign deq_1_clock = clock;
  assign deq_1_reset = reset;
  assign deq_1_io_enq_valid = auto_in_awvalid;
  assign deq_1_io_enq_bits_id = auto_in_awid;
  assign deq_1_io_enq_bits_addr = auto_in_awaddr;
  assign deq_1_io_enq_bits_len = auto_in_awlen;
  assign deq_1_io_enq_bits_size = auto_in_awsize;
  assign deq_1_io_enq_bits_burst = auto_in_awburst;
  assign deq_1_io_enq_bits_echo_extra_id = auto_in_awecho_extra_id;
  assign deq_1_io_deq_ready = in_awready & aw_last;
  assign in_wdeq_clock = clock;
  assign in_wdeq_reset = reset;
  assign in_wdeq_io_enq_valid = auto_in_wvalid;
  assign in_wdeq_io_enq_bits_data = auto_in_wdata;
  assign in_wdeq_io_enq_bits_strb = auto_in_wstrb;
  assign in_wdeq_io_enq_bits_last = auto_in_wlast;
  assign in_wdeq_io_deq_ready = auto_out_wready & _bundleOut_0_wvalid_T_1;
  always @(posedge clock) begin
    if (reset) begin
      busy <= 1'h0;
    end else if (_T_2) begin
      busy <= ~ar_last;
    end
    if (_T_2) begin
      if (fixed) begin
        r_addr <= irr_bits_addr;
      end else if (irr_bits_burst == 2'h2) begin
        r_addr <= _mux_addr_T_4;
      end else begin
        r_addr <= inc_addr;
      end
    end
    r_len <= _GEN_4[7:0];
    if (reset) begin
      busy_1 <= 1'h0;
    end else if (_T_5) begin
      busy_1 <= ~aw_last;
    end
    if (_T_5) begin
      if (fixed_1) begin
        r_addr_1 <= irr_1_bits_addr;
      end else if (irr_1_bits_burst == 2'h2) begin
        r_addr_1 <= _mux_addr_T_9;
      end else begin
        r_addr_1 <= inc_addr_1;
      end
    end
    r_len_1 <= _GEN_9[7:0];
    if (reset) begin
      w_counter <= 9'h0;
    end else begin
      w_counter <= _wcounter_T_2;
    end
    if (reset) begin
      wbeats_latched <= 1'h0;
    end else if (_T_7) begin
      wbeats_latched <= 1'h0;
    end else begin
      wbeats_latched <= _GEN_10;
    end
    if (reset) begin
      error_0 <= 2'h0;
    end else if (_T_22[0] & _T_26) begin
      if (auto_out_becho_real_last) begin
        error_0 <= 2'h0;
      end else begin
        error_0 <= _error_0_T;
      end
    end
    if (reset) begin
      error_1 <= 2'h0;
    end else if (_T_22[1] & _T_26) begin
      if (auto_out_becho_real_last) begin
        error_1 <= 2'h0;
      end else begin
        error_1 <= _error_1_T;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~_wcounter_T | w_todo != 9'h0 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Fragmenter.scala:169 assert (!out.w.fire() || w_todo =/= UInt(0)) // underflow impossible\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~_wcounter_T | w_todo != 9'h0 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~bundleOut_0_wvalid | ~in_wlast | w_last | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Fragmenter.scala:178 assert (!out.w.valid || !in_w.bits.last || w_last)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~bundleOut_0_wvalid | ~in_wlast | w_last | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  busy = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  r_addr = _RAND_1[31:0];
  _RAND_2 = {1{`RANDOM}};
  r_len = _RAND_2[7:0];
  _RAND_3 = {1{`RANDOM}};
  busy_1 = _RAND_3[0:0];
  _RAND_4 = {1{`RANDOM}};
  r_addr_1 = _RAND_4[31:0];
  _RAND_5 = {1{`RANDOM}};
  r_len_1 = _RAND_5[7:0];
  _RAND_6 = {1{`RANDOM}};
  w_counter = _RAND_6[8:0];
  _RAND_7 = {1{`RANDOM}};
  wbeats_latched = _RAND_7[0:0];
  _RAND_8 = {1{`RANDOM}};
  error_0 = _RAND_8[1:0];
  _RAND_9 = {1{`RANDOM}};
  error_1 = _RAND_9[1:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_AXI4IdIndexer(
  output        auto_in_awready,
  input         auto_in_awvalid,
  input  [3:0]  auto_in_awid,
  input  [31:0] auto_in_awaddr,
  input  [7:0]  auto_in_awlen,
  input  [2:0]  auto_in_awsize,
  input  [1:0]  auto_in_awburst,
  output        auto_in_wready,
  input         auto_in_wvalid,
  input  [63:0] auto_in_wdata,
  input  [7:0]  auto_in_wstrb,
  input         auto_in_wlast,
  input         auto_in_bready,
  output        auto_in_bvalid,
  output [3:0]  auto_in_bid,
  output [1:0]  auto_in_bresp,
  output        auto_in_arready,
  input         auto_in_arvalid,
  input  [3:0]  auto_in_arid,
  input  [31:0] auto_in_araddr,
  input  [7:0]  auto_in_arlen,
  input  [2:0]  auto_in_arsize,
  input  [1:0]  auto_in_arburst,
  input         auto_in_rready,
  output        auto_in_rvalid,
  output [3:0]  auto_in_rid,
  output [63:0] auto_in_rdata,
  output [1:0]  auto_in_rresp,
  output        auto_in_rlast,
  input         auto_out_awready,
  output        auto_out_awvalid,
  output        auto_out_awid,
  output [31:0] auto_out_awaddr,
  output [7:0]  auto_out_awlen,
  output [2:0]  auto_out_awsize,
  output [1:0]  auto_out_awburst,
  output [2:0]  auto_out_awecho_extra_id,
  input         auto_out_wready,
  output        auto_out_wvalid,
  output [63:0] auto_out_wdata,
  output [7:0]  auto_out_wstrb,
  output        auto_out_wlast,
  output        auto_out_bready,
  input         auto_out_bvalid,
  input         auto_out_bid,
  input  [1:0]  auto_out_bresp,
  input  [2:0]  auto_out_becho_extra_id,
  input         auto_out_arready,
  output        auto_out_arvalid,
  output        auto_out_arid,
  output [31:0] auto_out_araddr,
  output [7:0]  auto_out_arlen,
  output [2:0]  auto_out_arsize,
  output [1:0]  auto_out_arburst,
  output [2:0]  auto_out_arecho_extra_id,
  output        auto_out_rready,
  input         auto_out_rvalid,
  input         auto_out_rid,
  input  [63:0] auto_out_rdata,
  input  [1:0]  auto_out_rresp,
  input  [2:0]  auto_out_recho_extra_id,
  input         auto_out_rlast
);
  assign auto_in_awready = auto_out_awready;
  assign auto_in_wready = auto_out_wready;
  assign auto_in_bvalid = auto_out_bvalid;
  assign auto_in_bid = {auto_out_becho_extra_id,auto_out_bid};
  assign auto_in_bresp = auto_out_bresp;
  assign auto_in_arready = auto_out_arready;
  assign auto_in_rvalid = auto_out_rvalid;
  assign auto_in_rid = {auto_out_recho_extra_id,auto_out_rid};
  assign auto_in_rdata = auto_out_rdata;
  assign auto_in_rresp = auto_out_rresp;
  assign auto_in_rlast = auto_out_rlast;
  assign auto_out_awvalid = auto_in_awvalid;
  assign auto_out_awid = auto_in_awid[0];
  assign auto_out_awaddr = auto_in_awaddr;
  assign auto_out_awlen = auto_in_awlen;
  assign auto_out_awsize = auto_in_awsize;
  assign auto_out_awburst = auto_in_awburst;
  assign auto_out_awecho_extra_id = auto_in_awid[3:1];
  assign auto_out_wvalid = auto_in_wvalid;
  assign auto_out_wdata = auto_in_wdata;
  assign auto_out_wstrb = auto_in_wstrb;
  assign auto_out_wlast = auto_in_wlast;
  assign auto_out_bready = auto_in_bready;
  assign auto_out_arvalid = auto_in_arvalid;
  assign auto_out_arid = auto_in_arid[0];
  assign auto_out_araddr = auto_in_araddr;
  assign auto_out_arlen = auto_in_arlen;
  assign auto_out_arsize = auto_in_arsize;
  assign auto_out_arburst = auto_in_arburst;
  assign auto_out_arecho_extra_id = auto_in_arid[3:1];
  assign auto_out_rready = auto_in_rready;
endmodule
module CHIPLINK_PREFIX_QueueCompatibility_4(
  input        clock,
  input        reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input  [3:0] io_enq_bits_tl_state_size,
  input  [6:0] io_enq_bits_tl_state_source,
  input        io_enq_bits_extra_id,
  input        io_deq_ready,
  output       io_deq_valid,
  output [3:0] io_deq_bits_tl_state_size,
  output [6:0] io_deq_bits_tl_state_source,
  output       io_deq_bits_extra_id
);
`ifdef RANDOMIZE_GARBAGE_ASSIGN
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_5;
`endif // RANDOMIZE_GARBAGE_ASSIGN
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_4;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
`endif // RANDOMIZE_REG_INIT
  reg [3:0] ram_tl_state_size [0:16];
  wire [3:0] ram_tl_state_size_io_deq_bits_MPORT_data;
  wire [4:0] ram_tl_state_size_io_deq_bits_MPORT_addr;
  wire [3:0] ram_tl_state_size_MPORT_data;
  wire [4:0] ram_tl_state_size_MPORT_addr;
  wire  ram_tl_state_size_MPORT_mask;
  wire  ram_tl_state_size_MPORT_en;
  reg [6:0] ram_tl_state_source [0:16];
  wire [6:0] ram_tl_state_source_io_deq_bits_MPORT_data;
  wire [4:0] ram_tl_state_source_io_deq_bits_MPORT_addr;
  wire [6:0] ram_tl_state_source_MPORT_data;
  wire [4:0] ram_tl_state_source_MPORT_addr;
  wire  ram_tl_state_source_MPORT_mask;
  wire  ram_tl_state_source_MPORT_en;
  reg  ram_extra_id [0:16];
  wire  ram_extra_id_io_deq_bits_MPORT_data;
  wire [4:0] ram_extra_id_io_deq_bits_MPORT_addr;
  wire  ram_extra_id_MPORT_data;
  wire [4:0] ram_extra_id_MPORT_addr;
  wire  ram_extra_id_MPORT_mask;
  wire  ram_extra_id_MPORT_en;
  reg [4:0] enq_ptr_value;
  reg [4:0] deq_ptr_value;
  reg  maybe_full;
  wire  ptr_match = enq_ptr_value == deq_ptr_value;
  wire  empty = ptr_match & ~maybe_full;
  wire  full = ptr_match & maybe_full;
  wire  do_enq = io_enq_ready & io_enq_valid;
  wire  do_deq = io_deq_ready & io_deq_valid;
  wire  wrap = enq_ptr_value == 5'h10;
  wire [4:0] _value_T_1 = enq_ptr_value + 5'h1;
  wire  wrap_1 = deq_ptr_value == 5'h10;
  wire [4:0] _value_T_3 = deq_ptr_value + 5'h1;
  assign ram_tl_state_size_io_deq_bits_MPORT_addr = deq_ptr_value;
  `ifndef RANDOMIZE_GARBAGE_ASSIGN
  assign ram_tl_state_size_io_deq_bits_MPORT_data = ram_tl_state_size[ram_tl_state_size_io_deq_bits_MPORT_addr];
  `else
  assign ram_tl_state_size_io_deq_bits_MPORT_data = ram_tl_state_size_io_deq_bits_MPORT_addr >= 5'h11 ? _RAND_1[3:0] :
    ram_tl_state_size[ram_tl_state_size_io_deq_bits_MPORT_addr];
  `endif // RANDOMIZE_GARBAGE_ASSIGN
  assign ram_tl_state_size_MPORT_data = io_enq_bits_tl_state_size;
  assign ram_tl_state_size_MPORT_addr = enq_ptr_value;
  assign ram_tl_state_size_MPORT_mask = 1'h1;
  assign ram_tl_state_size_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_tl_state_source_io_deq_bits_MPORT_addr = deq_ptr_value;
  `ifndef RANDOMIZE_GARBAGE_ASSIGN
  assign ram_tl_state_source_io_deq_bits_MPORT_data = ram_tl_state_source[ram_tl_state_source_io_deq_bits_MPORT_addr];
  `else
  assign ram_tl_state_source_io_deq_bits_MPORT_data = ram_tl_state_source_io_deq_bits_MPORT_addr >= 5'h11 ? _RAND_3[6:0]
     : ram_tl_state_source[ram_tl_state_source_io_deq_bits_MPORT_addr];
  `endif // RANDOMIZE_GARBAGE_ASSIGN
  assign ram_tl_state_source_MPORT_data = io_enq_bits_tl_state_source;
  assign ram_tl_state_source_MPORT_addr = enq_ptr_value;
  assign ram_tl_state_source_MPORT_mask = 1'h1;
  assign ram_tl_state_source_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_extra_id_io_deq_bits_MPORT_addr = deq_ptr_value;
  `ifndef RANDOMIZE_GARBAGE_ASSIGN
  assign ram_extra_id_io_deq_bits_MPORT_data = ram_extra_id[ram_extra_id_io_deq_bits_MPORT_addr];
  `else
  assign ram_extra_id_io_deq_bits_MPORT_data = ram_extra_id_io_deq_bits_MPORT_addr >= 5'h11 ? _RAND_5[0:0] :
    ram_extra_id[ram_extra_id_io_deq_bits_MPORT_addr];
  `endif // RANDOMIZE_GARBAGE_ASSIGN
  assign ram_extra_id_MPORT_data = io_enq_bits_extra_id;
  assign ram_extra_id_MPORT_addr = enq_ptr_value;
  assign ram_extra_id_MPORT_mask = 1'h1;
  assign ram_extra_id_MPORT_en = io_enq_ready & io_enq_valid;
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_tl_state_size = ram_tl_state_size_io_deq_bits_MPORT_data;
  assign io_deq_bits_tl_state_source = ram_tl_state_source_io_deq_bits_MPORT_data;
  assign io_deq_bits_extra_id = ram_extra_id_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_tl_state_size_MPORT_en & ram_tl_state_size_MPORT_mask) begin
      ram_tl_state_size[ram_tl_state_size_MPORT_addr] <= ram_tl_state_size_MPORT_data;
    end
    if(ram_tl_state_source_MPORT_en & ram_tl_state_source_MPORT_mask) begin
      ram_tl_state_source[ram_tl_state_source_MPORT_addr] <= ram_tl_state_source_MPORT_data;
    end
    if(ram_extra_id_MPORT_en & ram_extra_id_MPORT_mask) begin
      ram_extra_id[ram_extra_id_MPORT_addr] <= ram_extra_id_MPORT_data;
    end
    if (reset) begin
      enq_ptr_value <= 5'h0;
    end else if (do_enq) begin
      if (wrap) begin
        enq_ptr_value <= 5'h0;
      end else begin
        enq_ptr_value <= _value_T_1;
      end
    end
    if (reset) begin
      deq_ptr_value <= 5'h0;
    end else if (do_deq) begin
      if (wrap_1) begin
        deq_ptr_value <= 5'h0;
      end else begin
        deq_ptr_value <= _value_T_3;
      end
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      maybe_full <= do_enq;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_GARBAGE_ASSIGN
  _RAND_1 = {1{`RANDOM}};
  _RAND_3 = {1{`RANDOM}};
  _RAND_5 = {1{`RANDOM}};
`endif // RANDOMIZE_GARBAGE_ASSIGN
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 17; initvar = initvar+1)
    ram_tl_state_size[initvar] = _RAND_0[3:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 17; initvar = initvar+1)
    ram_tl_state_source[initvar] = _RAND_2[6:0];
  _RAND_4 = {1{`RANDOM}};
  for (initvar = 0; initvar < 17; initvar = initvar+1)
    ram_extra_id[initvar] = _RAND_4[0:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_6 = {1{`RANDOM}};
  enq_ptr_value = _RAND_6[4:0];
  _RAND_7 = {1{`RANDOM}};
  deq_ptr_value = _RAND_7[4:0];
  _RAND_8 = {1{`RANDOM}};
  maybe_full = _RAND_8[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_QueueCompatibility_11(
  input        clock,
  input        reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input  [3:0] io_enq_bits_tl_state_size,
  input  [6:0] io_enq_bits_tl_state_source,
  input        io_enq_bits_extra_id,
  input        io_deq_ready,
  output       io_deq_valid,
  output [3:0] io_deq_bits_tl_state_size,
  output [6:0] io_deq_bits_tl_state_source,
  output       io_deq_bits_extra_id
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_REG_INIT
  reg [3:0] ram_tl_state_size [0:0];
  wire [3:0] ram_tl_state_size_io_deq_bits_MPORT_data;
  wire  ram_tl_state_size_io_deq_bits_MPORT_addr;
  wire [3:0] ram_tl_state_size_MPORT_data;
  wire  ram_tl_state_size_MPORT_addr;
  wire  ram_tl_state_size_MPORT_mask;
  wire  ram_tl_state_size_MPORT_en;
  reg [6:0] ram_tl_state_source [0:0];
  wire [6:0] ram_tl_state_source_io_deq_bits_MPORT_data;
  wire  ram_tl_state_source_io_deq_bits_MPORT_addr;
  wire [6:0] ram_tl_state_source_MPORT_data;
  wire  ram_tl_state_source_MPORT_addr;
  wire  ram_tl_state_source_MPORT_mask;
  wire  ram_tl_state_source_MPORT_en;
  reg  ram_extra_id [0:0];
  wire  ram_extra_id_io_deq_bits_MPORT_data;
  wire  ram_extra_id_io_deq_bits_MPORT_addr;
  wire  ram_extra_id_MPORT_data;
  wire  ram_extra_id_MPORT_addr;
  wire  ram_extra_id_MPORT_mask;
  wire  ram_extra_id_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  do_enq = io_enq_ready & io_enq_valid;
  wire  do_deq = io_deq_ready & io_deq_valid;
  assign ram_tl_state_size_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_tl_state_size_io_deq_bits_MPORT_data = ram_tl_state_size[ram_tl_state_size_io_deq_bits_MPORT_addr];
  assign ram_tl_state_size_MPORT_data = io_enq_bits_tl_state_size;
  assign ram_tl_state_size_MPORT_addr = 1'h0;
  assign ram_tl_state_size_MPORT_mask = 1'h1;
  assign ram_tl_state_size_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_tl_state_source_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_tl_state_source_io_deq_bits_MPORT_data = ram_tl_state_source[ram_tl_state_source_io_deq_bits_MPORT_addr];
  assign ram_tl_state_source_MPORT_data = io_enq_bits_tl_state_source;
  assign ram_tl_state_source_MPORT_addr = 1'h0;
  assign ram_tl_state_source_MPORT_mask = 1'h1;
  assign ram_tl_state_source_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_extra_id_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_extra_id_io_deq_bits_MPORT_data = ram_extra_id[ram_extra_id_io_deq_bits_MPORT_addr];
  assign ram_extra_id_MPORT_data = io_enq_bits_extra_id;
  assign ram_extra_id_MPORT_addr = 1'h0;
  assign ram_extra_id_MPORT_mask = 1'h1;
  assign ram_extra_id_MPORT_en = io_enq_ready & io_enq_valid;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_tl_state_size = ram_tl_state_size_io_deq_bits_MPORT_data;
  assign io_deq_bits_tl_state_source = ram_tl_state_source_io_deq_bits_MPORT_data;
  assign io_deq_bits_extra_id = ram_extra_id_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_tl_state_size_MPORT_en & ram_tl_state_size_MPORT_mask) begin
      ram_tl_state_size[ram_tl_state_size_MPORT_addr] <= ram_tl_state_size_MPORT_data;
    end
    if(ram_tl_state_source_MPORT_en & ram_tl_state_source_MPORT_mask) begin
      ram_tl_state_source[ram_tl_state_source_MPORT_addr] <= ram_tl_state_source_MPORT_data;
    end
    if(ram_extra_id_MPORT_en & ram_extra_id_MPORT_mask) begin
      ram_extra_id[ram_extra_id_MPORT_addr] <= ram_extra_id_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      maybe_full <= do_enq;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_tl_state_size[initvar] = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_tl_state_source[initvar] = _RAND_1[6:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_extra_id[initvar] = _RAND_2[0:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_3 = {1{`RANDOM}};
  maybe_full = _RAND_3[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_AXI4UserYanker_1(
  input         clock,
  input         reset,
  output        auto_in_awready,
  input         auto_in_awvalid,
  input  [3:0]  auto_in_awid,
  input  [31:0] auto_in_awaddr,
  input  [7:0]  auto_in_awlen,
  input  [2:0]  auto_in_awsize,
  input  [1:0]  auto_in_awburst,
  input  [3:0]  auto_in_awecho_tl_state_size,
  input  [6:0]  auto_in_awecho_tl_state_source,
  input         auto_in_awecho_extra_id,
  output        auto_in_wready,
  input         auto_in_wvalid,
  input  [63:0] auto_in_wdata,
  input  [7:0]  auto_in_wstrb,
  input         auto_in_wlast,
  input         auto_in_bready,
  output        auto_in_bvalid,
  output [3:0]  auto_in_bid,
  output [1:0]  auto_in_bresp,
  output [3:0]  auto_in_becho_tl_state_size,
  output [6:0]  auto_in_becho_tl_state_source,
  output        auto_in_becho_extra_id,
  output        auto_in_arready,
  input         auto_in_arvalid,
  input  [3:0]  auto_in_arid,
  input  [31:0] auto_in_araddr,
  input  [7:0]  auto_in_arlen,
  input  [2:0]  auto_in_arsize,
  input  [1:0]  auto_in_arburst,
  input  [3:0]  auto_in_arecho_tl_state_size,
  input  [6:0]  auto_in_arecho_tl_state_source,
  input         auto_in_arecho_extra_id,
  input         auto_in_rready,
  output        auto_in_rvalid,
  output [3:0]  auto_in_rid,
  output [63:0] auto_in_rdata,
  output [1:0]  auto_in_rresp,
  output [3:0]  auto_in_recho_tl_state_size,
  output [6:0]  auto_in_recho_tl_state_source,
  output        auto_in_recho_extra_id,
  output        auto_in_rlast,
  input         auto_out_awready,
  output        auto_out_awvalid,
  output [3:0]  auto_out_awid,
  output [31:0] auto_out_awaddr,
  output [7:0]  auto_out_awlen,
  output [2:0]  auto_out_awsize,
  output [1:0]  auto_out_awburst,
  input         auto_out_wready,
  output        auto_out_wvalid,
  output [63:0] auto_out_wdata,
  output [7:0]  auto_out_wstrb,
  output        auto_out_wlast,
  output        auto_out_bready,
  input         auto_out_bvalid,
  input  [3:0]  auto_out_bid,
  input  [1:0]  auto_out_bresp,
  input         auto_out_arready,
  output        auto_out_arvalid,
  output [3:0]  auto_out_arid,
  output [31:0] auto_out_araddr,
  output [7:0]  auto_out_arlen,
  output [2:0]  auto_out_arsize,
  output [1:0]  auto_out_arburst,
  output        auto_out_rready,
  input         auto_out_rvalid,
  input  [3:0]  auto_out_rid,
  input  [63:0] auto_out_rdata,
  input  [1:0]  auto_out_rresp,
  input         auto_out_rlast
);
  wire  QueueCompatibility_clock;
  wire  QueueCompatibility_reset;
  wire  QueueCompatibility_io_enq_ready;
  wire  QueueCompatibility_io_enq_valid;
  wire [3:0] QueueCompatibility_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_io_enq_bits_extra_id;
  wire  QueueCompatibility_io_deq_ready;
  wire  QueueCompatibility_io_deq_valid;
  wire [3:0] QueueCompatibility_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_io_deq_bits_extra_id;
  wire  QueueCompatibility_1_clock;
  wire  QueueCompatibility_1_reset;
  wire  QueueCompatibility_1_io_enq_ready;
  wire  QueueCompatibility_1_io_enq_valid;
  wire [3:0] QueueCompatibility_1_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_1_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_1_io_enq_bits_extra_id;
  wire  QueueCompatibility_1_io_deq_ready;
  wire  QueueCompatibility_1_io_deq_valid;
  wire [3:0] QueueCompatibility_1_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_1_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_1_io_deq_bits_extra_id;
  wire  QueueCompatibility_2_clock;
  wire  QueueCompatibility_2_reset;
  wire  QueueCompatibility_2_io_enq_ready;
  wire  QueueCompatibility_2_io_enq_valid;
  wire [3:0] QueueCompatibility_2_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_2_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_2_io_enq_bits_extra_id;
  wire  QueueCompatibility_2_io_deq_ready;
  wire  QueueCompatibility_2_io_deq_valid;
  wire [3:0] QueueCompatibility_2_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_2_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_2_io_deq_bits_extra_id;
  wire  QueueCompatibility_3_clock;
  wire  QueueCompatibility_3_reset;
  wire  QueueCompatibility_3_io_enq_ready;
  wire  QueueCompatibility_3_io_enq_valid;
  wire [3:0] QueueCompatibility_3_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_3_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_3_io_enq_bits_extra_id;
  wire  QueueCompatibility_3_io_deq_ready;
  wire  QueueCompatibility_3_io_deq_valid;
  wire [3:0] QueueCompatibility_3_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_3_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_3_io_deq_bits_extra_id;
  wire  QueueCompatibility_4_clock;
  wire  QueueCompatibility_4_reset;
  wire  QueueCompatibility_4_io_enq_ready;
  wire  QueueCompatibility_4_io_enq_valid;
  wire [3:0] QueueCompatibility_4_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_4_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_4_io_enq_bits_extra_id;
  wire  QueueCompatibility_4_io_deq_ready;
  wire  QueueCompatibility_4_io_deq_valid;
  wire [3:0] QueueCompatibility_4_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_4_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_4_io_deq_bits_extra_id;
  wire  QueueCompatibility_5_clock;
  wire  QueueCompatibility_5_reset;
  wire  QueueCompatibility_5_io_enq_ready;
  wire  QueueCompatibility_5_io_enq_valid;
  wire [3:0] QueueCompatibility_5_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_5_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_5_io_enq_bits_extra_id;
  wire  QueueCompatibility_5_io_deq_ready;
  wire  QueueCompatibility_5_io_deq_valid;
  wire [3:0] QueueCompatibility_5_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_5_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_5_io_deq_bits_extra_id;
  wire  QueueCompatibility_6_clock;
  wire  QueueCompatibility_6_reset;
  wire  QueueCompatibility_6_io_enq_ready;
  wire  QueueCompatibility_6_io_enq_valid;
  wire [3:0] QueueCompatibility_6_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_6_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_6_io_enq_bits_extra_id;
  wire  QueueCompatibility_6_io_deq_ready;
  wire  QueueCompatibility_6_io_deq_valid;
  wire [3:0] QueueCompatibility_6_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_6_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_6_io_deq_bits_extra_id;
  wire  QueueCompatibility_7_clock;
  wire  QueueCompatibility_7_reset;
  wire  QueueCompatibility_7_io_enq_ready;
  wire  QueueCompatibility_7_io_enq_valid;
  wire [3:0] QueueCompatibility_7_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_7_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_7_io_enq_bits_extra_id;
  wire  QueueCompatibility_7_io_deq_ready;
  wire  QueueCompatibility_7_io_deq_valid;
  wire [3:0] QueueCompatibility_7_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_7_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_7_io_deq_bits_extra_id;
  wire  QueueCompatibility_8_clock;
  wire  QueueCompatibility_8_reset;
  wire  QueueCompatibility_8_io_enq_ready;
  wire  QueueCompatibility_8_io_enq_valid;
  wire [3:0] QueueCompatibility_8_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_8_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_8_io_enq_bits_extra_id;
  wire  QueueCompatibility_8_io_deq_ready;
  wire  QueueCompatibility_8_io_deq_valid;
  wire [3:0] QueueCompatibility_8_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_8_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_8_io_deq_bits_extra_id;
  wire  QueueCompatibility_9_clock;
  wire  QueueCompatibility_9_reset;
  wire  QueueCompatibility_9_io_enq_ready;
  wire  QueueCompatibility_9_io_enq_valid;
  wire [3:0] QueueCompatibility_9_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_9_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_9_io_enq_bits_extra_id;
  wire  QueueCompatibility_9_io_deq_ready;
  wire  QueueCompatibility_9_io_deq_valid;
  wire [3:0] QueueCompatibility_9_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_9_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_9_io_deq_bits_extra_id;
  wire  QueueCompatibility_10_clock;
  wire  QueueCompatibility_10_reset;
  wire  QueueCompatibility_10_io_enq_ready;
  wire  QueueCompatibility_10_io_enq_valid;
  wire [3:0] QueueCompatibility_10_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_10_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_10_io_enq_bits_extra_id;
  wire  QueueCompatibility_10_io_deq_ready;
  wire  QueueCompatibility_10_io_deq_valid;
  wire [3:0] QueueCompatibility_10_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_10_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_10_io_deq_bits_extra_id;
  wire  QueueCompatibility_11_clock;
  wire  QueueCompatibility_11_reset;
  wire  QueueCompatibility_11_io_enq_ready;
  wire  QueueCompatibility_11_io_enq_valid;
  wire [3:0] QueueCompatibility_11_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_11_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_11_io_enq_bits_extra_id;
  wire  QueueCompatibility_11_io_deq_ready;
  wire  QueueCompatibility_11_io_deq_valid;
  wire [3:0] QueueCompatibility_11_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_11_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_11_io_deq_bits_extra_id;
  wire  QueueCompatibility_12_clock;
  wire  QueueCompatibility_12_reset;
  wire  QueueCompatibility_12_io_enq_ready;
  wire  QueueCompatibility_12_io_enq_valid;
  wire [3:0] QueueCompatibility_12_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_12_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_12_io_enq_bits_extra_id;
  wire  QueueCompatibility_12_io_deq_ready;
  wire  QueueCompatibility_12_io_deq_valid;
  wire [3:0] QueueCompatibility_12_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_12_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_12_io_deq_bits_extra_id;
  wire  QueueCompatibility_13_clock;
  wire  QueueCompatibility_13_reset;
  wire  QueueCompatibility_13_io_enq_ready;
  wire  QueueCompatibility_13_io_enq_valid;
  wire [3:0] QueueCompatibility_13_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_13_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_13_io_enq_bits_extra_id;
  wire  QueueCompatibility_13_io_deq_ready;
  wire  QueueCompatibility_13_io_deq_valid;
  wire [3:0] QueueCompatibility_13_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_13_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_13_io_deq_bits_extra_id;
  wire  QueueCompatibility_14_clock;
  wire  QueueCompatibility_14_reset;
  wire  QueueCompatibility_14_io_enq_ready;
  wire  QueueCompatibility_14_io_enq_valid;
  wire [3:0] QueueCompatibility_14_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_14_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_14_io_enq_bits_extra_id;
  wire  QueueCompatibility_14_io_deq_ready;
  wire  QueueCompatibility_14_io_deq_valid;
  wire [3:0] QueueCompatibility_14_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_14_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_14_io_deq_bits_extra_id;
  wire  QueueCompatibility_15_clock;
  wire  QueueCompatibility_15_reset;
  wire  QueueCompatibility_15_io_enq_ready;
  wire  QueueCompatibility_15_io_enq_valid;
  wire [3:0] QueueCompatibility_15_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_15_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_15_io_enq_bits_extra_id;
  wire  QueueCompatibility_15_io_deq_ready;
  wire  QueueCompatibility_15_io_deq_valid;
  wire [3:0] QueueCompatibility_15_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_15_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_15_io_deq_bits_extra_id;
  wire  QueueCompatibility_16_clock;
  wire  QueueCompatibility_16_reset;
  wire  QueueCompatibility_16_io_enq_ready;
  wire  QueueCompatibility_16_io_enq_valid;
  wire [3:0] QueueCompatibility_16_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_16_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_16_io_enq_bits_extra_id;
  wire  QueueCompatibility_16_io_deq_ready;
  wire  QueueCompatibility_16_io_deq_valid;
  wire [3:0] QueueCompatibility_16_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_16_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_16_io_deq_bits_extra_id;
  wire  QueueCompatibility_17_clock;
  wire  QueueCompatibility_17_reset;
  wire  QueueCompatibility_17_io_enq_ready;
  wire  QueueCompatibility_17_io_enq_valid;
  wire [3:0] QueueCompatibility_17_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_17_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_17_io_enq_bits_extra_id;
  wire  QueueCompatibility_17_io_deq_ready;
  wire  QueueCompatibility_17_io_deq_valid;
  wire [3:0] QueueCompatibility_17_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_17_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_17_io_deq_bits_extra_id;
  wire  QueueCompatibility_18_clock;
  wire  QueueCompatibility_18_reset;
  wire  QueueCompatibility_18_io_enq_ready;
  wire  QueueCompatibility_18_io_enq_valid;
  wire [3:0] QueueCompatibility_18_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_18_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_18_io_enq_bits_extra_id;
  wire  QueueCompatibility_18_io_deq_ready;
  wire  QueueCompatibility_18_io_deq_valid;
  wire [3:0] QueueCompatibility_18_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_18_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_18_io_deq_bits_extra_id;
  wire  QueueCompatibility_19_clock;
  wire  QueueCompatibility_19_reset;
  wire  QueueCompatibility_19_io_enq_ready;
  wire  QueueCompatibility_19_io_enq_valid;
  wire [3:0] QueueCompatibility_19_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_19_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_19_io_enq_bits_extra_id;
  wire  QueueCompatibility_19_io_deq_ready;
  wire  QueueCompatibility_19_io_deq_valid;
  wire [3:0] QueueCompatibility_19_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_19_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_19_io_deq_bits_extra_id;
  wire  QueueCompatibility_20_clock;
  wire  QueueCompatibility_20_reset;
  wire  QueueCompatibility_20_io_enq_ready;
  wire  QueueCompatibility_20_io_enq_valid;
  wire [3:0] QueueCompatibility_20_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_20_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_20_io_enq_bits_extra_id;
  wire  QueueCompatibility_20_io_deq_ready;
  wire  QueueCompatibility_20_io_deq_valid;
  wire [3:0] QueueCompatibility_20_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_20_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_20_io_deq_bits_extra_id;
  wire  QueueCompatibility_21_clock;
  wire  QueueCompatibility_21_reset;
  wire  QueueCompatibility_21_io_enq_ready;
  wire  QueueCompatibility_21_io_enq_valid;
  wire [3:0] QueueCompatibility_21_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_21_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_21_io_enq_bits_extra_id;
  wire  QueueCompatibility_21_io_deq_ready;
  wire  QueueCompatibility_21_io_deq_valid;
  wire [3:0] QueueCompatibility_21_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_21_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_21_io_deq_bits_extra_id;
  wire  QueueCompatibility_22_clock;
  wire  QueueCompatibility_22_reset;
  wire  QueueCompatibility_22_io_enq_ready;
  wire  QueueCompatibility_22_io_enq_valid;
  wire [3:0] QueueCompatibility_22_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_22_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_22_io_enq_bits_extra_id;
  wire  QueueCompatibility_22_io_deq_ready;
  wire  QueueCompatibility_22_io_deq_valid;
  wire [3:0] QueueCompatibility_22_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_22_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_22_io_deq_bits_extra_id;
  wire  QueueCompatibility_23_clock;
  wire  QueueCompatibility_23_reset;
  wire  QueueCompatibility_23_io_enq_ready;
  wire  QueueCompatibility_23_io_enq_valid;
  wire [3:0] QueueCompatibility_23_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_23_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_23_io_enq_bits_extra_id;
  wire  QueueCompatibility_23_io_deq_ready;
  wire  QueueCompatibility_23_io_deq_valid;
  wire [3:0] QueueCompatibility_23_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_23_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_23_io_deq_bits_extra_id;
  wire  QueueCompatibility_24_clock;
  wire  QueueCompatibility_24_reset;
  wire  QueueCompatibility_24_io_enq_ready;
  wire  QueueCompatibility_24_io_enq_valid;
  wire [3:0] QueueCompatibility_24_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_24_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_24_io_enq_bits_extra_id;
  wire  QueueCompatibility_24_io_deq_ready;
  wire  QueueCompatibility_24_io_deq_valid;
  wire [3:0] QueueCompatibility_24_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_24_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_24_io_deq_bits_extra_id;
  wire  QueueCompatibility_25_clock;
  wire  QueueCompatibility_25_reset;
  wire  QueueCompatibility_25_io_enq_ready;
  wire  QueueCompatibility_25_io_enq_valid;
  wire [3:0] QueueCompatibility_25_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_25_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_25_io_enq_bits_extra_id;
  wire  QueueCompatibility_25_io_deq_ready;
  wire  QueueCompatibility_25_io_deq_valid;
  wire [3:0] QueueCompatibility_25_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_25_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_25_io_deq_bits_extra_id;
  wire  QueueCompatibility_26_clock;
  wire  QueueCompatibility_26_reset;
  wire  QueueCompatibility_26_io_enq_ready;
  wire  QueueCompatibility_26_io_enq_valid;
  wire [3:0] QueueCompatibility_26_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_26_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_26_io_enq_bits_extra_id;
  wire  QueueCompatibility_26_io_deq_ready;
  wire  QueueCompatibility_26_io_deq_valid;
  wire [3:0] QueueCompatibility_26_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_26_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_26_io_deq_bits_extra_id;
  wire  QueueCompatibility_27_clock;
  wire  QueueCompatibility_27_reset;
  wire  QueueCompatibility_27_io_enq_ready;
  wire  QueueCompatibility_27_io_enq_valid;
  wire [3:0] QueueCompatibility_27_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_27_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_27_io_enq_bits_extra_id;
  wire  QueueCompatibility_27_io_deq_ready;
  wire  QueueCompatibility_27_io_deq_valid;
  wire [3:0] QueueCompatibility_27_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_27_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_27_io_deq_bits_extra_id;
  wire  QueueCompatibility_28_clock;
  wire  QueueCompatibility_28_reset;
  wire  QueueCompatibility_28_io_enq_ready;
  wire  QueueCompatibility_28_io_enq_valid;
  wire [3:0] QueueCompatibility_28_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_28_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_28_io_enq_bits_extra_id;
  wire  QueueCompatibility_28_io_deq_ready;
  wire  QueueCompatibility_28_io_deq_valid;
  wire [3:0] QueueCompatibility_28_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_28_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_28_io_deq_bits_extra_id;
  wire  QueueCompatibility_29_clock;
  wire  QueueCompatibility_29_reset;
  wire  QueueCompatibility_29_io_enq_ready;
  wire  QueueCompatibility_29_io_enq_valid;
  wire [3:0] QueueCompatibility_29_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_29_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_29_io_enq_bits_extra_id;
  wire  QueueCompatibility_29_io_deq_ready;
  wire  QueueCompatibility_29_io_deq_valid;
  wire [3:0] QueueCompatibility_29_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_29_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_29_io_deq_bits_extra_id;
  wire  QueueCompatibility_30_clock;
  wire  QueueCompatibility_30_reset;
  wire  QueueCompatibility_30_io_enq_ready;
  wire  QueueCompatibility_30_io_enq_valid;
  wire [3:0] QueueCompatibility_30_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_30_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_30_io_enq_bits_extra_id;
  wire  QueueCompatibility_30_io_deq_ready;
  wire  QueueCompatibility_30_io_deq_valid;
  wire [3:0] QueueCompatibility_30_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_30_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_30_io_deq_bits_extra_id;
  wire  QueueCompatibility_31_clock;
  wire  QueueCompatibility_31_reset;
  wire  QueueCompatibility_31_io_enq_ready;
  wire  QueueCompatibility_31_io_enq_valid;
  wire [3:0] QueueCompatibility_31_io_enq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_31_io_enq_bits_tl_state_source;
  wire  QueueCompatibility_31_io_enq_bits_extra_id;
  wire  QueueCompatibility_31_io_deq_ready;
  wire  QueueCompatibility_31_io_deq_valid;
  wire [3:0] QueueCompatibility_31_io_deq_bits_tl_state_size;
  wire [6:0] QueueCompatibility_31_io_deq_bits_tl_state_source;
  wire  QueueCompatibility_31_io_deq_bits_extra_id;
  wire  _arready_WIRE_0 = QueueCompatibility_io_enq_ready;
  wire  _arready_WIRE_1 = QueueCompatibility_1_io_enq_ready;
  wire  _GEN_1 = 4'h1 == auto_in_arid ? _arready_WIRE_1 : _arready_WIRE_0;
  wire  _arready_WIRE_2 = QueueCompatibility_2_io_enq_ready;
  wire  _GEN_2 = 4'h2 == auto_in_arid ? _arready_WIRE_2 : _GEN_1;
  wire  _arready_WIRE_3 = QueueCompatibility_3_io_enq_ready;
  wire  _GEN_3 = 4'h3 == auto_in_arid ? _arready_WIRE_3 : _GEN_2;
  wire  _arready_WIRE_4 = QueueCompatibility_4_io_enq_ready;
  wire  _GEN_4 = 4'h4 == auto_in_arid ? _arready_WIRE_4 : _GEN_3;
  wire  _arready_WIRE_5 = QueueCompatibility_5_io_enq_ready;
  wire  _GEN_5 = 4'h5 == auto_in_arid ? _arready_WIRE_5 : _GEN_4;
  wire  _arready_WIRE_6 = QueueCompatibility_6_io_enq_ready;
  wire  _GEN_6 = 4'h6 == auto_in_arid ? _arready_WIRE_6 : _GEN_5;
  wire  _arready_WIRE_7 = QueueCompatibility_7_io_enq_ready;
  wire  _GEN_7 = 4'h7 == auto_in_arid ? _arready_WIRE_7 : _GEN_6;
  wire  _arready_WIRE_8 = QueueCompatibility_8_io_enq_ready;
  wire  _GEN_8 = 4'h8 == auto_in_arid ? _arready_WIRE_8 : _GEN_7;
  wire  _arready_WIRE_9 = QueueCompatibility_9_io_enq_ready;
  wire  _GEN_9 = 4'h9 == auto_in_arid ? _arready_WIRE_9 : _GEN_8;
  wire  _arready_WIRE_10 = QueueCompatibility_10_io_enq_ready;
  wire  _GEN_10 = 4'ha == auto_in_arid ? _arready_WIRE_10 : _GEN_9;
  wire  _arready_WIRE_11 = QueueCompatibility_11_io_enq_ready;
  wire  _GEN_11 = 4'hb == auto_in_arid ? _arready_WIRE_11 : _GEN_10;
  wire  _arready_WIRE_12 = QueueCompatibility_12_io_enq_ready;
  wire  _GEN_12 = 4'hc == auto_in_arid ? _arready_WIRE_12 : _GEN_11;
  wire  _arready_WIRE_13 = QueueCompatibility_13_io_enq_ready;
  wire  _GEN_13 = 4'hd == auto_in_arid ? _arready_WIRE_13 : _GEN_12;
  wire  _arready_WIRE_14 = QueueCompatibility_14_io_enq_ready;
  wire  _GEN_14 = 4'he == auto_in_arid ? _arready_WIRE_14 : _GEN_13;
  wire  _arready_WIRE_15 = QueueCompatibility_15_io_enq_ready;
  wire  _GEN_15 = 4'hf == auto_in_arid ? _arready_WIRE_15 : _GEN_14;
  wire  _rvalid_WIRE_0 = QueueCompatibility_io_deq_valid;
  wire  _rvalid_WIRE_1 = QueueCompatibility_1_io_deq_valid;
  wire  _GEN_17 = 4'h1 == auto_out_rid ? _rvalid_WIRE_1 : _rvalid_WIRE_0;
  wire  _rvalid_WIRE_2 = QueueCompatibility_2_io_deq_valid;
  wire  _GEN_18 = 4'h2 == auto_out_rid ? _rvalid_WIRE_2 : _GEN_17;
  wire  _rvalid_WIRE_3 = QueueCompatibility_3_io_deq_valid;
  wire  _GEN_19 = 4'h3 == auto_out_rid ? _rvalid_WIRE_3 : _GEN_18;
  wire  _rvalid_WIRE_4 = QueueCompatibility_4_io_deq_valid;
  wire  _GEN_20 = 4'h4 == auto_out_rid ? _rvalid_WIRE_4 : _GEN_19;
  wire  _rvalid_WIRE_5 = QueueCompatibility_5_io_deq_valid;
  wire  _GEN_21 = 4'h5 == auto_out_rid ? _rvalid_WIRE_5 : _GEN_20;
  wire  _rvalid_WIRE_6 = QueueCompatibility_6_io_deq_valid;
  wire  _GEN_22 = 4'h6 == auto_out_rid ? _rvalid_WIRE_6 : _GEN_21;
  wire  _rvalid_WIRE_7 = QueueCompatibility_7_io_deq_valid;
  wire  _GEN_23 = 4'h7 == auto_out_rid ? _rvalid_WIRE_7 : _GEN_22;
  wire  _rvalid_WIRE_8 = QueueCompatibility_8_io_deq_valid;
  wire  _GEN_24 = 4'h8 == auto_out_rid ? _rvalid_WIRE_8 : _GEN_23;
  wire  _rvalid_WIRE_9 = QueueCompatibility_9_io_deq_valid;
  wire  _GEN_25 = 4'h9 == auto_out_rid ? _rvalid_WIRE_9 : _GEN_24;
  wire  _rvalid_WIRE_10 = QueueCompatibility_10_io_deq_valid;
  wire  _GEN_26 = 4'ha == auto_out_rid ? _rvalid_WIRE_10 : _GEN_25;
  wire  _rvalid_WIRE_11 = QueueCompatibility_11_io_deq_valid;
  wire  _GEN_27 = 4'hb == auto_out_rid ? _rvalid_WIRE_11 : _GEN_26;
  wire  _rvalid_WIRE_12 = QueueCompatibility_12_io_deq_valid;
  wire  _GEN_28 = 4'hc == auto_out_rid ? _rvalid_WIRE_12 : _GEN_27;
  wire  _rvalid_WIRE_13 = QueueCompatibility_13_io_deq_valid;
  wire  _GEN_29 = 4'hd == auto_out_rid ? _rvalid_WIRE_13 : _GEN_28;
  wire  _rvalid_WIRE_14 = QueueCompatibility_14_io_deq_valid;
  wire  _GEN_30 = 4'he == auto_out_rid ? _rvalid_WIRE_14 : _GEN_29;
  wire  _rvalid_WIRE_15 = QueueCompatibility_15_io_deq_valid;
  wire  _GEN_31 = 4'hf == auto_out_rid ? _rvalid_WIRE_15 : _GEN_30;
  wire  _rWIRE_0_extra_id = QueueCompatibility_io_deq_bits_extra_id;
  wire  _rWIRE_1_extra_id = QueueCompatibility_1_io_deq_bits_extra_id;
  wire  _GEN_33 = 4'h1 == auto_out_rid ? _rWIRE_1_extra_id : _rWIRE_0_extra_id;
  wire  _rWIRE_2_extra_id = QueueCompatibility_2_io_deq_bits_extra_id;
  wire  _GEN_34 = 4'h2 == auto_out_rid ? _rWIRE_2_extra_id : _GEN_33;
  wire  _rWIRE_3_extra_id = QueueCompatibility_3_io_deq_bits_extra_id;
  wire  _GEN_35 = 4'h3 == auto_out_rid ? _rWIRE_3_extra_id : _GEN_34;
  wire  _rWIRE_4_extra_id = QueueCompatibility_4_io_deq_bits_extra_id;
  wire  _GEN_36 = 4'h4 == auto_out_rid ? _rWIRE_4_extra_id : _GEN_35;
  wire  _rWIRE_5_extra_id = QueueCompatibility_5_io_deq_bits_extra_id;
  wire  _GEN_37 = 4'h5 == auto_out_rid ? _rWIRE_5_extra_id : _GEN_36;
  wire  _rWIRE_6_extra_id = QueueCompatibility_6_io_deq_bits_extra_id;
  wire  _GEN_38 = 4'h6 == auto_out_rid ? _rWIRE_6_extra_id : _GEN_37;
  wire  _rWIRE_7_extra_id = QueueCompatibility_7_io_deq_bits_extra_id;
  wire  _GEN_39 = 4'h7 == auto_out_rid ? _rWIRE_7_extra_id : _GEN_38;
  wire  _rWIRE_8_extra_id = QueueCompatibility_8_io_deq_bits_extra_id;
  wire  _GEN_40 = 4'h8 == auto_out_rid ? _rWIRE_8_extra_id : _GEN_39;
  wire  _rWIRE_9_extra_id = QueueCompatibility_9_io_deq_bits_extra_id;
  wire  _GEN_41 = 4'h9 == auto_out_rid ? _rWIRE_9_extra_id : _GEN_40;
  wire  _rWIRE_10_extra_id = QueueCompatibility_10_io_deq_bits_extra_id;
  wire  _GEN_42 = 4'ha == auto_out_rid ? _rWIRE_10_extra_id : _GEN_41;
  wire  _rWIRE_11_extra_id = QueueCompatibility_11_io_deq_bits_extra_id;
  wire  _GEN_43 = 4'hb == auto_out_rid ? _rWIRE_11_extra_id : _GEN_42;
  wire  _rWIRE_12_extra_id = QueueCompatibility_12_io_deq_bits_extra_id;
  wire  _GEN_44 = 4'hc == auto_out_rid ? _rWIRE_12_extra_id : _GEN_43;
  wire  _rWIRE_13_extra_id = QueueCompatibility_13_io_deq_bits_extra_id;
  wire  _GEN_45 = 4'hd == auto_out_rid ? _rWIRE_13_extra_id : _GEN_44;
  wire  _rWIRE_14_extra_id = QueueCompatibility_14_io_deq_bits_extra_id;
  wire  _GEN_46 = 4'he == auto_out_rid ? _rWIRE_14_extra_id : _GEN_45;
  wire  _rWIRE_15_extra_id = QueueCompatibility_15_io_deq_bits_extra_id;
  wire [6:0] _rWIRE_0_tl_state_source = QueueCompatibility_io_deq_bits_tl_state_source;
  wire [6:0] _rWIRE_1_tl_state_source = QueueCompatibility_1_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_49 = 4'h1 == auto_out_rid ? _rWIRE_1_tl_state_source : _rWIRE_0_tl_state_source;
  wire [6:0] _rWIRE_2_tl_state_source = QueueCompatibility_2_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_50 = 4'h2 == auto_out_rid ? _rWIRE_2_tl_state_source : _GEN_49;
  wire [6:0] _rWIRE_3_tl_state_source = QueueCompatibility_3_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_51 = 4'h3 == auto_out_rid ? _rWIRE_3_tl_state_source : _GEN_50;
  wire [6:0] _rWIRE_4_tl_state_source = QueueCompatibility_4_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_52 = 4'h4 == auto_out_rid ? _rWIRE_4_tl_state_source : _GEN_51;
  wire [6:0] _rWIRE_5_tl_state_source = QueueCompatibility_5_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_53 = 4'h5 == auto_out_rid ? _rWIRE_5_tl_state_source : _GEN_52;
  wire [6:0] _rWIRE_6_tl_state_source = QueueCompatibility_6_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_54 = 4'h6 == auto_out_rid ? _rWIRE_6_tl_state_source : _GEN_53;
  wire [6:0] _rWIRE_7_tl_state_source = QueueCompatibility_7_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_55 = 4'h7 == auto_out_rid ? _rWIRE_7_tl_state_source : _GEN_54;
  wire [6:0] _rWIRE_8_tl_state_source = QueueCompatibility_8_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_56 = 4'h8 == auto_out_rid ? _rWIRE_8_tl_state_source : _GEN_55;
  wire [6:0] _rWIRE_9_tl_state_source = QueueCompatibility_9_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_57 = 4'h9 == auto_out_rid ? _rWIRE_9_tl_state_source : _GEN_56;
  wire [6:0] _rWIRE_10_tl_state_source = QueueCompatibility_10_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_58 = 4'ha == auto_out_rid ? _rWIRE_10_tl_state_source : _GEN_57;
  wire [6:0] _rWIRE_11_tl_state_source = QueueCompatibility_11_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_59 = 4'hb == auto_out_rid ? _rWIRE_11_tl_state_source : _GEN_58;
  wire [6:0] _rWIRE_12_tl_state_source = QueueCompatibility_12_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_60 = 4'hc == auto_out_rid ? _rWIRE_12_tl_state_source : _GEN_59;
  wire [6:0] _rWIRE_13_tl_state_source = QueueCompatibility_13_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_61 = 4'hd == auto_out_rid ? _rWIRE_13_tl_state_source : _GEN_60;
  wire [6:0] _rWIRE_14_tl_state_source = QueueCompatibility_14_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_62 = 4'he == auto_out_rid ? _rWIRE_14_tl_state_source : _GEN_61;
  wire [6:0] _rWIRE_15_tl_state_source = QueueCompatibility_15_io_deq_bits_tl_state_source;
  wire [3:0] _rWIRE_0_tl_state_size = QueueCompatibility_io_deq_bits_tl_state_size;
  wire [3:0] _rWIRE_1_tl_state_size = QueueCompatibility_1_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_65 = 4'h1 == auto_out_rid ? _rWIRE_1_tl_state_size : _rWIRE_0_tl_state_size;
  wire [3:0] _rWIRE_2_tl_state_size = QueueCompatibility_2_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_66 = 4'h2 == auto_out_rid ? _rWIRE_2_tl_state_size : _GEN_65;
  wire [3:0] _rWIRE_3_tl_state_size = QueueCompatibility_3_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_67 = 4'h3 == auto_out_rid ? _rWIRE_3_tl_state_size : _GEN_66;
  wire [3:0] _rWIRE_4_tl_state_size = QueueCompatibility_4_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_68 = 4'h4 == auto_out_rid ? _rWIRE_4_tl_state_size : _GEN_67;
  wire [3:0] _rWIRE_5_tl_state_size = QueueCompatibility_5_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_69 = 4'h5 == auto_out_rid ? _rWIRE_5_tl_state_size : _GEN_68;
  wire [3:0] _rWIRE_6_tl_state_size = QueueCompatibility_6_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_70 = 4'h6 == auto_out_rid ? _rWIRE_6_tl_state_size : _GEN_69;
  wire [3:0] _rWIRE_7_tl_state_size = QueueCompatibility_7_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_71 = 4'h7 == auto_out_rid ? _rWIRE_7_tl_state_size : _GEN_70;
  wire [3:0] _rWIRE_8_tl_state_size = QueueCompatibility_8_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_72 = 4'h8 == auto_out_rid ? _rWIRE_8_tl_state_size : _GEN_71;
  wire [3:0] _rWIRE_9_tl_state_size = QueueCompatibility_9_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_73 = 4'h9 == auto_out_rid ? _rWIRE_9_tl_state_size : _GEN_72;
  wire [3:0] _rWIRE_10_tl_state_size = QueueCompatibility_10_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_74 = 4'ha == auto_out_rid ? _rWIRE_10_tl_state_size : _GEN_73;
  wire [3:0] _rWIRE_11_tl_state_size = QueueCompatibility_11_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_75 = 4'hb == auto_out_rid ? _rWIRE_11_tl_state_size : _GEN_74;
  wire [3:0] _rWIRE_12_tl_state_size = QueueCompatibility_12_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_76 = 4'hc == auto_out_rid ? _rWIRE_12_tl_state_size : _GEN_75;
  wire [3:0] _rWIRE_13_tl_state_size = QueueCompatibility_13_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_77 = 4'hd == auto_out_rid ? _rWIRE_13_tl_state_size : _GEN_76;
  wire [3:0] _rWIRE_14_tl_state_size = QueueCompatibility_14_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_78 = 4'he == auto_out_rid ? _rWIRE_14_tl_state_size : _GEN_77;
  wire [3:0] _rWIRE_15_tl_state_size = QueueCompatibility_15_io_deq_bits_tl_state_size;
  wire [15:0] _arsel_T = 16'h1 << auto_in_arid;
  wire  arsel_0 = _arsel_T[0];
  wire  arsel_1 = _arsel_T[1];
  wire  arsel_2 = _arsel_T[2];
  wire  arsel_3 = _arsel_T[3];
  wire  arsel_4 = _arsel_T[4];
  wire  arsel_5 = _arsel_T[5];
  wire  arsel_6 = _arsel_T[6];
  wire  arsel_7 = _arsel_T[7];
  wire  arsel_8 = _arsel_T[8];
  wire  arsel_9 = _arsel_T[9];
  wire  arsel_10 = _arsel_T[10];
  wire  arsel_11 = _arsel_T[11];
  wire  arsel_12 = _arsel_T[12];
  wire  arsel_13 = _arsel_T[13];
  wire  arsel_14 = _arsel_T[14];
  wire  arsel_15 = _arsel_T[15];
  wire [15:0] _rsel_T = 16'h1 << auto_out_rid;
  wire  rsel_0 = _rsel_T[0];
  wire  rsel_1 = _rsel_T[1];
  wire  rsel_2 = _rsel_T[2];
  wire  rsel_3 = _rsel_T[3];
  wire  rsel_4 = _rsel_T[4];
  wire  rsel_5 = _rsel_T[5];
  wire  rsel_6 = _rsel_T[6];
  wire  rsel_7 = _rsel_T[7];
  wire  rsel_8 = _rsel_T[8];
  wire  rsel_9 = _rsel_T[9];
  wire  rsel_10 = _rsel_T[10];
  wire  rsel_11 = _rsel_T[11];
  wire  rsel_12 = _rsel_T[12];
  wire  rsel_13 = _rsel_T[13];
  wire  rsel_14 = _rsel_T[14];
  wire  rsel_15 = _rsel_T[15];
  wire  _awready_WIRE_0 = QueueCompatibility_16_io_enq_ready;
  wire  _awready_WIRE_1 = QueueCompatibility_17_io_enq_ready;
  wire  _GEN_81 = 4'h1 == auto_in_awid ? _awready_WIRE_1 : _awready_WIRE_0;
  wire  _awready_WIRE_2 = QueueCompatibility_18_io_enq_ready;
  wire  _GEN_82 = 4'h2 == auto_in_awid ? _awready_WIRE_2 : _GEN_81;
  wire  _awready_WIRE_3 = QueueCompatibility_19_io_enq_ready;
  wire  _GEN_83 = 4'h3 == auto_in_awid ? _awready_WIRE_3 : _GEN_82;
  wire  _awready_WIRE_4 = QueueCompatibility_20_io_enq_ready;
  wire  _GEN_84 = 4'h4 == auto_in_awid ? _awready_WIRE_4 : _GEN_83;
  wire  _awready_WIRE_5 = QueueCompatibility_21_io_enq_ready;
  wire  _GEN_85 = 4'h5 == auto_in_awid ? _awready_WIRE_5 : _GEN_84;
  wire  _awready_WIRE_6 = QueueCompatibility_22_io_enq_ready;
  wire  _GEN_86 = 4'h6 == auto_in_awid ? _awready_WIRE_6 : _GEN_85;
  wire  _awready_WIRE_7 = QueueCompatibility_23_io_enq_ready;
  wire  _GEN_87 = 4'h7 == auto_in_awid ? _awready_WIRE_7 : _GEN_86;
  wire  _awready_WIRE_8 = QueueCompatibility_24_io_enq_ready;
  wire  _GEN_88 = 4'h8 == auto_in_awid ? _awready_WIRE_8 : _GEN_87;
  wire  _awready_WIRE_9 = QueueCompatibility_25_io_enq_ready;
  wire  _GEN_89 = 4'h9 == auto_in_awid ? _awready_WIRE_9 : _GEN_88;
  wire  _awready_WIRE_10 = QueueCompatibility_26_io_enq_ready;
  wire  _GEN_90 = 4'ha == auto_in_awid ? _awready_WIRE_10 : _GEN_89;
  wire  _awready_WIRE_11 = QueueCompatibility_27_io_enq_ready;
  wire  _GEN_91 = 4'hb == auto_in_awid ? _awready_WIRE_11 : _GEN_90;
  wire  _awready_WIRE_12 = QueueCompatibility_28_io_enq_ready;
  wire  _GEN_92 = 4'hc == auto_in_awid ? _awready_WIRE_12 : _GEN_91;
  wire  _awready_WIRE_13 = QueueCompatibility_29_io_enq_ready;
  wire  _GEN_93 = 4'hd == auto_in_awid ? _awready_WIRE_13 : _GEN_92;
  wire  _awready_WIRE_14 = QueueCompatibility_30_io_enq_ready;
  wire  _GEN_94 = 4'he == auto_in_awid ? _awready_WIRE_14 : _GEN_93;
  wire  _awready_WIRE_15 = QueueCompatibility_31_io_enq_ready;
  wire  _GEN_95 = 4'hf == auto_in_awid ? _awready_WIRE_15 : _GEN_94;
  wire  _bvalid_WIRE_0 = QueueCompatibility_16_io_deq_valid;
  wire  _bvalid_WIRE_1 = QueueCompatibility_17_io_deq_valid;
  wire  _GEN_97 = 4'h1 == auto_out_bid ? _bvalid_WIRE_1 : _bvalid_WIRE_0;
  wire  _bvalid_WIRE_2 = QueueCompatibility_18_io_deq_valid;
  wire  _GEN_98 = 4'h2 == auto_out_bid ? _bvalid_WIRE_2 : _GEN_97;
  wire  _bvalid_WIRE_3 = QueueCompatibility_19_io_deq_valid;
  wire  _GEN_99 = 4'h3 == auto_out_bid ? _bvalid_WIRE_3 : _GEN_98;
  wire  _bvalid_WIRE_4 = QueueCompatibility_20_io_deq_valid;
  wire  _GEN_100 = 4'h4 == auto_out_bid ? _bvalid_WIRE_4 : _GEN_99;
  wire  _bvalid_WIRE_5 = QueueCompatibility_21_io_deq_valid;
  wire  _GEN_101 = 4'h5 == auto_out_bid ? _bvalid_WIRE_5 : _GEN_100;
  wire  _bvalid_WIRE_6 = QueueCompatibility_22_io_deq_valid;
  wire  _GEN_102 = 4'h6 == auto_out_bid ? _bvalid_WIRE_6 : _GEN_101;
  wire  _bvalid_WIRE_7 = QueueCompatibility_23_io_deq_valid;
  wire  _GEN_103 = 4'h7 == auto_out_bid ? _bvalid_WIRE_7 : _GEN_102;
  wire  _bvalid_WIRE_8 = QueueCompatibility_24_io_deq_valid;
  wire  _GEN_104 = 4'h8 == auto_out_bid ? _bvalid_WIRE_8 : _GEN_103;
  wire  _bvalid_WIRE_9 = QueueCompatibility_25_io_deq_valid;
  wire  _GEN_105 = 4'h9 == auto_out_bid ? _bvalid_WIRE_9 : _GEN_104;
  wire  _bvalid_WIRE_10 = QueueCompatibility_26_io_deq_valid;
  wire  _GEN_106 = 4'ha == auto_out_bid ? _bvalid_WIRE_10 : _GEN_105;
  wire  _bvalid_WIRE_11 = QueueCompatibility_27_io_deq_valid;
  wire  _GEN_107 = 4'hb == auto_out_bid ? _bvalid_WIRE_11 : _GEN_106;
  wire  _bvalid_WIRE_12 = QueueCompatibility_28_io_deq_valid;
  wire  _GEN_108 = 4'hc == auto_out_bid ? _bvalid_WIRE_12 : _GEN_107;
  wire  _bvalid_WIRE_13 = QueueCompatibility_29_io_deq_valid;
  wire  _GEN_109 = 4'hd == auto_out_bid ? _bvalid_WIRE_13 : _GEN_108;
  wire  _bvalid_WIRE_14 = QueueCompatibility_30_io_deq_valid;
  wire  _GEN_110 = 4'he == auto_out_bid ? _bvalid_WIRE_14 : _GEN_109;
  wire  _bvalid_WIRE_15 = QueueCompatibility_31_io_deq_valid;
  wire  _GEN_111 = 4'hf == auto_out_bid ? _bvalid_WIRE_15 : _GEN_110;
  wire  _bWIRE_0_extra_id = QueueCompatibility_16_io_deq_bits_extra_id;
  wire  _bWIRE_1_extra_id = QueueCompatibility_17_io_deq_bits_extra_id;
  wire  _GEN_113 = 4'h1 == auto_out_bid ? _bWIRE_1_extra_id : _bWIRE_0_extra_id;
  wire  _bWIRE_2_extra_id = QueueCompatibility_18_io_deq_bits_extra_id;
  wire  _GEN_114 = 4'h2 == auto_out_bid ? _bWIRE_2_extra_id : _GEN_113;
  wire  _bWIRE_3_extra_id = QueueCompatibility_19_io_deq_bits_extra_id;
  wire  _GEN_115 = 4'h3 == auto_out_bid ? _bWIRE_3_extra_id : _GEN_114;
  wire  _bWIRE_4_extra_id = QueueCompatibility_20_io_deq_bits_extra_id;
  wire  _GEN_116 = 4'h4 == auto_out_bid ? _bWIRE_4_extra_id : _GEN_115;
  wire  _bWIRE_5_extra_id = QueueCompatibility_21_io_deq_bits_extra_id;
  wire  _GEN_117 = 4'h5 == auto_out_bid ? _bWIRE_5_extra_id : _GEN_116;
  wire  _bWIRE_6_extra_id = QueueCompatibility_22_io_deq_bits_extra_id;
  wire  _GEN_118 = 4'h6 == auto_out_bid ? _bWIRE_6_extra_id : _GEN_117;
  wire  _bWIRE_7_extra_id = QueueCompatibility_23_io_deq_bits_extra_id;
  wire  _GEN_119 = 4'h7 == auto_out_bid ? _bWIRE_7_extra_id : _GEN_118;
  wire  _bWIRE_8_extra_id = QueueCompatibility_24_io_deq_bits_extra_id;
  wire  _GEN_120 = 4'h8 == auto_out_bid ? _bWIRE_8_extra_id : _GEN_119;
  wire  _bWIRE_9_extra_id = QueueCompatibility_25_io_deq_bits_extra_id;
  wire  _GEN_121 = 4'h9 == auto_out_bid ? _bWIRE_9_extra_id : _GEN_120;
  wire  _bWIRE_10_extra_id = QueueCompatibility_26_io_deq_bits_extra_id;
  wire  _GEN_122 = 4'ha == auto_out_bid ? _bWIRE_10_extra_id : _GEN_121;
  wire  _bWIRE_11_extra_id = QueueCompatibility_27_io_deq_bits_extra_id;
  wire  _GEN_123 = 4'hb == auto_out_bid ? _bWIRE_11_extra_id : _GEN_122;
  wire  _bWIRE_12_extra_id = QueueCompatibility_28_io_deq_bits_extra_id;
  wire  _GEN_124 = 4'hc == auto_out_bid ? _bWIRE_12_extra_id : _GEN_123;
  wire  _bWIRE_13_extra_id = QueueCompatibility_29_io_deq_bits_extra_id;
  wire  _GEN_125 = 4'hd == auto_out_bid ? _bWIRE_13_extra_id : _GEN_124;
  wire  _bWIRE_14_extra_id = QueueCompatibility_30_io_deq_bits_extra_id;
  wire  _GEN_126 = 4'he == auto_out_bid ? _bWIRE_14_extra_id : _GEN_125;
  wire  _bWIRE_15_extra_id = QueueCompatibility_31_io_deq_bits_extra_id;
  wire [6:0] _bWIRE_0_tl_state_source = QueueCompatibility_16_io_deq_bits_tl_state_source;
  wire [6:0] _bWIRE_1_tl_state_source = QueueCompatibility_17_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_129 = 4'h1 == auto_out_bid ? _bWIRE_1_tl_state_source : _bWIRE_0_tl_state_source;
  wire [6:0] _bWIRE_2_tl_state_source = QueueCompatibility_18_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_130 = 4'h2 == auto_out_bid ? _bWIRE_2_tl_state_source : _GEN_129;
  wire [6:0] _bWIRE_3_tl_state_source = QueueCompatibility_19_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_131 = 4'h3 == auto_out_bid ? _bWIRE_3_tl_state_source : _GEN_130;
  wire [6:0] _bWIRE_4_tl_state_source = QueueCompatibility_20_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_132 = 4'h4 == auto_out_bid ? _bWIRE_4_tl_state_source : _GEN_131;
  wire [6:0] _bWIRE_5_tl_state_source = QueueCompatibility_21_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_133 = 4'h5 == auto_out_bid ? _bWIRE_5_tl_state_source : _GEN_132;
  wire [6:0] _bWIRE_6_tl_state_source = QueueCompatibility_22_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_134 = 4'h6 == auto_out_bid ? _bWIRE_6_tl_state_source : _GEN_133;
  wire [6:0] _bWIRE_7_tl_state_source = QueueCompatibility_23_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_135 = 4'h7 == auto_out_bid ? _bWIRE_7_tl_state_source : _GEN_134;
  wire [6:0] _bWIRE_8_tl_state_source = QueueCompatibility_24_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_136 = 4'h8 == auto_out_bid ? _bWIRE_8_tl_state_source : _GEN_135;
  wire [6:0] _bWIRE_9_tl_state_source = QueueCompatibility_25_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_137 = 4'h9 == auto_out_bid ? _bWIRE_9_tl_state_source : _GEN_136;
  wire [6:0] _bWIRE_10_tl_state_source = QueueCompatibility_26_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_138 = 4'ha == auto_out_bid ? _bWIRE_10_tl_state_source : _GEN_137;
  wire [6:0] _bWIRE_11_tl_state_source = QueueCompatibility_27_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_139 = 4'hb == auto_out_bid ? _bWIRE_11_tl_state_source : _GEN_138;
  wire [6:0] _bWIRE_12_tl_state_source = QueueCompatibility_28_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_140 = 4'hc == auto_out_bid ? _bWIRE_12_tl_state_source : _GEN_139;
  wire [6:0] _bWIRE_13_tl_state_source = QueueCompatibility_29_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_141 = 4'hd == auto_out_bid ? _bWIRE_13_tl_state_source : _GEN_140;
  wire [6:0] _bWIRE_14_tl_state_source = QueueCompatibility_30_io_deq_bits_tl_state_source;
  wire [6:0] _GEN_142 = 4'he == auto_out_bid ? _bWIRE_14_tl_state_source : _GEN_141;
  wire [6:0] _bWIRE_15_tl_state_source = QueueCompatibility_31_io_deq_bits_tl_state_source;
  wire [3:0] _bWIRE_0_tl_state_size = QueueCompatibility_16_io_deq_bits_tl_state_size;
  wire [3:0] _bWIRE_1_tl_state_size = QueueCompatibility_17_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_145 = 4'h1 == auto_out_bid ? _bWIRE_1_tl_state_size : _bWIRE_0_tl_state_size;
  wire [3:0] _bWIRE_2_tl_state_size = QueueCompatibility_18_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_146 = 4'h2 == auto_out_bid ? _bWIRE_2_tl_state_size : _GEN_145;
  wire [3:0] _bWIRE_3_tl_state_size = QueueCompatibility_19_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_147 = 4'h3 == auto_out_bid ? _bWIRE_3_tl_state_size : _GEN_146;
  wire [3:0] _bWIRE_4_tl_state_size = QueueCompatibility_20_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_148 = 4'h4 == auto_out_bid ? _bWIRE_4_tl_state_size : _GEN_147;
  wire [3:0] _bWIRE_5_tl_state_size = QueueCompatibility_21_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_149 = 4'h5 == auto_out_bid ? _bWIRE_5_tl_state_size : _GEN_148;
  wire [3:0] _bWIRE_6_tl_state_size = QueueCompatibility_22_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_150 = 4'h6 == auto_out_bid ? _bWIRE_6_tl_state_size : _GEN_149;
  wire [3:0] _bWIRE_7_tl_state_size = QueueCompatibility_23_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_151 = 4'h7 == auto_out_bid ? _bWIRE_7_tl_state_size : _GEN_150;
  wire [3:0] _bWIRE_8_tl_state_size = QueueCompatibility_24_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_152 = 4'h8 == auto_out_bid ? _bWIRE_8_tl_state_size : _GEN_151;
  wire [3:0] _bWIRE_9_tl_state_size = QueueCompatibility_25_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_153 = 4'h9 == auto_out_bid ? _bWIRE_9_tl_state_size : _GEN_152;
  wire [3:0] _bWIRE_10_tl_state_size = QueueCompatibility_26_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_154 = 4'ha == auto_out_bid ? _bWIRE_10_tl_state_size : _GEN_153;
  wire [3:0] _bWIRE_11_tl_state_size = QueueCompatibility_27_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_155 = 4'hb == auto_out_bid ? _bWIRE_11_tl_state_size : _GEN_154;
  wire [3:0] _bWIRE_12_tl_state_size = QueueCompatibility_28_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_156 = 4'hc == auto_out_bid ? _bWIRE_12_tl_state_size : _GEN_155;
  wire [3:0] _bWIRE_13_tl_state_size = QueueCompatibility_29_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_157 = 4'hd == auto_out_bid ? _bWIRE_13_tl_state_size : _GEN_156;
  wire [3:0] _bWIRE_14_tl_state_size = QueueCompatibility_30_io_deq_bits_tl_state_size;
  wire [3:0] _GEN_158 = 4'he == auto_out_bid ? _bWIRE_14_tl_state_size : _GEN_157;
  wire [3:0] _bWIRE_15_tl_state_size = QueueCompatibility_31_io_deq_bits_tl_state_size;
  wire [15:0] _awsel_T = 16'h1 << auto_in_awid;
  wire  awsel_0 = _awsel_T[0];
  wire  awsel_1 = _awsel_T[1];
  wire  awsel_2 = _awsel_T[2];
  wire  awsel_3 = _awsel_T[3];
  wire  awsel_4 = _awsel_T[4];
  wire  awsel_5 = _awsel_T[5];
  wire  awsel_6 = _awsel_T[6];
  wire  awsel_7 = _awsel_T[7];
  wire  awsel_8 = _awsel_T[8];
  wire  awsel_9 = _awsel_T[9];
  wire  awsel_10 = _awsel_T[10];
  wire  awsel_11 = _awsel_T[11];
  wire  awsel_12 = _awsel_T[12];
  wire  awsel_13 = _awsel_T[13];
  wire  awsel_14 = _awsel_T[14];
  wire  awsel_15 = _awsel_T[15];
  wire [15:0] _bsel_T = 16'h1 << auto_out_bid;
  wire  bsel_0 = _bsel_T[0];
  wire  bsel_1 = _bsel_T[1];
  wire  bsel_2 = _bsel_T[2];
  wire  bsel_3 = _bsel_T[3];
  wire  bsel_4 = _bsel_T[4];
  wire  bsel_5 = _bsel_T[5];
  wire  bsel_6 = _bsel_T[6];
  wire  bsel_7 = _bsel_T[7];
  wire  bsel_8 = _bsel_T[8];
  wire  bsel_9 = _bsel_T[9];
  wire  bsel_10 = _bsel_T[10];
  wire  bsel_11 = _bsel_T[11];
  wire  bsel_12 = _bsel_T[12];
  wire  bsel_13 = _bsel_T[13];
  wire  bsel_14 = _bsel_T[14];
  wire  bsel_15 = _bsel_T[15];
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility (
    .clock(QueueCompatibility_clock),
    .reset(QueueCompatibility_reset),
    .io_enq_ready(QueueCompatibility_io_enq_ready),
    .io_enq_valid(QueueCompatibility_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_io_deq_ready),
    .io_deq_valid(QueueCompatibility_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_1 (
    .clock(QueueCompatibility_1_clock),
    .reset(QueueCompatibility_1_reset),
    .io_enq_ready(QueueCompatibility_1_io_enq_ready),
    .io_enq_valid(QueueCompatibility_1_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_1_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_1_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_1_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_1_io_deq_ready),
    .io_deq_valid(QueueCompatibility_1_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_1_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_1_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_1_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_2 (
    .clock(QueueCompatibility_2_clock),
    .reset(QueueCompatibility_2_reset),
    .io_enq_ready(QueueCompatibility_2_io_enq_ready),
    .io_enq_valid(QueueCompatibility_2_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_2_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_2_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_2_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_2_io_deq_ready),
    .io_deq_valid(QueueCompatibility_2_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_2_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_2_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_2_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_3 (
    .clock(QueueCompatibility_3_clock),
    .reset(QueueCompatibility_3_reset),
    .io_enq_ready(QueueCompatibility_3_io_enq_ready),
    .io_enq_valid(QueueCompatibility_3_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_3_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_3_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_3_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_3_io_deq_ready),
    .io_deq_valid(QueueCompatibility_3_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_3_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_3_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_3_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_4 (
    .clock(QueueCompatibility_4_clock),
    .reset(QueueCompatibility_4_reset),
    .io_enq_ready(QueueCompatibility_4_io_enq_ready),
    .io_enq_valid(QueueCompatibility_4_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_4_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_4_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_4_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_4_io_deq_ready),
    .io_deq_valid(QueueCompatibility_4_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_4_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_4_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_4_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_5 (
    .clock(QueueCompatibility_5_clock),
    .reset(QueueCompatibility_5_reset),
    .io_enq_ready(QueueCompatibility_5_io_enq_ready),
    .io_enq_valid(QueueCompatibility_5_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_5_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_5_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_5_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_5_io_deq_ready),
    .io_deq_valid(QueueCompatibility_5_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_5_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_5_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_5_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_6 (
    .clock(QueueCompatibility_6_clock),
    .reset(QueueCompatibility_6_reset),
    .io_enq_ready(QueueCompatibility_6_io_enq_ready),
    .io_enq_valid(QueueCompatibility_6_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_6_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_6_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_6_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_6_io_deq_ready),
    .io_deq_valid(QueueCompatibility_6_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_6_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_6_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_6_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_7 (
    .clock(QueueCompatibility_7_clock),
    .reset(QueueCompatibility_7_reset),
    .io_enq_ready(QueueCompatibility_7_io_enq_ready),
    .io_enq_valid(QueueCompatibility_7_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_7_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_7_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_7_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_7_io_deq_ready),
    .io_deq_valid(QueueCompatibility_7_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_7_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_7_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_7_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_8 (
    .clock(QueueCompatibility_8_clock),
    .reset(QueueCompatibility_8_reset),
    .io_enq_ready(QueueCompatibility_8_io_enq_ready),
    .io_enq_valid(QueueCompatibility_8_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_8_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_8_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_8_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_8_io_deq_ready),
    .io_deq_valid(QueueCompatibility_8_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_8_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_8_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_8_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_9 (
    .clock(QueueCompatibility_9_clock),
    .reset(QueueCompatibility_9_reset),
    .io_enq_ready(QueueCompatibility_9_io_enq_ready),
    .io_enq_valid(QueueCompatibility_9_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_9_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_9_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_9_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_9_io_deq_ready),
    .io_deq_valid(QueueCompatibility_9_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_9_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_9_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_9_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_10 (
    .clock(QueueCompatibility_10_clock),
    .reset(QueueCompatibility_10_reset),
    .io_enq_ready(QueueCompatibility_10_io_enq_ready),
    .io_enq_valid(QueueCompatibility_10_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_10_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_10_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_10_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_10_io_deq_ready),
    .io_deq_valid(QueueCompatibility_10_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_10_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_10_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_10_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_11 (
    .clock(QueueCompatibility_11_clock),
    .reset(QueueCompatibility_11_reset),
    .io_enq_ready(QueueCompatibility_11_io_enq_ready),
    .io_enq_valid(QueueCompatibility_11_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_11_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_11_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_11_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_11_io_deq_ready),
    .io_deq_valid(QueueCompatibility_11_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_11_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_11_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_11_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_12 (
    .clock(QueueCompatibility_12_clock),
    .reset(QueueCompatibility_12_reset),
    .io_enq_ready(QueueCompatibility_12_io_enq_ready),
    .io_enq_valid(QueueCompatibility_12_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_12_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_12_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_12_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_12_io_deq_ready),
    .io_deq_valid(QueueCompatibility_12_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_12_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_12_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_12_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_13 (
    .clock(QueueCompatibility_13_clock),
    .reset(QueueCompatibility_13_reset),
    .io_enq_ready(QueueCompatibility_13_io_enq_ready),
    .io_enq_valid(QueueCompatibility_13_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_13_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_13_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_13_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_13_io_deq_ready),
    .io_deq_valid(QueueCompatibility_13_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_13_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_13_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_13_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_14 (
    .clock(QueueCompatibility_14_clock),
    .reset(QueueCompatibility_14_reset),
    .io_enq_ready(QueueCompatibility_14_io_enq_ready),
    .io_enq_valid(QueueCompatibility_14_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_14_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_14_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_14_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_14_io_deq_ready),
    .io_deq_valid(QueueCompatibility_14_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_14_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_14_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_14_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_15 (
    .clock(QueueCompatibility_15_clock),
    .reset(QueueCompatibility_15_reset),
    .io_enq_ready(QueueCompatibility_15_io_enq_ready),
    .io_enq_valid(QueueCompatibility_15_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_15_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_15_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_15_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_15_io_deq_ready),
    .io_deq_valid(QueueCompatibility_15_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_15_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_15_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_15_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_16 (
    .clock(QueueCompatibility_16_clock),
    .reset(QueueCompatibility_16_reset),
    .io_enq_ready(QueueCompatibility_16_io_enq_ready),
    .io_enq_valid(QueueCompatibility_16_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_16_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_16_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_16_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_16_io_deq_ready),
    .io_deq_valid(QueueCompatibility_16_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_16_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_16_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_16_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_17 (
    .clock(QueueCompatibility_17_clock),
    .reset(QueueCompatibility_17_reset),
    .io_enq_ready(QueueCompatibility_17_io_enq_ready),
    .io_enq_valid(QueueCompatibility_17_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_17_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_17_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_17_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_17_io_deq_ready),
    .io_deq_valid(QueueCompatibility_17_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_17_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_17_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_17_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_18 (
    .clock(QueueCompatibility_18_clock),
    .reset(QueueCompatibility_18_reset),
    .io_enq_ready(QueueCompatibility_18_io_enq_ready),
    .io_enq_valid(QueueCompatibility_18_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_18_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_18_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_18_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_18_io_deq_ready),
    .io_deq_valid(QueueCompatibility_18_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_18_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_18_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_18_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_19 (
    .clock(QueueCompatibility_19_clock),
    .reset(QueueCompatibility_19_reset),
    .io_enq_ready(QueueCompatibility_19_io_enq_ready),
    .io_enq_valid(QueueCompatibility_19_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_19_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_19_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_19_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_19_io_deq_ready),
    .io_deq_valid(QueueCompatibility_19_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_19_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_19_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_19_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_20 (
    .clock(QueueCompatibility_20_clock),
    .reset(QueueCompatibility_20_reset),
    .io_enq_ready(QueueCompatibility_20_io_enq_ready),
    .io_enq_valid(QueueCompatibility_20_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_20_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_20_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_20_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_20_io_deq_ready),
    .io_deq_valid(QueueCompatibility_20_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_20_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_20_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_20_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_21 (
    .clock(QueueCompatibility_21_clock),
    .reset(QueueCompatibility_21_reset),
    .io_enq_ready(QueueCompatibility_21_io_enq_ready),
    .io_enq_valid(QueueCompatibility_21_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_21_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_21_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_21_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_21_io_deq_ready),
    .io_deq_valid(QueueCompatibility_21_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_21_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_21_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_21_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_4 QueueCompatibility_22 (
    .clock(QueueCompatibility_22_clock),
    .reset(QueueCompatibility_22_reset),
    .io_enq_ready(QueueCompatibility_22_io_enq_ready),
    .io_enq_valid(QueueCompatibility_22_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_22_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_22_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_22_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_22_io_deq_ready),
    .io_deq_valid(QueueCompatibility_22_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_22_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_22_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_22_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_23 (
    .clock(QueueCompatibility_23_clock),
    .reset(QueueCompatibility_23_reset),
    .io_enq_ready(QueueCompatibility_23_io_enq_ready),
    .io_enq_valid(QueueCompatibility_23_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_23_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_23_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_23_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_23_io_deq_ready),
    .io_deq_valid(QueueCompatibility_23_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_23_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_23_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_23_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_24 (
    .clock(QueueCompatibility_24_clock),
    .reset(QueueCompatibility_24_reset),
    .io_enq_ready(QueueCompatibility_24_io_enq_ready),
    .io_enq_valid(QueueCompatibility_24_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_24_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_24_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_24_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_24_io_deq_ready),
    .io_deq_valid(QueueCompatibility_24_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_24_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_24_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_24_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_25 (
    .clock(QueueCompatibility_25_clock),
    .reset(QueueCompatibility_25_reset),
    .io_enq_ready(QueueCompatibility_25_io_enq_ready),
    .io_enq_valid(QueueCompatibility_25_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_25_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_25_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_25_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_25_io_deq_ready),
    .io_deq_valid(QueueCompatibility_25_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_25_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_25_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_25_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_26 (
    .clock(QueueCompatibility_26_clock),
    .reset(QueueCompatibility_26_reset),
    .io_enq_ready(QueueCompatibility_26_io_enq_ready),
    .io_enq_valid(QueueCompatibility_26_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_26_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_26_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_26_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_26_io_deq_ready),
    .io_deq_valid(QueueCompatibility_26_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_26_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_26_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_26_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_27 (
    .clock(QueueCompatibility_27_clock),
    .reset(QueueCompatibility_27_reset),
    .io_enq_ready(QueueCompatibility_27_io_enq_ready),
    .io_enq_valid(QueueCompatibility_27_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_27_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_27_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_27_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_27_io_deq_ready),
    .io_deq_valid(QueueCompatibility_27_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_27_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_27_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_27_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_28 (
    .clock(QueueCompatibility_28_clock),
    .reset(QueueCompatibility_28_reset),
    .io_enq_ready(QueueCompatibility_28_io_enq_ready),
    .io_enq_valid(QueueCompatibility_28_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_28_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_28_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_28_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_28_io_deq_ready),
    .io_deq_valid(QueueCompatibility_28_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_28_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_28_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_28_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_29 (
    .clock(QueueCompatibility_29_clock),
    .reset(QueueCompatibility_29_reset),
    .io_enq_ready(QueueCompatibility_29_io_enq_ready),
    .io_enq_valid(QueueCompatibility_29_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_29_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_29_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_29_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_29_io_deq_ready),
    .io_deq_valid(QueueCompatibility_29_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_29_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_29_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_29_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_30 (
    .clock(QueueCompatibility_30_clock),
    .reset(QueueCompatibility_30_reset),
    .io_enq_ready(QueueCompatibility_30_io_enq_ready),
    .io_enq_valid(QueueCompatibility_30_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_30_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_30_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_30_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_30_io_deq_ready),
    .io_deq_valid(QueueCompatibility_30_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_30_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_30_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_30_io_deq_bits_extra_id)
  );
  CHIPLINK_PREFIX_QueueCompatibility_11 QueueCompatibility_31 (
    .clock(QueueCompatibility_31_clock),
    .reset(QueueCompatibility_31_reset),
    .io_enq_ready(QueueCompatibility_31_io_enq_ready),
    .io_enq_valid(QueueCompatibility_31_io_enq_valid),
    .io_enq_bits_tl_state_size(QueueCompatibility_31_io_enq_bits_tl_state_size),
    .io_enq_bits_tl_state_source(QueueCompatibility_31_io_enq_bits_tl_state_source),
    .io_enq_bits_extra_id(QueueCompatibility_31_io_enq_bits_extra_id),
    .io_deq_ready(QueueCompatibility_31_io_deq_ready),
    .io_deq_valid(QueueCompatibility_31_io_deq_valid),
    .io_deq_bits_tl_state_size(QueueCompatibility_31_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source(QueueCompatibility_31_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id(QueueCompatibility_31_io_deq_bits_extra_id)
  );
  assign auto_in_awready = auto_out_awready & _GEN_95;
  assign auto_in_wready = auto_out_wready;
  assign auto_in_bvalid = auto_out_bvalid;
  assign auto_in_bid = auto_out_bid;
  assign auto_in_bresp = auto_out_bresp;
  assign auto_in_becho_tl_state_size = 4'hf == auto_out_bid ? _bWIRE_15_tl_state_size : _GEN_158;
  assign auto_in_becho_tl_state_source = 4'hf == auto_out_bid ? _bWIRE_15_tl_state_source : _GEN_142;
  assign auto_in_becho_extra_id = 4'hf == auto_out_bid ? _bWIRE_15_extra_id : _GEN_126;
  assign auto_in_arready = auto_out_arready & _GEN_15;
  assign auto_in_rvalid = auto_out_rvalid;
  assign auto_in_rid = auto_out_rid;
  assign auto_in_rdata = auto_out_rdata;
  assign auto_in_rresp = auto_out_rresp;
  assign auto_in_recho_tl_state_size = 4'hf == auto_out_rid ? _rWIRE_15_tl_state_size : _GEN_78;
  assign auto_in_recho_tl_state_source = 4'hf == auto_out_rid ? _rWIRE_15_tl_state_source : _GEN_62;
  assign auto_in_recho_extra_id = 4'hf == auto_out_rid ? _rWIRE_15_extra_id : _GEN_46;
  assign auto_in_rlast = auto_out_rlast;
  assign auto_out_awvalid = auto_in_awvalid & _GEN_95;
  assign auto_out_awid = auto_in_awid;
  assign auto_out_awaddr = auto_in_awaddr;
  assign auto_out_awlen = auto_in_awlen;
  assign auto_out_awsize = auto_in_awsize;
  assign auto_out_awburst = auto_in_awburst;
  assign auto_out_wvalid = auto_in_wvalid;
  assign auto_out_wdata = auto_in_wdata;
  assign auto_out_wstrb = auto_in_wstrb;
  assign auto_out_wlast = auto_in_wlast;
  assign auto_out_bready = auto_in_bready;
  assign auto_out_arvalid = auto_in_arvalid & _GEN_15;
  assign auto_out_arid = auto_in_arid;
  assign auto_out_araddr = auto_in_araddr;
  assign auto_out_arlen = auto_in_arlen;
  assign auto_out_arsize = auto_in_arsize;
  assign auto_out_arburst = auto_in_arburst;
  assign auto_out_rready = auto_in_rready;
  assign QueueCompatibility_clock = clock;
  assign QueueCompatibility_reset = reset;
  assign QueueCompatibility_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_0;
  assign QueueCompatibility_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_0 & auto_out_rlast;
  assign QueueCompatibility_1_clock = clock;
  assign QueueCompatibility_1_reset = reset;
  assign QueueCompatibility_1_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_1;
  assign QueueCompatibility_1_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_1_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_1_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_1_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_1 & auto_out_rlast;
  assign QueueCompatibility_2_clock = clock;
  assign QueueCompatibility_2_reset = reset;
  assign QueueCompatibility_2_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_2;
  assign QueueCompatibility_2_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_2_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_2_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_2_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_2 & auto_out_rlast;
  assign QueueCompatibility_3_clock = clock;
  assign QueueCompatibility_3_reset = reset;
  assign QueueCompatibility_3_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_3;
  assign QueueCompatibility_3_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_3_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_3_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_3_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_3 & auto_out_rlast;
  assign QueueCompatibility_4_clock = clock;
  assign QueueCompatibility_4_reset = reset;
  assign QueueCompatibility_4_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_4;
  assign QueueCompatibility_4_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_4_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_4_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_4_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_4 & auto_out_rlast;
  assign QueueCompatibility_5_clock = clock;
  assign QueueCompatibility_5_reset = reset;
  assign QueueCompatibility_5_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_5;
  assign QueueCompatibility_5_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_5_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_5_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_5_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_5 & auto_out_rlast;
  assign QueueCompatibility_6_clock = clock;
  assign QueueCompatibility_6_reset = reset;
  assign QueueCompatibility_6_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_6;
  assign QueueCompatibility_6_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_6_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_6_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_6_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_6 & auto_out_rlast;
  assign QueueCompatibility_7_clock = clock;
  assign QueueCompatibility_7_reset = reset;
  assign QueueCompatibility_7_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_7;
  assign QueueCompatibility_7_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_7_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_7_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_7_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_7 & auto_out_rlast;
  assign QueueCompatibility_8_clock = clock;
  assign QueueCompatibility_8_reset = reset;
  assign QueueCompatibility_8_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_8;
  assign QueueCompatibility_8_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_8_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_8_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_8_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_8 & auto_out_rlast;
  assign QueueCompatibility_9_clock = clock;
  assign QueueCompatibility_9_reset = reset;
  assign QueueCompatibility_9_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_9;
  assign QueueCompatibility_9_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_9_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_9_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_9_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_9 & auto_out_rlast;
  assign QueueCompatibility_10_clock = clock;
  assign QueueCompatibility_10_reset = reset;
  assign QueueCompatibility_10_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_10;
  assign QueueCompatibility_10_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_10_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_10_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_10_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_10 & auto_out_rlast;
  assign QueueCompatibility_11_clock = clock;
  assign QueueCompatibility_11_reset = reset;
  assign QueueCompatibility_11_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_11;
  assign QueueCompatibility_11_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_11_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_11_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_11_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_11 & auto_out_rlast;
  assign QueueCompatibility_12_clock = clock;
  assign QueueCompatibility_12_reset = reset;
  assign QueueCompatibility_12_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_12;
  assign QueueCompatibility_12_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_12_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_12_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_12_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_12 & auto_out_rlast;
  assign QueueCompatibility_13_clock = clock;
  assign QueueCompatibility_13_reset = reset;
  assign QueueCompatibility_13_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_13;
  assign QueueCompatibility_13_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_13_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_13_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_13_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_13 & auto_out_rlast;
  assign QueueCompatibility_14_clock = clock;
  assign QueueCompatibility_14_reset = reset;
  assign QueueCompatibility_14_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_14;
  assign QueueCompatibility_14_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_14_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_14_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_14_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_14 & auto_out_rlast;
  assign QueueCompatibility_15_clock = clock;
  assign QueueCompatibility_15_reset = reset;
  assign QueueCompatibility_15_io_enq_valid = auto_in_arvalid & auto_out_arready & arsel_15;
  assign QueueCompatibility_15_io_enq_bits_tl_state_size = auto_in_arecho_tl_state_size;
  assign QueueCompatibility_15_io_enq_bits_tl_state_source = auto_in_arecho_tl_state_source;
  assign QueueCompatibility_15_io_enq_bits_extra_id = auto_in_arecho_extra_id;
  assign QueueCompatibility_15_io_deq_ready = auto_out_rvalid & auto_in_rready & rsel_15 & auto_out_rlast;
  assign QueueCompatibility_16_clock = clock;
  assign QueueCompatibility_16_reset = reset;
  assign QueueCompatibility_16_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_0;
  assign QueueCompatibility_16_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_16_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_16_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_16_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_0;
  assign QueueCompatibility_17_clock = clock;
  assign QueueCompatibility_17_reset = reset;
  assign QueueCompatibility_17_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_1;
  assign QueueCompatibility_17_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_17_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_17_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_17_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_1;
  assign QueueCompatibility_18_clock = clock;
  assign QueueCompatibility_18_reset = reset;
  assign QueueCompatibility_18_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_2;
  assign QueueCompatibility_18_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_18_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_18_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_18_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_2;
  assign QueueCompatibility_19_clock = clock;
  assign QueueCompatibility_19_reset = reset;
  assign QueueCompatibility_19_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_3;
  assign QueueCompatibility_19_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_19_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_19_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_19_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_3;
  assign QueueCompatibility_20_clock = clock;
  assign QueueCompatibility_20_reset = reset;
  assign QueueCompatibility_20_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_4;
  assign QueueCompatibility_20_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_20_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_20_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_20_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_4;
  assign QueueCompatibility_21_clock = clock;
  assign QueueCompatibility_21_reset = reset;
  assign QueueCompatibility_21_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_5;
  assign QueueCompatibility_21_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_21_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_21_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_21_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_5;
  assign QueueCompatibility_22_clock = clock;
  assign QueueCompatibility_22_reset = reset;
  assign QueueCompatibility_22_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_6;
  assign QueueCompatibility_22_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_22_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_22_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_22_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_6;
  assign QueueCompatibility_23_clock = clock;
  assign QueueCompatibility_23_reset = reset;
  assign QueueCompatibility_23_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_7;
  assign QueueCompatibility_23_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_23_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_23_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_23_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_7;
  assign QueueCompatibility_24_clock = clock;
  assign QueueCompatibility_24_reset = reset;
  assign QueueCompatibility_24_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_8;
  assign QueueCompatibility_24_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_24_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_24_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_24_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_8;
  assign QueueCompatibility_25_clock = clock;
  assign QueueCompatibility_25_reset = reset;
  assign QueueCompatibility_25_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_9;
  assign QueueCompatibility_25_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_25_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_25_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_25_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_9;
  assign QueueCompatibility_26_clock = clock;
  assign QueueCompatibility_26_reset = reset;
  assign QueueCompatibility_26_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_10;
  assign QueueCompatibility_26_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_26_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_26_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_26_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_10;
  assign QueueCompatibility_27_clock = clock;
  assign QueueCompatibility_27_reset = reset;
  assign QueueCompatibility_27_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_11;
  assign QueueCompatibility_27_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_27_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_27_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_27_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_11;
  assign QueueCompatibility_28_clock = clock;
  assign QueueCompatibility_28_reset = reset;
  assign QueueCompatibility_28_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_12;
  assign QueueCompatibility_28_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_28_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_28_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_28_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_12;
  assign QueueCompatibility_29_clock = clock;
  assign QueueCompatibility_29_reset = reset;
  assign QueueCompatibility_29_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_13;
  assign QueueCompatibility_29_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_29_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_29_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_29_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_13;
  assign QueueCompatibility_30_clock = clock;
  assign QueueCompatibility_30_reset = reset;
  assign QueueCompatibility_30_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_14;
  assign QueueCompatibility_30_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_30_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_30_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_30_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_14;
  assign QueueCompatibility_31_clock = clock;
  assign QueueCompatibility_31_reset = reset;
  assign QueueCompatibility_31_io_enq_valid = auto_in_awvalid & auto_out_awready & awsel_15;
  assign QueueCompatibility_31_io_enq_bits_tl_state_size = auto_in_awecho_tl_state_size;
  assign QueueCompatibility_31_io_enq_bits_tl_state_source = auto_in_awecho_tl_state_source;
  assign QueueCompatibility_31_io_enq_bits_extra_id = auto_in_awecho_extra_id;
  assign QueueCompatibility_31_io_deq_ready = auto_out_bvalid & auto_in_bready & bsel_15;
  always @(posedge clock) begin
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~auto_out_rvalid | _GEN_31 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at UserYanker.scala:63 assert (!out.r.valid || r_valid) // Q must be ready faster than the response\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~auto_out_rvalid | _GEN_31 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~auto_out_bvalid | _GEN_111 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at UserYanker.scala:84 assert (!out.b.valid || b_valid) // Q must be ready faster than the response\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~auto_out_bvalid | _GEN_111 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
endmodule
module CHIPLINK_PREFIX_AXI4IdIndexer_1(
  output        auto_in_awready,
  input         auto_in_awvalid,
  input  [4:0]  auto_in_awid,
  input  [31:0] auto_in_awaddr,
  input  [7:0]  auto_in_awlen,
  input  [2:0]  auto_in_awsize,
  input  [1:0]  auto_in_awburst,
  input  [3:0]  auto_in_awecho_tl_state_size,
  input  [6:0]  auto_in_awecho_tl_state_source,
  output        auto_in_wready,
  input         auto_in_wvalid,
  input  [63:0] auto_in_wdata,
  input  [7:0]  auto_in_wstrb,
  input         auto_in_wlast,
  input         auto_in_bready,
  output        auto_in_bvalid,
  output [4:0]  auto_in_bid,
  output [1:0]  auto_in_bresp,
  output [3:0]  auto_in_becho_tl_state_size,
  output [6:0]  auto_in_becho_tl_state_source,
  output        auto_in_arready,
  input         auto_in_arvalid,
  input  [4:0]  auto_in_arid,
  input  [31:0] auto_in_araddr,
  input  [7:0]  auto_in_arlen,
  input  [2:0]  auto_in_arsize,
  input  [1:0]  auto_in_arburst,
  input  [3:0]  auto_in_arecho_tl_state_size,
  input  [6:0]  auto_in_arecho_tl_state_source,
  input         auto_in_rready,
  output        auto_in_rvalid,
  output [4:0]  auto_in_rid,
  output [63:0] auto_in_rdata,
  output [1:0]  auto_in_rresp,
  output [3:0]  auto_in_recho_tl_state_size,
  output [6:0]  auto_in_recho_tl_state_source,
  output        auto_in_rlast,
  input         auto_out_awready,
  output        auto_out_awvalid,
  output [3:0]  auto_out_awid,
  output [31:0] auto_out_awaddr,
  output [7:0]  auto_out_awlen,
  output [2:0]  auto_out_awsize,
  output [1:0]  auto_out_awburst,
  output [3:0]  auto_out_awecho_tl_state_size,
  output [6:0]  auto_out_awecho_tl_state_source,
  output        auto_out_awecho_extra_id,
  input         auto_out_wready,
  output        auto_out_wvalid,
  output [63:0] auto_out_wdata,
  output [7:0]  auto_out_wstrb,
  output        auto_out_wlast,
  output        auto_out_bready,
  input         auto_out_bvalid,
  input  [3:0]  auto_out_bid,
  input  [1:0]  auto_out_bresp,
  input  [3:0]  auto_out_becho_tl_state_size,
  input  [6:0]  auto_out_becho_tl_state_source,
  input         auto_out_becho_extra_id,
  input         auto_out_arready,
  output        auto_out_arvalid,
  output [3:0]  auto_out_arid,
  output [31:0] auto_out_araddr,
  output [7:0]  auto_out_arlen,
  output [2:0]  auto_out_arsize,
  output [1:0]  auto_out_arburst,
  output [3:0]  auto_out_arecho_tl_state_size,
  output [6:0]  auto_out_arecho_tl_state_source,
  output        auto_out_arecho_extra_id,
  output        auto_out_rready,
  input         auto_out_rvalid,
  input  [3:0]  auto_out_rid,
  input  [63:0] auto_out_rdata,
  input  [1:0]  auto_out_rresp,
  input  [3:0]  auto_out_recho_tl_state_size,
  input  [6:0]  auto_out_recho_tl_state_source,
  input         auto_out_recho_extra_id,
  input         auto_out_rlast
);
  assign auto_in_awready = auto_out_awready;
  assign auto_in_wready = auto_out_wready;
  assign auto_in_bvalid = auto_out_bvalid;
  assign auto_in_bid = {auto_out_becho_extra_id,auto_out_bid};
  assign auto_in_bresp = auto_out_bresp;
  assign auto_in_becho_tl_state_size = auto_out_becho_tl_state_size;
  assign auto_in_becho_tl_state_source = auto_out_becho_tl_state_source;
  assign auto_in_arready = auto_out_arready;
  assign auto_in_rvalid = auto_out_rvalid;
  assign auto_in_rid = {auto_out_recho_extra_id,auto_out_rid};
  assign auto_in_rdata = auto_out_rdata;
  assign auto_in_rresp = auto_out_rresp;
  assign auto_in_recho_tl_state_size = auto_out_recho_tl_state_size;
  assign auto_in_recho_tl_state_source = auto_out_recho_tl_state_source;
  assign auto_in_rlast = auto_out_rlast;
  assign auto_out_awvalid = auto_in_awvalid;
  assign auto_out_awid = auto_in_awid[3:0];
  assign auto_out_awaddr = auto_in_awaddr;
  assign auto_out_awlen = auto_in_awlen;
  assign auto_out_awsize = auto_in_awsize;
  assign auto_out_awburst = auto_in_awburst;
  assign auto_out_awecho_tl_state_size = auto_in_awecho_tl_state_size;
  assign auto_out_awecho_tl_state_source = auto_in_awecho_tl_state_source;
  assign auto_out_awecho_extra_id = auto_in_awid[4];
  assign auto_out_wvalid = auto_in_wvalid;
  assign auto_out_wdata = auto_in_wdata;
  assign auto_out_wstrb = auto_in_wstrb;
  assign auto_out_wlast = auto_in_wlast;
  assign auto_out_bready = auto_in_bready;
  assign auto_out_arvalid = auto_in_arvalid;
  assign auto_out_arid = auto_in_arid[3:0];
  assign auto_out_araddr = auto_in_araddr;
  assign auto_out_arlen = auto_in_arlen;
  assign auto_out_arsize = auto_in_arsize;
  assign auto_out_arburst = auto_in_arburst;
  assign auto_out_arecho_tl_state_size = auto_in_arecho_tl_state_size;
  assign auto_out_arecho_tl_state_source = auto_in_arecho_tl_state_source;
  assign auto_out_arecho_extra_id = auto_in_arid[4];
  assign auto_out_rready = auto_in_rready;
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_10(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_param,
  input  [2:0]  io_in_a_bits_size,
  input  [6:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input         io_in_a_bits_corrupt,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [2:0]  io_in_d_bits_size,
  input  [6:0]  io_in_d_bits_source,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [127:0] _RAND_11;
  reg [511:0] _RAND_12;
  reg [511:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [127:0] _RAND_17;
  reg [511:0] _RAND_18;
  reg [31:0] _RAND_19;
  reg [31:0] _RAND_20;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = io_in_a_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_7 = io_in_a_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_13 = io_in_a_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_19 = io_in_a_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_25 = io_in_a_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_31 = io_in_a_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_37 = io_in_a_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_43 = io_in_a_bits_source[6:4] == 3'h7;
  wire  source_ok = _source_ok_T_1 | _source_ok_T_7 | _source_ok_T_13 | _source_ok_T_19 | _source_ok_T_25 |
    _source_ok_T_31 | _source_ok_T_37 | _source_ok_T_43;
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_71 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_71;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire [1:0] mask_sizeOH_shiftAmount = io_in_a_bits_size[1:0];
  wire [3:0] _mask_sizeOH_T_1 = 4'h1 << mask_sizeOH_shiftAmount;
  wire [2:0] mask_sizeOH = _mask_sizeOH_T_1[2:0] | 3'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h3;
  wire  mask_size = mask_sizeOH[2];
  wire  mask_bit = io_in_a_bits_address[2];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[1];
  wire  mask_bit_1 = io_in_a_bits_address[1];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire  mask_size_2 = mask_sizeOH[0];
  wire  mask_bit_2 = io_in_a_bits_address[0];
  wire  mask_nbit_2 = ~mask_bit_2;
  wire  mask_eq_6 = mask_eq_2 & mask_nbit_2;
  wire  mask_lo_lo_lo = mask_acc_2 | mask_size_2 & mask_eq_6;
  wire  mask_eq_7 = mask_eq_2 & mask_bit_2;
  wire  mask_lo_lo_hi = mask_acc_2 | mask_size_2 & mask_eq_7;
  wire  mask_eq_8 = mask_eq_3 & mask_nbit_2;
  wire  mask_lo_hi_lo = mask_acc_3 | mask_size_2 & mask_eq_8;
  wire  mask_eq_9 = mask_eq_3 & mask_bit_2;
  wire  mask_lo_hi_hi = mask_acc_3 | mask_size_2 & mask_eq_9;
  wire  mask_eq_10 = mask_eq_4 & mask_nbit_2;
  wire  mask_hi_lo_lo = mask_acc_4 | mask_size_2 & mask_eq_10;
  wire  mask_eq_11 = mask_eq_4 & mask_bit_2;
  wire  mask_hi_lo_hi = mask_acc_4 | mask_size_2 & mask_eq_11;
  wire  mask_eq_12 = mask_eq_5 & mask_nbit_2;
  wire  mask_hi_hi_lo = mask_acc_5 | mask_size_2 & mask_eq_12;
  wire  mask_eq_13 = mask_eq_5 & mask_bit_2;
  wire  mask_hi_hi_hi = mask_acc_5 | mask_size_2 & mask_eq_13;
  wire [7:0] mask = {mask_hi_hi_hi,mask_hi_hi_lo,mask_hi_lo_hi,mask_hi_lo_lo,mask_lo_hi_hi,mask_lo_hi_lo,mask_lo_lo_hi,
    mask_lo_lo_lo};
  wire  _T_118 = io_in_a_bits_opcode == 3'h6;
  wire [31:0] _T_180 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_181 = {1'b0,$signed(_T_180)};
  wire [32:0] _T_183 = $signed(_T_181) & -33'sh10000000;
  wire  _T_184 = $signed(_T_183) == 33'sh0;
  wire [31:0] _T_185 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_186 = {1'b0,$signed(_T_185)};
  wire [32:0] _T_188 = $signed(_T_186) & -33'sh20000000;
  wire  _T_189 = $signed(_T_188) == 33'sh0;
  wire [31:0] _T_190 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_191 = {1'b0,$signed(_T_190)};
  wire [32:0] _T_193 = $signed(_T_191) & -33'sh40000000;
  wire  _T_194 = $signed(_T_193) == 33'sh0;
  wire [31:0] _T_195 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_196 = {1'b0,$signed(_T_195)};
  wire [32:0] _T_198 = $signed(_T_196) & -33'sh40000000;
  wire  _T_199 = $signed(_T_198) == 33'sh0;
  wire [31:0] _T_200 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_201 = {1'b0,$signed(_T_200)};
  wire [32:0] _T_203 = $signed(_T_201) & -33'sh20000000;
  wire  _T_204 = $signed(_T_203) == 33'sh0;
  wire  _T_208 = _T_184 | _T_189 | _T_194 | _T_199 | _T_204;
  wire  _T_214 = ~reset;
  wire  _T_264 = io_in_a_bits_size <= 3'h6;
  wire  _T_266 = _source_ok_T_1 & _T_264;
  wire  _T_316 = _T_266 & _T_208;
  wire  _T_330 = io_in_a_bits_param <= 3'h2;
  wire [7:0] _T_334 = ~io_in_a_bits_mask;
  wire  _T_335 = _T_334 == 8'h0;
  wire  _T_339 = ~io_in_a_bits_corrupt;
  wire  _T_343 = io_in_a_bits_opcode == 3'h7;
  wire  _T_559 = io_in_a_bits_param != 3'h0;
  wire  _T_572 = io_in_a_bits_opcode == 3'h4;
  wire  _T_669 = _T_264 & _T_208;
  wire  _T_680 = io_in_a_bits_param == 3'h0;
  wire  _T_684 = io_in_a_bits_mask == mask;
  wire  _T_692 = io_in_a_bits_opcode == 3'h0;
  wire  _T_788 = source_ok & _T_669;
  wire  _T_806 = io_in_a_bits_opcode == 3'h1;
  wire [7:0] _T_916 = ~mask;
  wire [7:0] _T_917 = io_in_a_bits_mask & _T_916;
  wire  _T_918 = _T_917 == 8'h0;
  wire  _T_922 = io_in_a_bits_opcode == 3'h2;
  wire  _T_1025 = io_in_a_bits_param <= 3'h4;
  wire  _T_1033 = io_in_a_bits_opcode == 3'h3;
  wire  _T_1136 = io_in_a_bits_param <= 3'h3;
  wire  _T_1144 = io_in_a_bits_opcode == 3'h5;
  wire  _T_1247 = io_in_a_bits_param <= 3'h1;
  wire  _T_1259 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_55 = io_in_d_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_61 = io_in_d_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_67 = io_in_d_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_73 = io_in_d_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_79 = io_in_d_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_85 = io_in_d_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_91 = io_in_d_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_97 = io_in_d_bits_source[6:4] == 3'h7;
  wire  source_ok_1 = _source_ok_T_55 | _source_ok_T_61 | _source_ok_T_67 | _source_ok_T_73 | _source_ok_T_79 |
    _source_ok_T_85 | _source_ok_T_91 | _source_ok_T_97;
  wire  _T_1263 = io_in_d_bits_opcode == 3'h6;
  wire  _T_1267 = io_in_d_bits_size >= 3'h3;
  wire  _T_1275 = ~io_in_d_bits_corrupt;
  wire  _T_1279 = ~io_in_d_bits_denied;
  wire  _T_1283 = io_in_d_bits_opcode == 3'h4;
  wire  _T_1311 = io_in_d_bits_opcode == 3'h5;
  wire  _T_1331 = _T_1279 | io_in_d_bits_corrupt;
  wire  _T_1340 = io_in_d_bits_opcode == 3'h0;
  wire  _T_1357 = io_in_d_bits_opcode == 3'h1;
  wire  _T_1375 = io_in_d_bits_opcode == 3'h2;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [2:0] a_first_beats1_decode = is_aligned_mask[5:3];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [2:0] a_first_counter;
  wire [2:0] a_first_counter1 = a_first_counter - 3'h1;
  wire  a_first = a_first_counter == 3'h0;
  reg [2:0] opcode;
  reg [2:0] param;
  reg [2:0] size;
  reg [6:0] source;
  reg [31:0] address;
  wire  _T_1405 = io_in_a_valid & ~a_first;
  wire  _T_1406 = io_in_a_bits_opcode == opcode;
  wire  _T_1410 = io_in_a_bits_param == param;
  wire  _T_1414 = io_in_a_bits_size == size;
  wire  _T_1418 = io_in_a_bits_source == source;
  wire  _T_1422 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [2:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:3];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [2:0] d_first_counter;
  wire [2:0] d_first_counter1 = d_first_counter - 3'h1;
  wire  d_first = d_first_counter == 3'h0;
  reg [2:0] opcode_1;
  reg [2:0] size_1;
  reg [6:0] source_1;
  reg  denied;
  wire  _T_1429 = io_in_d_valid & ~d_first;
  wire  _T_1430 = io_in_d_bits_opcode == opcode_1;
  wire  _T_1438 = io_in_d_bits_size == size_1;
  wire  _T_1442 = io_in_d_bits_source == source_1;
  wire  _T_1450 = io_in_d_bits_denied == denied;
  reg [127:0] inflight;
  reg [511:0] inflight_opcodes;
  reg [511:0] inflight_sizes;
  reg [2:0] a_first_counter_1;
  wire [2:0] a_first_counter1_1 = a_first_counter_1 - 3'h1;
  wire  a_first_1 = a_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_1;
  wire [2:0] d_first_counter1_1 = d_first_counter_1 - 3'h1;
  wire  d_first_1 = d_first_counter_1 == 3'h0;
  wire [8:0] _GEN_72 = {io_in_d_bits_source, 2'h0};
  wire [9:0] _a_opcode_lookup_T = {{1'd0}, _GEN_72};
  wire [511:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [511:0] _GEN_73 = {{496'd0}, _a_opcode_lookup_T_5};
  wire [511:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_73;
  wire [511:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[511:1]};
  wire [511:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [511:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_73;
  wire [511:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[511:1]};
  wire  _T_1456 = io_in_a_valid & a_first_1;
  wire [127:0] _a_set_wo_ready_T = 128'h1 << io_in_a_bits_source;
  wire [127:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire  _T_1459 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_78 = {io_in_a_bits_source, 2'h0};
  wire [9:0] _a_opcodes_set_T = {{1'd0}, _GEN_78};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_79 = {{1023'd0}, a_opcodes_set_interm};
  wire [1026:0] _a_opcodes_set_T_1 = _GEN_79 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_81 = {{1023'd0}, a_sizes_set_interm};
  wire [1026:0] _a_sizes_set_T_1 = _GEN_81 << _a_opcodes_set_T;
  wire [127:0] _T_1461 = inflight >> io_in_a_bits_source;
  wire  _T_1463 = ~_T_1461[0];
  wire [127:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_19 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 1027'h0;
  wire [1026:0] _GEN_20 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 1027'h0;
  wire  _T_1467 = io_in_d_valid & d_first_1;
  wire  _T_1469 = ~_T_1263;
  wire  _T_1470 = io_in_d_valid & d_first_1 & ~_T_1263;
  wire [127:0] _d_clr_wo_ready_T = 128'h1 << io_in_d_bits_source;
  wire [127:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_1263 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_83 = {{1023'd0}, _a_opcode_lookup_T_5};
  wire [1038:0] _d_opcodes_clr_T_5 = _GEN_83 << _a_opcode_lookup_T;
  wire [127:0] d_clr = _d_first_T & d_first_1 & _T_1469 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_23 = _d_first_T & d_first_1 & _T_1469 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_1456 & io_in_a_bits_source == io_in_d_bits_source;
  wire [127:0] _T_1480 = inflight >> io_in_d_bits_source;
  wire  _T_1482 = _T_1480[0] | same_cycle_resp;
  wire [2:0] _GEN_27 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_28 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_27;
  wire [2:0] _GEN_29 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_28;
  wire [2:0] _GEN_30 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_29;
  wire [2:0] _GEN_31 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_30;
  wire [2:0] _GEN_32 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_31;
  wire [2:0] _GEN_39 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_30;
  wire [2:0] _GEN_40 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_39;
  wire  _T_1487 = io_in_d_bits_opcode == _GEN_40;
  wire  _T_1488 = io_in_d_bits_opcode == _GEN_32 | _T_1487;
  wire  _T_1492 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_43 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_44 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_43;
  wire [2:0] _GEN_45 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_44;
  wire [2:0] _GEN_46 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_45;
  wire [2:0] _GEN_47 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_46;
  wire [2:0] _GEN_48 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_47;
  wire [2:0] _GEN_55 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_46;
  wire [2:0] _GEN_56 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_55;
  wire  _T_1499 = io_in_d_bits_opcode == _GEN_56;
  wire  _T_1500 = io_in_d_bits_opcode == _GEN_48 | _T_1499;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_86 = {{1'd0}, io_in_d_bits_size};
  wire  _T_1504 = _GEN_86 == a_size_lookup;
  wire  _T_1514 = _T_1467 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_1469;
  wire  _T_1516 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_1523 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [127:0] _inflight_T = inflight | a_set;
  wire [127:0] _inflight_T_1 = ~d_clr;
  wire [127:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [511:0] a_opcodes_set = _GEN_19[511:0];
  wire [511:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [511:0] d_opcodes_clr = _GEN_23[511:0];
  wire [511:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [511:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [511:0] a_sizes_set = _GEN_20[511:0];
  wire [511:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [511:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_1532 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [127:0] inflight_1;
  reg [511:0] inflight_sizes_1;
  reg [2:0] d_first_counter_2;
  wire [2:0] d_first_counter1_2 = d_first_counter_2 - 3'h1;
  wire  d_first_2 = d_first_counter_2 == 3'h0;
  wire [511:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [511:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_73;
  wire [511:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[511:1]};
  wire  _T_1558 = io_in_d_valid & d_first_2 & _T_1263;
  wire [127:0] d_clr_1 = _d_first_T & d_first_2 & _T_1263 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_68 = _d_first_T & d_first_2 & _T_1263 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire [127:0] _T_1566 = inflight_1 >> io_in_d_bits_source;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_1576 = _GEN_86 == c_size_lookup;
  wire [127:0] _inflight_T_4 = ~d_clr_1;
  wire [127:0] _inflight_T_5 = inflight_1 & _inflight_T_4;
  wire [511:0] d_opcodes_clr_1 = _GEN_68[511:0];
  wire [511:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [511:0] _inflight_sizes_T_5 = inflight_sizes_1 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_1601 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 3'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      param <= io_in_a_bits_param;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 3'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      inflight <= 128'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 512'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 512'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 3'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 3'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 128'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 512'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      d_first_counter_2 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 3'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_316 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_316 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_330 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_330 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_335 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_335 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_339 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_339 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_T_316 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_T_316 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_T_330 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_T_330 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_T_559 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_T_559 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_T_335 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_T_335 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_T_339 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_343 & ~(_T_339 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(_T_669 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(_T_669 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(_T_680 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid param (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(_T_680 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(_T_684 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(_T_684 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(_T_339 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get is corrupt (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_572 & ~(_T_339 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_692 & ~(_T_788 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_692 & ~(_T_788 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_692 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_692 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_692 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_692 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_692 & ~(_T_680 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid param (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_692 & ~(_T_680 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_692 & ~(_T_684 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_692 & ~(_T_684 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_806 & ~(_T_788 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_806 & ~(_T_788 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_806 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_806 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_806 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_806 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_806 & ~(_T_680 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid param (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_806 & ~(_T_680 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_806 & ~(_T_918 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_806 & ~(_T_918 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_922 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_922 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_922 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_922 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_922 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_922 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_922 & ~(_T_1025 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_922 & ~(_T_1025 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_922 & ~(_T_684 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_922 & ~(_T_684 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1033 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1033 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1033 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1033 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1033 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1033 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1033 & ~(_T_1136 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1033 & ~(_T_1136 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1033 & ~(_T_684 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1033 & ~(_T_684 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~reset) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~reset) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~(_T_1247 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~(_T_1247 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~(_T_684 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~(_T_684 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~(_T_339 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint is corrupt (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1144 & ~(_T_339 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1259 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1259 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1263 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1263 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1263 & ~(_T_1267 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1263 & ~(_T_1267 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1263 & ~(_T_1275 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1263 & ~(_T_1275 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1263 & ~(_T_1279 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1263 & ~(_T_1279 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1283 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1283 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1283 & _T_214) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1283 & _T_214) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1283 & ~(_T_1267 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1283 & ~(_T_1267 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1283 & ~(_T_1275 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1283 & ~(_T_1275 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1311 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1311 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1311 & _T_214) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1311 & _T_214) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1311 & ~(_T_1267 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1311 & ~(_T_1267 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1311 & ~(_T_1331 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1311 & ~(_T_1331 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1340 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1340 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1340 & ~(_T_1275 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1340 & ~(_T_1275 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1357 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1357 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1357 & ~(_T_1331 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1357 & ~(_T_1331 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1375 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1375 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1375 & ~(_T_1275 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1375 & ~(_T_1275 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1405 & ~(_T_1406 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1405 & ~(_T_1406 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1405 & ~(_T_1410 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1405 & ~(_T_1410 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1405 & ~(_T_1414 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1405 & ~(_T_1414 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1405 & ~(_T_1418 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1405 & ~(_T_1418 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1405 & ~(_T_1422 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1405 & ~(_T_1422 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1429 & ~(_T_1430 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1429 & ~(_T_1430 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1429 & ~(_T_1438 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1429 & ~(_T_1438 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1429 & ~(_T_1442 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1429 & ~(_T_1442 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1429 & ~(_T_1450 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1429 & ~(_T_1450 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1459 & ~(_T_1463 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1459 & ~(_T_1463 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1470 & ~(_T_1482 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1470 & ~(_T_1482 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1470 & same_cycle_resp & ~(_T_1488 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1470 & same_cycle_resp & ~(_T_1488 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1470 & same_cycle_resp & ~(_T_1492 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1470 & same_cycle_resp & ~(_T_1492 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1470 & ~same_cycle_resp & ~(_T_1500 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1470 & ~same_cycle_resp & ~(_T_1500 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1470 & ~same_cycle_resp & ~(_T_1504 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1470 & ~same_cycle_resp & ~(_T_1504 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1514 & ~(_T_1516 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1514 & ~(_T_1516 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1523 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1523 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1532 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1532 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1558 & ~(_T_1566[0] | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1558 & ~(_T_1566[0] | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_1558 & ~(_T_1576 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_1558 & ~(_T_1576 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_1601 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:79:80)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_1601 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  source = _RAND_4[6:0];
  _RAND_5 = {1{`RANDOM}};
  address = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  d_first_counter = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  opcode_1 = _RAND_7[2:0];
  _RAND_8 = {1{`RANDOM}};
  size_1 = _RAND_8[2:0];
  _RAND_9 = {1{`RANDOM}};
  source_1 = _RAND_9[6:0];
  _RAND_10 = {1{`RANDOM}};
  denied = _RAND_10[0:0];
  _RAND_11 = {4{`RANDOM}};
  inflight = _RAND_11[127:0];
  _RAND_12 = {16{`RANDOM}};
  inflight_opcodes = _RAND_12[511:0];
  _RAND_13 = {16{`RANDOM}};
  inflight_sizes = _RAND_13[511:0];
  _RAND_14 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_14[2:0];
  _RAND_15 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_15[2:0];
  _RAND_16 = {1{`RANDOM}};
  watchdog = _RAND_16[31:0];
  _RAND_17 = {4{`RANDOM}};
  inflight_1 = _RAND_17[127:0];
  _RAND_18 = {16{`RANDOM}};
  inflight_sizes_1 = _RAND_18[511:0];
  _RAND_19 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_19[2:0];
  _RAND_20 = {1{`RANDOM}};
  watchdog_1 = _RAND_20[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Queue_17(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [4:0]  io_enq_bits_id,
  input  [31:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [3:0]  io_enq_bits_echo_tl_state_size,
  input  [6:0]  io_enq_bits_echo_tl_state_source,
  input         io_enq_bits_wen,
  input         io_deq_ready,
  output        io_deq_valid,
  output [4:0]  io_deq_bits_id,
  output [31:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output [3:0]  io_deq_bits_echo_tl_state_size,
  output [6:0]  io_deq_bits_echo_tl_state_source,
  output        io_deq_bits_wen
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_8;
`endif // RANDOMIZE_REG_INIT
  reg [4:0] ram_id [0:0];
  wire [4:0] ram_id_io_deq_bits_MPORT_data;
  wire  ram_id_io_deq_bits_MPORT_addr;
  wire [4:0] ram_id_MPORT_data;
  wire  ram_id_MPORT_addr;
  wire  ram_id_MPORT_mask;
  wire  ram_id_MPORT_en;
  reg [31:0] ram_addr [0:0];
  wire [31:0] ram_addr_io_deq_bits_MPORT_data;
  wire  ram_addr_io_deq_bits_MPORT_addr;
  wire [31:0] ram_addr_MPORT_data;
  wire  ram_addr_MPORT_addr;
  wire  ram_addr_MPORT_mask;
  wire  ram_addr_MPORT_en;
  reg [7:0] ram_len [0:0];
  wire [7:0] ram_len_io_deq_bits_MPORT_data;
  wire  ram_len_io_deq_bits_MPORT_addr;
  wire [7:0] ram_len_MPORT_data;
  wire  ram_len_MPORT_addr;
  wire  ram_len_MPORT_mask;
  wire  ram_len_MPORT_en;
  reg [2:0] ram_size [0:0];
  wire [2:0] ram_size_io_deq_bits_MPORT_data;
  wire  ram_size_io_deq_bits_MPORT_addr;
  wire [2:0] ram_size_MPORT_data;
  wire  ram_size_MPORT_addr;
  wire  ram_size_MPORT_mask;
  wire  ram_size_MPORT_en;
  reg [1:0] ram_burst [0:0];
  wire [1:0] ram_burst_io_deq_bits_MPORT_data;
  wire  ram_burst_io_deq_bits_MPORT_addr;
  wire [1:0] ram_burst_MPORT_data;
  wire  ram_burst_MPORT_addr;
  wire  ram_burst_MPORT_mask;
  wire  ram_burst_MPORT_en;
  reg [3:0] ram_echo_tl_state_size [0:0];
  wire [3:0] ram_echo_tl_state_size_io_deq_bits_MPORT_data;
  wire  ram_echo_tl_state_size_io_deq_bits_MPORT_addr;
  wire [3:0] ram_echo_tl_state_size_MPORT_data;
  wire  ram_echo_tl_state_size_MPORT_addr;
  wire  ram_echo_tl_state_size_MPORT_mask;
  wire  ram_echo_tl_state_size_MPORT_en;
  reg [6:0] ram_echo_tl_state_source [0:0];
  wire [6:0] ram_echo_tl_state_source_io_deq_bits_MPORT_data;
  wire  ram_echo_tl_state_source_io_deq_bits_MPORT_addr;
  wire [6:0] ram_echo_tl_state_source_MPORT_data;
  wire  ram_echo_tl_state_source_MPORT_addr;
  wire  ram_echo_tl_state_source_MPORT_mask;
  wire  ram_echo_tl_state_source_MPORT_en;
  reg  ram_wen [0:0];
  wire  ram_wen_io_deq_bits_MPORT_data;
  wire  ram_wen_io_deq_bits_MPORT_addr;
  wire  ram_wen_MPORT_data;
  wire  ram_wen_MPORT_addr;
  wire  ram_wen_MPORT_mask;
  wire  ram_wen_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  _do_enq_T = io_enq_ready & io_enq_valid;
  wire  _do_deq_T = io_deq_ready & io_deq_valid;
  wire  _GEN_18 = io_deq_ready ? 1'h0 : _do_enq_T;
  wire  do_enq = empty ? _GEN_18 : _do_enq_T;
  wire  do_deq = empty ? 1'h0 : _do_deq_T;
  assign ram_id_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_id_io_deq_bits_MPORT_data = ram_id[ram_id_io_deq_bits_MPORT_addr];
  assign ram_id_MPORT_data = io_enq_bits_id;
  assign ram_id_MPORT_addr = 1'h0;
  assign ram_id_MPORT_mask = 1'h1;
  assign ram_id_MPORT_en = empty ? _GEN_18 : _do_enq_T;
  assign ram_addr_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_addr_io_deq_bits_MPORT_data = ram_addr[ram_addr_io_deq_bits_MPORT_addr];
  assign ram_addr_MPORT_data = io_enq_bits_addr;
  assign ram_addr_MPORT_addr = 1'h0;
  assign ram_addr_MPORT_mask = 1'h1;
  assign ram_addr_MPORT_en = empty ? _GEN_18 : _do_enq_T;
  assign ram_len_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_len_io_deq_bits_MPORT_data = ram_len[ram_len_io_deq_bits_MPORT_addr];
  assign ram_len_MPORT_data = io_enq_bits_len;
  assign ram_len_MPORT_addr = 1'h0;
  assign ram_len_MPORT_mask = 1'h1;
  assign ram_len_MPORT_en = empty ? _GEN_18 : _do_enq_T;
  assign ram_size_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_size_io_deq_bits_MPORT_data = ram_size[ram_size_io_deq_bits_MPORT_addr];
  assign ram_size_MPORT_data = io_enq_bits_size;
  assign ram_size_MPORT_addr = 1'h0;
  assign ram_size_MPORT_mask = 1'h1;
  assign ram_size_MPORT_en = empty ? _GEN_18 : _do_enq_T;
  assign ram_burst_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_burst_io_deq_bits_MPORT_data = ram_burst[ram_burst_io_deq_bits_MPORT_addr];
  assign ram_burst_MPORT_data = 2'h1;
  assign ram_burst_MPORT_addr = 1'h0;
  assign ram_burst_MPORT_mask = 1'h1;
  assign ram_burst_MPORT_en = empty ? _GEN_18 : _do_enq_T;
  assign ram_echo_tl_state_size_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_echo_tl_state_size_io_deq_bits_MPORT_data =
    ram_echo_tl_state_size[ram_echo_tl_state_size_io_deq_bits_MPORT_addr];
  assign ram_echo_tl_state_size_MPORT_data = io_enq_bits_echo_tl_state_size;
  assign ram_echo_tl_state_size_MPORT_addr = 1'h0;
  assign ram_echo_tl_state_size_MPORT_mask = 1'h1;
  assign ram_echo_tl_state_size_MPORT_en = empty ? _GEN_18 : _do_enq_T;
  assign ram_echo_tl_state_source_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_echo_tl_state_source_io_deq_bits_MPORT_data =
    ram_echo_tl_state_source[ram_echo_tl_state_source_io_deq_bits_MPORT_addr];
  assign ram_echo_tl_state_source_MPORT_data = io_enq_bits_echo_tl_state_source;
  assign ram_echo_tl_state_source_MPORT_addr = 1'h0;
  assign ram_echo_tl_state_source_MPORT_mask = 1'h1;
  assign ram_echo_tl_state_source_MPORT_en = empty ? _GEN_18 : _do_enq_T;
  assign ram_wen_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_wen_io_deq_bits_MPORT_data = ram_wen[ram_wen_io_deq_bits_MPORT_addr];
  assign ram_wen_MPORT_data = io_enq_bits_wen;
  assign ram_wen_MPORT_addr = 1'h0;
  assign ram_wen_MPORT_mask = 1'h1;
  assign ram_wen_MPORT_en = empty ? _GEN_18 : _do_enq_T;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = io_enq_valid | ~empty;
  assign io_deq_bits_id = empty ? io_enq_bits_id : ram_id_io_deq_bits_MPORT_data;
  assign io_deq_bits_addr = empty ? io_enq_bits_addr : ram_addr_io_deq_bits_MPORT_data;
  assign io_deq_bits_len = empty ? io_enq_bits_len : ram_len_io_deq_bits_MPORT_data;
  assign io_deq_bits_size = empty ? io_enq_bits_size : ram_size_io_deq_bits_MPORT_data;
  assign io_deq_bits_burst = empty ? 2'h1 : ram_burst_io_deq_bits_MPORT_data;
  assign io_deq_bits_echo_tl_state_size = empty ? io_enq_bits_echo_tl_state_size :
    ram_echo_tl_state_size_io_deq_bits_MPORT_data;
  assign io_deq_bits_echo_tl_state_source = empty ? io_enq_bits_echo_tl_state_source :
    ram_echo_tl_state_source_io_deq_bits_MPORT_data;
  assign io_deq_bits_wen = empty ? io_enq_bits_wen : ram_wen_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_id_MPORT_en & ram_id_MPORT_mask) begin
      ram_id[ram_id_MPORT_addr] <= ram_id_MPORT_data;
    end
    if(ram_addr_MPORT_en & ram_addr_MPORT_mask) begin
      ram_addr[ram_addr_MPORT_addr] <= ram_addr_MPORT_data;
    end
    if(ram_len_MPORT_en & ram_len_MPORT_mask) begin
      ram_len[ram_len_MPORT_addr] <= ram_len_MPORT_data;
    end
    if(ram_size_MPORT_en & ram_size_MPORT_mask) begin
      ram_size[ram_size_MPORT_addr] <= ram_size_MPORT_data;
    end
    if(ram_burst_MPORT_en & ram_burst_MPORT_mask) begin
      ram_burst[ram_burst_MPORT_addr] <= ram_burst_MPORT_data;
    end
    if(ram_echo_tl_state_size_MPORT_en & ram_echo_tl_state_size_MPORT_mask) begin
      ram_echo_tl_state_size[ram_echo_tl_state_size_MPORT_addr] <= ram_echo_tl_state_size_MPORT_data;
    end
    if(ram_echo_tl_state_source_MPORT_en & ram_echo_tl_state_source_MPORT_mask) begin
      ram_echo_tl_state_source[ram_echo_tl_state_source_MPORT_addr] <= ram_echo_tl_state_source_MPORT_data;
    end
    if(ram_wen_MPORT_en & ram_wen_MPORT_mask) begin
      ram_wen[ram_wen_MPORT_addr] <= ram_wen_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      if (empty) begin
        if (io_deq_ready) begin
          maybe_full <= 1'h0;
        end else begin
          maybe_full <= _do_enq_T;
        end
      end else begin
        maybe_full <= _do_enq_T;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_id[initvar] = _RAND_0[4:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_addr[initvar] = _RAND_1[31:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_len[initvar] = _RAND_2[7:0];
  _RAND_3 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_size[initvar] = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_burst[initvar] = _RAND_4[1:0];
  _RAND_5 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_echo_tl_state_size[initvar] = _RAND_5[3:0];
  _RAND_6 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_echo_tl_state_source[initvar] = _RAND_6[6:0];
  _RAND_7 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_wen[initvar] = _RAND_7[0:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_8 = {1{`RANDOM}};
  maybe_full = _RAND_8[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule

module CHIPLINK_PREFIX_Chiplink_TLMonitor_11(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_param,
  input  [2:0]  io_in_a_bits_size,
  input  [6:0]  io_in_a_bits_source,
  input  [12:0] io_in_a_bits_address,
  input  [3:0]  io_in_a_bits_mask,
  input         io_in_a_bits_corrupt,
  input         io_in_c_ready,
  input         io_in_c_valid,
  input  [2:0]  io_in_c_bits_opcode,
  input  [2:0]  io_in_c_bits_param,
  input  [2:0]  io_in_c_bits_size,
  input  [6:0]  io_in_c_bits_source,
  input  [12:0] io_in_c_bits_address,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [6:0]  io_in_d_bits_source,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt,
  input         io_in_e_valid
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [127:0] _RAND_18;
  reg [511:0] _RAND_19;
  reg [511:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [127:0] _RAND_24;
  reg [511:0] _RAND_25;
  reg [31:0] _RAND_26;
  reg [31:0] _RAND_27;
  reg [31:0] _RAND_28;
  reg [31:0] _RAND_29;
  reg [31:0] _RAND_30;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = io_in_a_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_7 = io_in_a_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_13 = io_in_a_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_19 = io_in_a_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_25 = io_in_a_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_31 = io_in_a_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_37 = io_in_a_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_43 = io_in_a_bits_source[6:4] == 3'h7;
  wire  source_ok = _source_ok_T_1 | _source_ok_T_7 | _source_ok_T_13 | _source_ok_T_19 | _source_ok_T_25 |
    _source_ok_T_31 | _source_ok_T_37 | _source_ok_T_43;
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [12:0] _GEN_86 = {{7'd0}, is_aligned_mask};
  wire [12:0] _is_aligned_T = io_in_a_bits_address & _GEN_86;
  wire  is_aligned = _is_aligned_T == 13'h0;
  wire  mask_sizeOH_shiftAmount = io_in_a_bits_size[0];
  wire [1:0] _mask_sizeOH_T_1 = 2'h1 << mask_sizeOH_shiftAmount;
  wire [1:0] mask_sizeOH = _mask_sizeOH_T_1 | 2'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h2;
  wire  mask_size = mask_sizeOH[1];
  wire  mask_bit = io_in_a_bits_address[1];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[0];
  wire  mask_bit_1 = io_in_a_bits_address[0];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_lo_lo = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_lo_hi = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_hi_lo = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_hi_hi = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire [3:0] mask = {mask_hi_hi,mask_hi_lo,mask_lo_hi,mask_lo_lo};
  wire  _T_118 = io_in_a_bits_opcode == 3'h6;
  wire  _T_180 = io_in_a_bits_size <= 3'h6;
  wire [12:0] _T_183 = io_in_a_bits_address ^ 13'h1000;
  wire [13:0] _T_184 = {1'b0,$signed(_T_183)};
  wire [13:0] _T_186 = $signed(_T_184) & -14'sh1000;
  wire  _T_187 = $signed(_T_186) == 14'sh0;
  wire  _T_188 = _T_180 & _T_187;
  wire  _T_190 = source_ok & _T_188;
  wire  _T_245 = _source_ok_T_1 & _T_180;
  wire  _T_271 = _T_245 & _T_187;
  wire  _T_285 = io_in_a_bits_param <= 3'h2;
  wire [3:0] _T_289 = ~io_in_a_bits_mask;
  wire  _T_290 = _T_289 == 4'h0;
  wire  _T_294 = ~io_in_a_bits_corrupt;
  wire  _T_298 = io_in_a_bits_opcode == 3'h7;
  wire  _T_469 = io_in_a_bits_param != 3'h0;
  wire  _T_482 = io_in_a_bits_opcode == 3'h4;
  wire  _T_566 = io_in_a_bits_param == 3'h0;
  wire  _T_570 = io_in_a_bits_mask == mask;
  wire  _T_578 = io_in_a_bits_opcode == 3'h0;
  wire  _T_668 = io_in_a_bits_opcode == 3'h1;
  wire [3:0] _T_754 = ~mask;
  wire [3:0] _T_755 = io_in_a_bits_mask & _T_754;
  wire  _T_756 = _T_755 == 4'h0;
  wire  _T_760 = io_in_a_bits_opcode == 3'h2;
  wire  _T_842 = io_in_a_bits_param <= 3'h4;
  wire  _T_850 = io_in_a_bits_opcode == 3'h3;
  wire  _T_932 = io_in_a_bits_param <= 3'h3;
  wire  _T_940 = io_in_a_bits_opcode == 3'h5;
  wire  _T_1022 = io_in_a_bits_param <= 3'h1;
  wire  _T_1034 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_55 = io_in_d_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_61 = io_in_d_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_67 = io_in_d_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_73 = io_in_d_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_79 = io_in_d_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_85 = io_in_d_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_91 = io_in_d_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_97 = io_in_d_bits_source[6:4] == 3'h7;
  wire  source_ok_1 = _source_ok_T_55 | _source_ok_T_61 | _source_ok_T_67 | _source_ok_T_73 | _source_ok_T_79 |
    _source_ok_T_85 | _source_ok_T_91 | _source_ok_T_97;
  wire  _T_1038 = io_in_d_bits_opcode == 3'h6;
  wire  _T_1042 = io_in_d_bits_size >= 3'h2;
  wire  _T_1046 = io_in_d_bits_param == 2'h0;
  wire  _T_1050 = ~io_in_d_bits_corrupt;
  wire  _T_1054 = ~io_in_d_bits_denied;
  wire  _T_1058 = io_in_d_bits_opcode == 3'h4;
  wire  _T_1069 = io_in_d_bits_param <= 2'h2;
  wire  _T_1073 = io_in_d_bits_param != 2'h2;
  wire  _T_1086 = io_in_d_bits_opcode == 3'h5;
  wire  _T_1106 = _T_1054 | io_in_d_bits_corrupt;
  wire  _T_1115 = io_in_d_bits_opcode == 3'h0;
  wire  _T_1132 = io_in_d_bits_opcode == 3'h1;
  wire  _T_1150 = io_in_d_bits_opcode == 3'h2;
  wire  _source_ok_T_109 = io_in_c_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_115 = io_in_c_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_121 = io_in_c_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_127 = io_in_c_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_133 = io_in_c_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_139 = io_in_c_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_145 = io_in_c_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_151 = io_in_c_bits_source[6:4] == 3'h7;
  wire  source_ok_2 = _source_ok_T_109 | _source_ok_T_115 | _source_ok_T_121 | _source_ok_T_127 | _source_ok_T_133 |
    _source_ok_T_139 | _source_ok_T_145 | _source_ok_T_151;
  wire [12:0] _is_aligned_mask_T_7 = 13'h3f << io_in_c_bits_size;
  wire [5:0] is_aligned_mask_2 = ~_is_aligned_mask_T_7[5:0];
  wire [12:0] _GEN_87 = {{7'd0}, is_aligned_mask_2};
  wire [12:0] _is_aligned_T_2 = io_in_c_bits_address & _GEN_87;
  wire  is_aligned_2 = _is_aligned_T_2 == 13'h0;
  wire [12:0] _address_ok_T_5 = io_in_c_bits_address ^ 13'h1000;
  wire [13:0] _address_ok_T_6 = {1'b0,$signed(_address_ok_T_5)};
  wire [13:0] _address_ok_T_8 = $signed(_address_ok_T_6) & -14'sh1000;
  wire  _address_ok_T_9 = $signed(_address_ok_T_8) == 14'sh0;
  wire  _T_1710 = io_in_c_bits_opcode == 3'h4;
  wire  _T_1717 = io_in_c_bits_size >= 3'h2;
  wire  _T_1724 = io_in_c_bits_param <= 3'h5;
  wire  _T_1732 = io_in_c_bits_opcode == 3'h5;
  wire  _T_1750 = io_in_c_bits_opcode == 3'h6;
  wire  _T_1812 = io_in_c_bits_size <= 3'h6;
  wire  _T_1820 = _T_1812 & _address_ok_T_9;
  wire  _T_1822 = source_ok_2 & _T_1820;
  wire  _T_1877 = _source_ok_T_109 & _T_1812;
  wire  _T_1903 = _T_1877 & _address_ok_T_9;
  wire  _T_1925 = io_in_c_bits_opcode == 3'h7;
  wire  _T_2096 = io_in_c_bits_opcode == 3'h0;
  wire  _T_2106 = io_in_c_bits_param == 3'h0;
  wire  _T_2114 = io_in_c_bits_opcode == 3'h1;
  wire  _T_2128 = io_in_c_bits_opcode == 3'h2;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [3:0] a_first_beats1_decode = is_aligned_mask[5:2];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [3:0] a_first_counter;
  wire [3:0] a_first_counter1 = a_first_counter - 4'h1;
  wire  a_first = a_first_counter == 4'h0;
  reg [2:0] opcode;
  reg [2:0] param;
  reg [2:0] size;
  reg [6:0] source;
  reg [12:0] address;
  wire  _T_2150 = io_in_a_valid & ~a_first;
  wire  _T_2151 = io_in_a_bits_opcode == opcode;
  wire  _T_2155 = io_in_a_bits_param == param;
  wire  _T_2159 = io_in_a_bits_size == size;
  wire  _T_2163 = io_in_a_bits_source == source;
  wire  _T_2167 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [3:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:2];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [3:0] d_first_counter;
  wire [3:0] d_first_counter1 = d_first_counter - 4'h1;
  wire  d_first = d_first_counter == 4'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [6:0] source_1;
  reg  denied;
  wire  _T_2174 = io_in_d_valid & ~d_first;
  wire  _T_2175 = io_in_d_bits_opcode == opcode_1;
  wire  _T_2179 = io_in_d_bits_param == param_1;
  wire  _T_2183 = io_in_d_bits_size == size_1;
  wire  _T_2187 = io_in_d_bits_source == source_1;
  wire  _T_2195 = io_in_d_bits_denied == denied;
  wire  _c_first_T = io_in_c_ready & io_in_c_valid;
  wire [3:0] c_first_beats1_decode = is_aligned_mask_2[5:2];
  wire  c_first_beats1_opdata = io_in_c_bits_opcode[0];
  reg [3:0] c_first_counter;
  wire [3:0] c_first_counter1 = c_first_counter - 4'h1;
  wire  c_first = c_first_counter == 4'h0;
  reg [2:0] opcode_3;
  reg [2:0] param_3;
  reg [2:0] size_3;
  reg [6:0] source_3;
  reg [12:0] address_2;
  wire  _T_2226 = io_in_c_valid & ~c_first;
  wire  _T_2227 = io_in_c_bits_opcode == opcode_3;
  wire  _T_2231 = io_in_c_bits_param == param_3;
  wire  _T_2235 = io_in_c_bits_size == size_3;
  wire  _T_2239 = io_in_c_bits_source == source_3;
  wire  _T_2243 = io_in_c_bits_address == address_2;
  reg [127:0] inflight;
  reg [511:0] inflight_opcodes;
  reg [511:0] inflight_sizes;
  reg [3:0] a_first_counter_1;
  wire [3:0] a_first_counter1_1 = a_first_counter_1 - 4'h1;
  wire  a_first_1 = a_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_1;
  wire [3:0] d_first_counter1_1 = d_first_counter_1 - 4'h1;
  wire  d_first_1 = d_first_counter_1 == 4'h0;
  wire [8:0] _GEN_88 = {io_in_d_bits_source, 2'h0};
  wire [9:0] _a_opcode_lookup_T = {{1'd0}, _GEN_88};
  wire [511:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [511:0] _GEN_89 = {{496'd0}, _a_opcode_lookup_T_5};
  wire [511:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_89;
  wire [511:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[511:1]};
  wire [511:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [511:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_89;
  wire [511:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[511:1]};
  wire  _T_2249 = io_in_a_valid & a_first_1;
  wire [127:0] _a_set_wo_ready_T = 128'h1 << io_in_a_bits_source;
  wire [127:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire  _T_2252 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_94 = {io_in_a_bits_source, 2'h0};
  wire [9:0] _a_opcodes_set_T = {{1'd0}, _GEN_94};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_95 = {{1023'd0}, a_opcodes_set_interm};
  wire [1026:0] _a_opcodes_set_T_1 = _GEN_95 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_97 = {{1023'd0}, a_sizes_set_interm};
  wire [1026:0] _a_sizes_set_T_1 = _GEN_97 << _a_opcodes_set_T;
  wire [127:0] _T_2254 = inflight >> io_in_a_bits_source;
  wire  _T_2256 = ~_T_2254[0];
  wire [127:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_31 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 1027'h0;
  wire [1026:0] _GEN_32 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 1027'h0;
  wire  _T_2260 = io_in_d_valid & d_first_1;
  wire  _T_2262 = ~_T_1038;
  wire  _T_2263 = io_in_d_valid & d_first_1 & ~_T_1038;
  wire [127:0] _d_clr_wo_ready_T = 128'h1 << io_in_d_bits_source;
  wire [127:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_1038 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_99 = {{1023'd0}, _a_opcode_lookup_T_5};
  wire [1038:0] _d_opcodes_clr_T_5 = _GEN_99 << _a_opcode_lookup_T;
  wire [127:0] d_clr = _d_first_T & d_first_1 & _T_2262 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_35 = _d_first_T & d_first_1 & _T_2262 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_2249 & io_in_a_bits_source == io_in_d_bits_source;
  wire [127:0] _T_2273 = inflight >> io_in_d_bits_source;
  wire  _T_2275 = _T_2273[0] | same_cycle_resp;
  wire [2:0] _GEN_39 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_40 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_39;
  wire [2:0] _GEN_41 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_40;
  wire [2:0] _GEN_42 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_41;
  wire [2:0] _GEN_43 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_42;
  wire [2:0] _GEN_44 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_43;
  wire [2:0] _GEN_51 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_42;
  wire [2:0] _GEN_52 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_51;
  wire  _T_2280 = io_in_d_bits_opcode == _GEN_52;
  wire  _T_2281 = io_in_d_bits_opcode == _GEN_44 | _T_2280;
  wire  _T_2285 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_55 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_56 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_55;
  wire [2:0] _GEN_57 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_56;
  wire [2:0] _GEN_58 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_57;
  wire [2:0] _GEN_59 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_58;
  wire [2:0] _GEN_60 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_59;
  wire [2:0] _GEN_67 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_58;
  wire [2:0] _GEN_68 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_67;
  wire  _T_2292 = io_in_d_bits_opcode == _GEN_68;
  wire  _T_2293 = io_in_d_bits_opcode == _GEN_60 | _T_2292;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_102 = {{1'd0}, io_in_d_bits_size};
  wire  _T_2297 = _GEN_102 == a_size_lookup;
  wire  _T_2307 = _T_2260 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_2262;
  wire  _T_2308 = ~io_in_d_ready;
  wire  _T_2309 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_2316 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [127:0] _inflight_T = inflight | a_set;
  wire [127:0] _inflight_T_1 = ~d_clr;
  wire [127:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [511:0] a_opcodes_set = _GEN_31[511:0];
  wire [511:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [511:0] d_opcodes_clr = _GEN_35[511:0];
  wire [511:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [511:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [511:0] a_sizes_set = _GEN_32[511:0];
  wire [511:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [511:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_2325 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [127:0] inflight_1;
  reg [511:0] inflight_sizes_1;
  reg [3:0] c_first_counter_1;
  wire [3:0] c_first_counter1_1 = c_first_counter_1 - 4'h1;
  wire  c_first_1 = c_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_2;
  wire [3:0] d_first_counter1_2 = d_first_counter_2 - 4'h1;
  wire  d_first_2 = d_first_counter_2 == 4'h0;
  wire [511:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [511:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_89;
  wire [511:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[511:1]};
  wire  _T_2335 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire  _T_2336 = io_in_c_valid & c_first_1 & _T_2335;
  wire [127:0] _c_set_wo_ready_T = 128'h1 << io_in_c_bits_source;
  wire [127:0] c_set_wo_ready = io_in_c_valid & c_first_1 & _T_2335 ? _c_set_wo_ready_T : 128'h0;
  wire  _T_2342 = _c_first_T & c_first_1 & _T_2335;
  wire [3:0] _c_sizes_set_interm_T = {io_in_c_bits_size, 1'h0};
  wire [3:0] _c_sizes_set_interm_T_1 = _c_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_109 = {io_in_c_bits_source, 2'h0};
  wire [9:0] _c_opcodes_set_T = {{1'd0}, _GEN_109};
  wire [3:0] c_sizes_set_interm = _c_first_T & c_first_1 & _T_2335 ? _c_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_112 = {{1023'd0}, c_sizes_set_interm};
  wire [1026:0] _c_sizes_set_T_1 = _GEN_112 << _c_opcodes_set_T;
  wire [127:0] _T_2343 = inflight_1 >> io_in_c_bits_source;
  wire  _T_2345 = ~_T_2343[0];
  wire [127:0] c_set = _c_first_T & c_first_1 & _T_2335 ? _c_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_77 = _c_first_T & c_first_1 & _T_2335 ? _c_sizes_set_T_1 : 1027'h0;
  wire  _T_2349 = io_in_d_valid & d_first_2;
  wire  _T_2351 = io_in_d_valid & d_first_2 & _T_1038;
  wire [127:0] d_clr_wo_ready_1 = io_in_d_valid & d_first_2 & _T_1038 ? _d_clr_wo_ready_T : 128'h0;
  wire [127:0] d_clr_1 = _d_first_T & d_first_2 & _T_1038 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_80 = _d_first_T & d_first_2 & _T_1038 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_8 = io_in_c_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp_1 = _T_2336 & io_in_c_bits_source == io_in_d_bits_source;
  wire [127:0] _T_2359 = inflight_1 >> io_in_d_bits_source;
  wire  _T_2361 = _T_2359[0] | same_cycle_resp_1;
  wire  _T_2365 = io_in_d_bits_size == io_in_c_bits_size;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_2369 = _GEN_102 == c_size_lookup;
  wire  _T_2378 = _T_2349 & c_first_1 & io_in_c_valid & _same_cycle_resp_T_8 & _T_1038;
  wire  _T_2380 = _T_2308 | io_in_c_ready;
  wire  _T_2384 = |c_set_wo_ready;
  wire  _T_2385 = c_set_wo_ready != d_clr_wo_ready_1;
  wire [127:0] _inflight_T_3 = inflight_1 | c_set;
  wire [127:0] _inflight_T_4 = ~d_clr_1;
  wire [127:0] _inflight_T_5 = _inflight_T_3 & _inflight_T_4;
  wire [511:0] d_opcodes_clr_1 = _GEN_80[511:0];
  wire [511:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [511:0] c_sizes_set = _GEN_77[511:0];
  wire [511:0] _inflight_sizes_T_3 = inflight_sizes_1 | c_sizes_set;
  wire [511:0] _inflight_sizes_T_5 = _inflight_sizes_T_3 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_2394 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  reg  inflight_2;
  reg [3:0] d_first_counter_3;
  wire [3:0] d_first_counter1_3 = d_first_counter_3 - 4'h1;
  wire  d_first_3 = d_first_counter_3 == 4'h0;
  wire  _T_2406 = io_in_d_bits_opcode[2] & ~io_in_d_bits_opcode[1];
  wire  _T_2407 = _d_first_T & d_first_3 & _T_2406;
  wire  _T_2410 = ~inflight_2;
  wire [1:0] _GEN_84 = _d_first_T & d_first_3 & _T_2406 ? 2'h1 : 2'h0;
  wire  d_set = _GEN_84[0];
  wire  _T_2417 = d_set | inflight_2;
  wire [1:0] _GEN_85 = io_in_e_valid ? 2'h1 : 2'h0;
  wire  e_clr = _GEN_85[0];
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 4'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      param <= io_in_a_bits_param;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 4'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      c_first_counter <= 4'h0;
    end else if (_c_first_T) begin
      if (c_first) begin
        if (c_first_beats1_opdata) begin
          c_first_counter <= c_first_beats1_decode;
        end else begin
          c_first_counter <= 4'h0;
        end
      end else begin
        c_first_counter <= c_first_counter1;
      end
    end
    if (_c_first_T & c_first) begin
      opcode_3 <= io_in_c_bits_opcode;
    end
    if (_c_first_T & c_first) begin
      param_3 <= io_in_c_bits_param;
    end
    if (_c_first_T & c_first) begin
      size_3 <= io_in_c_bits_size;
    end
    if (_c_first_T & c_first) begin
      source_3 <= io_in_c_bits_source;
    end
    if (_c_first_T & c_first) begin
      address_2 <= io_in_c_bits_address;
    end
    if (reset) begin
      inflight <= 128'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 512'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 512'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 4'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 4'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 128'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 512'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      c_first_counter_1 <= 4'h0;
    end else if (_c_first_T) begin
      if (c_first_1) begin
        if (c_first_beats1_opdata) begin
          c_first_counter_1 <= c_first_beats1_decode;
        end else begin
          c_first_counter_1 <= 4'h0;
        end
      end else begin
        c_first_counter_1 <= c_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_2 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 4'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_c_first_T | _d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    if (reset) begin
      inflight_2 <= 1'h0;
    end else begin
      inflight_2 <= (inflight_2 | d_set) & ~e_clr;
    end
    if (reset) begin
      d_first_counter_3 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_3) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_3 <= d_first_beats1_decode;
        end else begin
          d_first_counter_3 <= 4'h0;
        end
      end else begin
        d_first_counter_3 <= d_first_counter1_3;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_271 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_271 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_285 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_285 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_290 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_290 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_294 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_294 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_271 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_271 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_285 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_285 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_469 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_469 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_290 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_290 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_294 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_294 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_188 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_188 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_566 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_566 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_570 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_570 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_294 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get is corrupt (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_294 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_566 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_566 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_570 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_570 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_566 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_566 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_756 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_756 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_842 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_842 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_570 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_570 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_932 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_932 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_570 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_570 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_1022 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_1022 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_570 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_570 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_294 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint is corrupt (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_294 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1034 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1034 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1042 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1042 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1046 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1046 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1050 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1050 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1054 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1054 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1042 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1042 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1069 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1069 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1073 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1073 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1050 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1050 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1042 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1042 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1069 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1069 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1073 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1073 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1106 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1106 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(_T_1046 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(_T_1046 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(_T_1050 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(_T_1050 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(_T_1046 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(_T_1046 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(_T_1106 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(_T_1106 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(_T_1046 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(_T_1046 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(_T_1050 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(_T_1050 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_address_ok_T_9 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_address_ok_T_9 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_T_1717 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_T_1717 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_T_1724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_T_1724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_address_ok_T_9 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_address_ok_T_9 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_T_1717 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_T_1717 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_T_1724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_T_1724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1822 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1822 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1903 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1903 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1717 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release smaller than a beat (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1717 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid report param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1822 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1822 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1903 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1903 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1717 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1717 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(_address_ok_T_9 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(_address_ok_T_9 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(_T_2106 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(_T_2106 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(_address_ok_T_9 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(_address_ok_T_9 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(_T_2106 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(_T_2106 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(_address_ok_T_9 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(_address_ok_T_9 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck address not aligned to size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(_T_2106 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(_T_2106 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2150 & ~(_T_2151 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2150 & ~(_T_2151 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2150 & ~(_T_2155 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2150 & ~(_T_2155 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2150 & ~(_T_2159 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2150 & ~(_T_2159 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2150 & ~(_T_2163 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2150 & ~(_T_2163 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2150 & ~(_T_2167 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2150 & ~(_T_2167 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2174 & ~(_T_2175 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2174 & ~(_T_2175 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2174 & ~(_T_2179 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2174 & ~(_T_2179 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2174 & ~(_T_2183 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2174 & ~(_T_2183 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2174 & ~(_T_2187 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2174 & ~(_T_2187 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2174 & ~(_T_2195 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2174 & ~(_T_2195 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2226 & ~(_T_2227 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2226 & ~(_T_2227 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2226 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2226 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2226 & ~(_T_2235 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2226 & ~(_T_2235 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2226 & ~(_T_2239 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2226 & ~(_T_2239 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2226 & ~(_T_2243 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2226 & ~(_T_2243 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2252 & ~(_T_2256 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2252 & ~(_T_2256 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2263 & ~(_T_2275 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2263 & ~(_T_2275 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2263 & same_cycle_resp & ~(_T_2281 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2263 & same_cycle_resp & ~(_T_2281 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2263 & same_cycle_resp & ~(_T_2285 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2263 & same_cycle_resp & ~(_T_2285 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2263 & ~same_cycle_resp & ~(_T_2293 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2263 & ~same_cycle_resp & ~(_T_2293 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2263 & ~same_cycle_resp & ~(_T_2297 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2263 & ~same_cycle_resp & ~(_T_2297 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2307 & ~(_T_2309 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2307 & ~(_T_2309 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2316 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2316 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2325 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2325 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2342 & ~(_T_2345 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel re-used a source ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2342 & ~(_T_2345 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2351 & ~(_T_2361 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2351 & ~(_T_2361 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2351 & same_cycle_resp_1 & ~(_T_2365 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2351 & same_cycle_resp_1 & ~(_T_2365 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2351 & ~same_cycle_resp_1 & ~(_T_2369 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2351 & ~same_cycle_resp_1 & ~(_T_2369 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2378 & ~(_T_2380 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2378 & ~(_T_2380 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2384 & ~(_T_2385 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2384 & ~(_T_2385 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2394 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2394 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2407 & ~(_T_2410 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel re-used a sink ID (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2407 & ~(_T_2410 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_e_valid & ~(_T_2417 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:154:12)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_e_valid & ~(_T_2417 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  source = _RAND_4[6:0];
  _RAND_5 = {1{`RANDOM}};
  address = _RAND_5[12:0];
  _RAND_6 = {1{`RANDOM}};
  d_first_counter = _RAND_6[3:0];
  _RAND_7 = {1{`RANDOM}};
  opcode_1 = _RAND_7[2:0];
  _RAND_8 = {1{`RANDOM}};
  param_1 = _RAND_8[1:0];
  _RAND_9 = {1{`RANDOM}};
  size_1 = _RAND_9[2:0];
  _RAND_10 = {1{`RANDOM}};
  source_1 = _RAND_10[6:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  c_first_counter = _RAND_12[3:0];
  _RAND_13 = {1{`RANDOM}};
  opcode_3 = _RAND_13[2:0];
  _RAND_14 = {1{`RANDOM}};
  param_3 = _RAND_14[2:0];
  _RAND_15 = {1{`RANDOM}};
  size_3 = _RAND_15[2:0];
  _RAND_16 = {1{`RANDOM}};
  source_3 = _RAND_16[6:0];
  _RAND_17 = {1{`RANDOM}};
  address_2 = _RAND_17[12:0];
  _RAND_18 = {4{`RANDOM}};
  inflight = _RAND_18[127:0];
  _RAND_19 = {16{`RANDOM}};
  inflight_opcodes = _RAND_19[511:0];
  _RAND_20 = {16{`RANDOM}};
  inflight_sizes = _RAND_20[511:0];
  _RAND_21 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_21[3:0];
  _RAND_22 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_22[3:0];
  _RAND_23 = {1{`RANDOM}};
  watchdog = _RAND_23[31:0];
  _RAND_24 = {4{`RANDOM}};
  inflight_1 = _RAND_24[127:0];
  _RAND_25 = {16{`RANDOM}};
  inflight_sizes_1 = _RAND_25[511:0];
  _RAND_26 = {1{`RANDOM}};
  c_first_counter_1 = _RAND_26[3:0];
  _RAND_27 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_27[3:0];
  _RAND_28 = {1{`RANDOM}};
  watchdog_1 = _RAND_28[31:0];
  _RAND_29 = {1{`RANDOM}};
  inflight_2 = _RAND_29[0:0];
  _RAND_30 = {1{`RANDOM}};
  d_first_counter_3 = _RAND_30[3:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Queue_18(
  input        clock,
  input        reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input  [2:0] io_enq_bits_opcode,
  input  [2:0] io_enq_bits_size,
  input  [6:0] io_enq_bits_source,
  input        io_deq_ready,
  output       io_deq_valid,
  output [2:0] io_deq_bits_opcode,
  output [2:0] io_deq_bits_size,
  output [6:0] io_deq_bits_source
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_REG_INIT
  reg [2:0] ram_opcode [0:0];
  wire [2:0] ram_opcode_io_deq_bits_MPORT_data;
  wire  ram_opcode_io_deq_bits_MPORT_addr;
  wire [2:0] ram_opcode_MPORT_data;
  wire  ram_opcode_MPORT_addr;
  wire  ram_opcode_MPORT_mask;
  wire  ram_opcode_MPORT_en;
  reg [2:0] ram_size [0:0];
  wire [2:0] ram_size_io_deq_bits_MPORT_data;
  wire  ram_size_io_deq_bits_MPORT_addr;
  wire [2:0] ram_size_MPORT_data;
  wire  ram_size_MPORT_addr;
  wire  ram_size_MPORT_mask;
  wire  ram_size_MPORT_en;
  reg [6:0] ram_source [0:0];
  wire [6:0] ram_source_io_deq_bits_MPORT_data;
  wire  ram_source_io_deq_bits_MPORT_addr;
  wire [6:0] ram_source_MPORT_data;
  wire  ram_source_MPORT_addr;
  wire  ram_source_MPORT_mask;
  wire  ram_source_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  do_enq = io_enq_ready & io_enq_valid;
  wire  do_deq = io_deq_ready & io_deq_valid;
  assign ram_opcode_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_opcode_io_deq_bits_MPORT_data = ram_opcode[ram_opcode_io_deq_bits_MPORT_addr];
  assign ram_opcode_MPORT_data = io_enq_bits_opcode;
  assign ram_opcode_MPORT_addr = 1'h0;
  assign ram_opcode_MPORT_mask = 1'h1;
  assign ram_opcode_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_size_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_size_io_deq_bits_MPORT_data = ram_size[ram_size_io_deq_bits_MPORT_addr];
  assign ram_size_MPORT_data = io_enq_bits_size;
  assign ram_size_MPORT_addr = 1'h0;
  assign ram_size_MPORT_mask = 1'h1;
  assign ram_size_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_source_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_source_io_deq_bits_MPORT_data = ram_source[ram_source_io_deq_bits_MPORT_addr];
  assign ram_source_MPORT_data = io_enq_bits_source;
  assign ram_source_MPORT_addr = 1'h0;
  assign ram_source_MPORT_mask = 1'h1;
  assign ram_source_MPORT_en = io_enq_ready & io_enq_valid;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = ram_opcode_io_deq_bits_MPORT_data;
  assign io_deq_bits_size = ram_size_io_deq_bits_MPORT_data;
  assign io_deq_bits_source = ram_source_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_opcode_MPORT_en & ram_opcode_MPORT_mask) begin
      ram_opcode[ram_opcode_MPORT_addr] <= ram_opcode_MPORT_data;
    end
    if(ram_size_MPORT_en & ram_size_MPORT_mask) begin
      ram_size[ram_size_MPORT_addr] <= ram_size_MPORT_data;
    end
    if(ram_source_MPORT_en & ram_source_MPORT_mask) begin
      ram_source[ram_source_MPORT_addr] <= ram_source_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      maybe_full <= do_enq;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_opcode[initvar] = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_size[initvar] = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_source[initvar] = _RAND_2[6:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_3 = {1{`RANDOM}};
  maybe_full = _RAND_3[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Queue_19(
  input        clock,
  input        reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input  [2:0] io_enq_bits_opcode,
  input  [2:0] io_enq_bits_param,
  input  [2:0] io_enq_bits_size,
  input  [6:0] io_enq_bits_source,
  input        io_deq_ready,
  output       io_deq_valid,
  output [2:0] io_deq_bits_opcode,
  output [2:0] io_deq_bits_param,
  output [2:0] io_deq_bits_size,
  output [6:0] io_deq_bits_source
);
`ifdef RANDOMIZE_MEM_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_4;
`endif // RANDOMIZE_REG_INIT
  reg [2:0] ram_opcode [0:0];
  wire [2:0] ram_opcode_io_deq_bits_MPORT_data;
  wire  ram_opcode_io_deq_bits_MPORT_addr;
  wire [2:0] ram_opcode_MPORT_data;
  wire  ram_opcode_MPORT_addr;
  wire  ram_opcode_MPORT_mask;
  wire  ram_opcode_MPORT_en;
  reg [2:0] ram_param [0:0];
  wire [2:0] ram_param_io_deq_bits_MPORT_data;
  wire  ram_param_io_deq_bits_MPORT_addr;
  wire [2:0] ram_param_MPORT_data;
  wire  ram_param_MPORT_addr;
  wire  ram_param_MPORT_mask;
  wire  ram_param_MPORT_en;
  reg [2:0] ram_size [0:0];
  wire [2:0] ram_size_io_deq_bits_MPORT_data;
  wire  ram_size_io_deq_bits_MPORT_addr;
  wire [2:0] ram_size_MPORT_data;
  wire  ram_size_MPORT_addr;
  wire  ram_size_MPORT_mask;
  wire  ram_size_MPORT_en;
  reg [6:0] ram_source [0:0];
  wire [6:0] ram_source_io_deq_bits_MPORT_data;
  wire  ram_source_io_deq_bits_MPORT_addr;
  wire [6:0] ram_source_MPORT_data;
  wire  ram_source_MPORT_addr;
  wire  ram_source_MPORT_mask;
  wire  ram_source_MPORT_en;
  reg  maybe_full;
  wire  empty = ~maybe_full;
  wire  do_enq = io_enq_ready & io_enq_valid;
  wire  do_deq = io_deq_ready & io_deq_valid;
  assign ram_opcode_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_opcode_io_deq_bits_MPORT_data = ram_opcode[ram_opcode_io_deq_bits_MPORT_addr];
  assign ram_opcode_MPORT_data = io_enq_bits_opcode;
  assign ram_opcode_MPORT_addr = 1'h0;
  assign ram_opcode_MPORT_mask = 1'h1;
  assign ram_opcode_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_param_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_param_io_deq_bits_MPORT_data = ram_param[ram_param_io_deq_bits_MPORT_addr];
  assign ram_param_MPORT_data = io_enq_bits_param;
  assign ram_param_MPORT_addr = 1'h0;
  assign ram_param_MPORT_mask = 1'h1;
  assign ram_param_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_size_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_size_io_deq_bits_MPORT_data = ram_size[ram_size_io_deq_bits_MPORT_addr];
  assign ram_size_MPORT_data = io_enq_bits_size;
  assign ram_size_MPORT_addr = 1'h0;
  assign ram_size_MPORT_mask = 1'h1;
  assign ram_size_MPORT_en = io_enq_ready & io_enq_valid;
  assign ram_source_io_deq_bits_MPORT_addr = 1'h0;
  assign ram_source_io_deq_bits_MPORT_data = ram_source[ram_source_io_deq_bits_MPORT_addr];
  assign ram_source_MPORT_data = io_enq_bits_source;
  assign ram_source_MPORT_addr = 1'h0;
  assign ram_source_MPORT_mask = 1'h1;
  assign ram_source_MPORT_en = io_enq_ready & io_enq_valid;
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_opcode = ram_opcode_io_deq_bits_MPORT_data;
  assign io_deq_bits_param = ram_param_io_deq_bits_MPORT_data;
  assign io_deq_bits_size = ram_size_io_deq_bits_MPORT_data;
  assign io_deq_bits_source = ram_source_io_deq_bits_MPORT_data;
  always @(posedge clock) begin
    if(ram_opcode_MPORT_en & ram_opcode_MPORT_mask) begin
      ram_opcode[ram_opcode_MPORT_addr] <= ram_opcode_MPORT_data;
    end
    if(ram_param_MPORT_en & ram_param_MPORT_mask) begin
      ram_param[ram_param_MPORT_addr] <= ram_param_MPORT_data;
    end
    if(ram_size_MPORT_en & ram_size_MPORT_mask) begin
      ram_size[ram_size_MPORT_addr] <= ram_size_MPORT_data;
    end
    if(ram_source_MPORT_en & ram_source_MPORT_mask) begin
      ram_source[ram_source_MPORT_addr] <= ram_source_MPORT_data;
    end
    if (reset) begin
      maybe_full <= 1'h0;
    end else if (do_enq != do_deq) begin
      maybe_full <= do_enq;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_MEM_INIT
  _RAND_0 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_opcode[initvar] = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_param[initvar] = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_size[initvar] = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  for (initvar = 0; initvar < 1; initvar = initvar+1)
    ram_source[initvar] = _RAND_3[6:0];
`endif // RANDOMIZE_MEM_INIT
`ifdef RANDOMIZE_REG_INIT
  _RAND_4 = {1{`RANDOM}};
  maybe_full = _RAND_4[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLError_2(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_param,
  input  [2:0]  auto_in_a_bits_size,
  input  [6:0]  auto_in_a_bits_source,
  input  [12:0] auto_in_a_bits_address,
  input  [3:0]  auto_in_a_bits_mask,
  input         auto_in_a_bits_corrupt,
  output        auto_in_c_ready,
  input         auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
  input  [2:0]  auto_in_c_bits_param,
  input  [2:0]  auto_in_c_bits_size,
  input  [6:0]  auto_in_c_bits_source,
  input  [12:0] auto_in_c_bits_address,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [6:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output        auto_in_d_bits_corrupt,
  input         auto_in_e_valid
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_param;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [6:0] monitor_io_in_a_bits_source;
  wire [12:0] monitor_io_in_a_bits_address;
  wire [3:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_a_bits_corrupt;
  wire  monitor_io_in_c_ready;
  wire  monitor_io_in_c_valid;
  wire [2:0] monitor_io_in_c_bits_opcode;
  wire [2:0] monitor_io_in_c_bits_param;
  wire [2:0] monitor_io_in_c_bits_size;
  wire [6:0] monitor_io_in_c_bits_source;
  wire [12:0] monitor_io_in_c_bits_address;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [6:0] monitor_io_in_d_bits_source;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  monitor_io_in_e_valid;
  wire  a_clock;
  wire  a_reset;
  wire  a_io_enq_ready;
  wire  a_io_enq_valid;
  wire [2:0] a_io_enq_bits_opcode;
  wire [2:0] a_io_enq_bits_size;
  wire [6:0] a_io_enq_bits_source;
  wire  a_io_deq_ready;
  wire  a_io_deq_valid;
  wire [2:0] a_io_deq_bits_opcode;
  wire [2:0] a_io_deq_bits_size;
  wire [6:0] a_io_deq_bits_source;
  wire  c_clock;
  wire  c_reset;
  wire  c_io_enq_ready;
  wire  c_io_enq_valid;
  wire [2:0] c_io_enq_bits_opcode;
  wire [2:0] c_io_enq_bits_param;
  wire [2:0] c_io_enq_bits_size;
  wire [6:0] c_io_enq_bits_source;
  wire  c_io_deq_ready;
  wire  c_io_deq_valid;
  wire [2:0] c_io_deq_bits_opcode;
  wire [2:0] c_io_deq_bits_param;
  wire [2:0] c_io_deq_bits_size;
  wire [6:0] c_io_deq_bits_source;
  reg  idle;
  wire  _a_last_T = a_io_deq_ready & a_io_deq_valid;
  wire [12:0] _a_last_beats1_decode_T_1 = 13'h3f << a_io_deq_bits_size;
  wire [5:0] _a_last_beats1_decode_T_3 = ~_a_last_beats1_decode_T_1[5:0];
  wire [3:0] a_last_beats1_decode = _a_last_beats1_decode_T_3[5:2];
  wire  a_last_beats1_opdata = ~a_io_deq_bits_opcode[2];
  wire [3:0] a_last_beats1 = a_last_beats1_opdata ? a_last_beats1_decode : 4'h0;
  reg [3:0] a_last_counter;
  wire [3:0] a_last_counter1 = a_last_counter - 4'h1;
  wire  a_last_first = a_last_counter == 4'h0;
  wire  a_last = a_last_counter == 4'h1 | a_last_beats1 == 4'h0;
  reg [3:0] beatsLeft;
  wire  idle_1 = beatsLeft == 4'h0;
  wire  da_valid = a_io_deq_valid & a_last & idle;
  reg [3:0] c_last_counter;
  wire  c_last_beats1_opdata = c_io_deq_bits_opcode[0];
  wire [12:0] _c_last_beats1_decode_T_1 = 13'h3f << c_io_deq_bits_size;
  wire [5:0] _c_last_beats1_decode_T_3 = ~_c_last_beats1_decode_T_1[5:0];
  wire [3:0] c_last_beats1_decode = _c_last_beats1_decode_T_3[5:2];
  wire [3:0] c_last_beats1 = c_last_beats1_opdata ? c_last_beats1_decode : 4'h0;
  wire  c_last = c_last_counter == 4'h1 | c_last_beats1 == 4'h0;
  wire  dc_valid = c_io_deq_valid & c_last;
  wire [1:0] _readys_T = {da_valid,dc_valid};
  wire [2:0] _readys_T_1 = {_readys_T, 1'h0};
  wire [1:0] _readys_T_3 = _readys_T | _readys_T_1[1:0];
  wire [2:0] _readys_T_5 = {_readys_T_3, 1'h0};
  wire [1:0] _readys_T_7 = ~_readys_T_5[1:0];
  wire  readys_1 = _readys_T_7[1];
  reg  state_1;
  wire  allowed_1 = idle_1 ? readys_1 : state_1;
  wire  out_1_ready = auto_in_d_ready & allowed_1;
  wire  _T = out_1_ready & da_valid;
  wire [2:0] da_bits_size = a_io_deq_bits_size;
  wire [12:0] _beats1_decode_T_1 = 13'h3f << da_bits_size;
  wire [5:0] _beats1_decode_T_3 = ~_beats1_decode_T_1[5:0];
  wire [3:0] beats1_decode = _beats1_decode_T_3[5:2];
  wire [2:0] _GEN_4 = 3'h2 == a_io_deq_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_5 = 3'h3 == a_io_deq_bits_opcode ? 3'h1 : _GEN_4;
  wire [2:0] _GEN_6 = 3'h4 == a_io_deq_bits_opcode ? 3'h1 : _GEN_5;
  wire [2:0] _GEN_7 = 3'h5 == a_io_deq_bits_opcode ? 3'h2 : _GEN_6;
  wire [2:0] _GEN_8 = 3'h6 == a_io_deq_bits_opcode ? 3'h4 : _GEN_7;
  wire [2:0] da_bits_opcode = 3'h7 == a_io_deq_bits_opcode ? 3'h4 : _GEN_8;
  wire  beats1_opdata = da_bits_opcode[0];
  wire [3:0] beats1 = beats1_opdata ? beats1_decode : 4'h0;
  reg [3:0] counter;
  wire [3:0] counter1 = counter - 4'h1;
  wire  da_first = counter == 4'h0;
  wire  da_last = counter == 4'h1 | beats1 == 4'h0;
  wire  _c_last_T = c_io_deq_ready & c_io_deq_valid;
  wire [3:0] c_last_counter1 = c_last_counter - 4'h1;
  wire  c_last_first = c_last_counter == 4'h0;
  wire  readys_0 = _readys_T_7[0];
  reg  state_0;
  wire  allowed_0 = idle_1 ? readys_0 : state_0;
  wire  out_ready = auto_in_d_ready & allowed_0;
  wire [2:0] dc_bits_size = c_io_deq_bits_size;
  wire  _GEN_12 = _T & da_bits_opcode == 3'h4 ? 1'h0 : idle;
  wire  _GEN_13 = auto_in_e_valid | _GEN_12;
  wire [1:0] _GEN_15 = 2'h1 == c_io_deq_bits_param[1:0] ? 2'h2 : 2'h1;
  wire [1:0] dc_bits_param = 2'h2 == c_io_deq_bits_param[1:0] ? 2'h2 : _GEN_15;
  wire  latch = idle_1 & auto_in_d_ready;
  wire  earlyWinner_0 = readys_0 & dc_valid;
  wire  earlyWinner_1 = readys_1 & da_valid;
  wire  _prefixOR_T = earlyWinner_0 | earlyWinner_1;
  wire  _T_21 = dc_valid | da_valid;
  wire  _T_22 = ~(dc_valid | da_valid);
  wire  muxStateEarly_0 = idle_1 ? earlyWinner_0 : state_0;
  wire  muxStateEarly_1 = idle_1 ? earlyWinner_1 : state_1;
  wire  _sink_ACancel_earlyValid_T_3 = state_0 & dc_valid | state_1 & da_valid;
  wire  sink_ACancel_earlyValid = idle_1 ? _T_21 : _sink_ACancel_earlyValid_T_3;
  wire  _beatsLeft_T_2 = auto_in_d_ready & sink_ACancel_earlyValid;
  wire [3:0] _GEN_17 = {{3'd0}, _beatsLeft_T_2};
  wire [3:0] _beatsLeft_T_4 = beatsLeft - _GEN_17;
  wire [6:0] dc_bits_source = c_io_deq_bits_source;
  wire [6:0] _T_47 = muxStateEarly_0 ? dc_bits_source : 7'h0;
  wire [6:0] da_bits_source = a_io_deq_bits_source;
  wire [6:0] _T_48 = muxStateEarly_1 ? da_bits_source : 7'h0;
  wire [2:0] _T_50 = muxStateEarly_0 ? dc_bits_size : 3'h0;
  wire [2:0] _T_51 = muxStateEarly_1 ? da_bits_size : 3'h0;
  wire [2:0] _T_56 = muxStateEarly_0 ? 3'h6 : 3'h0;
  wire [2:0] _T_57 = muxStateEarly_1 ? da_bits_opcode : 3'h0;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_11 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_param(monitor_io_in_a_bits_param),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_a_bits_corrupt(monitor_io_in_a_bits_corrupt),
    .io_in_c_ready(monitor_io_in_c_ready),
    .io_in_c_valid(monitor_io_in_c_valid),
    .io_in_c_bits_opcode(monitor_io_in_c_bits_opcode),
    .io_in_c_bits_param(monitor_io_in_c_bits_param),
    .io_in_c_bits_size(monitor_io_in_c_bits_size),
    .io_in_c_bits_source(monitor_io_in_c_bits_source),
    .io_in_c_bits_address(monitor_io_in_c_bits_address),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt),
    .io_in_e_valid(monitor_io_in_e_valid)
  );
  CHIPLINK_PREFIX_Queue_18 a (
    .clock(a_clock),
    .reset(a_reset),
    .io_enq_ready(a_io_enq_ready),
    .io_enq_valid(a_io_enq_valid),
    .io_enq_bits_opcode(a_io_enq_bits_opcode),
    .io_enq_bits_size(a_io_enq_bits_size),
    .io_enq_bits_source(a_io_enq_bits_source),
    .io_deq_ready(a_io_deq_ready),
    .io_deq_valid(a_io_deq_valid),
    .io_deq_bits_opcode(a_io_deq_bits_opcode),
    .io_deq_bits_size(a_io_deq_bits_size),
    .io_deq_bits_source(a_io_deq_bits_source)
  );
  CHIPLINK_PREFIX_Queue_19 c (
    .clock(c_clock),
    .reset(c_reset),
    .io_enq_ready(c_io_enq_ready),
    .io_enq_valid(c_io_enq_valid),
    .io_enq_bits_opcode(c_io_enq_bits_opcode),
    .io_enq_bits_param(c_io_enq_bits_param),
    .io_enq_bits_size(c_io_enq_bits_size),
    .io_enq_bits_source(c_io_enq_bits_source),
    .io_deq_ready(c_io_deq_ready),
    .io_deq_valid(c_io_deq_valid),
    .io_deq_bits_opcode(c_io_deq_bits_opcode),
    .io_deq_bits_param(c_io_deq_bits_param),
    .io_deq_bits_size(c_io_deq_bits_size),
    .io_deq_bits_source(c_io_deq_bits_source)
  );
  assign auto_in_a_ready = a_io_enq_ready;
  assign auto_in_c_ready = c_io_enq_ready;
  assign auto_in_d_valid = idle_1 ? _T_21 : _sink_ACancel_earlyValid_T_3;
  assign auto_in_d_bits_opcode = _T_56 | _T_57;
  assign auto_in_d_bits_param = muxStateEarly_0 ? dc_bits_param : 2'h0;
  assign auto_in_d_bits_size = _T_50 | _T_51;
  assign auto_in_d_bits_source = _T_47 | _T_48;
  assign auto_in_d_bits_denied = idle_1 ? earlyWinner_1 : state_1;
  assign auto_in_d_bits_corrupt = muxStateEarly_1 & beats1_opdata;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = a_io_enq_ready;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_param = auto_in_a_bits_param;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_a_bits_corrupt = auto_in_a_bits_corrupt;
  assign monitor_io_in_c_ready = c_io_enq_ready;
  assign monitor_io_in_c_valid = auto_in_c_valid;
  assign monitor_io_in_c_bits_opcode = auto_in_c_bits_opcode;
  assign monitor_io_in_c_bits_param = auto_in_c_bits_param;
  assign monitor_io_in_c_bits_size = auto_in_c_bits_size;
  assign monitor_io_in_c_bits_source = auto_in_c_bits_source;
  assign monitor_io_in_c_bits_address = auto_in_c_bits_address;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = idle_1 ? _T_21 : _sink_ACancel_earlyValid_T_3;
  assign monitor_io_in_d_bits_opcode = _T_56 | _T_57;
  assign monitor_io_in_d_bits_param = muxStateEarly_0 ? dc_bits_param : 2'h0;
  assign monitor_io_in_d_bits_size = _T_50 | _T_51;
  assign monitor_io_in_d_bits_source = _T_47 | _T_48;
  assign monitor_io_in_d_bits_denied = idle_1 ? earlyWinner_1 : state_1;
  assign monitor_io_in_d_bits_corrupt = muxStateEarly_1 & beats1_opdata;
  assign monitor_io_in_e_valid = auto_in_e_valid;
  assign a_clock = clock;
  assign a_reset = reset;
  assign a_io_enq_valid = auto_in_a_valid;
  assign a_io_enq_bits_opcode = auto_in_a_bits_opcode;
  assign a_io_enq_bits_size = auto_in_a_bits_size;
  assign a_io_enq_bits_source = auto_in_a_bits_source;
  assign a_io_deq_ready = out_1_ready & da_last & idle | ~a_last;
  assign c_clock = clock;
  assign c_reset = reset;
  assign c_io_enq_valid = auto_in_c_valid;
  assign c_io_enq_bits_opcode = auto_in_c_bits_opcode;
  assign c_io_enq_bits_param = auto_in_c_bits_param;
  assign c_io_enq_bits_size = auto_in_c_bits_size;
  assign c_io_enq_bits_source = auto_in_c_bits_source;
  assign c_io_deq_ready = out_ready | ~c_last;
  always @(posedge clock) begin
    idle <= reset | _GEN_13;
    if (reset) begin
      a_last_counter <= 4'h0;
    end else if (_a_last_T) begin
      if (a_last_first) begin
        if (a_last_beats1_opdata) begin
          a_last_counter <= a_last_beats1_decode;
        end else begin
          a_last_counter <= 4'h0;
        end
      end else begin
        a_last_counter <= a_last_counter1;
      end
    end
    if (reset) begin
      beatsLeft <= 4'h0;
    end else if (latch) begin
      if (earlyWinner_1) begin
        if (beats1_opdata) begin
          beatsLeft <= beats1_decode;
        end else begin
          beatsLeft <= 4'h0;
        end
      end else begin
        beatsLeft <= 4'h0;
      end
    end else begin
      beatsLeft <= _beatsLeft_T_4;
    end
    if (reset) begin
      c_last_counter <= 4'h0;
    end else if (_c_last_T) begin
      if (c_last_first) begin
        if (c_last_beats1_opdata) begin
          c_last_counter <= c_last_beats1_decode;
        end else begin
          c_last_counter <= 4'h0;
        end
      end else begin
        c_last_counter <= c_last_counter1;
      end
    end
    if (reset) begin
      state_1 <= 1'h0;
    end else if (idle_1) begin
      state_1 <= earlyWinner_1;
    end
    if (reset) begin
      counter <= 4'h0;
    end else if (_T) begin
      if (da_first) begin
        if (beats1_opdata) begin
          counter <= beats1_decode;
        end else begin
          counter <= 4'h0;
        end
      end else begin
        counter <= counter1;
      end
    end
    if (reset) begin
      state_0 <= 1'h0;
    end else if (idle_1) begin
      state_0 <= earlyWinner_0;
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(idle | da_first | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Error.scala:49 assert (idle || da_first) // we only send Grant, never GrantData => simplified flow control below\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(idle | da_first | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~earlyWinner_0 | ~earlyWinner_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~earlyWinner_0 | ~earlyWinner_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~(dc_valid | da_valid) | _prefixOR_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~(dc_valid | da_valid) | _prefixOR_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_22 | _T_21 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:108 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_22 | _T_21 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  idle = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  a_last_counter = _RAND_1[3:0];
  _RAND_2 = {1{`RANDOM}};
  beatsLeft = _RAND_2[3:0];
  _RAND_3 = {1{`RANDOM}};
  c_last_counter = _RAND_3[3:0];
  _RAND_4 = {1{`RANDOM}};
  state_1 = _RAND_4[0:0];
  _RAND_5 = {1{`RANDOM}};
  counter = _RAND_5[3:0];
  _RAND_6 = {1{`RANDOM}};
  state_0 = _RAND_6[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_12(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_param,
  input  [2:0]  io_in_a_bits_size,
  input  [6:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input         io_in_c_ready,
  input         io_in_c_valid,
  input  [2:0]  io_in_c_bits_opcode,
  input  [2:0]  io_in_c_bits_param,
  input  [2:0]  io_in_c_bits_size,
  input  [6:0]  io_in_c_bits_source,
  input  [31:0] io_in_c_bits_address,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [6:0]  io_in_d_bits_source,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt,
  input         io_in_e_ready,
  input         io_in_e_valid,
  input         io_in_e_bits_sink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [127:0] _RAND_18;
  reg [511:0] _RAND_19;
  reg [511:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [127:0] _RAND_24;
  reg [511:0] _RAND_25;
  reg [31:0] _RAND_26;
  reg [31:0] _RAND_27;
  reg [31:0] _RAND_28;
  reg [31:0] _RAND_29;
  reg [31:0] _RAND_30;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = io_in_a_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_7 = io_in_a_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_13 = io_in_a_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_19 = io_in_a_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_25 = io_in_a_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_31 = io_in_a_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_37 = io_in_a_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_43 = io_in_a_bits_source[6:4] == 3'h7;
  wire  source_ok = _source_ok_T_1 | _source_ok_T_7 | _source_ok_T_13 | _source_ok_T_19 | _source_ok_T_25 |
    _source_ok_T_31 | _source_ok_T_37 | _source_ok_T_43;
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_86 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_86;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire [1:0] mask_sizeOH_shiftAmount = io_in_a_bits_size[1:0];
  wire [3:0] _mask_sizeOH_T_1 = 4'h1 << mask_sizeOH_shiftAmount;
  wire [2:0] mask_sizeOH = _mask_sizeOH_T_1[2:0] | 3'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h3;
  wire  mask_size = mask_sizeOH[2];
  wire  mask_bit = io_in_a_bits_address[2];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[1];
  wire  mask_bit_1 = io_in_a_bits_address[1];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire  mask_size_2 = mask_sizeOH[0];
  wire  mask_bit_2 = io_in_a_bits_address[0];
  wire  mask_nbit_2 = ~mask_bit_2;
  wire  mask_eq_6 = mask_eq_2 & mask_nbit_2;
  wire  mask_lo_lo_lo = mask_acc_2 | mask_size_2 & mask_eq_6;
  wire  mask_eq_7 = mask_eq_2 & mask_bit_2;
  wire  mask_lo_lo_hi = mask_acc_2 | mask_size_2 & mask_eq_7;
  wire  mask_eq_8 = mask_eq_3 & mask_nbit_2;
  wire  mask_lo_hi_lo = mask_acc_3 | mask_size_2 & mask_eq_8;
  wire  mask_eq_9 = mask_eq_3 & mask_bit_2;
  wire  mask_lo_hi_hi = mask_acc_3 | mask_size_2 & mask_eq_9;
  wire  mask_eq_10 = mask_eq_4 & mask_nbit_2;
  wire  mask_hi_lo_lo = mask_acc_4 | mask_size_2 & mask_eq_10;
  wire  mask_eq_11 = mask_eq_4 & mask_bit_2;
  wire  mask_hi_lo_hi = mask_acc_4 | mask_size_2 & mask_eq_11;
  wire  mask_eq_12 = mask_eq_5 & mask_nbit_2;
  wire  mask_hi_hi_lo = mask_acc_5 | mask_size_2 & mask_eq_12;
  wire  mask_eq_13 = mask_eq_5 & mask_bit_2;
  wire  mask_hi_hi_hi = mask_acc_5 | mask_size_2 & mask_eq_13;
  wire [7:0] mask = {mask_hi_hi_hi,mask_hi_hi_lo,mask_hi_lo_hi,mask_hi_lo_lo,mask_lo_hi_hi,mask_lo_hi_lo,mask_lo_lo_hi,
    mask_lo_lo_lo};
  wire  _T_118 = io_in_a_bits_opcode == 3'h6;
  wire [31:0] _T_180 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_181 = {1'b0,$signed(_T_180)};
  wire [32:0] _T_183 = $signed(_T_181) & -33'sh10000000;
  wire  _T_184 = $signed(_T_183) == 33'sh0;
  wire [31:0] _T_185 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_186 = {1'b0,$signed(_T_185)};
  wire [32:0] _T_188 = $signed(_T_186) & -33'sh20000000;
  wire  _T_189 = $signed(_T_188) == 33'sh0;
  wire [31:0] _T_190 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_191 = {1'b0,$signed(_T_190)};
  wire [32:0] _T_193 = $signed(_T_191) & -33'sh40000000;
  wire  _T_194 = $signed(_T_193) == 33'sh0;
  wire [31:0] _T_195 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_196 = {1'b0,$signed(_T_195)};
  wire [32:0] _T_198 = $signed(_T_196) & -33'sh40000000;
  wire  _T_199 = $signed(_T_198) == 33'sh0;
  wire [31:0] _T_200 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_201 = {1'b0,$signed(_T_200)};
  wire [32:0] _T_203 = $signed(_T_201) & -33'sh20000000;
  wire  _T_204 = $signed(_T_203) == 33'sh0;
  wire  _T_211 = io_in_a_bits_size <= 3'h6;
  wire [31:0] _T_214 = io_in_a_bits_address ^ 32'h1000;
  wire [32:0] _T_215 = {1'b0,$signed(_T_214)};
  wire [32:0] _T_217 = $signed(_T_215) & -33'sh1000;
  wire  _T_218 = $signed(_T_217) == 33'sh0;
  wire  _T_219 = _T_211 & _T_218;
  wire  _T_222 = source_ok & _T_219;
  wire  _T_277 = _source_ok_T_1 & _T_211;
  wire  _T_330 = _T_218 | _T_184 | _T_189 | _T_194 | _T_199 | _T_204;
  wire  _T_333 = _T_277 & _T_330;
  wire  _T_347 = io_in_a_bits_param <= 3'h2;
  wire [7:0] _T_351 = ~io_in_a_bits_mask;
  wire  _T_352 = _T_351 == 8'h0;
  wire  _T_360 = io_in_a_bits_opcode == 3'h7;
  wire  _T_593 = io_in_a_bits_param != 3'h0;
  wire  _T_606 = io_in_a_bits_opcode == 3'h4;
  wire  _T_709 = _T_211 & _T_330;
  wire  _T_720 = io_in_a_bits_param == 3'h0;
  wire  _T_724 = io_in_a_bits_mask == mask;
  wire  _T_732 = io_in_a_bits_opcode == 3'h0;
  wire  _T_834 = source_ok & _T_709;
  wire  _T_852 = io_in_a_bits_opcode == 3'h1;
  wire [7:0] _T_968 = ~mask;
  wire [7:0] _T_969 = io_in_a_bits_mask & _T_968;
  wire  _T_970 = _T_969 == 8'h0;
  wire  _T_974 = io_in_a_bits_opcode == 3'h2;
  wire  _T_1036 = io_in_a_bits_size <= 3'h3;
  wire  _T_1074 = _T_1036 & _T_330;
  wire  _T_1076 = source_ok & _T_1074;
  wire  _T_1086 = io_in_a_bits_param <= 3'h4;
  wire  _T_1094 = io_in_a_bits_opcode == 3'h3;
  wire  _T_1206 = io_in_a_bits_param <= 3'h3;
  wire  _T_1214 = io_in_a_bits_opcode == 3'h5;
  wire  _T_1328 = io_in_a_bits_param <= 3'h1;
  wire  _T_1340 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_55 = io_in_d_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_61 = io_in_d_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_67 = io_in_d_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_73 = io_in_d_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_79 = io_in_d_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_85 = io_in_d_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_91 = io_in_d_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_97 = io_in_d_bits_source[6:4] == 3'h7;
  wire  source_ok_1 = _source_ok_T_55 | _source_ok_T_61 | _source_ok_T_67 | _source_ok_T_73 | _source_ok_T_79 |
    _source_ok_T_85 | _source_ok_T_91 | _source_ok_T_97;
  wire  _T_1344 = io_in_d_bits_opcode == 3'h6;
  wire  _T_1348 = io_in_d_bits_size >= 3'h3;
  wire  _T_1352 = io_in_d_bits_param == 2'h0;
  wire  _T_1356 = ~io_in_d_bits_corrupt;
  wire  _T_1360 = ~io_in_d_bits_denied;
  wire  _T_1364 = io_in_d_bits_opcode == 3'h4;
  wire  _T_1375 = io_in_d_bits_param <= 2'h2;
  wire  _T_1379 = io_in_d_bits_param != 2'h2;
  wire  _T_1392 = io_in_d_bits_opcode == 3'h5;
  wire  _T_1412 = _T_1360 | io_in_d_bits_corrupt;
  wire  _T_1421 = io_in_d_bits_opcode == 3'h0;
  wire  _T_1438 = io_in_d_bits_opcode == 3'h1;
  wire  _T_1456 = io_in_d_bits_opcode == 3'h2;
  wire  _source_ok_T_109 = io_in_c_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_115 = io_in_c_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_121 = io_in_c_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_127 = io_in_c_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_133 = io_in_c_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_139 = io_in_c_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_145 = io_in_c_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_151 = io_in_c_bits_source[6:4] == 3'h7;
  wire  source_ok_2 = _source_ok_T_109 | _source_ok_T_115 | _source_ok_T_121 | _source_ok_T_127 | _source_ok_T_133 |
    _source_ok_T_139 | _source_ok_T_145 | _source_ok_T_151;
  wire [12:0] _is_aligned_mask_T_7 = 13'h3f << io_in_c_bits_size;
  wire [5:0] is_aligned_mask_2 = ~_is_aligned_mask_T_7[5:0];
  wire [31:0] _GEN_87 = {{26'd0}, is_aligned_mask_2};
  wire [31:0] _is_aligned_T_2 = io_in_c_bits_address & _GEN_87;
  wire  is_aligned_2 = _is_aligned_T_2 == 32'h0;
  wire [31:0] _address_ok_T_34 = io_in_c_bits_address ^ 32'h10000000;
  wire [32:0] _address_ok_T_35 = {1'b0,$signed(_address_ok_T_34)};
  wire [32:0] _address_ok_T_37 = $signed(_address_ok_T_35) & -33'sh10000000;
  wire  _address_ok_T_38 = $signed(_address_ok_T_37) == 33'sh0;
  wire [31:0] _address_ok_T_39 = io_in_c_bits_address ^ 32'h20000000;
  wire [32:0] _address_ok_T_40 = {1'b0,$signed(_address_ok_T_39)};
  wire [32:0] _address_ok_T_42 = $signed(_address_ok_T_40) & -33'sh20000000;
  wire  _address_ok_T_43 = $signed(_address_ok_T_42) == 33'sh0;
  wire [31:0] _address_ok_T_44 = io_in_c_bits_address ^ 32'h40000000;
  wire [32:0] _address_ok_T_45 = {1'b0,$signed(_address_ok_T_44)};
  wire [32:0] _address_ok_T_47 = $signed(_address_ok_T_45) & -33'sh40000000;
  wire  _address_ok_T_48 = $signed(_address_ok_T_47) == 33'sh0;
  wire [31:0] _address_ok_T_49 = io_in_c_bits_address ^ 32'h80000000;
  wire [32:0] _address_ok_T_50 = {1'b0,$signed(_address_ok_T_49)};
  wire [32:0] _address_ok_T_52 = $signed(_address_ok_T_50) & -33'sh40000000;
  wire  _address_ok_T_53 = $signed(_address_ok_T_52) == 33'sh0;
  wire [31:0] _address_ok_T_54 = io_in_c_bits_address ^ 32'hc0000000;
  wire [32:0] _address_ok_T_55 = {1'b0,$signed(_address_ok_T_54)};
  wire [32:0] _address_ok_T_57 = $signed(_address_ok_T_55) & -33'sh20000000;
  wire  _address_ok_T_58 = $signed(_address_ok_T_57) == 33'sh0;
  wire  _address_ok_T_62 = _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 | _address_ok_T_58;
  wire [31:0] _address_ok_T_63 = io_in_c_bits_address ^ 32'h1000;
  wire [32:0] _address_ok_T_64 = {1'b0,$signed(_address_ok_T_63)};
  wire [32:0] _address_ok_T_66 = $signed(_address_ok_T_64) & -33'sh1000;
  wire  _address_ok_T_67 = $signed(_address_ok_T_66) == 33'sh0;
  wire  address_ok_1 = _address_ok_T_62 | _address_ok_T_67;
  wire  _T_2226 = io_in_c_bits_opcode == 3'h4;
  wire  _T_2233 = io_in_c_bits_size >= 3'h3;
  wire  _T_2240 = io_in_c_bits_param <= 3'h5;
  wire  _T_2248 = io_in_c_bits_opcode == 3'h5;
  wire  _T_2266 = io_in_c_bits_opcode == 3'h6;
  wire  _T_2359 = io_in_c_bits_size <= 3'h6;
  wire  _T_2367 = _T_2359 & _address_ok_T_67;
  wire  _T_2370 = source_ok_2 & _T_2367;
  wire  _T_2425 = _source_ok_T_109 & _T_2359;
  wire  _T_2478 = _address_ok_T_67 | _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 |
    _address_ok_T_58;
  wire  _T_2481 = _T_2425 & _T_2478;
  wire  _T_2503 = io_in_c_bits_opcode == 3'h7;
  wire  _T_2736 = io_in_c_bits_opcode == 3'h0;
  wire  _T_2746 = io_in_c_bits_param == 3'h0;
  wire  _T_2754 = io_in_c_bits_opcode == 3'h1;
  wire  _T_2768 = io_in_c_bits_opcode == 3'h2;
  wire  sink_ok_1 = io_in_e_bits_sink < 1'h1;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [2:0] a_first_beats1_decode = is_aligned_mask[5:3];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [2:0] a_first_counter;
  wire [2:0] a_first_counter1 = a_first_counter - 3'h1;
  wire  a_first = a_first_counter == 3'h0;
  reg [2:0] opcode;
  reg [2:0] param;
  reg [2:0] size;
  reg [6:0] source;
  reg [31:0] address;
  wire  _T_2790 = io_in_a_valid & ~a_first;
  wire  _T_2791 = io_in_a_bits_opcode == opcode;
  wire  _T_2795 = io_in_a_bits_param == param;
  wire  _T_2799 = io_in_a_bits_size == size;
  wire  _T_2803 = io_in_a_bits_source == source;
  wire  _T_2807 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [2:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:3];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [2:0] d_first_counter;
  wire [2:0] d_first_counter1 = d_first_counter - 3'h1;
  wire  d_first = d_first_counter == 3'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [6:0] source_1;
  reg  denied;
  wire  _T_2814 = io_in_d_valid & ~d_first;
  wire  _T_2815 = io_in_d_bits_opcode == opcode_1;
  wire  _T_2819 = io_in_d_bits_param == param_1;
  wire  _T_2823 = io_in_d_bits_size == size_1;
  wire  _T_2827 = io_in_d_bits_source == source_1;
  wire  _T_2835 = io_in_d_bits_denied == denied;
  wire  _c_first_T = io_in_c_ready & io_in_c_valid;
  wire [2:0] c_first_beats1_decode = is_aligned_mask_2[5:3];
  wire  c_first_beats1_opdata = io_in_c_bits_opcode[0];
  reg [2:0] c_first_counter;
  wire [2:0] c_first_counter1 = c_first_counter - 3'h1;
  wire  c_first = c_first_counter == 3'h0;
  reg [2:0] opcode_3;
  reg [2:0] param_3;
  reg [2:0] size_3;
  reg [6:0] source_3;
  reg [31:0] address_2;
  wire  _T_2866 = io_in_c_valid & ~c_first;
  wire  _T_2867 = io_in_c_bits_opcode == opcode_3;
  wire  _T_2871 = io_in_c_bits_param == param_3;
  wire  _T_2875 = io_in_c_bits_size == size_3;
  wire  _T_2879 = io_in_c_bits_source == source_3;
  wire  _T_2883 = io_in_c_bits_address == address_2;
  reg [127:0] inflight;
  reg [511:0] inflight_opcodes;
  reg [511:0] inflight_sizes;
  reg [2:0] a_first_counter_1;
  wire [2:0] a_first_counter1_1 = a_first_counter_1 - 3'h1;
  wire  a_first_1 = a_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_1;
  wire [2:0] d_first_counter1_1 = d_first_counter_1 - 3'h1;
  wire  d_first_1 = d_first_counter_1 == 3'h0;
  wire [8:0] _GEN_88 = {io_in_d_bits_source, 2'h0};
  wire [9:0] _a_opcode_lookup_T = {{1'd0}, _GEN_88};
  wire [511:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [511:0] _GEN_89 = {{496'd0}, _a_opcode_lookup_T_5};
  wire [511:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_89;
  wire [511:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[511:1]};
  wire [511:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [511:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_89;
  wire [511:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[511:1]};
  wire  _T_2889 = io_in_a_valid & a_first_1;
  wire [127:0] _a_set_wo_ready_T = 128'h1 << io_in_a_bits_source;
  wire [127:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire  _T_2892 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_94 = {io_in_a_bits_source, 2'h0};
  wire [9:0] _a_opcodes_set_T = {{1'd0}, _GEN_94};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_95 = {{1023'd0}, a_opcodes_set_interm};
  wire [1026:0] _a_opcodes_set_T_1 = _GEN_95 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_97 = {{1023'd0}, a_sizes_set_interm};
  wire [1026:0] _a_sizes_set_T_1 = _GEN_97 << _a_opcodes_set_T;
  wire [127:0] _T_2894 = inflight >> io_in_a_bits_source;
  wire  _T_2896 = ~_T_2894[0];
  wire [127:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_31 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 1027'h0;
  wire [1026:0] _GEN_32 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 1027'h0;
  wire  _T_2900 = io_in_d_valid & d_first_1;
  wire  _T_2902 = ~_T_1344;
  wire  _T_2903 = io_in_d_valid & d_first_1 & ~_T_1344;
  wire [127:0] _d_clr_wo_ready_T = 128'h1 << io_in_d_bits_source;
  wire [127:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_1344 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_99 = {{1023'd0}, _a_opcode_lookup_T_5};
  wire [1038:0] _d_opcodes_clr_T_5 = _GEN_99 << _a_opcode_lookup_T;
  wire [127:0] d_clr = _d_first_T & d_first_1 & _T_2902 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_35 = _d_first_T & d_first_1 & _T_2902 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_2889 & io_in_a_bits_source == io_in_d_bits_source;
  wire [127:0] _T_2913 = inflight >> io_in_d_bits_source;
  wire  _T_2915 = _T_2913[0] | same_cycle_resp;
  wire [2:0] _GEN_39 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_40 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_39;
  wire [2:0] _GEN_41 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_40;
  wire [2:0] _GEN_42 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_41;
  wire [2:0] _GEN_43 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_42;
  wire [2:0] _GEN_44 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_43;
  wire [2:0] _GEN_51 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_42;
  wire [2:0] _GEN_52 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_51;
  wire  _T_2920 = io_in_d_bits_opcode == _GEN_52;
  wire  _T_2921 = io_in_d_bits_opcode == _GEN_44 | _T_2920;
  wire  _T_2925 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_55 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_56 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_55;
  wire [2:0] _GEN_57 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_56;
  wire [2:0] _GEN_58 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_57;
  wire [2:0] _GEN_59 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_58;
  wire [2:0] _GEN_60 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_59;
  wire [2:0] _GEN_67 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_58;
  wire [2:0] _GEN_68 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_67;
  wire  _T_2932 = io_in_d_bits_opcode == _GEN_68;
  wire  _T_2933 = io_in_d_bits_opcode == _GEN_60 | _T_2932;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_102 = {{1'd0}, io_in_d_bits_size};
  wire  _T_2937 = _GEN_102 == a_size_lookup;
  wire  _T_2947 = _T_2900 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_2902;
  wire  _T_2948 = ~io_in_d_ready;
  wire  _T_2949 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_2956 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [127:0] _inflight_T = inflight | a_set;
  wire [127:0] _inflight_T_1 = ~d_clr;
  wire [127:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [511:0] a_opcodes_set = _GEN_31[511:0];
  wire [511:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [511:0] d_opcodes_clr = _GEN_35[511:0];
  wire [511:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [511:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [511:0] a_sizes_set = _GEN_32[511:0];
  wire [511:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [511:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_2965 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [127:0] inflight_1;
  reg [511:0] inflight_sizes_1;
  reg [2:0] c_first_counter_1;
  wire [2:0] c_first_counter1_1 = c_first_counter_1 - 3'h1;
  wire  c_first_1 = c_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_2;
  wire [2:0] d_first_counter1_2 = d_first_counter_2 - 3'h1;
  wire  d_first_2 = d_first_counter_2 == 3'h0;
  wire [511:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [511:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_89;
  wire [511:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[511:1]};
  wire  _T_2975 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire  _T_2976 = io_in_c_valid & c_first_1 & _T_2975;
  wire [127:0] _c_set_wo_ready_T = 128'h1 << io_in_c_bits_source;
  wire [127:0] c_set_wo_ready = io_in_c_valid & c_first_1 & _T_2975 ? _c_set_wo_ready_T : 128'h0;
  wire  _T_2982 = _c_first_T & c_first_1 & _T_2975;
  wire [3:0] _c_sizes_set_interm_T = {io_in_c_bits_size, 1'h0};
  wire [3:0] _c_sizes_set_interm_T_1 = _c_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_109 = {io_in_c_bits_source, 2'h0};
  wire [9:0] _c_opcodes_set_T = {{1'd0}, _GEN_109};
  wire [3:0] c_sizes_set_interm = _c_first_T & c_first_1 & _T_2975 ? _c_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_112 = {{1023'd0}, c_sizes_set_interm};
  wire [1026:0] _c_sizes_set_T_1 = _GEN_112 << _c_opcodes_set_T;
  wire [127:0] _T_2983 = inflight_1 >> io_in_c_bits_source;
  wire  _T_2985 = ~_T_2983[0];
  wire [127:0] c_set = _c_first_T & c_first_1 & _T_2975 ? _c_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_77 = _c_first_T & c_first_1 & _T_2975 ? _c_sizes_set_T_1 : 1027'h0;
  wire  _T_2989 = io_in_d_valid & d_first_2;
  wire  _T_2991 = io_in_d_valid & d_first_2 & _T_1344;
  wire [127:0] d_clr_wo_ready_1 = io_in_d_valid & d_first_2 & _T_1344 ? _d_clr_wo_ready_T : 128'h0;
  wire [127:0] d_clr_1 = _d_first_T & d_first_2 & _T_1344 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_80 = _d_first_T & d_first_2 & _T_1344 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_8 = io_in_c_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp_1 = _T_2976 & io_in_c_bits_source == io_in_d_bits_source;
  wire [127:0] _T_2999 = inflight_1 >> io_in_d_bits_source;
  wire  _T_3001 = _T_2999[0] | same_cycle_resp_1;
  wire  _T_3005 = io_in_d_bits_size == io_in_c_bits_size;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_3009 = _GEN_102 == c_size_lookup;
  wire  _T_3018 = _T_2989 & c_first_1 & io_in_c_valid & _same_cycle_resp_T_8 & _T_1344;
  wire  _T_3020 = _T_2948 | io_in_c_ready;
  wire  _T_3024 = |c_set_wo_ready;
  wire  _T_3025 = c_set_wo_ready != d_clr_wo_ready_1;
  wire [127:0] _inflight_T_3 = inflight_1 | c_set;
  wire [127:0] _inflight_T_4 = ~d_clr_1;
  wire [127:0] _inflight_T_5 = _inflight_T_3 & _inflight_T_4;
  wire [511:0] d_opcodes_clr_1 = _GEN_80[511:0];
  wire [511:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [511:0] c_sizes_set = _GEN_77[511:0];
  wire [511:0] _inflight_sizes_T_3 = inflight_sizes_1 | c_sizes_set;
  wire [511:0] _inflight_sizes_T_5 = _inflight_sizes_T_3 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_3034 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  reg  inflight_2;
  reg [2:0] d_first_counter_3;
  wire [2:0] d_first_counter1_3 = d_first_counter_3 - 3'h1;
  wire  d_first_3 = d_first_counter_3 == 3'h0;
  wire  _T_3046 = io_in_d_bits_opcode[2] & ~io_in_d_bits_opcode[1];
  wire  _T_3047 = _d_first_T & d_first_3 & _T_3046;
  wire  _T_3050 = ~inflight_2;
  wire [1:0] _GEN_84 = _d_first_T & d_first_3 & _T_3046 ? 2'h1 : 2'h0;
  wire  _T_3054 = io_in_e_ready & io_in_e_valid;
  wire [1:0] _e_clr_T = 2'h1 << io_in_e_bits_sink;
  wire  d_set = _GEN_84[0];
  wire  _T_3058 = (d_set | inflight_2) >> io_in_e_bits_sink;
  wire [1:0] _GEN_85 = _T_3054 ? _e_clr_T : 2'h0;
  wire  e_clr = _GEN_85[0];
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 3'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      param <= io_in_a_bits_param;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 3'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      c_first_counter <= 3'h0;
    end else if (_c_first_T) begin
      if (c_first) begin
        if (c_first_beats1_opdata) begin
          c_first_counter <= c_first_beats1_decode;
        end else begin
          c_first_counter <= 3'h0;
        end
      end else begin
        c_first_counter <= c_first_counter1;
      end
    end
    if (_c_first_T & c_first) begin
      opcode_3 <= io_in_c_bits_opcode;
    end
    if (_c_first_T & c_first) begin
      param_3 <= io_in_c_bits_param;
    end
    if (_c_first_T & c_first) begin
      size_3 <= io_in_c_bits_size;
    end
    if (_c_first_T & c_first) begin
      source_3 <= io_in_c_bits_source;
    end
    if (_c_first_T & c_first) begin
      address_2 <= io_in_c_bits_address;
    end
    if (reset) begin
      inflight <= 128'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 512'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 512'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 3'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 3'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 128'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 512'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      c_first_counter_1 <= 3'h0;
    end else if (_c_first_T) begin
      if (c_first_1) begin
        if (c_first_beats1_opdata) begin
          c_first_counter_1 <= c_first_beats1_decode;
        end else begin
          c_first_counter_1 <= 3'h0;
        end
      end else begin
        c_first_counter_1 <= c_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_2 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 3'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_c_first_T | _d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    if (reset) begin
      inflight_2 <= 1'h0;
    end else begin
      inflight_2 <= (inflight_2 | d_set) & ~e_clr;
    end
    if (reset) begin
      d_first_counter_3 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_3) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_3 <= d_first_beats1_decode;
        end else begin
          d_first_counter_3 <= 3'h0;
        end
      end else begin
        d_first_counter_3 <= d_first_counter1_3;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1086 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1086 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1206 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1206 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_1328 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_1328 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1340 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1340 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1348 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1348 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1360 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1360 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1348 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1348 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1375 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1375 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1379 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1379 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1348 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1348 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1375 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1375 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1379 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1379 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1412 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1412 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(_T_1412 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(_T_1412 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(_T_2233 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(_T_2233 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(_T_2240 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(_T_2240 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(_T_2233 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(_T_2233 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(_T_2240 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(_T_2240 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2370 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2370 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2481 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2481 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2233 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release smaller than a beat (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2233 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2240 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid report param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2240 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2370 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2370 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2481 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2481 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2233 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2233 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2240 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2240 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(_T_2746 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(_T_2746 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(_T_2746 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(_T_2746 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck address not aligned to size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(_T_2746 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(_T_2746 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channels carries invalid sink ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2790 & ~(_T_2791 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2790 & ~(_T_2791 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2790 & ~(_T_2795 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2790 & ~(_T_2795 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2790 & ~(_T_2799 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2790 & ~(_T_2799 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2790 & ~(_T_2803 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2790 & ~(_T_2803 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2790 & ~(_T_2807 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2790 & ~(_T_2807 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2814 & ~(_T_2815 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2814 & ~(_T_2815 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2814 & ~(_T_2819 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2814 & ~(_T_2819 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2814 & ~(_T_2823 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2814 & ~(_T_2823 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2814 & ~(_T_2827 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2814 & ~(_T_2827 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2814 & ~(_T_2835 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2814 & ~(_T_2835 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2866 & ~(_T_2867 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2866 & ~(_T_2867 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2866 & ~(_T_2871 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2866 & ~(_T_2871 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2866 & ~(_T_2875 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2866 & ~(_T_2875 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2866 & ~(_T_2879 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2866 & ~(_T_2879 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2866 & ~(_T_2883 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2866 & ~(_T_2883 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2892 & ~(_T_2896 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2892 & ~(_T_2896 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2903 & ~(_T_2915 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2903 & ~(_T_2915 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2903 & same_cycle_resp & ~(_T_2921 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2903 & same_cycle_resp & ~(_T_2921 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2903 & same_cycle_resp & ~(_T_2925 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2903 & same_cycle_resp & ~(_T_2925 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2903 & ~same_cycle_resp & ~(_T_2933 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2903 & ~same_cycle_resp & ~(_T_2933 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2903 & ~same_cycle_resp & ~(_T_2937 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2903 & ~same_cycle_resp & ~(_T_2937 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2947 & ~(_T_2949 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2947 & ~(_T_2949 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2956 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2956 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2965 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2965 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2982 & ~(_T_2985 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel re-used a source ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2982 & ~(_T_2985 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2991 & ~(_T_3001 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2991 & ~(_T_3001 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2991 & same_cycle_resp_1 & ~(_T_3005 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2991 & same_cycle_resp_1 & ~(_T_3005 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2991 & ~same_cycle_resp_1 & ~(_T_3009 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2991 & ~same_cycle_resp_1 & ~(_T_3009 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3018 & ~(_T_3020 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3018 & ~(_T_3020 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3024 & ~(_T_3025 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3024 & ~(_T_3025 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_3034 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_3034 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3047 & ~(_T_3050 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel re-used a sink ID (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3047 & ~(_T_3050 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3054 & ~(_T_3058 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:47)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3054 & ~(_T_3058 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  source = _RAND_4[6:0];
  _RAND_5 = {1{`RANDOM}};
  address = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  d_first_counter = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  opcode_1 = _RAND_7[2:0];
  _RAND_8 = {1{`RANDOM}};
  param_1 = _RAND_8[1:0];
  _RAND_9 = {1{`RANDOM}};
  size_1 = _RAND_9[2:0];
  _RAND_10 = {1{`RANDOM}};
  source_1 = _RAND_10[6:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  c_first_counter = _RAND_12[2:0];
  _RAND_13 = {1{`RANDOM}};
  opcode_3 = _RAND_13[2:0];
  _RAND_14 = {1{`RANDOM}};
  param_3 = _RAND_14[2:0];
  _RAND_15 = {1{`RANDOM}};
  size_3 = _RAND_15[2:0];
  _RAND_16 = {1{`RANDOM}};
  source_3 = _RAND_16[6:0];
  _RAND_17 = {1{`RANDOM}};
  address_2 = _RAND_17[31:0];
  _RAND_18 = {4{`RANDOM}};
  inflight = _RAND_18[127:0];
  _RAND_19 = {16{`RANDOM}};
  inflight_opcodes = _RAND_19[511:0];
  _RAND_20 = {16{`RANDOM}};
  inflight_sizes = _RAND_20[511:0];
  _RAND_21 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_21[2:0];
  _RAND_22 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_22[2:0];
  _RAND_23 = {1{`RANDOM}};
  watchdog = _RAND_23[31:0];
  _RAND_24 = {4{`RANDOM}};
  inflight_1 = _RAND_24[127:0];
  _RAND_25 = {16{`RANDOM}};
  inflight_sizes_1 = _RAND_25[511:0];
  _RAND_26 = {1{`RANDOM}};
  c_first_counter_1 = _RAND_26[2:0];
  _RAND_27 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_27[2:0];
  _RAND_28 = {1{`RANDOM}};
  watchdog_1 = _RAND_28[31:0];
  _RAND_29 = {1{`RANDOM}};
  inflight_2 = _RAND_29[0:0];
  _RAND_30 = {1{`RANDOM}};
  d_first_counter_3 = _RAND_30[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLAtomicAutomata(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_param,
  input  [2:0]  auto_in_a_bits_size,
  input  [6:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  output        auto_in_c_ready,
  input         auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
  input  [2:0]  auto_in_c_bits_param,
  input  [2:0]  auto_in_c_bits_size,
  input  [6:0]  auto_in_c_bits_source,
  input  [31:0] auto_in_c_bits_address,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [6:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  output        auto_in_e_ready,
  input         auto_in_e_valid,
  input         auto_in_e_bits_sink,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [2:0]  auto_out_a_bits_param,
  output [2:0]  auto_out_a_bits_size,
  output [6:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_a_bits_corrupt,
  input         auto_out_c_ready,
  output        auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
  output [2:0]  auto_out_c_bits_param,
  output [2:0]  auto_out_c_bits_size,
  output [6:0]  auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [6:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  input         auto_out_e_ready,
  output        auto_out_e_valid,
  output        auto_out_e_bits_sink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [63:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [63:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_param;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [6:0] monitor_io_in_a_bits_source;
  wire [31:0] monitor_io_in_a_bits_address;
  wire [7:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_c_ready;
  wire  monitor_io_in_c_valid;
  wire [2:0] monitor_io_in_c_bits_opcode;
  wire [2:0] monitor_io_in_c_bits_param;
  wire [2:0] monitor_io_in_c_bits_size;
  wire [6:0] monitor_io_in_c_bits_source;
  wire [31:0] monitor_io_in_c_bits_address;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [6:0] monitor_io_in_d_bits_source;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  monitor_io_in_e_ready;
  wire  monitor_io_in_e_valid;
  wire  monitor_io_in_e_bits_sink;
  reg [1:0] cam_s_0_state;
  reg [2:0] cam_a_0_bits_opcode;
  reg [2:0] cam_a_0_bits_param;
  reg [2:0] cam_a_0_bits_size;
  reg [6:0] cam_a_0_bits_source;
  reg [31:0] cam_a_0_bits_address;
  reg [7:0] cam_a_0_bits_mask;
  reg [63:0] cam_a_0_bits_data;
  reg  cam_a_0_fifoId;
  reg [3:0] cam_a_0_lut;
  reg [63:0] cam_d_0_data;
  reg  cam_d_0_denied;
  reg  cam_d_0_corrupt;
  wire  cam_free_0 = cam_s_0_state == 2'h0;
  wire  cam_amo_0 = cam_s_0_state == 2'h2;
  wire  cam_abusy_0 = cam_s_0_state == 2'h3 | cam_amo_0;
  wire  cam_dmatch_0 = cam_s_0_state != 2'h0;
  wire [32:0] _a_canLogical_T_36 = {1'b0,$signed(auto_in_a_bits_address)};
  wire [32:0] _a_canLogical_T_38 = $signed(_a_canLogical_T_36) & 33'shf0000000;
  wire  _a_canLogical_T_39 = $signed(_a_canLogical_T_38) == 33'sh0;
  wire  a_isLogical = auto_in_a_bits_opcode == 3'h3;
  wire  a_isArithmetic = auto_in_a_bits_opcode == 3'h2;
  wire  _a_isSupported_T = a_isArithmetic ? 1'h0 : 1'h1;
  wire  a_isSupported = a_isLogical ? 1'h0 : _a_isSupported_T;
  wire  a_cam_busy = cam_abusy_0 & cam_a_0_fifoId == _a_canLogical_T_39;
  wire  indexes_hi = cam_a_0_bits_data[0];
  wire  indexes_lo = cam_d_0_data[0];
  wire [1:0] indexes_0 = {indexes_hi,indexes_lo};
  wire  indexes_hi_1 = cam_a_0_bits_data[1];
  wire  indexes_lo_1 = cam_d_0_data[1];
  wire [1:0] indexes_1 = {indexes_hi_1,indexes_lo_1};
  wire  indexes_hi_2 = cam_a_0_bits_data[2];
  wire  indexes_lo_2 = cam_d_0_data[2];
  wire [1:0] indexes_2 = {indexes_hi_2,indexes_lo_2};
  wire  indexes_hi_3 = cam_a_0_bits_data[3];
  wire  indexes_lo_3 = cam_d_0_data[3];
  wire [1:0] indexes_3 = {indexes_hi_3,indexes_lo_3};
  wire  indexes_hi_4 = cam_a_0_bits_data[4];
  wire  indexes_lo_4 = cam_d_0_data[4];
  wire [1:0] indexes_4 = {indexes_hi_4,indexes_lo_4};
  wire  indexes_hi_5 = cam_a_0_bits_data[5];
  wire  indexes_lo_5 = cam_d_0_data[5];
  wire [1:0] indexes_5 = {indexes_hi_5,indexes_lo_5};
  wire  indexes_hi_6 = cam_a_0_bits_data[6];
  wire  indexes_lo_6 = cam_d_0_data[6];
  wire [1:0] indexes_6 = {indexes_hi_6,indexes_lo_6};
  wire  indexes_hi_7 = cam_a_0_bits_data[7];
  wire  indexes_lo_7 = cam_d_0_data[7];
  wire [1:0] indexes_7 = {indexes_hi_7,indexes_lo_7};
  wire  indexes_hi_8 = cam_a_0_bits_data[8];
  wire  indexes_lo_8 = cam_d_0_data[8];
  wire [1:0] indexes_8 = {indexes_hi_8,indexes_lo_8};
  wire  indexes_hi_9 = cam_a_0_bits_data[9];
  wire  indexes_lo_9 = cam_d_0_data[9];
  wire [1:0] indexes_9 = {indexes_hi_9,indexes_lo_9};
  wire  indexes_hi_10 = cam_a_0_bits_data[10];
  wire  indexes_lo_10 = cam_d_0_data[10];
  wire [1:0] indexes_10 = {indexes_hi_10,indexes_lo_10};
  wire  indexes_hi_11 = cam_a_0_bits_data[11];
  wire  indexes_lo_11 = cam_d_0_data[11];
  wire [1:0] indexes_11 = {indexes_hi_11,indexes_lo_11};
  wire  indexes_hi_12 = cam_a_0_bits_data[12];
  wire  indexes_lo_12 = cam_d_0_data[12];
  wire [1:0] indexes_12 = {indexes_hi_12,indexes_lo_12};
  wire  indexes_hi_13 = cam_a_0_bits_data[13];
  wire  indexes_lo_13 = cam_d_0_data[13];
  wire [1:0] indexes_13 = {indexes_hi_13,indexes_lo_13};
  wire  indexes_hi_14 = cam_a_0_bits_data[14];
  wire  indexes_lo_14 = cam_d_0_data[14];
  wire [1:0] indexes_14 = {indexes_hi_14,indexes_lo_14};
  wire  indexes_hi_15 = cam_a_0_bits_data[15];
  wire  indexes_lo_15 = cam_d_0_data[15];
  wire [1:0] indexes_15 = {indexes_hi_15,indexes_lo_15};
  wire  indexes_hi_16 = cam_a_0_bits_data[16];
  wire  indexes_lo_16 = cam_d_0_data[16];
  wire [1:0] indexes_16 = {indexes_hi_16,indexes_lo_16};
  wire  indexes_hi_17 = cam_a_0_bits_data[17];
  wire  indexes_lo_17 = cam_d_0_data[17];
  wire [1:0] indexes_17 = {indexes_hi_17,indexes_lo_17};
  wire  indexes_hi_18 = cam_a_0_bits_data[18];
  wire  indexes_lo_18 = cam_d_0_data[18];
  wire [1:0] indexes_18 = {indexes_hi_18,indexes_lo_18};
  wire  indexes_hi_19 = cam_a_0_bits_data[19];
  wire  indexes_lo_19 = cam_d_0_data[19];
  wire [1:0] indexes_19 = {indexes_hi_19,indexes_lo_19};
  wire  indexes_hi_20 = cam_a_0_bits_data[20];
  wire  indexes_lo_20 = cam_d_0_data[20];
  wire [1:0] indexes_20 = {indexes_hi_20,indexes_lo_20};
  wire  indexes_hi_21 = cam_a_0_bits_data[21];
  wire  indexes_lo_21 = cam_d_0_data[21];
  wire [1:0] indexes_21 = {indexes_hi_21,indexes_lo_21};
  wire  indexes_hi_22 = cam_a_0_bits_data[22];
  wire  indexes_lo_22 = cam_d_0_data[22];
  wire [1:0] indexes_22 = {indexes_hi_22,indexes_lo_22};
  wire  indexes_hi_23 = cam_a_0_bits_data[23];
  wire  indexes_lo_23 = cam_d_0_data[23];
  wire [1:0] indexes_23 = {indexes_hi_23,indexes_lo_23};
  wire  indexes_hi_24 = cam_a_0_bits_data[24];
  wire  indexes_lo_24 = cam_d_0_data[24];
  wire [1:0] indexes_24 = {indexes_hi_24,indexes_lo_24};
  wire  indexes_hi_25 = cam_a_0_bits_data[25];
  wire  indexes_lo_25 = cam_d_0_data[25];
  wire [1:0] indexes_25 = {indexes_hi_25,indexes_lo_25};
  wire  indexes_hi_26 = cam_a_0_bits_data[26];
  wire  indexes_lo_26 = cam_d_0_data[26];
  wire [1:0] indexes_26 = {indexes_hi_26,indexes_lo_26};
  wire  indexes_hi_27 = cam_a_0_bits_data[27];
  wire  indexes_lo_27 = cam_d_0_data[27];
  wire [1:0] indexes_27 = {indexes_hi_27,indexes_lo_27};
  wire  indexes_hi_28 = cam_a_0_bits_data[28];
  wire  indexes_lo_28 = cam_d_0_data[28];
  wire [1:0] indexes_28 = {indexes_hi_28,indexes_lo_28};
  wire  indexes_hi_29 = cam_a_0_bits_data[29];
  wire  indexes_lo_29 = cam_d_0_data[29];
  wire [1:0] indexes_29 = {indexes_hi_29,indexes_lo_29};
  wire  indexes_hi_30 = cam_a_0_bits_data[30];
  wire  indexes_lo_30 = cam_d_0_data[30];
  wire [1:0] indexes_30 = {indexes_hi_30,indexes_lo_30};
  wire  indexes_hi_31 = cam_a_0_bits_data[31];
  wire  indexes_lo_31 = cam_d_0_data[31];
  wire [1:0] indexes_31 = {indexes_hi_31,indexes_lo_31};
  wire  indexes_hi_32 = cam_a_0_bits_data[32];
  wire  indexes_lo_32 = cam_d_0_data[32];
  wire [1:0] indexes_32 = {indexes_hi_32,indexes_lo_32};
  wire  indexes_hi_33 = cam_a_0_bits_data[33];
  wire  indexes_lo_33 = cam_d_0_data[33];
  wire [1:0] indexes_33 = {indexes_hi_33,indexes_lo_33};
  wire  indexes_hi_34 = cam_a_0_bits_data[34];
  wire  indexes_lo_34 = cam_d_0_data[34];
  wire [1:0] indexes_34 = {indexes_hi_34,indexes_lo_34};
  wire  indexes_hi_35 = cam_a_0_bits_data[35];
  wire  indexes_lo_35 = cam_d_0_data[35];
  wire [1:0] indexes_35 = {indexes_hi_35,indexes_lo_35};
  wire  indexes_hi_36 = cam_a_0_bits_data[36];
  wire  indexes_lo_36 = cam_d_0_data[36];
  wire [1:0] indexes_36 = {indexes_hi_36,indexes_lo_36};
  wire  indexes_hi_37 = cam_a_0_bits_data[37];
  wire  indexes_lo_37 = cam_d_0_data[37];
  wire [1:0] indexes_37 = {indexes_hi_37,indexes_lo_37};
  wire  indexes_hi_38 = cam_a_0_bits_data[38];
  wire  indexes_lo_38 = cam_d_0_data[38];
  wire [1:0] indexes_38 = {indexes_hi_38,indexes_lo_38};
  wire  indexes_hi_39 = cam_a_0_bits_data[39];
  wire  indexes_lo_39 = cam_d_0_data[39];
  wire [1:0] indexes_39 = {indexes_hi_39,indexes_lo_39};
  wire  indexes_hi_40 = cam_a_0_bits_data[40];
  wire  indexes_lo_40 = cam_d_0_data[40];
  wire [1:0] indexes_40 = {indexes_hi_40,indexes_lo_40};
  wire  indexes_hi_41 = cam_a_0_bits_data[41];
  wire  indexes_lo_41 = cam_d_0_data[41];
  wire [1:0] indexes_41 = {indexes_hi_41,indexes_lo_41};
  wire  indexes_hi_42 = cam_a_0_bits_data[42];
  wire  indexes_lo_42 = cam_d_0_data[42];
  wire [1:0] indexes_42 = {indexes_hi_42,indexes_lo_42};
  wire  indexes_hi_43 = cam_a_0_bits_data[43];
  wire  indexes_lo_43 = cam_d_0_data[43];
  wire [1:0] indexes_43 = {indexes_hi_43,indexes_lo_43};
  wire  indexes_hi_44 = cam_a_0_bits_data[44];
  wire  indexes_lo_44 = cam_d_0_data[44];
  wire [1:0] indexes_44 = {indexes_hi_44,indexes_lo_44};
  wire  indexes_hi_45 = cam_a_0_bits_data[45];
  wire  indexes_lo_45 = cam_d_0_data[45];
  wire [1:0] indexes_45 = {indexes_hi_45,indexes_lo_45};
  wire  indexes_hi_46 = cam_a_0_bits_data[46];
  wire  indexes_lo_46 = cam_d_0_data[46];
  wire [1:0] indexes_46 = {indexes_hi_46,indexes_lo_46};
  wire  indexes_hi_47 = cam_a_0_bits_data[47];
  wire  indexes_lo_47 = cam_d_0_data[47];
  wire [1:0] indexes_47 = {indexes_hi_47,indexes_lo_47};
  wire  indexes_hi_48 = cam_a_0_bits_data[48];
  wire  indexes_lo_48 = cam_d_0_data[48];
  wire [1:0] indexes_48 = {indexes_hi_48,indexes_lo_48};
  wire  indexes_hi_49 = cam_a_0_bits_data[49];
  wire  indexes_lo_49 = cam_d_0_data[49];
  wire [1:0] indexes_49 = {indexes_hi_49,indexes_lo_49};
  wire  indexes_hi_50 = cam_a_0_bits_data[50];
  wire  indexes_lo_50 = cam_d_0_data[50];
  wire [1:0] indexes_50 = {indexes_hi_50,indexes_lo_50};
  wire  indexes_hi_51 = cam_a_0_bits_data[51];
  wire  indexes_lo_51 = cam_d_0_data[51];
  wire [1:0] indexes_51 = {indexes_hi_51,indexes_lo_51};
  wire  indexes_hi_52 = cam_a_0_bits_data[52];
  wire  indexes_lo_52 = cam_d_0_data[52];
  wire [1:0] indexes_52 = {indexes_hi_52,indexes_lo_52};
  wire  indexes_hi_53 = cam_a_0_bits_data[53];
  wire  indexes_lo_53 = cam_d_0_data[53];
  wire [1:0] indexes_53 = {indexes_hi_53,indexes_lo_53};
  wire  indexes_hi_54 = cam_a_0_bits_data[54];
  wire  indexes_lo_54 = cam_d_0_data[54];
  wire [1:0] indexes_54 = {indexes_hi_54,indexes_lo_54};
  wire  indexes_hi_55 = cam_a_0_bits_data[55];
  wire  indexes_lo_55 = cam_d_0_data[55];
  wire [1:0] indexes_55 = {indexes_hi_55,indexes_lo_55};
  wire  indexes_hi_56 = cam_a_0_bits_data[56];
  wire  indexes_lo_56 = cam_d_0_data[56];
  wire [1:0] indexes_56 = {indexes_hi_56,indexes_lo_56};
  wire  indexes_hi_57 = cam_a_0_bits_data[57];
  wire  indexes_lo_57 = cam_d_0_data[57];
  wire [1:0] indexes_57 = {indexes_hi_57,indexes_lo_57};
  wire  indexes_hi_58 = cam_a_0_bits_data[58];
  wire  indexes_lo_58 = cam_d_0_data[58];
  wire [1:0] indexes_58 = {indexes_hi_58,indexes_lo_58};
  wire  indexes_hi_59 = cam_a_0_bits_data[59];
  wire  indexes_lo_59 = cam_d_0_data[59];
  wire [1:0] indexes_59 = {indexes_hi_59,indexes_lo_59};
  wire  indexes_hi_60 = cam_a_0_bits_data[60];
  wire  indexes_lo_60 = cam_d_0_data[60];
  wire [1:0] indexes_60 = {indexes_hi_60,indexes_lo_60};
  wire  indexes_hi_61 = cam_a_0_bits_data[61];
  wire  indexes_lo_61 = cam_d_0_data[61];
  wire [1:0] indexes_61 = {indexes_hi_61,indexes_lo_61};
  wire  indexes_hi_62 = cam_a_0_bits_data[62];
  wire  indexes_lo_62 = cam_d_0_data[62];
  wire [1:0] indexes_62 = {indexes_hi_62,indexes_lo_62};
  wire  indexes_hi_63 = cam_a_0_bits_data[63];
  wire  indexes_lo_63 = cam_d_0_data[63];
  wire [1:0] indexes_63 = {indexes_hi_63,indexes_lo_63};
  wire [3:0] _logic_out_T = cam_a_0_lut >> indexes_0;
  wire  logic_out_lo_lo_lo_lo_lo_lo = _logic_out_T[0];
  wire [3:0] _logic_out_T_1 = cam_a_0_lut >> indexes_1;
  wire  logic_out_lo_lo_lo_lo_lo_hi = _logic_out_T_1[0];
  wire [3:0] _logic_out_T_2 = cam_a_0_lut >> indexes_2;
  wire  logic_out_lo_lo_lo_lo_hi_lo = _logic_out_T_2[0];
  wire [3:0] _logic_out_T_3 = cam_a_0_lut >> indexes_3;
  wire  logic_out_lo_lo_lo_lo_hi_hi = _logic_out_T_3[0];
  wire [3:0] _logic_out_T_4 = cam_a_0_lut >> indexes_4;
  wire  logic_out_lo_lo_lo_hi_lo_lo = _logic_out_T_4[0];
  wire [3:0] _logic_out_T_5 = cam_a_0_lut >> indexes_5;
  wire  logic_out_lo_lo_lo_hi_lo_hi = _logic_out_T_5[0];
  wire [3:0] _logic_out_T_6 = cam_a_0_lut >> indexes_6;
  wire  logic_out_lo_lo_lo_hi_hi_lo = _logic_out_T_6[0];
  wire [3:0] _logic_out_T_7 = cam_a_0_lut >> indexes_7;
  wire  logic_out_lo_lo_lo_hi_hi_hi = _logic_out_T_7[0];
  wire [3:0] _logic_out_T_8 = cam_a_0_lut >> indexes_8;
  wire  logic_out_lo_lo_hi_lo_lo_lo = _logic_out_T_8[0];
  wire [3:0] _logic_out_T_9 = cam_a_0_lut >> indexes_9;
  wire  logic_out_lo_lo_hi_lo_lo_hi = _logic_out_T_9[0];
  wire [3:0] _logic_out_T_10 = cam_a_0_lut >> indexes_10;
  wire  logic_out_lo_lo_hi_lo_hi_lo = _logic_out_T_10[0];
  wire [3:0] _logic_out_T_11 = cam_a_0_lut >> indexes_11;
  wire  logic_out_lo_lo_hi_lo_hi_hi = _logic_out_T_11[0];
  wire [3:0] _logic_out_T_12 = cam_a_0_lut >> indexes_12;
  wire  logic_out_lo_lo_hi_hi_lo_lo = _logic_out_T_12[0];
  wire [3:0] _logic_out_T_13 = cam_a_0_lut >> indexes_13;
  wire  logic_out_lo_lo_hi_hi_lo_hi = _logic_out_T_13[0];
  wire [3:0] _logic_out_T_14 = cam_a_0_lut >> indexes_14;
  wire  logic_out_lo_lo_hi_hi_hi_lo = _logic_out_T_14[0];
  wire [3:0] _logic_out_T_15 = cam_a_0_lut >> indexes_15;
  wire  logic_out_lo_lo_hi_hi_hi_hi = _logic_out_T_15[0];
  wire [3:0] _logic_out_T_16 = cam_a_0_lut >> indexes_16;
  wire  logic_out_lo_hi_lo_lo_lo_lo = _logic_out_T_16[0];
  wire [3:0] _logic_out_T_17 = cam_a_0_lut >> indexes_17;
  wire  logic_out_lo_hi_lo_lo_lo_hi = _logic_out_T_17[0];
  wire [3:0] _logic_out_T_18 = cam_a_0_lut >> indexes_18;
  wire  logic_out_lo_hi_lo_lo_hi_lo = _logic_out_T_18[0];
  wire [3:0] _logic_out_T_19 = cam_a_0_lut >> indexes_19;
  wire  logic_out_lo_hi_lo_lo_hi_hi = _logic_out_T_19[0];
  wire [3:0] _logic_out_T_20 = cam_a_0_lut >> indexes_20;
  wire  logic_out_lo_hi_lo_hi_lo_lo = _logic_out_T_20[0];
  wire [3:0] _logic_out_T_21 = cam_a_0_lut >> indexes_21;
  wire  logic_out_lo_hi_lo_hi_lo_hi = _logic_out_T_21[0];
  wire [3:0] _logic_out_T_22 = cam_a_0_lut >> indexes_22;
  wire  logic_out_lo_hi_lo_hi_hi_lo = _logic_out_T_22[0];
  wire [3:0] _logic_out_T_23 = cam_a_0_lut >> indexes_23;
  wire  logic_out_lo_hi_lo_hi_hi_hi = _logic_out_T_23[0];
  wire [3:0] _logic_out_T_24 = cam_a_0_lut >> indexes_24;
  wire  logic_out_lo_hi_hi_lo_lo_lo = _logic_out_T_24[0];
  wire [3:0] _logic_out_T_25 = cam_a_0_lut >> indexes_25;
  wire  logic_out_lo_hi_hi_lo_lo_hi = _logic_out_T_25[0];
  wire [3:0] _logic_out_T_26 = cam_a_0_lut >> indexes_26;
  wire  logic_out_lo_hi_hi_lo_hi_lo = _logic_out_T_26[0];
  wire [3:0] _logic_out_T_27 = cam_a_0_lut >> indexes_27;
  wire  logic_out_lo_hi_hi_lo_hi_hi = _logic_out_T_27[0];
  wire [3:0] _logic_out_T_28 = cam_a_0_lut >> indexes_28;
  wire  logic_out_lo_hi_hi_hi_lo_lo = _logic_out_T_28[0];
  wire [3:0] _logic_out_T_29 = cam_a_0_lut >> indexes_29;
  wire  logic_out_lo_hi_hi_hi_lo_hi = _logic_out_T_29[0];
  wire [3:0] _logic_out_T_30 = cam_a_0_lut >> indexes_30;
  wire  logic_out_lo_hi_hi_hi_hi_lo = _logic_out_T_30[0];
  wire [3:0] _logic_out_T_31 = cam_a_0_lut >> indexes_31;
  wire  logic_out_lo_hi_hi_hi_hi_hi = _logic_out_T_31[0];
  wire [3:0] _logic_out_T_32 = cam_a_0_lut >> indexes_32;
  wire  logic_out_hi_lo_lo_lo_lo_lo = _logic_out_T_32[0];
  wire [3:0] _logic_out_T_33 = cam_a_0_lut >> indexes_33;
  wire  logic_out_hi_lo_lo_lo_lo_hi = _logic_out_T_33[0];
  wire [3:0] _logic_out_T_34 = cam_a_0_lut >> indexes_34;
  wire  logic_out_hi_lo_lo_lo_hi_lo = _logic_out_T_34[0];
  wire [3:0] _logic_out_T_35 = cam_a_0_lut >> indexes_35;
  wire  logic_out_hi_lo_lo_lo_hi_hi = _logic_out_T_35[0];
  wire [3:0] _logic_out_T_36 = cam_a_0_lut >> indexes_36;
  wire  logic_out_hi_lo_lo_hi_lo_lo = _logic_out_T_36[0];
  wire [3:0] _logic_out_T_37 = cam_a_0_lut >> indexes_37;
  wire  logic_out_hi_lo_lo_hi_lo_hi = _logic_out_T_37[0];
  wire [3:0] _logic_out_T_38 = cam_a_0_lut >> indexes_38;
  wire  logic_out_hi_lo_lo_hi_hi_lo = _logic_out_T_38[0];
  wire [3:0] _logic_out_T_39 = cam_a_0_lut >> indexes_39;
  wire  logic_out_hi_lo_lo_hi_hi_hi = _logic_out_T_39[0];
  wire [3:0] _logic_out_T_40 = cam_a_0_lut >> indexes_40;
  wire  logic_out_hi_lo_hi_lo_lo_lo = _logic_out_T_40[0];
  wire [3:0] _logic_out_T_41 = cam_a_0_lut >> indexes_41;
  wire  logic_out_hi_lo_hi_lo_lo_hi = _logic_out_T_41[0];
  wire [3:0] _logic_out_T_42 = cam_a_0_lut >> indexes_42;
  wire  logic_out_hi_lo_hi_lo_hi_lo = _logic_out_T_42[0];
  wire [3:0] _logic_out_T_43 = cam_a_0_lut >> indexes_43;
  wire  logic_out_hi_lo_hi_lo_hi_hi = _logic_out_T_43[0];
  wire [3:0] _logic_out_T_44 = cam_a_0_lut >> indexes_44;
  wire  logic_out_hi_lo_hi_hi_lo_lo = _logic_out_T_44[0];
  wire [3:0] _logic_out_T_45 = cam_a_0_lut >> indexes_45;
  wire  logic_out_hi_lo_hi_hi_lo_hi = _logic_out_T_45[0];
  wire [3:0] _logic_out_T_46 = cam_a_0_lut >> indexes_46;
  wire  logic_out_hi_lo_hi_hi_hi_lo = _logic_out_T_46[0];
  wire [3:0] _logic_out_T_47 = cam_a_0_lut >> indexes_47;
  wire  logic_out_hi_lo_hi_hi_hi_hi = _logic_out_T_47[0];
  wire [3:0] _logic_out_T_48 = cam_a_0_lut >> indexes_48;
  wire  logic_out_hi_hi_lo_lo_lo_lo = _logic_out_T_48[0];
  wire [3:0] _logic_out_T_49 = cam_a_0_lut >> indexes_49;
  wire  logic_out_hi_hi_lo_lo_lo_hi = _logic_out_T_49[0];
  wire [3:0] _logic_out_T_50 = cam_a_0_lut >> indexes_50;
  wire  logic_out_hi_hi_lo_lo_hi_lo = _logic_out_T_50[0];
  wire [3:0] _logic_out_T_51 = cam_a_0_lut >> indexes_51;
  wire  logic_out_hi_hi_lo_lo_hi_hi = _logic_out_T_51[0];
  wire [3:0] _logic_out_T_52 = cam_a_0_lut >> indexes_52;
  wire  logic_out_hi_hi_lo_hi_lo_lo = _logic_out_T_52[0];
  wire [3:0] _logic_out_T_53 = cam_a_0_lut >> indexes_53;
  wire  logic_out_hi_hi_lo_hi_lo_hi = _logic_out_T_53[0];
  wire [3:0] _logic_out_T_54 = cam_a_0_lut >> indexes_54;
  wire  logic_out_hi_hi_lo_hi_hi_lo = _logic_out_T_54[0];
  wire [3:0] _logic_out_T_55 = cam_a_0_lut >> indexes_55;
  wire  logic_out_hi_hi_lo_hi_hi_hi = _logic_out_T_55[0];
  wire [3:0] _logic_out_T_56 = cam_a_0_lut >> indexes_56;
  wire  logic_out_hi_hi_hi_lo_lo_lo = _logic_out_T_56[0];
  wire [3:0] _logic_out_T_57 = cam_a_0_lut >> indexes_57;
  wire  logic_out_hi_hi_hi_lo_lo_hi = _logic_out_T_57[0];
  wire [3:0] _logic_out_T_58 = cam_a_0_lut >> indexes_58;
  wire  logic_out_hi_hi_hi_lo_hi_lo = _logic_out_T_58[0];
  wire [3:0] _logic_out_T_59 = cam_a_0_lut >> indexes_59;
  wire  logic_out_hi_hi_hi_lo_hi_hi = _logic_out_T_59[0];
  wire [3:0] _logic_out_T_60 = cam_a_0_lut >> indexes_60;
  wire  logic_out_hi_hi_hi_hi_lo_lo = _logic_out_T_60[0];
  wire [3:0] _logic_out_T_61 = cam_a_0_lut >> indexes_61;
  wire  logic_out_hi_hi_hi_hi_lo_hi = _logic_out_T_61[0];
  wire [3:0] _logic_out_T_62 = cam_a_0_lut >> indexes_62;
  wire  logic_out_hi_hi_hi_hi_hi_lo = _logic_out_T_62[0];
  wire [3:0] _logic_out_T_63 = cam_a_0_lut >> indexes_63;
  wire  logic_out_hi_hi_hi_hi_hi_hi = _logic_out_T_63[0];
  wire [7:0] logic_out_lo_lo_lo = {logic_out_lo_lo_lo_hi_hi_hi,logic_out_lo_lo_lo_hi_hi_lo,logic_out_lo_lo_lo_hi_lo_hi,
    logic_out_lo_lo_lo_hi_lo_lo,logic_out_lo_lo_lo_lo_hi_hi,logic_out_lo_lo_lo_lo_hi_lo,logic_out_lo_lo_lo_lo_lo_hi,
    logic_out_lo_lo_lo_lo_lo_lo};
  wire [15:0] logic_out_lo_lo = {logic_out_lo_lo_hi_hi_hi_hi,logic_out_lo_lo_hi_hi_hi_lo,logic_out_lo_lo_hi_hi_lo_hi,
    logic_out_lo_lo_hi_hi_lo_lo,logic_out_lo_lo_hi_lo_hi_hi,logic_out_lo_lo_hi_lo_hi_lo,logic_out_lo_lo_hi_lo_lo_hi,
    logic_out_lo_lo_hi_lo_lo_lo,logic_out_lo_lo_lo};
  wire [7:0] logic_out_lo_hi_lo = {logic_out_lo_hi_lo_hi_hi_hi,logic_out_lo_hi_lo_hi_hi_lo,logic_out_lo_hi_lo_hi_lo_hi,
    logic_out_lo_hi_lo_hi_lo_lo,logic_out_lo_hi_lo_lo_hi_hi,logic_out_lo_hi_lo_lo_hi_lo,logic_out_lo_hi_lo_lo_lo_hi,
    logic_out_lo_hi_lo_lo_lo_lo};
  wire [31:0] logic_out_lo = {logic_out_lo_hi_hi_hi_hi_hi,logic_out_lo_hi_hi_hi_hi_lo,logic_out_lo_hi_hi_hi_lo_hi,
    logic_out_lo_hi_hi_hi_lo_lo,logic_out_lo_hi_hi_lo_hi_hi,logic_out_lo_hi_hi_lo_hi_lo,logic_out_lo_hi_hi_lo_lo_hi,
    logic_out_lo_hi_hi_lo_lo_lo,logic_out_lo_hi_lo,logic_out_lo_lo};
  wire [7:0] logic_out_hi_lo_lo = {logic_out_hi_lo_lo_hi_hi_hi,logic_out_hi_lo_lo_hi_hi_lo,logic_out_hi_lo_lo_hi_lo_hi,
    logic_out_hi_lo_lo_hi_lo_lo,logic_out_hi_lo_lo_lo_hi_hi,logic_out_hi_lo_lo_lo_hi_lo,logic_out_hi_lo_lo_lo_lo_hi,
    logic_out_hi_lo_lo_lo_lo_lo};
  wire [15:0] logic_out_hi_lo = {logic_out_hi_lo_hi_hi_hi_hi,logic_out_hi_lo_hi_hi_hi_lo,logic_out_hi_lo_hi_hi_lo_hi,
    logic_out_hi_lo_hi_hi_lo_lo,logic_out_hi_lo_hi_lo_hi_hi,logic_out_hi_lo_hi_lo_hi_lo,logic_out_hi_lo_hi_lo_lo_hi,
    logic_out_hi_lo_hi_lo_lo_lo,logic_out_hi_lo_lo};
  wire [7:0] logic_out_hi_hi_lo = {logic_out_hi_hi_lo_hi_hi_hi,logic_out_hi_hi_lo_hi_hi_lo,logic_out_hi_hi_lo_hi_lo_hi,
    logic_out_hi_hi_lo_hi_lo_lo,logic_out_hi_hi_lo_lo_hi_hi,logic_out_hi_hi_lo_lo_hi_lo,logic_out_hi_hi_lo_lo_lo_hi,
    logic_out_hi_hi_lo_lo_lo_lo};
  wire [31:0] logic_out_hi = {logic_out_hi_hi_hi_hi_hi_hi,logic_out_hi_hi_hi_hi_hi_lo,logic_out_hi_hi_hi_hi_lo_hi,
    logic_out_hi_hi_hi_hi_lo_lo,logic_out_hi_hi_hi_lo_hi_hi,logic_out_hi_hi_hi_lo_hi_lo,logic_out_hi_hi_hi_lo_lo_hi,
    logic_out_hi_hi_hi_lo_lo_lo,logic_out_hi_hi_lo,logic_out_hi_lo};
  wire [63:0] logic_out = {logic_out_hi,logic_out_lo};
  wire  unsigned_ = cam_a_0_bits_param[1];
  wire  take_max = cam_a_0_bits_param[0];
  wire  adder = cam_a_0_bits_param[2];
  wire [7:0] _signSel_T = ~cam_a_0_bits_mask;
  wire [7:0] _GEN_39 = {{1'd0}, cam_a_0_bits_mask[7:1]};
  wire [7:0] _signSel_T_2 = _signSel_T | _GEN_39;
  wire [7:0] signSel = ~_signSel_T_2;
  wire [7:0] signbits_a = {indexes_hi_63,indexes_hi_55,indexes_hi_47,indexes_hi_39,indexes_hi_31,indexes_hi_23,
    indexes_hi_15,indexes_hi_7};
  wire [7:0] signbits_d = {indexes_lo_63,indexes_lo_55,indexes_lo_47,indexes_lo_39,indexes_lo_31,indexes_lo_23,
    indexes_lo_15,indexes_lo_7};
  wire [7:0] _signbit_a_T = signbits_a & signSel;
  wire [8:0] _signbit_a_T_1 = {_signbit_a_T, 1'h0};
  wire [7:0] signbit_a = _signbit_a_T_1[7:0];
  wire [7:0] _signbit_d_T = signbits_d & signSel;
  wire [8:0] _signbit_d_T_1 = {_signbit_d_T, 1'h0};
  wire [7:0] signbit_d = _signbit_d_T_1[7:0];
  wire [8:0] _signext_a_T = {signbit_a, 1'h0};
  wire [7:0] _signext_a_T_2 = signbit_a | _signext_a_T[7:0];
  wire [9:0] _signext_a_T_3 = {_signext_a_T_2, 2'h0};
  wire [7:0] _signext_a_T_5 = _signext_a_T_2 | _signext_a_T_3[7:0];
  wire [11:0] _signext_a_T_6 = {_signext_a_T_5, 4'h0};
  wire [7:0] _signext_a_T_8 = _signext_a_T_5 | _signext_a_T_6[7:0];
  wire [7:0] signext_a_lo_lo_lo = _signext_a_T_8[0] ? 8'hff : 8'h0;
  wire [7:0] signext_a_lo_lo_hi = _signext_a_T_8[1] ? 8'hff : 8'h0;
  wire [7:0] signext_a_lo_hi_lo = _signext_a_T_8[2] ? 8'hff : 8'h0;
  wire [7:0] signext_a_lo_hi_hi = _signext_a_T_8[3] ? 8'hff : 8'h0;
  wire [7:0] signext_a_hi_lo_lo = _signext_a_T_8[4] ? 8'hff : 8'h0;
  wire [7:0] signext_a_hi_lo_hi = _signext_a_T_8[5] ? 8'hff : 8'h0;
  wire [7:0] signext_a_hi_hi_lo = _signext_a_T_8[6] ? 8'hff : 8'h0;
  wire [7:0] signext_a_hi_hi_hi = _signext_a_T_8[7] ? 8'hff : 8'h0;
  wire [63:0] signext_a = {signext_a_hi_hi_hi,signext_a_hi_hi_lo,signext_a_hi_lo_hi,signext_a_hi_lo_lo,
    signext_a_lo_hi_hi,signext_a_lo_hi_lo,signext_a_lo_lo_hi,signext_a_lo_lo_lo};
  wire [8:0] _signext_d_T = {signbit_d, 1'h0};
  wire [7:0] _signext_d_T_2 = signbit_d | _signext_d_T[7:0];
  wire [9:0] _signext_d_T_3 = {_signext_d_T_2, 2'h0};
  wire [7:0] _signext_d_T_5 = _signext_d_T_2 | _signext_d_T_3[7:0];
  wire [11:0] _signext_d_T_6 = {_signext_d_T_5, 4'h0};
  wire [7:0] _signext_d_T_8 = _signext_d_T_5 | _signext_d_T_6[7:0];
  wire [7:0] signext_d_lo_lo_lo = _signext_d_T_8[0] ? 8'hff : 8'h0;
  wire [7:0] signext_d_lo_lo_hi = _signext_d_T_8[1] ? 8'hff : 8'h0;
  wire [7:0] signext_d_lo_hi_lo = _signext_d_T_8[2] ? 8'hff : 8'h0;
  wire [7:0] signext_d_lo_hi_hi = _signext_d_T_8[3] ? 8'hff : 8'h0;
  wire [7:0] signext_d_hi_lo_lo = _signext_d_T_8[4] ? 8'hff : 8'h0;
  wire [7:0] signext_d_hi_lo_hi = _signext_d_T_8[5] ? 8'hff : 8'h0;
  wire [7:0] signext_d_hi_hi_lo = _signext_d_T_8[6] ? 8'hff : 8'h0;
  wire [7:0] signext_d_hi_hi_hi = _signext_d_T_8[7] ? 8'hff : 8'h0;
  wire [63:0] signext_d = {signext_d_hi_hi_hi,signext_d_hi_hi_lo,signext_d_hi_lo_hi,signext_d_hi_lo_lo,
    signext_d_lo_hi_hi,signext_d_lo_hi_lo,signext_d_lo_lo_hi,signext_d_lo_lo_lo};
  wire [7:0] wide_mask_lo_lo_lo = cam_a_0_bits_mask[0] ? 8'hff : 8'h0;
  wire [7:0] wide_mask_lo_lo_hi = cam_a_0_bits_mask[1] ? 8'hff : 8'h0;
  wire [7:0] wide_mask_lo_hi_lo = cam_a_0_bits_mask[2] ? 8'hff : 8'h0;
  wire [7:0] wide_mask_lo_hi_hi = cam_a_0_bits_mask[3] ? 8'hff : 8'h0;
  wire [7:0] wide_mask_hi_lo_lo = cam_a_0_bits_mask[4] ? 8'hff : 8'h0;
  wire [7:0] wide_mask_hi_lo_hi = cam_a_0_bits_mask[5] ? 8'hff : 8'h0;
  wire [7:0] wide_mask_hi_hi_lo = cam_a_0_bits_mask[6] ? 8'hff : 8'h0;
  wire [7:0] wide_mask_hi_hi_hi = cam_a_0_bits_mask[7] ? 8'hff : 8'h0;
  wire [63:0] wide_mask = {wide_mask_hi_hi_hi,wide_mask_hi_hi_lo,wide_mask_hi_lo_hi,wide_mask_hi_lo_lo,
    wide_mask_lo_hi_hi,wide_mask_lo_hi_lo,wide_mask_lo_lo_hi,wide_mask_lo_lo_lo};
  wire [63:0] _a_a_ext_T = cam_a_0_bits_data & wide_mask;
  wire [63:0] a_a_ext = _a_a_ext_T | signext_a;
  wire [63:0] _a_d_ext_T = cam_d_0_data & wide_mask;
  wire [63:0] a_d_ext = _a_d_ext_T | signext_d;
  wire [63:0] _a_d_inv_T = ~a_d_ext;
  wire [63:0] a_d_inv = adder ? a_d_ext : _a_d_inv_T;
  wire [63:0] adder_out = a_a_ext + a_d_inv;
  wire  a_bigger_uneq = unsigned_ == a_a_ext[63];
  wire  a_bigger = a_a_ext[63] == a_d_ext[63] ? ~adder_out[63] : a_bigger_uneq;
  wire  pick_a = take_max == a_bigger;
  wire [63:0] _arith_out_T = pick_a ? cam_a_0_bits_data : cam_d_0_data;
  wire [63:0] arith_out = adder ? adder_out : _arith_out_T;
  wire [63:0] amo_data = cam_a_0_bits_opcode[0] ? logic_out : arith_out;
  wire  a_allow = ~a_cam_busy & (a_isSupported | cam_free_0);
  reg [2:0] beatsLeft;
  wire  idle = beatsLeft == 3'h0;
  wire  source_i_valid = auto_in_a_valid & a_allow;
  wire [1:0] _readys_T = {source_i_valid,cam_amo_0};
  wire [2:0] _readys_T_1 = {_readys_T, 1'h0};
  wire [1:0] _readys_T_3 = _readys_T | _readys_T_1[1:0];
  wire [2:0] _readys_T_5 = {_readys_T_3, 1'h0};
  wire [1:0] _readys_T_7 = ~_readys_T_5[1:0];
  wire  readys_1 = _readys_T_7[1];
  reg  state_1;
  wire  allowed_1 = idle ? readys_1 : state_1;
  wire  out_1_ready = auto_out_a_ready & allowed_1;
  wire  _T = ~a_isSupported;
  wire [2:0] source_i_bits_opcode = ~a_isSupported ? 3'h4 : auto_in_a_bits_opcode;
  wire [2:0] source_i_bits_param = ~a_isSupported ? 3'h0 : auto_in_a_bits_param;
  wire [1:0] source_c_bits_a_mask_sizeOH_shiftAmount = cam_a_0_bits_size[1:0];
  wire [3:0] _source_c_bits_a_mask_sizeOH_T_1 = 4'h1 << source_c_bits_a_mask_sizeOH_shiftAmount;
  wire [2:0] source_c_bits_a_mask_sizeOH = _source_c_bits_a_mask_sizeOH_T_1[2:0] | 3'h1;
  wire  _source_c_bits_a_mask_T = cam_a_0_bits_size >= 3'h3;
  wire  source_c_bits_a_mask_size = source_c_bits_a_mask_sizeOH[2];
  wire  source_c_bits_a_mask_bit = cam_a_0_bits_address[2];
  wire  source_c_bits_a_mask_nbit = ~source_c_bits_a_mask_bit;
  wire  source_c_bits_a_mask_acc = _source_c_bits_a_mask_T | source_c_bits_a_mask_size & source_c_bits_a_mask_nbit;
  wire  source_c_bits_a_mask_acc_1 = _source_c_bits_a_mask_T | source_c_bits_a_mask_size & source_c_bits_a_mask_bit;
  wire  source_c_bits_a_mask_size_1 = source_c_bits_a_mask_sizeOH[1];
  wire  source_c_bits_a_mask_bit_1 = cam_a_0_bits_address[1];
  wire  source_c_bits_a_mask_nbit_1 = ~source_c_bits_a_mask_bit_1;
  wire  source_c_bits_a_mask_eq_2 = source_c_bits_a_mask_nbit & source_c_bits_a_mask_nbit_1;
  wire  source_c_bits_a_mask_acc_2 = source_c_bits_a_mask_acc | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_2;
  wire  source_c_bits_a_mask_eq_3 = source_c_bits_a_mask_nbit & source_c_bits_a_mask_bit_1;
  wire  source_c_bits_a_mask_acc_3 = source_c_bits_a_mask_acc | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_3;
  wire  source_c_bits_a_mask_eq_4 = source_c_bits_a_mask_bit & source_c_bits_a_mask_nbit_1;
  wire  source_c_bits_a_mask_acc_4 = source_c_bits_a_mask_acc_1 | source_c_bits_a_mask_size_1 &
    source_c_bits_a_mask_eq_4;
  wire  source_c_bits_a_mask_eq_5 = source_c_bits_a_mask_bit & source_c_bits_a_mask_bit_1;
  wire  source_c_bits_a_mask_acc_5 = source_c_bits_a_mask_acc_1 | source_c_bits_a_mask_size_1 &
    source_c_bits_a_mask_eq_5;
  wire  source_c_bits_a_mask_size_2 = source_c_bits_a_mask_sizeOH[0];
  wire  source_c_bits_a_mask_bit_2 = cam_a_0_bits_address[0];
  wire  source_c_bits_a_mask_nbit_2 = ~source_c_bits_a_mask_bit_2;
  wire  source_c_bits_a_mask_eq_6 = source_c_bits_a_mask_eq_2 & source_c_bits_a_mask_nbit_2;
  wire  source_c_bits_a_mask_lo_lo_lo = source_c_bits_a_mask_acc_2 | source_c_bits_a_mask_size_2 &
    source_c_bits_a_mask_eq_6;
  wire  source_c_bits_a_mask_eq_7 = source_c_bits_a_mask_eq_2 & source_c_bits_a_mask_bit_2;
  wire  source_c_bits_a_mask_lo_lo_hi = source_c_bits_a_mask_acc_2 | source_c_bits_a_mask_size_2 &
    source_c_bits_a_mask_eq_7;
  wire  source_c_bits_a_mask_eq_8 = source_c_bits_a_mask_eq_3 & source_c_bits_a_mask_nbit_2;
  wire  source_c_bits_a_mask_lo_hi_lo = source_c_bits_a_mask_acc_3 | source_c_bits_a_mask_size_2 &
    source_c_bits_a_mask_eq_8;
  wire  source_c_bits_a_mask_eq_9 = source_c_bits_a_mask_eq_3 & source_c_bits_a_mask_bit_2;
  wire  source_c_bits_a_mask_lo_hi_hi = source_c_bits_a_mask_acc_3 | source_c_bits_a_mask_size_2 &
    source_c_bits_a_mask_eq_9;
  wire  source_c_bits_a_mask_eq_10 = source_c_bits_a_mask_eq_4 & source_c_bits_a_mask_nbit_2;
  wire  source_c_bits_a_mask_hi_lo_lo = source_c_bits_a_mask_acc_4 | source_c_bits_a_mask_size_2 &
    source_c_bits_a_mask_eq_10;
  wire  source_c_bits_a_mask_eq_11 = source_c_bits_a_mask_eq_4 & source_c_bits_a_mask_bit_2;
  wire  source_c_bits_a_mask_hi_lo_hi = source_c_bits_a_mask_acc_4 | source_c_bits_a_mask_size_2 &
    source_c_bits_a_mask_eq_11;
  wire  source_c_bits_a_mask_eq_12 = source_c_bits_a_mask_eq_5 & source_c_bits_a_mask_nbit_2;
  wire  source_c_bits_a_mask_hi_hi_lo = source_c_bits_a_mask_acc_5 | source_c_bits_a_mask_size_2 &
    source_c_bits_a_mask_eq_12;
  wire  source_c_bits_a_mask_eq_13 = source_c_bits_a_mask_eq_5 & source_c_bits_a_mask_bit_2;
  wire  source_c_bits_a_mask_hi_hi_hi = source_c_bits_a_mask_acc_5 | source_c_bits_a_mask_size_2 &
    source_c_bits_a_mask_eq_13;
  wire [7:0] source_c_bits_a_mask = {source_c_bits_a_mask_hi_hi_hi,source_c_bits_a_mask_hi_hi_lo,
    source_c_bits_a_mask_hi_lo_hi,source_c_bits_a_mask_hi_lo_lo,source_c_bits_a_mask_lo_hi_hi,
    source_c_bits_a_mask_lo_hi_lo,source_c_bits_a_mask_lo_lo_hi,source_c_bits_a_mask_lo_lo_lo};
  wire [12:0] _decode_T_1 = 13'h3f << auto_in_a_bits_size;
  wire [5:0] _decode_T_3 = ~_decode_T_1[5:0];
  wire [2:0] decode = _decode_T_3[5:3];
  wire  opdata = ~auto_in_a_bits_opcode[2];
  wire  latch = idle & auto_out_a_ready;
  wire  readys_0 = _readys_T_7[0];
  wire  earlyWinner_0 = readys_0 & cam_amo_0;
  wire  earlyWinner_1 = readys_1 & source_i_valid;
  wire  _prefixOR_T = earlyWinner_0 | earlyWinner_1;
  wire  _T_12 = cam_amo_0 | source_i_valid;
  wire  _T_13 = ~(cam_amo_0 | source_i_valid);
  reg  state_0;
  wire  muxStateEarly_0 = idle ? earlyWinner_0 : state_0;
  wire  muxStateEarly_1 = idle ? earlyWinner_1 : state_1;
  wire  _sink_ACancel_earlyValid_T_3 = state_0 & cam_amo_0 | state_1 & source_i_valid;
  wire  sink_ACancel_earlyValid = idle ? _T_12 : _sink_ACancel_earlyValid_T_3;
  wire  _beatsLeft_T_2 = auto_out_a_ready & sink_ACancel_earlyValid;
  wire [2:0] _GEN_40 = {{2'd0}, _beatsLeft_T_2};
  wire [2:0] _beatsLeft_T_4 = beatsLeft - _GEN_40;
  wire  allowed_0 = idle ? readys_0 : state_0;
  wire  out_ready = auto_out_a_ready & allowed_0;
  wire [63:0] _T_29 = muxStateEarly_0 ? amo_data : 64'h0;
  wire [63:0] _T_30 = muxStateEarly_1 ? auto_in_a_bits_data : 64'h0;
  wire [7:0] _T_32 = muxStateEarly_0 ? source_c_bits_a_mask : 8'h0;
  wire [7:0] _T_33 = muxStateEarly_1 ? auto_in_a_bits_mask : 8'h0;
  wire [31:0] _T_35 = muxStateEarly_0 ? cam_a_0_bits_address : 32'h0;
  wire [31:0] _T_36 = muxStateEarly_1 ? auto_in_a_bits_address : 32'h0;
  wire [6:0] _T_38 = muxStateEarly_0 ? cam_a_0_bits_source : 7'h0;
  wire [6:0] _T_39 = muxStateEarly_1 ? auto_in_a_bits_source : 7'h0;
  wire [2:0] _T_41 = muxStateEarly_0 ? cam_a_0_bits_size : 3'h0;
  wire [2:0] _T_42 = muxStateEarly_1 ? auto_in_a_bits_size : 3'h0;
  wire  _T_50 = out_1_ready & source_i_valid;
  wire [2:0] _GEN_41 = {{1'd0}, auto_in_a_bits_param[1:0]};
  wire [3:0] _cam_a_0_lut_T_2 = 3'h1 == _GEN_41 ? 4'he : 4'h8;
  wire [1:0] _GEN_12 = cam_free_0 ? 2'h3 : cam_s_0_state;
  wire [1:0] _GEN_23 = _T_50 & _T ? _GEN_12 : cam_s_0_state;
  wire  _T_53 = out_ready & cam_amo_0;
  wire [1:0] _GEN_24 = cam_amo_0 ? 2'h1 : _GEN_23;
  wire [1:0] _GEN_25 = _T_53 ? _GEN_24 : _GEN_23;
  reg [2:0] d_first_counter;
  wire  d_first = d_first_counter == 3'h0;
  wire  d_ackd = auto_out_d_bits_opcode == 3'h1;
  wire  d_cam_sel_raw_0 = cam_a_0_bits_source == auto_out_d_bits_source;
  wire  d_cam_sel_match_0 = d_cam_sel_raw_0 & cam_dmatch_0;
  wire  d_drop = d_first & d_ackd & d_cam_sel_match_0;
  wire  bundleOut_0_d_ready = auto_in_d_ready | d_drop;
  wire  _d_first_T = bundleOut_0_d_ready & auto_out_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << auto_out_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [2:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:3];
  wire  d_first_beats1_opdata = auto_out_d_bits_opcode[0];
  wire [2:0] d_first_counter1 = d_first_counter - 3'h1;
  wire  d_ack = auto_out_d_bits_opcode == 3'h0;
  wire  d_replace = d_first & d_ack & d_cam_sel_match_0;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_12 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_param(monitor_io_in_a_bits_param),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_c_ready(monitor_io_in_c_ready),
    .io_in_c_valid(monitor_io_in_c_valid),
    .io_in_c_bits_opcode(monitor_io_in_c_bits_opcode),
    .io_in_c_bits_param(monitor_io_in_c_bits_param),
    .io_in_c_bits_size(monitor_io_in_c_bits_size),
    .io_in_c_bits_source(monitor_io_in_c_bits_source),
    .io_in_c_bits_address(monitor_io_in_c_bits_address),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt),
    .io_in_e_ready(monitor_io_in_e_ready),
    .io_in_e_valid(monitor_io_in_e_valid),
    .io_in_e_bits_sink(monitor_io_in_e_bits_sink)
  );
  assign auto_in_a_ready = out_1_ready & a_allow;
  assign auto_in_c_ready = auto_out_c_ready;
  assign auto_in_d_valid = auto_out_d_valid & ~d_drop;
  assign auto_in_d_bits_opcode = d_replace ? 3'h1 : auto_out_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = d_replace ? cam_d_0_denied | auto_out_d_bits_denied : auto_out_d_bits_denied;
  assign auto_in_d_bits_data = d_replace ? cam_d_0_data : auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = d_replace ? cam_d_0_corrupt | auto_out_d_bits_denied : auto_out_d_bits_corrupt;
  assign auto_in_e_ready = auto_out_e_ready;
  assign auto_out_a_valid = idle ? _T_12 : _sink_ACancel_earlyValid_T_3;
  assign auto_out_a_bits_opcode = muxStateEarly_1 ? source_i_bits_opcode : 3'h0;
  assign auto_out_a_bits_param = muxStateEarly_1 ? source_i_bits_param : 3'h0;
  assign auto_out_a_bits_size = _T_41 | _T_42;
  assign auto_out_a_bits_source = _T_38 | _T_39;
  assign auto_out_a_bits_address = _T_35 | _T_36;
  assign auto_out_a_bits_mask = _T_32 | _T_33;
  assign auto_out_a_bits_data = _T_29 | _T_30;
  assign auto_out_a_bits_corrupt = muxStateEarly_0 & cam_d_0_corrupt;
  assign auto_out_c_valid = auto_in_c_valid;
  assign auto_out_c_bits_opcode = auto_in_c_bits_opcode;
  assign auto_out_c_bits_param = auto_in_c_bits_param;
  assign auto_out_c_bits_size = auto_in_c_bits_size;
  assign auto_out_c_bits_source = auto_in_c_bits_source;
  assign auto_out_c_bits_address = auto_in_c_bits_address;
  assign auto_out_d_ready = auto_in_d_ready | d_drop;
  assign auto_out_e_valid = auto_in_e_valid;
  assign auto_out_e_bits_sink = auto_in_e_bits_sink;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = out_1_ready & a_allow;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_param = auto_in_a_bits_param;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_c_ready = auto_out_c_ready;
  assign monitor_io_in_c_valid = auto_in_c_valid;
  assign monitor_io_in_c_bits_opcode = auto_in_c_bits_opcode;
  assign monitor_io_in_c_bits_param = auto_in_c_bits_param;
  assign monitor_io_in_c_bits_size = auto_in_c_bits_size;
  assign monitor_io_in_c_bits_source = auto_in_c_bits_source;
  assign monitor_io_in_c_bits_address = auto_in_c_bits_address;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = auto_out_d_valid & ~d_drop;
  assign monitor_io_in_d_bits_opcode = d_replace ? 3'h1 : auto_out_d_bits_opcode;
  assign monitor_io_in_d_bits_param = auto_out_d_bits_param;
  assign monitor_io_in_d_bits_size = auto_out_d_bits_size;
  assign monitor_io_in_d_bits_source = auto_out_d_bits_source;
  assign monitor_io_in_d_bits_denied = d_replace ? cam_d_0_denied | auto_out_d_bits_denied : auto_out_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = d_replace ? cam_d_0_corrupt | auto_out_d_bits_denied : auto_out_d_bits_corrupt;
  assign monitor_io_in_e_ready = auto_out_e_ready;
  assign monitor_io_in_e_valid = auto_in_e_valid;
  assign monitor_io_in_e_bits_sink = auto_in_e_bits_sink;
  always @(posedge clock) begin
    if (reset) begin
      cam_s_0_state <= 2'h0;
    end else if (_d_first_T & d_first) begin
      if (d_cam_sel_match_0) begin
        if (d_ackd) begin
          cam_s_0_state <= 2'h2;
        end else begin
          cam_s_0_state <= 2'h0;
        end
      end else begin
        cam_s_0_state <= _GEN_25;
      end
    end else begin
      cam_s_0_state <= _GEN_25;
    end
    if (_T_50 & _T) begin
      if (cam_free_0) begin
        cam_a_0_bits_opcode <= auto_in_a_bits_opcode;
      end
    end
    if (_T_50 & _T) begin
      if (cam_free_0) begin
        cam_a_0_bits_param <= auto_in_a_bits_param;
      end
    end
    if (_T_50 & _T) begin
      if (cam_free_0) begin
        cam_a_0_bits_size <= auto_in_a_bits_size;
      end
    end
    if (_T_50 & _T) begin
      if (cam_free_0) begin
        cam_a_0_bits_source <= auto_in_a_bits_source;
      end
    end
    if (_T_50 & _T) begin
      if (cam_free_0) begin
        cam_a_0_bits_address <= auto_in_a_bits_address;
      end
    end
    if (_T_50 & _T) begin
      if (cam_free_0) begin
        cam_a_0_bits_mask <= auto_in_a_bits_mask;
      end
    end
    if (_T_50 & _T) begin
      if (cam_free_0) begin
        cam_a_0_bits_data <= auto_in_a_bits_data;
      end
    end
    if (_T_50 & _T) begin
      if (cam_free_0) begin
        cam_a_0_fifoId <= _a_canLogical_T_39;
      end
    end
    if (_T_50 & _T) begin
      if (cam_free_0) begin
        if (3'h3 == _GEN_41) begin
          cam_a_0_lut <= 4'hc;
        end else if (3'h0 == _GEN_41) begin
          cam_a_0_lut <= 4'h6;
        end else begin
          cam_a_0_lut <= _cam_a_0_lut_T_2;
        end
      end
    end
    if (_d_first_T & d_first) begin
      if (d_cam_sel_match_0 & d_ackd) begin
        cam_d_0_data <= auto_out_d_bits_data;
      end
    end
    if (_d_first_T & d_first) begin
      if (d_cam_sel_match_0 & d_ackd) begin
        cam_d_0_denied <= auto_out_d_bits_denied;
      end
    end
    if (_d_first_T & d_first) begin
      if (d_cam_sel_match_0 & d_ackd) begin
        cam_d_0_corrupt <= auto_out_d_bits_corrupt;
      end
    end
    if (reset) begin
      beatsLeft <= 3'h0;
    end else if (latch) begin
      if (earlyWinner_1) begin
        if (opdata) begin
          beatsLeft <= decode;
        end else begin
          beatsLeft <= 3'h0;
        end
      end else begin
        beatsLeft <= 3'h0;
      end
    end else begin
      beatsLeft <= _beatsLeft_T_4;
    end
    if (reset) begin
      state_1 <= 1'h0;
    end else if (idle) begin
      state_1 <= earlyWinner_1;
    end
    if (reset) begin
      state_0 <= 1'h0;
    end else if (idle) begin
      state_0 <= earlyWinner_0;
    end
    if (reset) begin
      d_first_counter <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 3'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~earlyWinner_0 | ~earlyWinner_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:105 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~earlyWinner_0 | ~earlyWinner_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(~(cam_amo_0 | source_i_valid) | _prefixOR_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:107 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(~(cam_amo_0 | source_i_valid) | _prefixOR_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_13 | _T_12 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed\n    at Arbiter.scala:108 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_13 | _T_12 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  cam_s_0_state = _RAND_0[1:0];
  _RAND_1 = {1{`RANDOM}};
  cam_a_0_bits_opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  cam_a_0_bits_param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  cam_a_0_bits_size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  cam_a_0_bits_source = _RAND_4[6:0];
  _RAND_5 = {1{`RANDOM}};
  cam_a_0_bits_address = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  cam_a_0_bits_mask = _RAND_6[7:0];
  _RAND_7 = {2{`RANDOM}};
  cam_a_0_bits_data = _RAND_7[63:0];
  _RAND_8 = {1{`RANDOM}};
  cam_a_0_fifoId = _RAND_8[0:0];
  _RAND_9 = {1{`RANDOM}};
  cam_a_0_lut = _RAND_9[3:0];
  _RAND_10 = {2{`RANDOM}};
  cam_d_0_data = _RAND_10[63:0];
  _RAND_11 = {1{`RANDOM}};
  cam_d_0_denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  cam_d_0_corrupt = _RAND_12[0:0];
  _RAND_13 = {1{`RANDOM}};
  beatsLeft = _RAND_13[2:0];
  _RAND_14 = {1{`RANDOM}};
  state_1 = _RAND_14[0:0];
  _RAND_15 = {1{`RANDOM}};
  state_0 = _RAND_15[0:0];
  _RAND_16 = {1{`RANDOM}};
  d_first_counter = _RAND_16[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_13(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_param,
  input  [2:0]  io_in_a_bits_size,
  input  [6:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input         io_in_c_ready,
  input         io_in_c_valid,
  input  [2:0]  io_in_c_bits_opcode,
  input  [2:0]  io_in_c_bits_param,
  input  [2:0]  io_in_c_bits_size,
  input  [6:0]  io_in_c_bits_source,
  input  [31:0] io_in_c_bits_address,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [6:0]  io_in_d_bits_source,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt,
  input         io_in_e_ready,
  input         io_in_e_valid,
  input         io_in_e_bits_sink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [127:0] _RAND_18;
  reg [511:0] _RAND_19;
  reg [511:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [127:0] _RAND_24;
  reg [511:0] _RAND_25;
  reg [31:0] _RAND_26;
  reg [31:0] _RAND_27;
  reg [31:0] _RAND_28;
  reg [31:0] _RAND_29;
  reg [31:0] _RAND_30;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = io_in_a_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_7 = io_in_a_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_13 = io_in_a_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_19 = io_in_a_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_25 = io_in_a_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_31 = io_in_a_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_37 = io_in_a_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_43 = io_in_a_bits_source[6:4] == 3'h7;
  wire  source_ok = _source_ok_T_1 | _source_ok_T_7 | _source_ok_T_13 | _source_ok_T_19 | _source_ok_T_25 |
    _source_ok_T_31 | _source_ok_T_37 | _source_ok_T_43;
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_86 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_86;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire [1:0] mask_sizeOH_shiftAmount = io_in_a_bits_size[1:0];
  wire [3:0] _mask_sizeOH_T_1 = 4'h1 << mask_sizeOH_shiftAmount;
  wire [2:0] mask_sizeOH = _mask_sizeOH_T_1[2:0] | 3'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h3;
  wire  mask_size = mask_sizeOH[2];
  wire  mask_bit = io_in_a_bits_address[2];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[1];
  wire  mask_bit_1 = io_in_a_bits_address[1];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire  mask_size_2 = mask_sizeOH[0];
  wire  mask_bit_2 = io_in_a_bits_address[0];
  wire  mask_nbit_2 = ~mask_bit_2;
  wire  mask_eq_6 = mask_eq_2 & mask_nbit_2;
  wire  mask_lo_lo_lo = mask_acc_2 | mask_size_2 & mask_eq_6;
  wire  mask_eq_7 = mask_eq_2 & mask_bit_2;
  wire  mask_lo_lo_hi = mask_acc_2 | mask_size_2 & mask_eq_7;
  wire  mask_eq_8 = mask_eq_3 & mask_nbit_2;
  wire  mask_lo_hi_lo = mask_acc_3 | mask_size_2 & mask_eq_8;
  wire  mask_eq_9 = mask_eq_3 & mask_bit_2;
  wire  mask_lo_hi_hi = mask_acc_3 | mask_size_2 & mask_eq_9;
  wire  mask_eq_10 = mask_eq_4 & mask_nbit_2;
  wire  mask_hi_lo_lo = mask_acc_4 | mask_size_2 & mask_eq_10;
  wire  mask_eq_11 = mask_eq_4 & mask_bit_2;
  wire  mask_hi_lo_hi = mask_acc_4 | mask_size_2 & mask_eq_11;
  wire  mask_eq_12 = mask_eq_5 & mask_nbit_2;
  wire  mask_hi_hi_lo = mask_acc_5 | mask_size_2 & mask_eq_12;
  wire  mask_eq_13 = mask_eq_5 & mask_bit_2;
  wire  mask_hi_hi_hi = mask_acc_5 | mask_size_2 & mask_eq_13;
  wire [7:0] mask = {mask_hi_hi_hi,mask_hi_hi_lo,mask_hi_lo_hi,mask_hi_lo_lo,mask_lo_hi_hi,mask_lo_hi_lo,mask_lo_lo_hi,
    mask_lo_lo_lo};
  wire  _T_118 = io_in_a_bits_opcode == 3'h6;
  wire [31:0] _T_180 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_181 = {1'b0,$signed(_T_180)};
  wire [32:0] _T_183 = $signed(_T_181) & -33'sh10000000;
  wire  _T_184 = $signed(_T_183) == 33'sh0;
  wire [31:0] _T_185 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_186 = {1'b0,$signed(_T_185)};
  wire [32:0] _T_188 = $signed(_T_186) & -33'sh20000000;
  wire  _T_189 = $signed(_T_188) == 33'sh0;
  wire [31:0] _T_190 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_191 = {1'b0,$signed(_T_190)};
  wire [32:0] _T_193 = $signed(_T_191) & -33'sh40000000;
  wire  _T_194 = $signed(_T_193) == 33'sh0;
  wire [31:0] _T_195 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_196 = {1'b0,$signed(_T_195)};
  wire [32:0] _T_198 = $signed(_T_196) & -33'sh40000000;
  wire  _T_199 = $signed(_T_198) == 33'sh0;
  wire [31:0] _T_200 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_201 = {1'b0,$signed(_T_200)};
  wire [32:0] _T_203 = $signed(_T_201) & -33'sh20000000;
  wire  _T_204 = $signed(_T_203) == 33'sh0;
  wire  _T_211 = io_in_a_bits_size <= 3'h6;
  wire [31:0] _T_214 = io_in_a_bits_address ^ 32'h1000;
  wire [32:0] _T_215 = {1'b0,$signed(_T_214)};
  wire [32:0] _T_217 = $signed(_T_215) & -33'sh1000;
  wire  _T_218 = $signed(_T_217) == 33'sh0;
  wire  _T_219 = _T_211 & _T_218;
  wire  _T_222 = source_ok & _T_219;
  wire  _T_277 = _source_ok_T_1 & _T_211;
  wire  _T_330 = _T_218 | _T_184 | _T_189 | _T_194 | _T_199 | _T_204;
  wire  _T_333 = _T_277 & _T_330;
  wire  _T_347 = io_in_a_bits_param <= 3'h2;
  wire [7:0] _T_351 = ~io_in_a_bits_mask;
  wire  _T_352 = _T_351 == 8'h0;
  wire  _T_360 = io_in_a_bits_opcode == 3'h7;
  wire  _T_593 = io_in_a_bits_param != 3'h0;
  wire  _T_606 = io_in_a_bits_opcode == 3'h4;
  wire  _T_709 = _T_211 & _T_330;
  wire  _T_720 = io_in_a_bits_param == 3'h0;
  wire  _T_724 = io_in_a_bits_mask == mask;
  wire  _T_732 = io_in_a_bits_opcode == 3'h0;
  wire  _T_834 = source_ok & _T_709;
  wire  _T_852 = io_in_a_bits_opcode == 3'h1;
  wire [7:0] _T_968 = ~mask;
  wire [7:0] _T_969 = io_in_a_bits_mask & _T_968;
  wire  _T_970 = _T_969 == 8'h0;
  wire  _T_974 = io_in_a_bits_opcode == 3'h2;
  wire  _T_1036 = io_in_a_bits_size <= 3'h3;
  wire  _T_1074 = _T_1036 & _T_330;
  wire  _T_1076 = source_ok & _T_1074;
  wire  _T_1086 = io_in_a_bits_param <= 3'h4;
  wire  _T_1094 = io_in_a_bits_opcode == 3'h3;
  wire  _T_1206 = io_in_a_bits_param <= 3'h3;
  wire  _T_1214 = io_in_a_bits_opcode == 3'h5;
  wire  _T_1328 = io_in_a_bits_param <= 3'h1;
  wire  _T_1340 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_55 = io_in_d_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_61 = io_in_d_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_67 = io_in_d_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_73 = io_in_d_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_79 = io_in_d_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_85 = io_in_d_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_91 = io_in_d_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_97 = io_in_d_bits_source[6:4] == 3'h7;
  wire  source_ok_1 = _source_ok_T_55 | _source_ok_T_61 | _source_ok_T_67 | _source_ok_T_73 | _source_ok_T_79 |
    _source_ok_T_85 | _source_ok_T_91 | _source_ok_T_97;
  wire  _T_1344 = io_in_d_bits_opcode == 3'h6;
  wire  _T_1348 = io_in_d_bits_size >= 3'h3;
  wire  _T_1352 = io_in_d_bits_param == 2'h0;
  wire  _T_1356 = ~io_in_d_bits_corrupt;
  wire  _T_1360 = ~io_in_d_bits_denied;
  wire  _T_1364 = io_in_d_bits_opcode == 3'h4;
  wire  _T_1375 = io_in_d_bits_param <= 2'h2;
  wire  _T_1379 = io_in_d_bits_param != 2'h2;
  wire  _T_1392 = io_in_d_bits_opcode == 3'h5;
  wire  _T_1412 = _T_1360 | io_in_d_bits_corrupt;
  wire  _T_1421 = io_in_d_bits_opcode == 3'h0;
  wire  _T_1438 = io_in_d_bits_opcode == 3'h1;
  wire  _T_1456 = io_in_d_bits_opcode == 3'h2;
  wire  _source_ok_T_109 = io_in_c_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_115 = io_in_c_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_121 = io_in_c_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_127 = io_in_c_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_133 = io_in_c_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_139 = io_in_c_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_145 = io_in_c_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_151 = io_in_c_bits_source[6:4] == 3'h7;
  wire  source_ok_2 = _source_ok_T_109 | _source_ok_T_115 | _source_ok_T_121 | _source_ok_T_127 | _source_ok_T_133 |
    _source_ok_T_139 | _source_ok_T_145 | _source_ok_T_151;
  wire [12:0] _is_aligned_mask_T_7 = 13'h3f << io_in_c_bits_size;
  wire [5:0] is_aligned_mask_2 = ~_is_aligned_mask_T_7[5:0];
  wire [31:0] _GEN_87 = {{26'd0}, is_aligned_mask_2};
  wire [31:0] _is_aligned_T_2 = io_in_c_bits_address & _GEN_87;
  wire  is_aligned_2 = _is_aligned_T_2 == 32'h0;
  wire [31:0] _address_ok_T_34 = io_in_c_bits_address ^ 32'h10000000;
  wire [32:0] _address_ok_T_35 = {1'b0,$signed(_address_ok_T_34)};
  wire [32:0] _address_ok_T_37 = $signed(_address_ok_T_35) & -33'sh10000000;
  wire  _address_ok_T_38 = $signed(_address_ok_T_37) == 33'sh0;
  wire [31:0] _address_ok_T_39 = io_in_c_bits_address ^ 32'h20000000;
  wire [32:0] _address_ok_T_40 = {1'b0,$signed(_address_ok_T_39)};
  wire [32:0] _address_ok_T_42 = $signed(_address_ok_T_40) & -33'sh20000000;
  wire  _address_ok_T_43 = $signed(_address_ok_T_42) == 33'sh0;
  wire [31:0] _address_ok_T_44 = io_in_c_bits_address ^ 32'h40000000;
  wire [32:0] _address_ok_T_45 = {1'b0,$signed(_address_ok_T_44)};
  wire [32:0] _address_ok_T_47 = $signed(_address_ok_T_45) & -33'sh40000000;
  wire  _address_ok_T_48 = $signed(_address_ok_T_47) == 33'sh0;
  wire [31:0] _address_ok_T_49 = io_in_c_bits_address ^ 32'h80000000;
  wire [32:0] _address_ok_T_50 = {1'b0,$signed(_address_ok_T_49)};
  wire [32:0] _address_ok_T_52 = $signed(_address_ok_T_50) & -33'sh40000000;
  wire  _address_ok_T_53 = $signed(_address_ok_T_52) == 33'sh0;
  wire [31:0] _address_ok_T_54 = io_in_c_bits_address ^ 32'hc0000000;
  wire [32:0] _address_ok_T_55 = {1'b0,$signed(_address_ok_T_54)};
  wire [32:0] _address_ok_T_57 = $signed(_address_ok_T_55) & -33'sh20000000;
  wire  _address_ok_T_58 = $signed(_address_ok_T_57) == 33'sh0;
  wire  _address_ok_T_62 = _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 | _address_ok_T_58;
  wire [31:0] _address_ok_T_63 = io_in_c_bits_address ^ 32'h1000;
  wire [32:0] _address_ok_T_64 = {1'b0,$signed(_address_ok_T_63)};
  wire [32:0] _address_ok_T_66 = $signed(_address_ok_T_64) & -33'sh1000;
  wire  _address_ok_T_67 = $signed(_address_ok_T_66) == 33'sh0;
  wire  address_ok_1 = _address_ok_T_62 | _address_ok_T_67;
  wire  _T_2226 = io_in_c_bits_opcode == 3'h4;
  wire  _T_2233 = io_in_c_bits_size >= 3'h3;
  wire  _T_2240 = io_in_c_bits_param <= 3'h5;
  wire  _T_2248 = io_in_c_bits_opcode == 3'h5;
  wire  _T_2266 = io_in_c_bits_opcode == 3'h6;
  wire  _T_2359 = io_in_c_bits_size <= 3'h6;
  wire  _T_2367 = _T_2359 & _address_ok_T_67;
  wire  _T_2370 = source_ok_2 & _T_2367;
  wire  _T_2425 = _source_ok_T_109 & _T_2359;
  wire  _T_2478 = _address_ok_T_67 | _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 |
    _address_ok_T_58;
  wire  _T_2481 = _T_2425 & _T_2478;
  wire  _T_2503 = io_in_c_bits_opcode == 3'h7;
  wire  _T_2736 = io_in_c_bits_opcode == 3'h0;
  wire  _T_2746 = io_in_c_bits_param == 3'h0;
  wire  _T_2754 = io_in_c_bits_opcode == 3'h1;
  wire  _T_2768 = io_in_c_bits_opcode == 3'h2;
  wire  sink_ok_1 = io_in_e_bits_sink < 1'h1;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [2:0] a_first_beats1_decode = is_aligned_mask[5:3];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [2:0] a_first_counter;
  wire [2:0] a_first_counter1 = a_first_counter - 3'h1;
  wire  a_first = a_first_counter == 3'h0;
  reg [2:0] opcode;
  reg [2:0] param;
  reg [2:0] size;
  reg [6:0] source;
  reg [31:0] address;
  wire  _T_2790 = io_in_a_valid & ~a_first;
  wire  _T_2791 = io_in_a_bits_opcode == opcode;
  wire  _T_2795 = io_in_a_bits_param == param;
  wire  _T_2799 = io_in_a_bits_size == size;
  wire  _T_2803 = io_in_a_bits_source == source;
  wire  _T_2807 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [2:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:3];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [2:0] d_first_counter;
  wire [2:0] d_first_counter1 = d_first_counter - 3'h1;
  wire  d_first = d_first_counter == 3'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [6:0] source_1;
  reg  denied;
  wire  _T_2814 = io_in_d_valid & ~d_first;
  wire  _T_2815 = io_in_d_bits_opcode == opcode_1;
  wire  _T_2819 = io_in_d_bits_param == param_1;
  wire  _T_2823 = io_in_d_bits_size == size_1;
  wire  _T_2827 = io_in_d_bits_source == source_1;
  wire  _T_2835 = io_in_d_bits_denied == denied;
  wire  _c_first_T = io_in_c_ready & io_in_c_valid;
  wire [2:0] c_first_beats1_decode = is_aligned_mask_2[5:3];
  wire  c_first_beats1_opdata = io_in_c_bits_opcode[0];
  reg [2:0] c_first_counter;
  wire [2:0] c_first_counter1 = c_first_counter - 3'h1;
  wire  c_first = c_first_counter == 3'h0;
  reg [2:0] opcode_3;
  reg [2:0] param_3;
  reg [2:0] size_3;
  reg [6:0] source_3;
  reg [31:0] address_2;
  wire  _T_2866 = io_in_c_valid & ~c_first;
  wire  _T_2867 = io_in_c_bits_opcode == opcode_3;
  wire  _T_2871 = io_in_c_bits_param == param_3;
  wire  _T_2875 = io_in_c_bits_size == size_3;
  wire  _T_2879 = io_in_c_bits_source == source_3;
  wire  _T_2883 = io_in_c_bits_address == address_2;
  reg [127:0] inflight;
  reg [511:0] inflight_opcodes;
  reg [511:0] inflight_sizes;
  reg [2:0] a_first_counter_1;
  wire [2:0] a_first_counter1_1 = a_first_counter_1 - 3'h1;
  wire  a_first_1 = a_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_1;
  wire [2:0] d_first_counter1_1 = d_first_counter_1 - 3'h1;
  wire  d_first_1 = d_first_counter_1 == 3'h0;
  wire [8:0] _GEN_88 = {io_in_d_bits_source, 2'h0};
  wire [9:0] _a_opcode_lookup_T = {{1'd0}, _GEN_88};
  wire [511:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [511:0] _GEN_89 = {{496'd0}, _a_opcode_lookup_T_5};
  wire [511:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_89;
  wire [511:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[511:1]};
  wire [511:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [511:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_89;
  wire [511:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[511:1]};
  wire  _T_2889 = io_in_a_valid & a_first_1;
  wire [127:0] _a_set_wo_ready_T = 128'h1 << io_in_a_bits_source;
  wire [127:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire  _T_2892 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_94 = {io_in_a_bits_source, 2'h0};
  wire [9:0] _a_opcodes_set_T = {{1'd0}, _GEN_94};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_95 = {{1023'd0}, a_opcodes_set_interm};
  wire [1026:0] _a_opcodes_set_T_1 = _GEN_95 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_97 = {{1023'd0}, a_sizes_set_interm};
  wire [1026:0] _a_sizes_set_T_1 = _GEN_97 << _a_opcodes_set_T;
  wire [127:0] _T_2894 = inflight >> io_in_a_bits_source;
  wire  _T_2896 = ~_T_2894[0];
  wire [127:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_31 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 1027'h0;
  wire [1026:0] _GEN_32 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 1027'h0;
  wire  _T_2900 = io_in_d_valid & d_first_1;
  wire  _T_2902 = ~_T_1344;
  wire  _T_2903 = io_in_d_valid & d_first_1 & ~_T_1344;
  wire [127:0] _d_clr_wo_ready_T = 128'h1 << io_in_d_bits_source;
  wire [127:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_1344 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_99 = {{1023'd0}, _a_opcode_lookup_T_5};
  wire [1038:0] _d_opcodes_clr_T_5 = _GEN_99 << _a_opcode_lookup_T;
  wire [127:0] d_clr = _d_first_T & d_first_1 & _T_2902 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_35 = _d_first_T & d_first_1 & _T_2902 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_2889 & io_in_a_bits_source == io_in_d_bits_source;
  wire [127:0] _T_2913 = inflight >> io_in_d_bits_source;
  wire  _T_2915 = _T_2913[0] | same_cycle_resp;
  wire [2:0] _GEN_39 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_40 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_39;
  wire [2:0] _GEN_41 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_40;
  wire [2:0] _GEN_42 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_41;
  wire [2:0] _GEN_43 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_42;
  wire [2:0] _GEN_44 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_43;
  wire [2:0] _GEN_51 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_42;
  wire [2:0] _GEN_52 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_51;
  wire  _T_2920 = io_in_d_bits_opcode == _GEN_52;
  wire  _T_2921 = io_in_d_bits_opcode == _GEN_44 | _T_2920;
  wire  _T_2925 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_55 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_56 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_55;
  wire [2:0] _GEN_57 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_56;
  wire [2:0] _GEN_58 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_57;
  wire [2:0] _GEN_59 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_58;
  wire [2:0] _GEN_60 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_59;
  wire [2:0] _GEN_67 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_58;
  wire [2:0] _GEN_68 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_67;
  wire  _T_2932 = io_in_d_bits_opcode == _GEN_68;
  wire  _T_2933 = io_in_d_bits_opcode == _GEN_60 | _T_2932;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_102 = {{1'd0}, io_in_d_bits_size};
  wire  _T_2937 = _GEN_102 == a_size_lookup;
  wire  _T_2947 = _T_2900 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_2902;
  wire  _T_2948 = ~io_in_d_ready;
  wire  _T_2949 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_2956 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [127:0] _inflight_T = inflight | a_set;
  wire [127:0] _inflight_T_1 = ~d_clr;
  wire [127:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [511:0] a_opcodes_set = _GEN_31[511:0];
  wire [511:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [511:0] d_opcodes_clr = _GEN_35[511:0];
  wire [511:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [511:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [511:0] a_sizes_set = _GEN_32[511:0];
  wire [511:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [511:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_2965 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [127:0] inflight_1;
  reg [511:0] inflight_sizes_1;
  reg [2:0] c_first_counter_1;
  wire [2:0] c_first_counter1_1 = c_first_counter_1 - 3'h1;
  wire  c_first_1 = c_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_2;
  wire [2:0] d_first_counter1_2 = d_first_counter_2 - 3'h1;
  wire  d_first_2 = d_first_counter_2 == 3'h0;
  wire [511:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [511:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_89;
  wire [511:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[511:1]};
  wire  _T_2975 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire  _T_2976 = io_in_c_valid & c_first_1 & _T_2975;
  wire [127:0] _c_set_wo_ready_T = 128'h1 << io_in_c_bits_source;
  wire [127:0] c_set_wo_ready = io_in_c_valid & c_first_1 & _T_2975 ? _c_set_wo_ready_T : 128'h0;
  wire  _T_2982 = _c_first_T & c_first_1 & _T_2975;
  wire [3:0] _c_sizes_set_interm_T = {io_in_c_bits_size, 1'h0};
  wire [3:0] _c_sizes_set_interm_T_1 = _c_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_109 = {io_in_c_bits_source, 2'h0};
  wire [9:0] _c_opcodes_set_T = {{1'd0}, _GEN_109};
  wire [3:0] c_sizes_set_interm = _c_first_T & c_first_1 & _T_2975 ? _c_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_112 = {{1023'd0}, c_sizes_set_interm};
  wire [1026:0] _c_sizes_set_T_1 = _GEN_112 << _c_opcodes_set_T;
  wire [127:0] _T_2983 = inflight_1 >> io_in_c_bits_source;
  wire  _T_2985 = ~_T_2983[0];
  wire [127:0] c_set = _c_first_T & c_first_1 & _T_2975 ? _c_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_77 = _c_first_T & c_first_1 & _T_2975 ? _c_sizes_set_T_1 : 1027'h0;
  wire  _T_2989 = io_in_d_valid & d_first_2;
  wire  _T_2991 = io_in_d_valid & d_first_2 & _T_1344;
  wire [127:0] d_clr_wo_ready_1 = io_in_d_valid & d_first_2 & _T_1344 ? _d_clr_wo_ready_T : 128'h0;
  wire [127:0] d_clr_1 = _d_first_T & d_first_2 & _T_1344 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_80 = _d_first_T & d_first_2 & _T_1344 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_8 = io_in_c_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp_1 = _T_2976 & io_in_c_bits_source == io_in_d_bits_source;
  wire [127:0] _T_2999 = inflight_1 >> io_in_d_bits_source;
  wire  _T_3001 = _T_2999[0] | same_cycle_resp_1;
  wire  _T_3005 = io_in_d_bits_size == io_in_c_bits_size;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_3009 = _GEN_102 == c_size_lookup;
  wire  _T_3018 = _T_2989 & c_first_1 & io_in_c_valid & _same_cycle_resp_T_8 & _T_1344;
  wire  _T_3020 = _T_2948 | io_in_c_ready;
  wire  _T_3024 = |c_set_wo_ready;
  wire  _T_3025 = c_set_wo_ready != d_clr_wo_ready_1;
  wire [127:0] _inflight_T_3 = inflight_1 | c_set;
  wire [127:0] _inflight_T_4 = ~d_clr_1;
  wire [127:0] _inflight_T_5 = _inflight_T_3 & _inflight_T_4;
  wire [511:0] d_opcodes_clr_1 = _GEN_80[511:0];
  wire [511:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [511:0] c_sizes_set = _GEN_77[511:0];
  wire [511:0] _inflight_sizes_T_3 = inflight_sizes_1 | c_sizes_set;
  wire [511:0] _inflight_sizes_T_5 = _inflight_sizes_T_3 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_3034 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  reg  inflight_2;
  reg [2:0] d_first_counter_3;
  wire [2:0] d_first_counter1_3 = d_first_counter_3 - 3'h1;
  wire  d_first_3 = d_first_counter_3 == 3'h0;
  wire  _T_3046 = io_in_d_bits_opcode[2] & ~io_in_d_bits_opcode[1];
  wire  _T_3047 = _d_first_T & d_first_3 & _T_3046;
  wire  _T_3050 = ~inflight_2;
  wire [1:0] _GEN_84 = _d_first_T & d_first_3 & _T_3046 ? 2'h1 : 2'h0;
  wire  _T_3054 = io_in_e_ready & io_in_e_valid;
  wire [1:0] _e_clr_T = 2'h1 << io_in_e_bits_sink;
  wire  d_set = _GEN_84[0];
  wire  _T_3058 = (d_set | inflight_2) >> io_in_e_bits_sink;
  wire [1:0] _GEN_85 = _T_3054 ? _e_clr_T : 2'h0;
  wire  e_clr = _GEN_85[0];
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 3'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      param <= io_in_a_bits_param;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 3'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      c_first_counter <= 3'h0;
    end else if (_c_first_T) begin
      if (c_first) begin
        if (c_first_beats1_opdata) begin
          c_first_counter <= c_first_beats1_decode;
        end else begin
          c_first_counter <= 3'h0;
        end
      end else begin
        c_first_counter <= c_first_counter1;
      end
    end
    if (_c_first_T & c_first) begin
      opcode_3 <= io_in_c_bits_opcode;
    end
    if (_c_first_T & c_first) begin
      param_3 <= io_in_c_bits_param;
    end
    if (_c_first_T & c_first) begin
      size_3 <= io_in_c_bits_size;
    end
    if (_c_first_T & c_first) begin
      source_3 <= io_in_c_bits_source;
    end
    if (_c_first_T & c_first) begin
      address_2 <= io_in_c_bits_address;
    end
    if (reset) begin
      inflight <= 128'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 512'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 512'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 3'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 3'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 128'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 512'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      c_first_counter_1 <= 3'h0;
    end else if (_c_first_T) begin
      if (c_first_1) begin
        if (c_first_beats1_opdata) begin
          c_first_counter_1 <= c_first_beats1_decode;
        end else begin
          c_first_counter_1 <= 3'h0;
        end
      end else begin
        c_first_counter_1 <= c_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_2 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 3'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_c_first_T | _d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    if (reset) begin
      inflight_2 <= 1'h0;
    end else begin
      inflight_2 <= (inflight_2 | d_set) & ~e_clr;
    end
    if (reset) begin
      d_first_counter_3 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_3) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_3 <= d_first_beats1_decode;
        end else begin
          d_first_counter_3 <= 3'h0;
        end
      end else begin
        d_first_counter_3 <= d_first_counter1_3;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1086 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1086 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1206 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1206 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_1328 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_1328 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1340 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1340 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1348 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1348 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1360 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1344 & ~(_T_1360 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1348 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1348 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1375 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1375 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1379 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1379 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1364 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1348 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1348 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1375 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1375 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1379 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1379 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1412 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1392 & ~(_T_1412 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1421 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(_T_1412 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1438 & ~(_T_1412 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(_T_1352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(_T_1352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(_T_1356 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1456 & ~(_T_1356 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(_T_2233 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(_T_2233 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(_T_2240 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2226 & ~(_T_2240 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(_T_2233 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(_T_2233 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(_T_2240 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2248 & ~(_T_2240 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2370 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2370 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2481 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2481 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2233 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release smaller than a beat (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2233 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2240 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid report param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2266 & ~(_T_2240 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2370 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2370 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2481 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2481 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2233 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2233 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2240 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2503 & ~(_T_2240 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(_T_2746 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2736 & ~(_T_2746 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(_T_2746 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2754 & ~(_T_2746 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck address not aligned to size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(_T_2746 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2768 & ~(_T_2746 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channels carries invalid sink ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2790 & ~(_T_2791 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2790 & ~(_T_2791 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2790 & ~(_T_2795 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2790 & ~(_T_2795 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2790 & ~(_T_2799 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2790 & ~(_T_2799 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2790 & ~(_T_2803 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2790 & ~(_T_2803 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2790 & ~(_T_2807 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2790 & ~(_T_2807 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2814 & ~(_T_2815 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2814 & ~(_T_2815 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2814 & ~(_T_2819 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2814 & ~(_T_2819 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2814 & ~(_T_2823 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2814 & ~(_T_2823 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2814 & ~(_T_2827 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2814 & ~(_T_2827 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2814 & ~(_T_2835 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2814 & ~(_T_2835 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2866 & ~(_T_2867 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2866 & ~(_T_2867 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2866 & ~(_T_2871 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2866 & ~(_T_2871 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2866 & ~(_T_2875 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2866 & ~(_T_2875 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2866 & ~(_T_2879 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2866 & ~(_T_2879 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2866 & ~(_T_2883 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2866 & ~(_T_2883 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2892 & ~(_T_2896 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2892 & ~(_T_2896 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2903 & ~(_T_2915 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2903 & ~(_T_2915 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2903 & same_cycle_resp & ~(_T_2921 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2903 & same_cycle_resp & ~(_T_2921 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2903 & same_cycle_resp & ~(_T_2925 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2903 & same_cycle_resp & ~(_T_2925 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2903 & ~same_cycle_resp & ~(_T_2933 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2903 & ~same_cycle_resp & ~(_T_2933 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2903 & ~same_cycle_resp & ~(_T_2937 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2903 & ~same_cycle_resp & ~(_T_2937 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2947 & ~(_T_2949 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2947 & ~(_T_2949 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2956 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2956 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2965 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2965 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2982 & ~(_T_2985 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel re-used a source ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2982 & ~(_T_2985 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2991 & ~(_T_3001 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2991 & ~(_T_3001 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2991 & same_cycle_resp_1 & ~(_T_3005 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2991 & same_cycle_resp_1 & ~(_T_3005 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2991 & ~same_cycle_resp_1 & ~(_T_3009 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2991 & ~same_cycle_resp_1 & ~(_T_3009 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3018 & ~(_T_3020 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3018 & ~(_T_3020 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3024 & ~(_T_3025 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3024 & ~(_T_3025 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_3034 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_3034 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3047 & ~(_T_3050 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel re-used a sink ID (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3047 & ~(_T_3050 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3054 & ~(_T_3058 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:79)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3054 & ~(_T_3058 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  source = _RAND_4[6:0];
  _RAND_5 = {1{`RANDOM}};
  address = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  d_first_counter = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  opcode_1 = _RAND_7[2:0];
  _RAND_8 = {1{`RANDOM}};
  param_1 = _RAND_8[1:0];
  _RAND_9 = {1{`RANDOM}};
  size_1 = _RAND_9[2:0];
  _RAND_10 = {1{`RANDOM}};
  source_1 = _RAND_10[6:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  c_first_counter = _RAND_12[2:0];
  _RAND_13 = {1{`RANDOM}};
  opcode_3 = _RAND_13[2:0];
  _RAND_14 = {1{`RANDOM}};
  param_3 = _RAND_14[2:0];
  _RAND_15 = {1{`RANDOM}};
  size_3 = _RAND_15[2:0];
  _RAND_16 = {1{`RANDOM}};
  source_3 = _RAND_16[6:0];
  _RAND_17 = {1{`RANDOM}};
  address_2 = _RAND_17[31:0];
  _RAND_18 = {4{`RANDOM}};
  inflight = _RAND_18[127:0];
  _RAND_19 = {16{`RANDOM}};
  inflight_opcodes = _RAND_19[511:0];
  _RAND_20 = {16{`RANDOM}};
  inflight_sizes = _RAND_20[511:0];
  _RAND_21 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_21[2:0];
  _RAND_22 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_22[2:0];
  _RAND_23 = {1{`RANDOM}};
  watchdog = _RAND_23[31:0];
  _RAND_24 = {4{`RANDOM}};
  inflight_1 = _RAND_24[127:0];
  _RAND_25 = {16{`RANDOM}};
  inflight_sizes_1 = _RAND_25[511:0];
  _RAND_26 = {1{`RANDOM}};
  c_first_counter_1 = _RAND_26[2:0];
  _RAND_27 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_27[2:0];
  _RAND_28 = {1{`RANDOM}};
  watchdog_1 = _RAND_28[31:0];
  _RAND_29 = {1{`RANDOM}};
  inflight_2 = _RAND_29[0:0];
  _RAND_30 = {1{`RANDOM}};
  d_first_counter_3 = _RAND_30[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLFIFOFixer_1(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_param,
  input  [2:0]  auto_in_a_bits_size,
  input  [6:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  output        auto_in_c_ready,
  input         auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
  input  [2:0]  auto_in_c_bits_param,
  input  [2:0]  auto_in_c_bits_size,
  input  [6:0]  auto_in_c_bits_source,
  input  [31:0] auto_in_c_bits_address,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [6:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  output        auto_in_e_ready,
  input         auto_in_e_valid,
  input         auto_in_e_bits_sink,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [2:0]  auto_out_a_bits_param,
  output [2:0]  auto_out_a_bits_size,
  output [6:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  input         auto_out_c_ready,
  output        auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
  output [2:0]  auto_out_c_bits_param,
  output [2:0]  auto_out_c_bits_size,
  output [6:0]  auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [6:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  input         auto_out_e_ready,
  output        auto_out_e_valid,
  output        auto_out_e_bits_sink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [31:0] _RAND_19;
  reg [31:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [31:0] _RAND_24;
  reg [31:0] _RAND_25;
  reg [31:0] _RAND_26;
  reg [31:0] _RAND_27;
  reg [31:0] _RAND_28;
  reg [31:0] _RAND_29;
  reg [31:0] _RAND_30;
  reg [31:0] _RAND_31;
  reg [31:0] _RAND_32;
  reg [31:0] _RAND_33;
  reg [31:0] _RAND_34;
  reg [31:0] _RAND_35;
  reg [31:0] _RAND_36;
  reg [31:0] _RAND_37;
  reg [31:0] _RAND_38;
  reg [31:0] _RAND_39;
  reg [31:0] _RAND_40;
  reg [31:0] _RAND_41;
  reg [31:0] _RAND_42;
  reg [31:0] _RAND_43;
  reg [31:0] _RAND_44;
  reg [31:0] _RAND_45;
  reg [31:0] _RAND_46;
  reg [31:0] _RAND_47;
  reg [31:0] _RAND_48;
  reg [31:0] _RAND_49;
  reg [31:0] _RAND_50;
  reg [31:0] _RAND_51;
  reg [31:0] _RAND_52;
  reg [31:0] _RAND_53;
  reg [31:0] _RAND_54;
  reg [31:0] _RAND_55;
  reg [31:0] _RAND_56;
  reg [31:0] _RAND_57;
  reg [31:0] _RAND_58;
  reg [31:0] _RAND_59;
  reg [31:0] _RAND_60;
  reg [31:0] _RAND_61;
  reg [31:0] _RAND_62;
  reg [31:0] _RAND_63;
  reg [31:0] _RAND_64;
  reg [31:0] _RAND_65;
  reg [31:0] _RAND_66;
  reg [31:0] _RAND_67;
  reg [31:0] _RAND_68;
  reg [31:0] _RAND_69;
  reg [31:0] _RAND_70;
  reg [31:0] _RAND_71;
  reg [31:0] _RAND_72;
  reg [31:0] _RAND_73;
  reg [31:0] _RAND_74;
  reg [31:0] _RAND_75;
  reg [31:0] _RAND_76;
  reg [31:0] _RAND_77;
  reg [31:0] _RAND_78;
  reg [31:0] _RAND_79;
  reg [31:0] _RAND_80;
  reg [31:0] _RAND_81;
  reg [31:0] _RAND_82;
  reg [31:0] _RAND_83;
  reg [31:0] _RAND_84;
  reg [31:0] _RAND_85;
  reg [31:0] _RAND_86;
  reg [31:0] _RAND_87;
  reg [31:0] _RAND_88;
  reg [31:0] _RAND_89;
  reg [31:0] _RAND_90;
  reg [31:0] _RAND_91;
  reg [31:0] _RAND_92;
  reg [31:0] _RAND_93;
  reg [31:0] _RAND_94;
  reg [31:0] _RAND_95;
  reg [31:0] _RAND_96;
  reg [31:0] _RAND_97;
  reg [31:0] _RAND_98;
  reg [31:0] _RAND_99;
  reg [31:0] _RAND_100;
  reg [31:0] _RAND_101;
  reg [31:0] _RAND_102;
  reg [31:0] _RAND_103;
  reg [31:0] _RAND_104;
  reg [31:0] _RAND_105;
  reg [31:0] _RAND_106;
  reg [31:0] _RAND_107;
  reg [31:0] _RAND_108;
  reg [31:0] _RAND_109;
  reg [31:0] _RAND_110;
  reg [31:0] _RAND_111;
  reg [31:0] _RAND_112;
  reg [31:0] _RAND_113;
  reg [31:0] _RAND_114;
  reg [31:0] _RAND_115;
  reg [31:0] _RAND_116;
  reg [31:0] _RAND_117;
  reg [31:0] _RAND_118;
  reg [31:0] _RAND_119;
  reg [31:0] _RAND_120;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_param;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [6:0] monitor_io_in_a_bits_source;
  wire [31:0] monitor_io_in_a_bits_address;
  wire [7:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_c_ready;
  wire  monitor_io_in_c_valid;
  wire [2:0] monitor_io_in_c_bits_opcode;
  wire [2:0] monitor_io_in_c_bits_param;
  wire [2:0] monitor_io_in_c_bits_size;
  wire [6:0] monitor_io_in_c_bits_source;
  wire [31:0] monitor_io_in_c_bits_address;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [6:0] monitor_io_in_d_bits_source;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  monitor_io_in_e_ready;
  wire  monitor_io_in_e_valid;
  wire  monitor_io_in_e_bits_sink;
  wire [32:0] _a_notFIFO_T_1 = {1'b0,$signed(auto_in_a_bits_address)};
  wire [31:0] _a_id_T = auto_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _a_id_T_1 = {1'b0,$signed(_a_id_T)};
  wire [32:0] _a_id_T_3 = $signed(_a_id_T_1) & 33'shf0000000;
  wire  _a_id_T_4 = $signed(_a_id_T_3) == 33'sh0;
  wire [31:0] _a_id_T_5 = auto_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _a_id_T_6 = {1'b0,$signed(_a_id_T_5)};
  wire [32:0] _a_id_T_8 = $signed(_a_id_T_6) & 33'she0000000;
  wire  _a_id_T_9 = $signed(_a_id_T_8) == 33'sh0;
  wire [31:0] _a_id_T_10 = auto_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _a_id_T_11 = {1'b0,$signed(_a_id_T_10)};
  wire [32:0] _a_id_T_13 = $signed(_a_id_T_11) & 33'shc0000000;
  wire  _a_id_T_14 = $signed(_a_id_T_13) == 33'sh0;
  wire [31:0] _a_id_T_15 = auto_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _a_id_T_16 = {1'b0,$signed(_a_id_T_15)};
  wire [32:0] _a_id_T_18 = $signed(_a_id_T_16) & 33'shc0000000;
  wire  _a_id_T_19 = $signed(_a_id_T_18) == 33'sh0;
  wire [31:0] _a_id_T_20 = auto_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _a_id_T_21 = {1'b0,$signed(_a_id_T_20)};
  wire [32:0] _a_id_T_23 = $signed(_a_id_T_21) & 33'she0000000;
  wire  _a_id_T_24 = $signed(_a_id_T_23) == 33'sh0;
  wire  _a_id_T_28 = _a_id_T_4 | _a_id_T_9 | _a_id_T_14 | _a_id_T_19 | _a_id_T_24;
  wire [32:0] _a_id_T_32 = $signed(_a_notFIFO_T_1) & 33'shf0000000;
  wire  _a_id_T_33 = $signed(_a_id_T_32) == 33'sh0;
  wire [1:0] _a_id_T_35 = _a_id_T_33 ? 2'h2 : 2'h0;
  wire [1:0] _GEN_523 = {{1'd0}, _a_id_T_28};
  wire [1:0] a_id = _GEN_523 | _a_id_T_35;
  wire  a_noDomain = a_id == 2'h0;
  wire  stalls_a_sel = auto_in_a_bits_source[6:4] == 3'h1;
  reg [2:0] a_first_counter;
  wire  a_first = a_first_counter == 3'h0;
  reg  flight_16;
  reg  flight_17;
  reg  flight_18;
  reg  flight_19;
  reg  flight_20;
  reg  flight_21;
  reg  flight_22;
  reg  flight_23;
  reg  flight_24;
  reg  flight_25;
  reg  flight_26;
  reg  flight_27;
  reg  flight_28;
  reg  flight_29;
  reg  flight_30;
  reg  flight_31;
  reg [1:0] stalls_id;
  wire  stalls_0 = stalls_a_sel & a_first & (flight_16 | flight_17 | flight_18 | flight_19 | flight_20 | flight_21 |
    flight_22 | flight_23 | flight_24 | flight_25 | flight_26 | flight_27 | flight_28 | flight_29 | flight_30 |
    flight_31) & (a_noDomain | stalls_id != a_id);
  wire  stalls_a_sel_1 = auto_in_a_bits_source[6:4] == 3'h2;
  reg  flight_32;
  reg  flight_33;
  reg  flight_34;
  reg  flight_35;
  reg  flight_36;
  reg  flight_37;
  reg  flight_38;
  reg  flight_39;
  reg  flight_40;
  reg  flight_41;
  reg  flight_42;
  reg  flight_43;
  reg  flight_44;
  reg  flight_45;
  reg  flight_46;
  reg  flight_47;
  reg [1:0] stalls_id_1;
  wire  stalls_1 = stalls_a_sel_1 & a_first & (flight_32 | flight_33 | flight_34 | flight_35 | flight_36 | flight_37 |
    flight_38 | flight_39 | flight_40 | flight_41 | flight_42 | flight_43 | flight_44 | flight_45 | flight_46 |
    flight_47) & (a_noDomain | stalls_id_1 != a_id);
  wire  stalls_a_sel_2 = auto_in_a_bits_source[6:4] == 3'h3;
  reg  flight_48;
  reg  flight_49;
  reg  flight_50;
  reg  flight_51;
  reg  flight_52;
  reg  flight_53;
  reg  flight_54;
  reg  flight_55;
  reg  flight_56;
  reg  flight_57;
  reg  flight_58;
  reg  flight_59;
  reg  flight_60;
  reg  flight_61;
  reg  flight_62;
  reg  flight_63;
  reg [1:0] stalls_id_2;
  wire  stalls_2 = stalls_a_sel_2 & a_first & (flight_48 | flight_49 | flight_50 | flight_51 | flight_52 | flight_53 |
    flight_54 | flight_55 | flight_56 | flight_57 | flight_58 | flight_59 | flight_60 | flight_61 | flight_62 |
    flight_63) & (a_noDomain | stalls_id_2 != a_id);
  wire  stalls_a_sel_3 = auto_in_a_bits_source[6:4] == 3'h4;
  reg  flight_64;
  reg  flight_65;
  reg  flight_66;
  reg  flight_67;
  reg  flight_68;
  reg  flight_69;
  reg  flight_70;
  reg  flight_71;
  reg  flight_72;
  reg  flight_73;
  reg  flight_74;
  reg  flight_75;
  reg  flight_76;
  reg  flight_77;
  reg  flight_78;
  reg  flight_79;
  reg [1:0] stalls_id_3;
  wire  stalls_3 = stalls_a_sel_3 & a_first & (flight_64 | flight_65 | flight_66 | flight_67 | flight_68 | flight_69 |
    flight_70 | flight_71 | flight_72 | flight_73 | flight_74 | flight_75 | flight_76 | flight_77 | flight_78 |
    flight_79) & (a_noDomain | stalls_id_3 != a_id);
  wire  stalls_a_sel_4 = auto_in_a_bits_source[6:4] == 3'h5;
  reg  flight_80;
  reg  flight_81;
  reg  flight_82;
  reg  flight_83;
  reg  flight_84;
  reg  flight_85;
  reg  flight_86;
  reg  flight_87;
  reg  flight_88;
  reg  flight_89;
  reg  flight_90;
  reg  flight_91;
  reg  flight_92;
  reg  flight_93;
  reg  flight_94;
  reg  flight_95;
  reg [1:0] stalls_id_4;
  wire  stalls_4 = stalls_a_sel_4 & a_first & (flight_80 | flight_81 | flight_82 | flight_83 | flight_84 | flight_85 |
    flight_86 | flight_87 | flight_88 | flight_89 | flight_90 | flight_91 | flight_92 | flight_93 | flight_94 |
    flight_95) & (a_noDomain | stalls_id_4 != a_id);
  wire  stalls_a_sel_5 = auto_in_a_bits_source[6:4] == 3'h6;
  reg  flight_96;
  reg  flight_97;
  reg  flight_98;
  reg  flight_99;
  reg  flight_100;
  reg  flight_101;
  reg  flight_102;
  reg  flight_103;
  reg  flight_104;
  reg  flight_105;
  reg  flight_106;
  reg  flight_107;
  reg  flight_108;
  reg  flight_109;
  reg  flight_110;
  reg  flight_111;
  reg [1:0] stalls_id_5;
  wire  stalls_5 = stalls_a_sel_5 & a_first & (flight_96 | flight_97 | flight_98 | flight_99 | flight_100 | flight_101
     | flight_102 | flight_103 | flight_104 | flight_105 | flight_106 | flight_107 | flight_108 | flight_109 |
    flight_110 | flight_111) & (a_noDomain | stalls_id_5 != a_id);
  wire  stalls_a_sel_6 = auto_in_a_bits_source[6:4] == 3'h7;
  reg  flight_112;
  reg  flight_113;
  reg  flight_114;
  reg  flight_115;
  reg  flight_116;
  reg  flight_117;
  reg  flight_118;
  reg  flight_119;
  reg  flight_120;
  reg  flight_121;
  reg  flight_122;
  reg  flight_123;
  reg  flight_124;
  reg  flight_125;
  reg  flight_126;
  reg  flight_127;
  reg [1:0] stalls_id_6;
  wire  stalls_6 = stalls_a_sel_6 & a_first & (flight_112 | flight_113 | flight_114 | flight_115 | flight_116 |
    flight_117 | flight_118 | flight_119 | flight_120 | flight_121 | flight_122 | flight_123 | flight_124 | flight_125
     | flight_126 | flight_127) & (a_noDomain | stalls_id_6 != a_id);
  wire  stall = stalls_0 | stalls_1 | stalls_2 | stalls_3 | stalls_4 | stalls_5 | stalls_6;
  wire  _bundleIn_0_a_ready_T = ~stall;
  wire  bundleIn_0_a_ready = auto_out_a_ready & ~stall;
  wire  _a_first_T = bundleIn_0_a_ready & auto_in_a_valid;
  wire [12:0] _a_first_beats1_decode_T_1 = 13'h3f << auto_in_a_bits_size;
  wire [5:0] _a_first_beats1_decode_T_3 = ~_a_first_beats1_decode_T_1[5:0];
  wire [2:0] a_first_beats1_decode = _a_first_beats1_decode_T_3[5:3];
  wire  a_first_beats1_opdata = ~auto_in_a_bits_opcode[2];
  wire [2:0] a_first_counter1 = a_first_counter - 3'h1;
  wire  _d_first_T = auto_in_d_ready & auto_out_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << auto_out_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [2:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:3];
  wire  d_first_beats1_opdata = auto_out_d_bits_opcode[0];
  reg [2:0] d_first_counter;
  wire [2:0] d_first_counter1 = d_first_counter - 3'h1;
  wire  d_first_first = d_first_counter == 3'h0;
  wire  d_first = d_first_first & auto_out_d_bits_opcode != 3'h6;
  wire  _GEN_146 = a_first & _a_first_T ? 7'h10 == auto_in_a_bits_source | flight_16 : flight_16;
  wire  _GEN_147 = a_first & _a_first_T ? 7'h11 == auto_in_a_bits_source | flight_17 : flight_17;
  wire  _GEN_148 = a_first & _a_first_T ? 7'h12 == auto_in_a_bits_source | flight_18 : flight_18;
  wire  _GEN_149 = a_first & _a_first_T ? 7'h13 == auto_in_a_bits_source | flight_19 : flight_19;
  wire  _GEN_150 = a_first & _a_first_T ? 7'h14 == auto_in_a_bits_source | flight_20 : flight_20;
  wire  _GEN_151 = a_first & _a_first_T ? 7'h15 == auto_in_a_bits_source | flight_21 : flight_21;
  wire  _GEN_152 = a_first & _a_first_T ? 7'h16 == auto_in_a_bits_source | flight_22 : flight_22;
  wire  _GEN_153 = a_first & _a_first_T ? 7'h17 == auto_in_a_bits_source | flight_23 : flight_23;
  wire  _GEN_154 = a_first & _a_first_T ? 7'h18 == auto_in_a_bits_source | flight_24 : flight_24;
  wire  _GEN_155 = a_first & _a_first_T ? 7'h19 == auto_in_a_bits_source | flight_25 : flight_25;
  wire  _GEN_156 = a_first & _a_first_T ? 7'h1a == auto_in_a_bits_source | flight_26 : flight_26;
  wire  _GEN_157 = a_first & _a_first_T ? 7'h1b == auto_in_a_bits_source | flight_27 : flight_27;
  wire  _GEN_158 = a_first & _a_first_T ? 7'h1c == auto_in_a_bits_source | flight_28 : flight_28;
  wire  _GEN_159 = a_first & _a_first_T ? 7'h1d == auto_in_a_bits_source | flight_29 : flight_29;
  wire  _GEN_160 = a_first & _a_first_T ? 7'h1e == auto_in_a_bits_source | flight_30 : flight_30;
  wire  _GEN_161 = a_first & _a_first_T ? 7'h1f == auto_in_a_bits_source | flight_31 : flight_31;
  wire  _GEN_162 = a_first & _a_first_T ? 7'h20 == auto_in_a_bits_source | flight_32 : flight_32;
  wire  _GEN_163 = a_first & _a_first_T ? 7'h21 == auto_in_a_bits_source | flight_33 : flight_33;
  wire  _GEN_164 = a_first & _a_first_T ? 7'h22 == auto_in_a_bits_source | flight_34 : flight_34;
  wire  _GEN_165 = a_first & _a_first_T ? 7'h23 == auto_in_a_bits_source | flight_35 : flight_35;
  wire  _GEN_166 = a_first & _a_first_T ? 7'h24 == auto_in_a_bits_source | flight_36 : flight_36;
  wire  _GEN_167 = a_first & _a_first_T ? 7'h25 == auto_in_a_bits_source | flight_37 : flight_37;
  wire  _GEN_168 = a_first & _a_first_T ? 7'h26 == auto_in_a_bits_source | flight_38 : flight_38;
  wire  _GEN_169 = a_first & _a_first_T ? 7'h27 == auto_in_a_bits_source | flight_39 : flight_39;
  wire  _GEN_170 = a_first & _a_first_T ? 7'h28 == auto_in_a_bits_source | flight_40 : flight_40;
  wire  _GEN_171 = a_first & _a_first_T ? 7'h29 == auto_in_a_bits_source | flight_41 : flight_41;
  wire  _GEN_172 = a_first & _a_first_T ? 7'h2a == auto_in_a_bits_source | flight_42 : flight_42;
  wire  _GEN_173 = a_first & _a_first_T ? 7'h2b == auto_in_a_bits_source | flight_43 : flight_43;
  wire  _GEN_174 = a_first & _a_first_T ? 7'h2c == auto_in_a_bits_source | flight_44 : flight_44;
  wire  _GEN_175 = a_first & _a_first_T ? 7'h2d == auto_in_a_bits_source | flight_45 : flight_45;
  wire  _GEN_176 = a_first & _a_first_T ? 7'h2e == auto_in_a_bits_source | flight_46 : flight_46;
  wire  _GEN_177 = a_first & _a_first_T ? 7'h2f == auto_in_a_bits_source | flight_47 : flight_47;
  wire  _GEN_178 = a_first & _a_first_T ? 7'h30 == auto_in_a_bits_source | flight_48 : flight_48;
  wire  _GEN_179 = a_first & _a_first_T ? 7'h31 == auto_in_a_bits_source | flight_49 : flight_49;
  wire  _GEN_180 = a_first & _a_first_T ? 7'h32 == auto_in_a_bits_source | flight_50 : flight_50;
  wire  _GEN_181 = a_first & _a_first_T ? 7'h33 == auto_in_a_bits_source | flight_51 : flight_51;
  wire  _GEN_182 = a_first & _a_first_T ? 7'h34 == auto_in_a_bits_source | flight_52 : flight_52;
  wire  _GEN_183 = a_first & _a_first_T ? 7'h35 == auto_in_a_bits_source | flight_53 : flight_53;
  wire  _GEN_184 = a_first & _a_first_T ? 7'h36 == auto_in_a_bits_source | flight_54 : flight_54;
  wire  _GEN_185 = a_first & _a_first_T ? 7'h37 == auto_in_a_bits_source | flight_55 : flight_55;
  wire  _GEN_186 = a_first & _a_first_T ? 7'h38 == auto_in_a_bits_source | flight_56 : flight_56;
  wire  _GEN_187 = a_first & _a_first_T ? 7'h39 == auto_in_a_bits_source | flight_57 : flight_57;
  wire  _GEN_188 = a_first & _a_first_T ? 7'h3a == auto_in_a_bits_source | flight_58 : flight_58;
  wire  _GEN_189 = a_first & _a_first_T ? 7'h3b == auto_in_a_bits_source | flight_59 : flight_59;
  wire  _GEN_190 = a_first & _a_first_T ? 7'h3c == auto_in_a_bits_source | flight_60 : flight_60;
  wire  _GEN_191 = a_first & _a_first_T ? 7'h3d == auto_in_a_bits_source | flight_61 : flight_61;
  wire  _GEN_192 = a_first & _a_first_T ? 7'h3e == auto_in_a_bits_source | flight_62 : flight_62;
  wire  _GEN_193 = a_first & _a_first_T ? 7'h3f == auto_in_a_bits_source | flight_63 : flight_63;
  wire  _GEN_194 = a_first & _a_first_T ? 7'h40 == auto_in_a_bits_source | flight_64 : flight_64;
  wire  _GEN_195 = a_first & _a_first_T ? 7'h41 == auto_in_a_bits_source | flight_65 : flight_65;
  wire  _GEN_196 = a_first & _a_first_T ? 7'h42 == auto_in_a_bits_source | flight_66 : flight_66;
  wire  _GEN_197 = a_first & _a_first_T ? 7'h43 == auto_in_a_bits_source | flight_67 : flight_67;
  wire  _GEN_198 = a_first & _a_first_T ? 7'h44 == auto_in_a_bits_source | flight_68 : flight_68;
  wire  _GEN_199 = a_first & _a_first_T ? 7'h45 == auto_in_a_bits_source | flight_69 : flight_69;
  wire  _GEN_200 = a_first & _a_first_T ? 7'h46 == auto_in_a_bits_source | flight_70 : flight_70;
  wire  _GEN_201 = a_first & _a_first_T ? 7'h47 == auto_in_a_bits_source | flight_71 : flight_71;
  wire  _GEN_202 = a_first & _a_first_T ? 7'h48 == auto_in_a_bits_source | flight_72 : flight_72;
  wire  _GEN_203 = a_first & _a_first_T ? 7'h49 == auto_in_a_bits_source | flight_73 : flight_73;
  wire  _GEN_204 = a_first & _a_first_T ? 7'h4a == auto_in_a_bits_source | flight_74 : flight_74;
  wire  _GEN_205 = a_first & _a_first_T ? 7'h4b == auto_in_a_bits_source | flight_75 : flight_75;
  wire  _GEN_206 = a_first & _a_first_T ? 7'h4c == auto_in_a_bits_source | flight_76 : flight_76;
  wire  _GEN_207 = a_first & _a_first_T ? 7'h4d == auto_in_a_bits_source | flight_77 : flight_77;
  wire  _GEN_208 = a_first & _a_first_T ? 7'h4e == auto_in_a_bits_source | flight_78 : flight_78;
  wire  _GEN_209 = a_first & _a_first_T ? 7'h4f == auto_in_a_bits_source | flight_79 : flight_79;
  wire  _GEN_210 = a_first & _a_first_T ? 7'h50 == auto_in_a_bits_source | flight_80 : flight_80;
  wire  _GEN_211 = a_first & _a_first_T ? 7'h51 == auto_in_a_bits_source | flight_81 : flight_81;
  wire  _GEN_212 = a_first & _a_first_T ? 7'h52 == auto_in_a_bits_source | flight_82 : flight_82;
  wire  _GEN_213 = a_first & _a_first_T ? 7'h53 == auto_in_a_bits_source | flight_83 : flight_83;
  wire  _GEN_214 = a_first & _a_first_T ? 7'h54 == auto_in_a_bits_source | flight_84 : flight_84;
  wire  _GEN_215 = a_first & _a_first_T ? 7'h55 == auto_in_a_bits_source | flight_85 : flight_85;
  wire  _GEN_216 = a_first & _a_first_T ? 7'h56 == auto_in_a_bits_source | flight_86 : flight_86;
  wire  _GEN_217 = a_first & _a_first_T ? 7'h57 == auto_in_a_bits_source | flight_87 : flight_87;
  wire  _GEN_218 = a_first & _a_first_T ? 7'h58 == auto_in_a_bits_source | flight_88 : flight_88;
  wire  _GEN_219 = a_first & _a_first_T ? 7'h59 == auto_in_a_bits_source | flight_89 : flight_89;
  wire  _GEN_220 = a_first & _a_first_T ? 7'h5a == auto_in_a_bits_source | flight_90 : flight_90;
  wire  _GEN_221 = a_first & _a_first_T ? 7'h5b == auto_in_a_bits_source | flight_91 : flight_91;
  wire  _GEN_222 = a_first & _a_first_T ? 7'h5c == auto_in_a_bits_source | flight_92 : flight_92;
  wire  _GEN_223 = a_first & _a_first_T ? 7'h5d == auto_in_a_bits_source | flight_93 : flight_93;
  wire  _GEN_224 = a_first & _a_first_T ? 7'h5e == auto_in_a_bits_source | flight_94 : flight_94;
  wire  _GEN_225 = a_first & _a_first_T ? 7'h5f == auto_in_a_bits_source | flight_95 : flight_95;
  wire  _GEN_226 = a_first & _a_first_T ? 7'h60 == auto_in_a_bits_source | flight_96 : flight_96;
  wire  _GEN_227 = a_first & _a_first_T ? 7'h61 == auto_in_a_bits_source | flight_97 : flight_97;
  wire  _GEN_228 = a_first & _a_first_T ? 7'h62 == auto_in_a_bits_source | flight_98 : flight_98;
  wire  _GEN_229 = a_first & _a_first_T ? 7'h63 == auto_in_a_bits_source | flight_99 : flight_99;
  wire  _GEN_230 = a_first & _a_first_T ? 7'h64 == auto_in_a_bits_source | flight_100 : flight_100;
  wire  _GEN_231 = a_first & _a_first_T ? 7'h65 == auto_in_a_bits_source | flight_101 : flight_101;
  wire  _GEN_232 = a_first & _a_first_T ? 7'h66 == auto_in_a_bits_source | flight_102 : flight_102;
  wire  _GEN_233 = a_first & _a_first_T ? 7'h67 == auto_in_a_bits_source | flight_103 : flight_103;
  wire  _GEN_234 = a_first & _a_first_T ? 7'h68 == auto_in_a_bits_source | flight_104 : flight_104;
  wire  _GEN_235 = a_first & _a_first_T ? 7'h69 == auto_in_a_bits_source | flight_105 : flight_105;
  wire  _GEN_236 = a_first & _a_first_T ? 7'h6a == auto_in_a_bits_source | flight_106 : flight_106;
  wire  _GEN_237 = a_first & _a_first_T ? 7'h6b == auto_in_a_bits_source | flight_107 : flight_107;
  wire  _GEN_238 = a_first & _a_first_T ? 7'h6c == auto_in_a_bits_source | flight_108 : flight_108;
  wire  _GEN_239 = a_first & _a_first_T ? 7'h6d == auto_in_a_bits_source | flight_109 : flight_109;
  wire  _GEN_240 = a_first & _a_first_T ? 7'h6e == auto_in_a_bits_source | flight_110 : flight_110;
  wire  _GEN_241 = a_first & _a_first_T ? 7'h6f == auto_in_a_bits_source | flight_111 : flight_111;
  wire  _GEN_242 = a_first & _a_first_T ? 7'h70 == auto_in_a_bits_source | flight_112 : flight_112;
  wire  _GEN_243 = a_first & _a_first_T ? 7'h71 == auto_in_a_bits_source | flight_113 : flight_113;
  wire  _GEN_244 = a_first & _a_first_T ? 7'h72 == auto_in_a_bits_source | flight_114 : flight_114;
  wire  _GEN_245 = a_first & _a_first_T ? 7'h73 == auto_in_a_bits_source | flight_115 : flight_115;
  wire  _GEN_246 = a_first & _a_first_T ? 7'h74 == auto_in_a_bits_source | flight_116 : flight_116;
  wire  _GEN_247 = a_first & _a_first_T ? 7'h75 == auto_in_a_bits_source | flight_117 : flight_117;
  wire  _GEN_248 = a_first & _a_first_T ? 7'h76 == auto_in_a_bits_source | flight_118 : flight_118;
  wire  _GEN_249 = a_first & _a_first_T ? 7'h77 == auto_in_a_bits_source | flight_119 : flight_119;
  wire  _GEN_250 = a_first & _a_first_T ? 7'h78 == auto_in_a_bits_source | flight_120 : flight_120;
  wire  _GEN_251 = a_first & _a_first_T ? 7'h79 == auto_in_a_bits_source | flight_121 : flight_121;
  wire  _GEN_252 = a_first & _a_first_T ? 7'h7a == auto_in_a_bits_source | flight_122 : flight_122;
  wire  _GEN_253 = a_first & _a_first_T ? 7'h7b == auto_in_a_bits_source | flight_123 : flight_123;
  wire  _GEN_254 = a_first & _a_first_T ? 7'h7c == auto_in_a_bits_source | flight_124 : flight_124;
  wire  _GEN_255 = a_first & _a_first_T ? 7'h7d == auto_in_a_bits_source | flight_125 : flight_125;
  wire  _GEN_256 = a_first & _a_first_T ? 7'h7e == auto_in_a_bits_source | flight_126 : flight_126;
  wire  _GEN_257 = a_first & _a_first_T ? 7'h7f == auto_in_a_bits_source | flight_127 : flight_127;
  wire  _stalls_id_T_1 = _a_first_T & stalls_a_sel;
  wire  _stalls_id_T_5 = _a_first_T & stalls_a_sel_1;
  wire  _stalls_id_T_9 = _a_first_T & stalls_a_sel_2;
  wire  _stalls_id_T_13 = _a_first_T & stalls_a_sel_3;
  wire  _stalls_id_T_17 = _a_first_T & stalls_a_sel_4;
  wire  _stalls_id_T_21 = _a_first_T & stalls_a_sel_5;
  wire  _stalls_id_T_25 = _a_first_T & stalls_a_sel_6;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_13 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_param(monitor_io_in_a_bits_param),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_c_ready(monitor_io_in_c_ready),
    .io_in_c_valid(monitor_io_in_c_valid),
    .io_in_c_bits_opcode(monitor_io_in_c_bits_opcode),
    .io_in_c_bits_param(monitor_io_in_c_bits_param),
    .io_in_c_bits_size(monitor_io_in_c_bits_size),
    .io_in_c_bits_source(monitor_io_in_c_bits_source),
    .io_in_c_bits_address(monitor_io_in_c_bits_address),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt),
    .io_in_e_ready(monitor_io_in_e_ready),
    .io_in_e_valid(monitor_io_in_e_valid),
    .io_in_e_bits_sink(monitor_io_in_e_bits_sink)
  );
  assign auto_in_a_ready = auto_out_a_ready & ~stall;
  assign auto_in_c_ready = auto_out_c_ready;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_in_e_ready = auto_out_e_ready;
  assign auto_out_a_valid = auto_in_a_valid & _bundleIn_0_a_ready_T;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_param = auto_in_a_bits_param;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_c_valid = auto_in_c_valid;
  assign auto_out_c_bits_opcode = auto_in_c_bits_opcode;
  assign auto_out_c_bits_param = auto_in_c_bits_param;
  assign auto_out_c_bits_size = auto_in_c_bits_size;
  assign auto_out_c_bits_source = auto_in_c_bits_source;
  assign auto_out_c_bits_address = auto_in_c_bits_address;
  assign auto_out_d_ready = auto_in_d_ready;
  assign auto_out_e_valid = auto_in_e_valid;
  assign auto_out_e_bits_sink = auto_in_e_bits_sink;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = auto_out_a_ready & ~stall;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_param = auto_in_a_bits_param;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_c_ready = auto_out_c_ready;
  assign monitor_io_in_c_valid = auto_in_c_valid;
  assign monitor_io_in_c_bits_opcode = auto_in_c_bits_opcode;
  assign monitor_io_in_c_bits_param = auto_in_c_bits_param;
  assign monitor_io_in_c_bits_size = auto_in_c_bits_size;
  assign monitor_io_in_c_bits_source = auto_in_c_bits_source;
  assign monitor_io_in_c_bits_address = auto_in_c_bits_address;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = auto_out_d_valid;
  assign monitor_io_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign monitor_io_in_d_bits_param = auto_out_d_bits_param;
  assign monitor_io_in_d_bits_size = auto_out_d_bits_size;
  assign monitor_io_in_d_bits_source = auto_out_d_bits_source;
  assign monitor_io_in_d_bits_denied = auto_out_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign monitor_io_in_e_ready = auto_out_e_ready;
  assign monitor_io_in_e_valid = auto_in_e_valid;
  assign monitor_io_in_e_bits_sink = auto_in_e_bits_sink;
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 3'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (reset) begin
      flight_16 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h10 == auto_out_d_bits_source) begin
        flight_16 <= 1'h0;
      end else begin
        flight_16 <= _GEN_146;
      end
    end else begin
      flight_16 <= _GEN_146;
    end
    if (reset) begin
      flight_17 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h11 == auto_out_d_bits_source) begin
        flight_17 <= 1'h0;
      end else begin
        flight_17 <= _GEN_147;
      end
    end else begin
      flight_17 <= _GEN_147;
    end
    if (reset) begin
      flight_18 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h12 == auto_out_d_bits_source) begin
        flight_18 <= 1'h0;
      end else begin
        flight_18 <= _GEN_148;
      end
    end else begin
      flight_18 <= _GEN_148;
    end
    if (reset) begin
      flight_19 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h13 == auto_out_d_bits_source) begin
        flight_19 <= 1'h0;
      end else begin
        flight_19 <= _GEN_149;
      end
    end else begin
      flight_19 <= _GEN_149;
    end
    if (reset) begin
      flight_20 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h14 == auto_out_d_bits_source) begin
        flight_20 <= 1'h0;
      end else begin
        flight_20 <= _GEN_150;
      end
    end else begin
      flight_20 <= _GEN_150;
    end
    if (reset) begin
      flight_21 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h15 == auto_out_d_bits_source) begin
        flight_21 <= 1'h0;
      end else begin
        flight_21 <= _GEN_151;
      end
    end else begin
      flight_21 <= _GEN_151;
    end
    if (reset) begin
      flight_22 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h16 == auto_out_d_bits_source) begin
        flight_22 <= 1'h0;
      end else begin
        flight_22 <= _GEN_152;
      end
    end else begin
      flight_22 <= _GEN_152;
    end
    if (reset) begin
      flight_23 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h17 == auto_out_d_bits_source) begin
        flight_23 <= 1'h0;
      end else begin
        flight_23 <= _GEN_153;
      end
    end else begin
      flight_23 <= _GEN_153;
    end
    if (reset) begin
      flight_24 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h18 == auto_out_d_bits_source) begin
        flight_24 <= 1'h0;
      end else begin
        flight_24 <= _GEN_154;
      end
    end else begin
      flight_24 <= _GEN_154;
    end
    if (reset) begin
      flight_25 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h19 == auto_out_d_bits_source) begin
        flight_25 <= 1'h0;
      end else begin
        flight_25 <= _GEN_155;
      end
    end else begin
      flight_25 <= _GEN_155;
    end
    if (reset) begin
      flight_26 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h1a == auto_out_d_bits_source) begin
        flight_26 <= 1'h0;
      end else begin
        flight_26 <= _GEN_156;
      end
    end else begin
      flight_26 <= _GEN_156;
    end
    if (reset) begin
      flight_27 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h1b == auto_out_d_bits_source) begin
        flight_27 <= 1'h0;
      end else begin
        flight_27 <= _GEN_157;
      end
    end else begin
      flight_27 <= _GEN_157;
    end
    if (reset) begin
      flight_28 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h1c == auto_out_d_bits_source) begin
        flight_28 <= 1'h0;
      end else begin
        flight_28 <= _GEN_158;
      end
    end else begin
      flight_28 <= _GEN_158;
    end
    if (reset) begin
      flight_29 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h1d == auto_out_d_bits_source) begin
        flight_29 <= 1'h0;
      end else begin
        flight_29 <= _GEN_159;
      end
    end else begin
      flight_29 <= _GEN_159;
    end
    if (reset) begin
      flight_30 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h1e == auto_out_d_bits_source) begin
        flight_30 <= 1'h0;
      end else begin
        flight_30 <= _GEN_160;
      end
    end else begin
      flight_30 <= _GEN_160;
    end
    if (reset) begin
      flight_31 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h1f == auto_out_d_bits_source) begin
        flight_31 <= 1'h0;
      end else begin
        flight_31 <= _GEN_161;
      end
    end else begin
      flight_31 <= _GEN_161;
    end
    if (_stalls_id_T_1) begin
      stalls_id <= a_id;
    end
    if (reset) begin
      flight_32 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h20 == auto_out_d_bits_source) begin
        flight_32 <= 1'h0;
      end else begin
        flight_32 <= _GEN_162;
      end
    end else begin
      flight_32 <= _GEN_162;
    end
    if (reset) begin
      flight_33 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h21 == auto_out_d_bits_source) begin
        flight_33 <= 1'h0;
      end else begin
        flight_33 <= _GEN_163;
      end
    end else begin
      flight_33 <= _GEN_163;
    end
    if (reset) begin
      flight_34 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h22 == auto_out_d_bits_source) begin
        flight_34 <= 1'h0;
      end else begin
        flight_34 <= _GEN_164;
      end
    end else begin
      flight_34 <= _GEN_164;
    end
    if (reset) begin
      flight_35 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h23 == auto_out_d_bits_source) begin
        flight_35 <= 1'h0;
      end else begin
        flight_35 <= _GEN_165;
      end
    end else begin
      flight_35 <= _GEN_165;
    end
    if (reset) begin
      flight_36 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h24 == auto_out_d_bits_source) begin
        flight_36 <= 1'h0;
      end else begin
        flight_36 <= _GEN_166;
      end
    end else begin
      flight_36 <= _GEN_166;
    end
    if (reset) begin
      flight_37 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h25 == auto_out_d_bits_source) begin
        flight_37 <= 1'h0;
      end else begin
        flight_37 <= _GEN_167;
      end
    end else begin
      flight_37 <= _GEN_167;
    end
    if (reset) begin
      flight_38 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h26 == auto_out_d_bits_source) begin
        flight_38 <= 1'h0;
      end else begin
        flight_38 <= _GEN_168;
      end
    end else begin
      flight_38 <= _GEN_168;
    end
    if (reset) begin
      flight_39 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h27 == auto_out_d_bits_source) begin
        flight_39 <= 1'h0;
      end else begin
        flight_39 <= _GEN_169;
      end
    end else begin
      flight_39 <= _GEN_169;
    end
    if (reset) begin
      flight_40 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h28 == auto_out_d_bits_source) begin
        flight_40 <= 1'h0;
      end else begin
        flight_40 <= _GEN_170;
      end
    end else begin
      flight_40 <= _GEN_170;
    end
    if (reset) begin
      flight_41 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h29 == auto_out_d_bits_source) begin
        flight_41 <= 1'h0;
      end else begin
        flight_41 <= _GEN_171;
      end
    end else begin
      flight_41 <= _GEN_171;
    end
    if (reset) begin
      flight_42 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h2a == auto_out_d_bits_source) begin
        flight_42 <= 1'h0;
      end else begin
        flight_42 <= _GEN_172;
      end
    end else begin
      flight_42 <= _GEN_172;
    end
    if (reset) begin
      flight_43 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h2b == auto_out_d_bits_source) begin
        flight_43 <= 1'h0;
      end else begin
        flight_43 <= _GEN_173;
      end
    end else begin
      flight_43 <= _GEN_173;
    end
    if (reset) begin
      flight_44 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h2c == auto_out_d_bits_source) begin
        flight_44 <= 1'h0;
      end else begin
        flight_44 <= _GEN_174;
      end
    end else begin
      flight_44 <= _GEN_174;
    end
    if (reset) begin
      flight_45 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h2d == auto_out_d_bits_source) begin
        flight_45 <= 1'h0;
      end else begin
        flight_45 <= _GEN_175;
      end
    end else begin
      flight_45 <= _GEN_175;
    end
    if (reset) begin
      flight_46 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h2e == auto_out_d_bits_source) begin
        flight_46 <= 1'h0;
      end else begin
        flight_46 <= _GEN_176;
      end
    end else begin
      flight_46 <= _GEN_176;
    end
    if (reset) begin
      flight_47 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h2f == auto_out_d_bits_source) begin
        flight_47 <= 1'h0;
      end else begin
        flight_47 <= _GEN_177;
      end
    end else begin
      flight_47 <= _GEN_177;
    end
    if (_stalls_id_T_5) begin
      stalls_id_1 <= a_id;
    end
    if (reset) begin
      flight_48 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h30 == auto_out_d_bits_source) begin
        flight_48 <= 1'h0;
      end else begin
        flight_48 <= _GEN_178;
      end
    end else begin
      flight_48 <= _GEN_178;
    end
    if (reset) begin
      flight_49 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h31 == auto_out_d_bits_source) begin
        flight_49 <= 1'h0;
      end else begin
        flight_49 <= _GEN_179;
      end
    end else begin
      flight_49 <= _GEN_179;
    end
    if (reset) begin
      flight_50 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h32 == auto_out_d_bits_source) begin
        flight_50 <= 1'h0;
      end else begin
        flight_50 <= _GEN_180;
      end
    end else begin
      flight_50 <= _GEN_180;
    end
    if (reset) begin
      flight_51 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h33 == auto_out_d_bits_source) begin
        flight_51 <= 1'h0;
      end else begin
        flight_51 <= _GEN_181;
      end
    end else begin
      flight_51 <= _GEN_181;
    end
    if (reset) begin
      flight_52 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h34 == auto_out_d_bits_source) begin
        flight_52 <= 1'h0;
      end else begin
        flight_52 <= _GEN_182;
      end
    end else begin
      flight_52 <= _GEN_182;
    end
    if (reset) begin
      flight_53 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h35 == auto_out_d_bits_source) begin
        flight_53 <= 1'h0;
      end else begin
        flight_53 <= _GEN_183;
      end
    end else begin
      flight_53 <= _GEN_183;
    end
    if (reset) begin
      flight_54 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h36 == auto_out_d_bits_source) begin
        flight_54 <= 1'h0;
      end else begin
        flight_54 <= _GEN_184;
      end
    end else begin
      flight_54 <= _GEN_184;
    end
    if (reset) begin
      flight_55 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h37 == auto_out_d_bits_source) begin
        flight_55 <= 1'h0;
      end else begin
        flight_55 <= _GEN_185;
      end
    end else begin
      flight_55 <= _GEN_185;
    end
    if (reset) begin
      flight_56 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h38 == auto_out_d_bits_source) begin
        flight_56 <= 1'h0;
      end else begin
        flight_56 <= _GEN_186;
      end
    end else begin
      flight_56 <= _GEN_186;
    end
    if (reset) begin
      flight_57 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h39 == auto_out_d_bits_source) begin
        flight_57 <= 1'h0;
      end else begin
        flight_57 <= _GEN_187;
      end
    end else begin
      flight_57 <= _GEN_187;
    end
    if (reset) begin
      flight_58 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h3a == auto_out_d_bits_source) begin
        flight_58 <= 1'h0;
      end else begin
        flight_58 <= _GEN_188;
      end
    end else begin
      flight_58 <= _GEN_188;
    end
    if (reset) begin
      flight_59 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h3b == auto_out_d_bits_source) begin
        flight_59 <= 1'h0;
      end else begin
        flight_59 <= _GEN_189;
      end
    end else begin
      flight_59 <= _GEN_189;
    end
    if (reset) begin
      flight_60 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h3c == auto_out_d_bits_source) begin
        flight_60 <= 1'h0;
      end else begin
        flight_60 <= _GEN_190;
      end
    end else begin
      flight_60 <= _GEN_190;
    end
    if (reset) begin
      flight_61 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h3d == auto_out_d_bits_source) begin
        flight_61 <= 1'h0;
      end else begin
        flight_61 <= _GEN_191;
      end
    end else begin
      flight_61 <= _GEN_191;
    end
    if (reset) begin
      flight_62 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h3e == auto_out_d_bits_source) begin
        flight_62 <= 1'h0;
      end else begin
        flight_62 <= _GEN_192;
      end
    end else begin
      flight_62 <= _GEN_192;
    end
    if (reset) begin
      flight_63 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h3f == auto_out_d_bits_source) begin
        flight_63 <= 1'h0;
      end else begin
        flight_63 <= _GEN_193;
      end
    end else begin
      flight_63 <= _GEN_193;
    end
    if (_stalls_id_T_9) begin
      stalls_id_2 <= a_id;
    end
    if (reset) begin
      flight_64 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h40 == auto_out_d_bits_source) begin
        flight_64 <= 1'h0;
      end else begin
        flight_64 <= _GEN_194;
      end
    end else begin
      flight_64 <= _GEN_194;
    end
    if (reset) begin
      flight_65 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h41 == auto_out_d_bits_source) begin
        flight_65 <= 1'h0;
      end else begin
        flight_65 <= _GEN_195;
      end
    end else begin
      flight_65 <= _GEN_195;
    end
    if (reset) begin
      flight_66 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h42 == auto_out_d_bits_source) begin
        flight_66 <= 1'h0;
      end else begin
        flight_66 <= _GEN_196;
      end
    end else begin
      flight_66 <= _GEN_196;
    end
    if (reset) begin
      flight_67 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h43 == auto_out_d_bits_source) begin
        flight_67 <= 1'h0;
      end else begin
        flight_67 <= _GEN_197;
      end
    end else begin
      flight_67 <= _GEN_197;
    end
    if (reset) begin
      flight_68 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h44 == auto_out_d_bits_source) begin
        flight_68 <= 1'h0;
      end else begin
        flight_68 <= _GEN_198;
      end
    end else begin
      flight_68 <= _GEN_198;
    end
    if (reset) begin
      flight_69 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h45 == auto_out_d_bits_source) begin
        flight_69 <= 1'h0;
      end else begin
        flight_69 <= _GEN_199;
      end
    end else begin
      flight_69 <= _GEN_199;
    end
    if (reset) begin
      flight_70 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h46 == auto_out_d_bits_source) begin
        flight_70 <= 1'h0;
      end else begin
        flight_70 <= _GEN_200;
      end
    end else begin
      flight_70 <= _GEN_200;
    end
    if (reset) begin
      flight_71 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h47 == auto_out_d_bits_source) begin
        flight_71 <= 1'h0;
      end else begin
        flight_71 <= _GEN_201;
      end
    end else begin
      flight_71 <= _GEN_201;
    end
    if (reset) begin
      flight_72 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h48 == auto_out_d_bits_source) begin
        flight_72 <= 1'h0;
      end else begin
        flight_72 <= _GEN_202;
      end
    end else begin
      flight_72 <= _GEN_202;
    end
    if (reset) begin
      flight_73 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h49 == auto_out_d_bits_source) begin
        flight_73 <= 1'h0;
      end else begin
        flight_73 <= _GEN_203;
      end
    end else begin
      flight_73 <= _GEN_203;
    end
    if (reset) begin
      flight_74 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h4a == auto_out_d_bits_source) begin
        flight_74 <= 1'h0;
      end else begin
        flight_74 <= _GEN_204;
      end
    end else begin
      flight_74 <= _GEN_204;
    end
    if (reset) begin
      flight_75 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h4b == auto_out_d_bits_source) begin
        flight_75 <= 1'h0;
      end else begin
        flight_75 <= _GEN_205;
      end
    end else begin
      flight_75 <= _GEN_205;
    end
    if (reset) begin
      flight_76 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h4c == auto_out_d_bits_source) begin
        flight_76 <= 1'h0;
      end else begin
        flight_76 <= _GEN_206;
      end
    end else begin
      flight_76 <= _GEN_206;
    end
    if (reset) begin
      flight_77 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h4d == auto_out_d_bits_source) begin
        flight_77 <= 1'h0;
      end else begin
        flight_77 <= _GEN_207;
      end
    end else begin
      flight_77 <= _GEN_207;
    end
    if (reset) begin
      flight_78 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h4e == auto_out_d_bits_source) begin
        flight_78 <= 1'h0;
      end else begin
        flight_78 <= _GEN_208;
      end
    end else begin
      flight_78 <= _GEN_208;
    end
    if (reset) begin
      flight_79 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h4f == auto_out_d_bits_source) begin
        flight_79 <= 1'h0;
      end else begin
        flight_79 <= _GEN_209;
      end
    end else begin
      flight_79 <= _GEN_209;
    end
    if (_stalls_id_T_13) begin
      stalls_id_3 <= a_id;
    end
    if (reset) begin
      flight_80 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h50 == auto_out_d_bits_source) begin
        flight_80 <= 1'h0;
      end else begin
        flight_80 <= _GEN_210;
      end
    end else begin
      flight_80 <= _GEN_210;
    end
    if (reset) begin
      flight_81 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h51 == auto_out_d_bits_source) begin
        flight_81 <= 1'h0;
      end else begin
        flight_81 <= _GEN_211;
      end
    end else begin
      flight_81 <= _GEN_211;
    end
    if (reset) begin
      flight_82 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h52 == auto_out_d_bits_source) begin
        flight_82 <= 1'h0;
      end else begin
        flight_82 <= _GEN_212;
      end
    end else begin
      flight_82 <= _GEN_212;
    end
    if (reset) begin
      flight_83 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h53 == auto_out_d_bits_source) begin
        flight_83 <= 1'h0;
      end else begin
        flight_83 <= _GEN_213;
      end
    end else begin
      flight_83 <= _GEN_213;
    end
    if (reset) begin
      flight_84 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h54 == auto_out_d_bits_source) begin
        flight_84 <= 1'h0;
      end else begin
        flight_84 <= _GEN_214;
      end
    end else begin
      flight_84 <= _GEN_214;
    end
    if (reset) begin
      flight_85 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h55 == auto_out_d_bits_source) begin
        flight_85 <= 1'h0;
      end else begin
        flight_85 <= _GEN_215;
      end
    end else begin
      flight_85 <= _GEN_215;
    end
    if (reset) begin
      flight_86 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h56 == auto_out_d_bits_source) begin
        flight_86 <= 1'h0;
      end else begin
        flight_86 <= _GEN_216;
      end
    end else begin
      flight_86 <= _GEN_216;
    end
    if (reset) begin
      flight_87 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h57 == auto_out_d_bits_source) begin
        flight_87 <= 1'h0;
      end else begin
        flight_87 <= _GEN_217;
      end
    end else begin
      flight_87 <= _GEN_217;
    end
    if (reset) begin
      flight_88 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h58 == auto_out_d_bits_source) begin
        flight_88 <= 1'h0;
      end else begin
        flight_88 <= _GEN_218;
      end
    end else begin
      flight_88 <= _GEN_218;
    end
    if (reset) begin
      flight_89 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h59 == auto_out_d_bits_source) begin
        flight_89 <= 1'h0;
      end else begin
        flight_89 <= _GEN_219;
      end
    end else begin
      flight_89 <= _GEN_219;
    end
    if (reset) begin
      flight_90 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h5a == auto_out_d_bits_source) begin
        flight_90 <= 1'h0;
      end else begin
        flight_90 <= _GEN_220;
      end
    end else begin
      flight_90 <= _GEN_220;
    end
    if (reset) begin
      flight_91 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h5b == auto_out_d_bits_source) begin
        flight_91 <= 1'h0;
      end else begin
        flight_91 <= _GEN_221;
      end
    end else begin
      flight_91 <= _GEN_221;
    end
    if (reset) begin
      flight_92 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h5c == auto_out_d_bits_source) begin
        flight_92 <= 1'h0;
      end else begin
        flight_92 <= _GEN_222;
      end
    end else begin
      flight_92 <= _GEN_222;
    end
    if (reset) begin
      flight_93 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h5d == auto_out_d_bits_source) begin
        flight_93 <= 1'h0;
      end else begin
        flight_93 <= _GEN_223;
      end
    end else begin
      flight_93 <= _GEN_223;
    end
    if (reset) begin
      flight_94 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h5e == auto_out_d_bits_source) begin
        flight_94 <= 1'h0;
      end else begin
        flight_94 <= _GEN_224;
      end
    end else begin
      flight_94 <= _GEN_224;
    end
    if (reset) begin
      flight_95 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h5f == auto_out_d_bits_source) begin
        flight_95 <= 1'h0;
      end else begin
        flight_95 <= _GEN_225;
      end
    end else begin
      flight_95 <= _GEN_225;
    end
    if (_stalls_id_T_17) begin
      stalls_id_4 <= a_id;
    end
    if (reset) begin
      flight_96 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h60 == auto_out_d_bits_source) begin
        flight_96 <= 1'h0;
      end else begin
        flight_96 <= _GEN_226;
      end
    end else begin
      flight_96 <= _GEN_226;
    end
    if (reset) begin
      flight_97 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h61 == auto_out_d_bits_source) begin
        flight_97 <= 1'h0;
      end else begin
        flight_97 <= _GEN_227;
      end
    end else begin
      flight_97 <= _GEN_227;
    end
    if (reset) begin
      flight_98 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h62 == auto_out_d_bits_source) begin
        flight_98 <= 1'h0;
      end else begin
        flight_98 <= _GEN_228;
      end
    end else begin
      flight_98 <= _GEN_228;
    end
    if (reset) begin
      flight_99 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h63 == auto_out_d_bits_source) begin
        flight_99 <= 1'h0;
      end else begin
        flight_99 <= _GEN_229;
      end
    end else begin
      flight_99 <= _GEN_229;
    end
    if (reset) begin
      flight_100 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h64 == auto_out_d_bits_source) begin
        flight_100 <= 1'h0;
      end else begin
        flight_100 <= _GEN_230;
      end
    end else begin
      flight_100 <= _GEN_230;
    end
    if (reset) begin
      flight_101 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h65 == auto_out_d_bits_source) begin
        flight_101 <= 1'h0;
      end else begin
        flight_101 <= _GEN_231;
      end
    end else begin
      flight_101 <= _GEN_231;
    end
    if (reset) begin
      flight_102 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h66 == auto_out_d_bits_source) begin
        flight_102 <= 1'h0;
      end else begin
        flight_102 <= _GEN_232;
      end
    end else begin
      flight_102 <= _GEN_232;
    end
    if (reset) begin
      flight_103 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h67 == auto_out_d_bits_source) begin
        flight_103 <= 1'h0;
      end else begin
        flight_103 <= _GEN_233;
      end
    end else begin
      flight_103 <= _GEN_233;
    end
    if (reset) begin
      flight_104 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h68 == auto_out_d_bits_source) begin
        flight_104 <= 1'h0;
      end else begin
        flight_104 <= _GEN_234;
      end
    end else begin
      flight_104 <= _GEN_234;
    end
    if (reset) begin
      flight_105 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h69 == auto_out_d_bits_source) begin
        flight_105 <= 1'h0;
      end else begin
        flight_105 <= _GEN_235;
      end
    end else begin
      flight_105 <= _GEN_235;
    end
    if (reset) begin
      flight_106 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h6a == auto_out_d_bits_source) begin
        flight_106 <= 1'h0;
      end else begin
        flight_106 <= _GEN_236;
      end
    end else begin
      flight_106 <= _GEN_236;
    end
    if (reset) begin
      flight_107 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h6b == auto_out_d_bits_source) begin
        flight_107 <= 1'h0;
      end else begin
        flight_107 <= _GEN_237;
      end
    end else begin
      flight_107 <= _GEN_237;
    end
    if (reset) begin
      flight_108 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h6c == auto_out_d_bits_source) begin
        flight_108 <= 1'h0;
      end else begin
        flight_108 <= _GEN_238;
      end
    end else begin
      flight_108 <= _GEN_238;
    end
    if (reset) begin
      flight_109 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h6d == auto_out_d_bits_source) begin
        flight_109 <= 1'h0;
      end else begin
        flight_109 <= _GEN_239;
      end
    end else begin
      flight_109 <= _GEN_239;
    end
    if (reset) begin
      flight_110 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h6e == auto_out_d_bits_source) begin
        flight_110 <= 1'h0;
      end else begin
        flight_110 <= _GEN_240;
      end
    end else begin
      flight_110 <= _GEN_240;
    end
    if (reset) begin
      flight_111 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h6f == auto_out_d_bits_source) begin
        flight_111 <= 1'h0;
      end else begin
        flight_111 <= _GEN_241;
      end
    end else begin
      flight_111 <= _GEN_241;
    end
    if (_stalls_id_T_21) begin
      stalls_id_5 <= a_id;
    end
    if (reset) begin
      flight_112 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h70 == auto_out_d_bits_source) begin
        flight_112 <= 1'h0;
      end else begin
        flight_112 <= _GEN_242;
      end
    end else begin
      flight_112 <= _GEN_242;
    end
    if (reset) begin
      flight_113 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h71 == auto_out_d_bits_source) begin
        flight_113 <= 1'h0;
      end else begin
        flight_113 <= _GEN_243;
      end
    end else begin
      flight_113 <= _GEN_243;
    end
    if (reset) begin
      flight_114 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h72 == auto_out_d_bits_source) begin
        flight_114 <= 1'h0;
      end else begin
        flight_114 <= _GEN_244;
      end
    end else begin
      flight_114 <= _GEN_244;
    end
    if (reset) begin
      flight_115 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h73 == auto_out_d_bits_source) begin
        flight_115 <= 1'h0;
      end else begin
        flight_115 <= _GEN_245;
      end
    end else begin
      flight_115 <= _GEN_245;
    end
    if (reset) begin
      flight_116 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h74 == auto_out_d_bits_source) begin
        flight_116 <= 1'h0;
      end else begin
        flight_116 <= _GEN_246;
      end
    end else begin
      flight_116 <= _GEN_246;
    end
    if (reset) begin
      flight_117 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h75 == auto_out_d_bits_source) begin
        flight_117 <= 1'h0;
      end else begin
        flight_117 <= _GEN_247;
      end
    end else begin
      flight_117 <= _GEN_247;
    end
    if (reset) begin
      flight_118 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h76 == auto_out_d_bits_source) begin
        flight_118 <= 1'h0;
      end else begin
        flight_118 <= _GEN_248;
      end
    end else begin
      flight_118 <= _GEN_248;
    end
    if (reset) begin
      flight_119 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h77 == auto_out_d_bits_source) begin
        flight_119 <= 1'h0;
      end else begin
        flight_119 <= _GEN_249;
      end
    end else begin
      flight_119 <= _GEN_249;
    end
    if (reset) begin
      flight_120 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h78 == auto_out_d_bits_source) begin
        flight_120 <= 1'h0;
      end else begin
        flight_120 <= _GEN_250;
      end
    end else begin
      flight_120 <= _GEN_250;
    end
    if (reset) begin
      flight_121 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h79 == auto_out_d_bits_source) begin
        flight_121 <= 1'h0;
      end else begin
        flight_121 <= _GEN_251;
      end
    end else begin
      flight_121 <= _GEN_251;
    end
    if (reset) begin
      flight_122 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h7a == auto_out_d_bits_source) begin
        flight_122 <= 1'h0;
      end else begin
        flight_122 <= _GEN_252;
      end
    end else begin
      flight_122 <= _GEN_252;
    end
    if (reset) begin
      flight_123 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h7b == auto_out_d_bits_source) begin
        flight_123 <= 1'h0;
      end else begin
        flight_123 <= _GEN_253;
      end
    end else begin
      flight_123 <= _GEN_253;
    end
    if (reset) begin
      flight_124 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h7c == auto_out_d_bits_source) begin
        flight_124 <= 1'h0;
      end else begin
        flight_124 <= _GEN_254;
      end
    end else begin
      flight_124 <= _GEN_254;
    end
    if (reset) begin
      flight_125 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h7d == auto_out_d_bits_source) begin
        flight_125 <= 1'h0;
      end else begin
        flight_125 <= _GEN_255;
      end
    end else begin
      flight_125 <= _GEN_255;
    end
    if (reset) begin
      flight_126 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h7e == auto_out_d_bits_source) begin
        flight_126 <= 1'h0;
      end else begin
        flight_126 <= _GEN_256;
      end
    end else begin
      flight_126 <= _GEN_256;
    end
    if (reset) begin
      flight_127 <= 1'h0;
    end else if (d_first & _d_first_T) begin
      if (7'h7f == auto_out_d_bits_source) begin
        flight_127 <= 1'h0;
      end else begin
        flight_127 <= _GEN_257;
      end
    end else begin
      flight_127 <= _GEN_257;
    end
    if (_stalls_id_T_25) begin
      stalls_id_6 <= a_id;
    end
    if (reset) begin
      d_first_counter <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 3'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  flight_16 = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  flight_17 = _RAND_2[0:0];
  _RAND_3 = {1{`RANDOM}};
  flight_18 = _RAND_3[0:0];
  _RAND_4 = {1{`RANDOM}};
  flight_19 = _RAND_4[0:0];
  _RAND_5 = {1{`RANDOM}};
  flight_20 = _RAND_5[0:0];
  _RAND_6 = {1{`RANDOM}};
  flight_21 = _RAND_6[0:0];
  _RAND_7 = {1{`RANDOM}};
  flight_22 = _RAND_7[0:0];
  _RAND_8 = {1{`RANDOM}};
  flight_23 = _RAND_8[0:0];
  _RAND_9 = {1{`RANDOM}};
  flight_24 = _RAND_9[0:0];
  _RAND_10 = {1{`RANDOM}};
  flight_25 = _RAND_10[0:0];
  _RAND_11 = {1{`RANDOM}};
  flight_26 = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  flight_27 = _RAND_12[0:0];
  _RAND_13 = {1{`RANDOM}};
  flight_28 = _RAND_13[0:0];
  _RAND_14 = {1{`RANDOM}};
  flight_29 = _RAND_14[0:0];
  _RAND_15 = {1{`RANDOM}};
  flight_30 = _RAND_15[0:0];
  _RAND_16 = {1{`RANDOM}};
  flight_31 = _RAND_16[0:0];
  _RAND_17 = {1{`RANDOM}};
  stalls_id = _RAND_17[1:0];
  _RAND_18 = {1{`RANDOM}};
  flight_32 = _RAND_18[0:0];
  _RAND_19 = {1{`RANDOM}};
  flight_33 = _RAND_19[0:0];
  _RAND_20 = {1{`RANDOM}};
  flight_34 = _RAND_20[0:0];
  _RAND_21 = {1{`RANDOM}};
  flight_35 = _RAND_21[0:0];
  _RAND_22 = {1{`RANDOM}};
  flight_36 = _RAND_22[0:0];
  _RAND_23 = {1{`RANDOM}};
  flight_37 = _RAND_23[0:0];
  _RAND_24 = {1{`RANDOM}};
  flight_38 = _RAND_24[0:0];
  _RAND_25 = {1{`RANDOM}};
  flight_39 = _RAND_25[0:0];
  _RAND_26 = {1{`RANDOM}};
  flight_40 = _RAND_26[0:0];
  _RAND_27 = {1{`RANDOM}};
  flight_41 = _RAND_27[0:0];
  _RAND_28 = {1{`RANDOM}};
  flight_42 = _RAND_28[0:0];
  _RAND_29 = {1{`RANDOM}};
  flight_43 = _RAND_29[0:0];
  _RAND_30 = {1{`RANDOM}};
  flight_44 = _RAND_30[0:0];
  _RAND_31 = {1{`RANDOM}};
  flight_45 = _RAND_31[0:0];
  _RAND_32 = {1{`RANDOM}};
  flight_46 = _RAND_32[0:0];
  _RAND_33 = {1{`RANDOM}};
  flight_47 = _RAND_33[0:0];
  _RAND_34 = {1{`RANDOM}};
  stalls_id_1 = _RAND_34[1:0];
  _RAND_35 = {1{`RANDOM}};
  flight_48 = _RAND_35[0:0];
  _RAND_36 = {1{`RANDOM}};
  flight_49 = _RAND_36[0:0];
  _RAND_37 = {1{`RANDOM}};
  flight_50 = _RAND_37[0:0];
  _RAND_38 = {1{`RANDOM}};
  flight_51 = _RAND_38[0:0];
  _RAND_39 = {1{`RANDOM}};
  flight_52 = _RAND_39[0:0];
  _RAND_40 = {1{`RANDOM}};
  flight_53 = _RAND_40[0:0];
  _RAND_41 = {1{`RANDOM}};
  flight_54 = _RAND_41[0:0];
  _RAND_42 = {1{`RANDOM}};
  flight_55 = _RAND_42[0:0];
  _RAND_43 = {1{`RANDOM}};
  flight_56 = _RAND_43[0:0];
  _RAND_44 = {1{`RANDOM}};
  flight_57 = _RAND_44[0:0];
  _RAND_45 = {1{`RANDOM}};
  flight_58 = _RAND_45[0:0];
  _RAND_46 = {1{`RANDOM}};
  flight_59 = _RAND_46[0:0];
  _RAND_47 = {1{`RANDOM}};
  flight_60 = _RAND_47[0:0];
  _RAND_48 = {1{`RANDOM}};
  flight_61 = _RAND_48[0:0];
  _RAND_49 = {1{`RANDOM}};
  flight_62 = _RAND_49[0:0];
  _RAND_50 = {1{`RANDOM}};
  flight_63 = _RAND_50[0:0];
  _RAND_51 = {1{`RANDOM}};
  stalls_id_2 = _RAND_51[1:0];
  _RAND_52 = {1{`RANDOM}};
  flight_64 = _RAND_52[0:0];
  _RAND_53 = {1{`RANDOM}};
  flight_65 = _RAND_53[0:0];
  _RAND_54 = {1{`RANDOM}};
  flight_66 = _RAND_54[0:0];
  _RAND_55 = {1{`RANDOM}};
  flight_67 = _RAND_55[0:0];
  _RAND_56 = {1{`RANDOM}};
  flight_68 = _RAND_56[0:0];
  _RAND_57 = {1{`RANDOM}};
  flight_69 = _RAND_57[0:0];
  _RAND_58 = {1{`RANDOM}};
  flight_70 = _RAND_58[0:0];
  _RAND_59 = {1{`RANDOM}};
  flight_71 = _RAND_59[0:0];
  _RAND_60 = {1{`RANDOM}};
  flight_72 = _RAND_60[0:0];
  _RAND_61 = {1{`RANDOM}};
  flight_73 = _RAND_61[0:0];
  _RAND_62 = {1{`RANDOM}};
  flight_74 = _RAND_62[0:0];
  _RAND_63 = {1{`RANDOM}};
  flight_75 = _RAND_63[0:0];
  _RAND_64 = {1{`RANDOM}};
  flight_76 = _RAND_64[0:0];
  _RAND_65 = {1{`RANDOM}};
  flight_77 = _RAND_65[0:0];
  _RAND_66 = {1{`RANDOM}};
  flight_78 = _RAND_66[0:0];
  _RAND_67 = {1{`RANDOM}};
  flight_79 = _RAND_67[0:0];
  _RAND_68 = {1{`RANDOM}};
  stalls_id_3 = _RAND_68[1:0];
  _RAND_69 = {1{`RANDOM}};
  flight_80 = _RAND_69[0:0];
  _RAND_70 = {1{`RANDOM}};
  flight_81 = _RAND_70[0:0];
  _RAND_71 = {1{`RANDOM}};
  flight_82 = _RAND_71[0:0];
  _RAND_72 = {1{`RANDOM}};
  flight_83 = _RAND_72[0:0];
  _RAND_73 = {1{`RANDOM}};
  flight_84 = _RAND_73[0:0];
  _RAND_74 = {1{`RANDOM}};
  flight_85 = _RAND_74[0:0];
  _RAND_75 = {1{`RANDOM}};
  flight_86 = _RAND_75[0:0];
  _RAND_76 = {1{`RANDOM}};
  flight_87 = _RAND_76[0:0];
  _RAND_77 = {1{`RANDOM}};
  flight_88 = _RAND_77[0:0];
  _RAND_78 = {1{`RANDOM}};
  flight_89 = _RAND_78[0:0];
  _RAND_79 = {1{`RANDOM}};
  flight_90 = _RAND_79[0:0];
  _RAND_80 = {1{`RANDOM}};
  flight_91 = _RAND_80[0:0];
  _RAND_81 = {1{`RANDOM}};
  flight_92 = _RAND_81[0:0];
  _RAND_82 = {1{`RANDOM}};
  flight_93 = _RAND_82[0:0];
  _RAND_83 = {1{`RANDOM}};
  flight_94 = _RAND_83[0:0];
  _RAND_84 = {1{`RANDOM}};
  flight_95 = _RAND_84[0:0];
  _RAND_85 = {1{`RANDOM}};
  stalls_id_4 = _RAND_85[1:0];
  _RAND_86 = {1{`RANDOM}};
  flight_96 = _RAND_86[0:0];
  _RAND_87 = {1{`RANDOM}};
  flight_97 = _RAND_87[0:0];
  _RAND_88 = {1{`RANDOM}};
  flight_98 = _RAND_88[0:0];
  _RAND_89 = {1{`RANDOM}};
  flight_99 = _RAND_89[0:0];
  _RAND_90 = {1{`RANDOM}};
  flight_100 = _RAND_90[0:0];
  _RAND_91 = {1{`RANDOM}};
  flight_101 = _RAND_91[0:0];
  _RAND_92 = {1{`RANDOM}};
  flight_102 = _RAND_92[0:0];
  _RAND_93 = {1{`RANDOM}};
  flight_103 = _RAND_93[0:0];
  _RAND_94 = {1{`RANDOM}};
  flight_104 = _RAND_94[0:0];
  _RAND_95 = {1{`RANDOM}};
  flight_105 = _RAND_95[0:0];
  _RAND_96 = {1{`RANDOM}};
  flight_106 = _RAND_96[0:0];
  _RAND_97 = {1{`RANDOM}};
  flight_107 = _RAND_97[0:0];
  _RAND_98 = {1{`RANDOM}};
  flight_108 = _RAND_98[0:0];
  _RAND_99 = {1{`RANDOM}};
  flight_109 = _RAND_99[0:0];
  _RAND_100 = {1{`RANDOM}};
  flight_110 = _RAND_100[0:0];
  _RAND_101 = {1{`RANDOM}};
  flight_111 = _RAND_101[0:0];
  _RAND_102 = {1{`RANDOM}};
  stalls_id_5 = _RAND_102[1:0];
  _RAND_103 = {1{`RANDOM}};
  flight_112 = _RAND_103[0:0];
  _RAND_104 = {1{`RANDOM}};
  flight_113 = _RAND_104[0:0];
  _RAND_105 = {1{`RANDOM}};
  flight_114 = _RAND_105[0:0];
  _RAND_106 = {1{`RANDOM}};
  flight_115 = _RAND_106[0:0];
  _RAND_107 = {1{`RANDOM}};
  flight_116 = _RAND_107[0:0];
  _RAND_108 = {1{`RANDOM}};
  flight_117 = _RAND_108[0:0];
  _RAND_109 = {1{`RANDOM}};
  flight_118 = _RAND_109[0:0];
  _RAND_110 = {1{`RANDOM}};
  flight_119 = _RAND_110[0:0];
  _RAND_111 = {1{`RANDOM}};
  flight_120 = _RAND_111[0:0];
  _RAND_112 = {1{`RANDOM}};
  flight_121 = _RAND_112[0:0];
  _RAND_113 = {1{`RANDOM}};
  flight_122 = _RAND_113[0:0];
  _RAND_114 = {1{`RANDOM}};
  flight_123 = _RAND_114[0:0];
  _RAND_115 = {1{`RANDOM}};
  flight_124 = _RAND_115[0:0];
  _RAND_116 = {1{`RANDOM}};
  flight_125 = _RAND_116[0:0];
  _RAND_117 = {1{`RANDOM}};
  flight_126 = _RAND_117[0:0];
  _RAND_118 = {1{`RANDOM}};
  flight_127 = _RAND_118[0:0];
  _RAND_119 = {1{`RANDOM}};
  stalls_id_6 = _RAND_119[1:0];
  _RAND_120 = {1{`RANDOM}};
  d_first_counter = _RAND_120[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_14(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_param,
  input  [2:0]  io_in_a_bits_size,
  input  [5:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input         io_in_c_ready,
  input         io_in_c_valid,
  input  [2:0]  io_in_c_bits_opcode,
  input  [2:0]  io_in_c_bits_param,
  input  [2:0]  io_in_c_bits_size,
  input  [5:0]  io_in_c_bits_source,
  input  [31:0] io_in_c_bits_address,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [5:0]  io_in_d_bits_source,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt,
  input         io_in_e_ready,
  input         io_in_e_valid,
  input         io_in_e_bits_sink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [63:0] _RAND_18;
  reg [255:0] _RAND_19;
  reg [255:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [63:0] _RAND_24;
  reg [255:0] _RAND_25;
  reg [31:0] _RAND_26;
  reg [31:0] _RAND_27;
  reg [31:0] _RAND_28;
  reg [31:0] _RAND_29;
  reg [31:0] _RAND_30;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = io_in_a_bits_source[5:3] == 3'h0;
  wire  _source_ok_T_7 = io_in_a_bits_source[5:3] == 3'h1;
  wire  _source_ok_T_13 = io_in_a_bits_source[5:3] == 3'h2;
  wire  _source_ok_T_19 = io_in_a_bits_source[5:3] == 3'h3;
  wire  _source_ok_T_25 = io_in_a_bits_source[5:3] == 3'h4;
  wire  _source_ok_T_31 = io_in_a_bits_source[5:3] == 3'h5;
  wire  _source_ok_T_37 = io_in_a_bits_source[5:3] == 3'h6;
  wire  _source_ok_T_43 = io_in_a_bits_source[5:3] == 3'h7;
  wire  source_ok = _source_ok_T_1 | _source_ok_T_7 | _source_ok_T_13 | _source_ok_T_19 | _source_ok_T_25 |
    _source_ok_T_31 | _source_ok_T_37 | _source_ok_T_43;
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_86 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_86;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire [1:0] mask_sizeOH_shiftAmount = io_in_a_bits_size[1:0];
  wire [3:0] _mask_sizeOH_T_1 = 4'h1 << mask_sizeOH_shiftAmount;
  wire [2:0] mask_sizeOH = _mask_sizeOH_T_1[2:0] | 3'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h3;
  wire  mask_size = mask_sizeOH[2];
  wire  mask_bit = io_in_a_bits_address[2];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[1];
  wire  mask_bit_1 = io_in_a_bits_address[1];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire  mask_size_2 = mask_sizeOH[0];
  wire  mask_bit_2 = io_in_a_bits_address[0];
  wire  mask_nbit_2 = ~mask_bit_2;
  wire  mask_eq_6 = mask_eq_2 & mask_nbit_2;
  wire  mask_lo_lo_lo = mask_acc_2 | mask_size_2 & mask_eq_6;
  wire  mask_eq_7 = mask_eq_2 & mask_bit_2;
  wire  mask_lo_lo_hi = mask_acc_2 | mask_size_2 & mask_eq_7;
  wire  mask_eq_8 = mask_eq_3 & mask_nbit_2;
  wire  mask_lo_hi_lo = mask_acc_3 | mask_size_2 & mask_eq_8;
  wire  mask_eq_9 = mask_eq_3 & mask_bit_2;
  wire  mask_lo_hi_hi = mask_acc_3 | mask_size_2 & mask_eq_9;
  wire  mask_eq_10 = mask_eq_4 & mask_nbit_2;
  wire  mask_hi_lo_lo = mask_acc_4 | mask_size_2 & mask_eq_10;
  wire  mask_eq_11 = mask_eq_4 & mask_bit_2;
  wire  mask_hi_lo_hi = mask_acc_4 | mask_size_2 & mask_eq_11;
  wire  mask_eq_12 = mask_eq_5 & mask_nbit_2;
  wire  mask_hi_hi_lo = mask_acc_5 | mask_size_2 & mask_eq_12;
  wire  mask_eq_13 = mask_eq_5 & mask_bit_2;
  wire  mask_hi_hi_hi = mask_acc_5 | mask_size_2 & mask_eq_13;
  wire [7:0] mask = {mask_hi_hi_hi,mask_hi_hi_lo,mask_hi_lo_hi,mask_hi_lo_lo,mask_lo_hi_hi,mask_lo_hi_lo,mask_lo_lo_hi,
    mask_lo_lo_lo};
  wire  _T_118 = io_in_a_bits_opcode == 3'h6;
  wire [31:0] _T_180 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_181 = {1'b0,$signed(_T_180)};
  wire [32:0] _T_183 = $signed(_T_181) & -33'sh10000000;
  wire  _T_184 = $signed(_T_183) == 33'sh0;
  wire [31:0] _T_185 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_186 = {1'b0,$signed(_T_185)};
  wire [32:0] _T_188 = $signed(_T_186) & -33'sh20000000;
  wire  _T_189 = $signed(_T_188) == 33'sh0;
  wire [31:0] _T_190 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_191 = {1'b0,$signed(_T_190)};
  wire [32:0] _T_193 = $signed(_T_191) & -33'sh40000000;
  wire  _T_194 = $signed(_T_193) == 33'sh0;
  wire [31:0] _T_195 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_196 = {1'b0,$signed(_T_195)};
  wire [32:0] _T_198 = $signed(_T_196) & -33'sh40000000;
  wire  _T_199 = $signed(_T_198) == 33'sh0;
  wire [31:0] _T_200 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_201 = {1'b0,$signed(_T_200)};
  wire [32:0] _T_203 = $signed(_T_201) & -33'sh20000000;
  wire  _T_204 = $signed(_T_203) == 33'sh0;
  wire  _T_211 = io_in_a_bits_size <= 3'h6;
  wire [31:0] _T_214 = io_in_a_bits_address ^ 32'h1000;
  wire [32:0] _T_215 = {1'b0,$signed(_T_214)};
  wire [32:0] _T_217 = $signed(_T_215) & -33'sh1000;
  wire  _T_218 = $signed(_T_217) == 33'sh0;
  wire  _T_219 = _T_211 & _T_218;
  wire  _T_222 = source_ok & _T_219;
  wire  _T_277 = _source_ok_T_1 & _T_211;
  wire  _T_330 = _T_218 | _T_184 | _T_189 | _T_194 | _T_199 | _T_204;
  wire  _T_333 = _T_277 & _T_330;
  wire  _T_347 = io_in_a_bits_param <= 3'h2;
  wire [7:0] _T_351 = ~io_in_a_bits_mask;
  wire  _T_352 = _T_351 == 8'h0;
  wire  _T_360 = io_in_a_bits_opcode == 3'h7;
  wire  _T_593 = io_in_a_bits_param != 3'h0;
  wire  _T_606 = io_in_a_bits_opcode == 3'h4;
  wire  _T_709 = _T_211 & _T_330;
  wire  _T_720 = io_in_a_bits_param == 3'h0;
  wire  _T_724 = io_in_a_bits_mask == mask;
  wire  _T_732 = io_in_a_bits_opcode == 3'h0;
  wire  _T_834 = source_ok & _T_709;
  wire  _T_852 = io_in_a_bits_opcode == 3'h1;
  wire [7:0] _T_968 = ~mask;
  wire [7:0] _T_969 = io_in_a_bits_mask & _T_968;
  wire  _T_970 = _T_969 == 8'h0;
  wire  _T_974 = io_in_a_bits_opcode == 3'h2;
  wire  _T_1036 = io_in_a_bits_size <= 3'h3;
  wire  _T_1074 = _T_1036 & _T_330;
  wire  _T_1076 = source_ok & _T_1074;
  wire  _T_1086 = io_in_a_bits_param <= 3'h4;
  wire  _T_1094 = io_in_a_bits_opcode == 3'h3;
  wire  _T_1206 = io_in_a_bits_param <= 3'h3;
  wire  _T_1214 = io_in_a_bits_opcode == 3'h5;
  wire  _T_1326 = io_in_a_bits_param <= 3'h1;
  wire  _T_1338 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_55 = io_in_d_bits_source[5:3] == 3'h0;
  wire  _source_ok_T_61 = io_in_d_bits_source[5:3] == 3'h1;
  wire  _source_ok_T_67 = io_in_d_bits_source[5:3] == 3'h2;
  wire  _source_ok_T_73 = io_in_d_bits_source[5:3] == 3'h3;
  wire  _source_ok_T_79 = io_in_d_bits_source[5:3] == 3'h4;
  wire  _source_ok_T_85 = io_in_d_bits_source[5:3] == 3'h5;
  wire  _source_ok_T_91 = io_in_d_bits_source[5:3] == 3'h6;
  wire  _source_ok_T_97 = io_in_d_bits_source[5:3] == 3'h7;
  wire  source_ok_1 = _source_ok_T_55 | _source_ok_T_61 | _source_ok_T_67 | _source_ok_T_73 | _source_ok_T_79 |
    _source_ok_T_85 | _source_ok_T_91 | _source_ok_T_97;
  wire  _T_1342 = io_in_d_bits_opcode == 3'h6;
  wire  _T_1346 = io_in_d_bits_size >= 3'h3;
  wire  _T_1350 = io_in_d_bits_param == 2'h0;
  wire  _T_1354 = ~io_in_d_bits_corrupt;
  wire  _T_1358 = ~io_in_d_bits_denied;
  wire  _T_1362 = io_in_d_bits_opcode == 3'h4;
  wire  _T_1373 = io_in_d_bits_param <= 2'h2;
  wire  _T_1377 = io_in_d_bits_param != 2'h2;
  wire  _T_1390 = io_in_d_bits_opcode == 3'h5;
  wire  _T_1410 = _T_1358 | io_in_d_bits_corrupt;
  wire  _T_1419 = io_in_d_bits_opcode == 3'h0;
  wire  _T_1436 = io_in_d_bits_opcode == 3'h1;
  wire  _T_1454 = io_in_d_bits_opcode == 3'h2;
  wire  _source_ok_T_109 = io_in_c_bits_source[5:3] == 3'h0;
  wire  _source_ok_T_115 = io_in_c_bits_source[5:3] == 3'h1;
  wire  _source_ok_T_121 = io_in_c_bits_source[5:3] == 3'h2;
  wire  _source_ok_T_127 = io_in_c_bits_source[5:3] == 3'h3;
  wire  _source_ok_T_133 = io_in_c_bits_source[5:3] == 3'h4;
  wire  _source_ok_T_139 = io_in_c_bits_source[5:3] == 3'h5;
  wire  _source_ok_T_145 = io_in_c_bits_source[5:3] == 3'h6;
  wire  _source_ok_T_151 = io_in_c_bits_source[5:3] == 3'h7;
  wire  source_ok_2 = _source_ok_T_109 | _source_ok_T_115 | _source_ok_T_121 | _source_ok_T_127 | _source_ok_T_133 |
    _source_ok_T_139 | _source_ok_T_145 | _source_ok_T_151;
  wire [12:0] _is_aligned_mask_T_7 = 13'h3f << io_in_c_bits_size;
  wire [5:0] is_aligned_mask_2 = ~_is_aligned_mask_T_7[5:0];
  wire [31:0] _GEN_87 = {{26'd0}, is_aligned_mask_2};
  wire [31:0] _is_aligned_T_2 = io_in_c_bits_address & _GEN_87;
  wire  is_aligned_2 = _is_aligned_T_2 == 32'h0;
  wire [31:0] _address_ok_T_34 = io_in_c_bits_address ^ 32'h10000000;
  wire [32:0] _address_ok_T_35 = {1'b0,$signed(_address_ok_T_34)};
  wire [32:0] _address_ok_T_37 = $signed(_address_ok_T_35) & -33'sh10000000;
  wire  _address_ok_T_38 = $signed(_address_ok_T_37) == 33'sh0;
  wire [31:0] _address_ok_T_39 = io_in_c_bits_address ^ 32'h20000000;
  wire [32:0] _address_ok_T_40 = {1'b0,$signed(_address_ok_T_39)};
  wire [32:0] _address_ok_T_42 = $signed(_address_ok_T_40) & -33'sh20000000;
  wire  _address_ok_T_43 = $signed(_address_ok_T_42) == 33'sh0;
  wire [31:0] _address_ok_T_44 = io_in_c_bits_address ^ 32'h40000000;
  wire [32:0] _address_ok_T_45 = {1'b0,$signed(_address_ok_T_44)};
  wire [32:0] _address_ok_T_47 = $signed(_address_ok_T_45) & -33'sh40000000;
  wire  _address_ok_T_48 = $signed(_address_ok_T_47) == 33'sh0;
  wire [31:0] _address_ok_T_49 = io_in_c_bits_address ^ 32'h80000000;
  wire [32:0] _address_ok_T_50 = {1'b0,$signed(_address_ok_T_49)};
  wire [32:0] _address_ok_T_52 = $signed(_address_ok_T_50) & -33'sh40000000;
  wire  _address_ok_T_53 = $signed(_address_ok_T_52) == 33'sh0;
  wire [31:0] _address_ok_T_54 = io_in_c_bits_address ^ 32'hc0000000;
  wire [32:0] _address_ok_T_55 = {1'b0,$signed(_address_ok_T_54)};
  wire [32:0] _address_ok_T_57 = $signed(_address_ok_T_55) & -33'sh20000000;
  wire  _address_ok_T_58 = $signed(_address_ok_T_57) == 33'sh0;
  wire  _address_ok_T_62 = _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 | _address_ok_T_58;
  wire [31:0] _address_ok_T_63 = io_in_c_bits_address ^ 32'h1000;
  wire [32:0] _address_ok_T_64 = {1'b0,$signed(_address_ok_T_63)};
  wire [32:0] _address_ok_T_66 = $signed(_address_ok_T_64) & -33'sh1000;
  wire  _address_ok_T_67 = $signed(_address_ok_T_66) == 33'sh0;
  wire  address_ok_1 = _address_ok_T_62 | _address_ok_T_67;
  wire  _T_2224 = io_in_c_bits_opcode == 3'h4;
  wire  _T_2231 = io_in_c_bits_size >= 3'h3;
  wire  _T_2238 = io_in_c_bits_param <= 3'h5;
  wire  _T_2246 = io_in_c_bits_opcode == 3'h5;
  wire  _T_2264 = io_in_c_bits_opcode == 3'h6;
  wire  _T_2357 = io_in_c_bits_size <= 3'h6;
  wire  _T_2365 = _T_2357 & _address_ok_T_67;
  wire  _T_2368 = source_ok_2 & _T_2365;
  wire  _T_2423 = _source_ok_T_109 & _T_2357;
  wire  _T_2476 = _address_ok_T_67 | _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 |
    _address_ok_T_58;
  wire  _T_2479 = _T_2423 & _T_2476;
  wire  _T_2501 = io_in_c_bits_opcode == 3'h7;
  wire  _T_2734 = io_in_c_bits_opcode == 3'h0;
  wire  _T_2744 = io_in_c_bits_param == 3'h0;
  wire  _T_2752 = io_in_c_bits_opcode == 3'h1;
  wire  _T_2766 = io_in_c_bits_opcode == 3'h2;
  wire  sink_ok_1 = io_in_e_bits_sink < 1'h1;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [2:0] a_first_beats1_decode = is_aligned_mask[5:3];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [2:0] a_first_counter;
  wire [2:0] a_first_counter1 = a_first_counter - 3'h1;
  wire  a_first = a_first_counter == 3'h0;
  reg [2:0] opcode;
  reg [2:0] param;
  reg [2:0] size;
  reg [5:0] source;
  reg [31:0] address;
  wire  _T_2788 = io_in_a_valid & ~a_first;
  wire  _T_2789 = io_in_a_bits_opcode == opcode;
  wire  _T_2793 = io_in_a_bits_param == param;
  wire  _T_2797 = io_in_a_bits_size == size;
  wire  _T_2801 = io_in_a_bits_source == source;
  wire  _T_2805 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [2:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:3];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [2:0] d_first_counter;
  wire [2:0] d_first_counter1 = d_first_counter - 3'h1;
  wire  d_first = d_first_counter == 3'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [5:0] source_1;
  reg  denied;
  wire  _T_2812 = io_in_d_valid & ~d_first;
  wire  _T_2813 = io_in_d_bits_opcode == opcode_1;
  wire  _T_2817 = io_in_d_bits_param == param_1;
  wire  _T_2821 = io_in_d_bits_size == size_1;
  wire  _T_2825 = io_in_d_bits_source == source_1;
  wire  _T_2833 = io_in_d_bits_denied == denied;
  wire  _c_first_T = io_in_c_ready & io_in_c_valid;
  wire [2:0] c_first_beats1_decode = is_aligned_mask_2[5:3];
  wire  c_first_beats1_opdata = io_in_c_bits_opcode[0];
  reg [2:0] c_first_counter;
  wire [2:0] c_first_counter1 = c_first_counter - 3'h1;
  wire  c_first = c_first_counter == 3'h0;
  reg [2:0] opcode_3;
  reg [2:0] param_3;
  reg [2:0] size_3;
  reg [5:0] source_3;
  reg [31:0] address_2;
  wire  _T_2864 = io_in_c_valid & ~c_first;
  wire  _T_2865 = io_in_c_bits_opcode == opcode_3;
  wire  _T_2869 = io_in_c_bits_param == param_3;
  wire  _T_2873 = io_in_c_bits_size == size_3;
  wire  _T_2877 = io_in_c_bits_source == source_3;
  wire  _T_2881 = io_in_c_bits_address == address_2;
  reg [63:0] inflight;
  reg [255:0] inflight_opcodes;
  reg [255:0] inflight_sizes;
  reg [2:0] a_first_counter_1;
  wire [2:0] a_first_counter1_1 = a_first_counter_1 - 3'h1;
  wire  a_first_1 = a_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_1;
  wire [2:0] d_first_counter1_1 = d_first_counter_1 - 3'h1;
  wire  d_first_1 = d_first_counter_1 == 3'h0;
  wire [7:0] _GEN_88 = {io_in_d_bits_source, 2'h0};
  wire [8:0] _a_opcode_lookup_T = {{1'd0}, _GEN_88};
  wire [255:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [255:0] _GEN_89 = {{240'd0}, _a_opcode_lookup_T_5};
  wire [255:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_89;
  wire [255:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[255:1]};
  wire [255:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [255:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_89;
  wire [255:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[255:1]};
  wire  _T_2887 = io_in_a_valid & a_first_1;
  wire [63:0] _a_set_wo_ready_T = 64'h1 << io_in_a_bits_source;
  wire [63:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 64'h0;
  wire  _T_2890 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [7:0] _GEN_94 = {io_in_a_bits_source, 2'h0};
  wire [8:0] _a_opcodes_set_T = {{1'd0}, _GEN_94};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [514:0] _GEN_95 = {{511'd0}, a_opcodes_set_interm};
  wire [514:0] _a_opcodes_set_T_1 = _GEN_95 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [514:0] _GEN_97 = {{511'd0}, a_sizes_set_interm};
  wire [514:0] _a_sizes_set_T_1 = _GEN_97 << _a_opcodes_set_T;
  wire [63:0] _T_2892 = inflight >> io_in_a_bits_source;
  wire  _T_2894 = ~_T_2892[0];
  wire [63:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 64'h0;
  wire [514:0] _GEN_31 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 515'h0;
  wire [514:0] _GEN_32 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 515'h0;
  wire  _T_2898 = io_in_d_valid & d_first_1;
  wire  _T_2900 = ~_T_1342;
  wire  _T_2901 = io_in_d_valid & d_first_1 & ~_T_1342;
  wire [63:0] _d_clr_wo_ready_T = 64'h1 << io_in_d_bits_source;
  wire [63:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_1342 ? _d_clr_wo_ready_T : 64'h0;
  wire [526:0] _GEN_99 = {{511'd0}, _a_opcode_lookup_T_5};
  wire [526:0] _d_opcodes_clr_T_5 = _GEN_99 << _a_opcode_lookup_T;
  wire [63:0] d_clr = _d_first_T & d_first_1 & _T_2900 ? _d_clr_wo_ready_T : 64'h0;
  wire [526:0] _GEN_35 = _d_first_T & d_first_1 & _T_2900 ? _d_opcodes_clr_T_5 : 527'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_2887 & io_in_a_bits_source == io_in_d_bits_source;
  wire [63:0] _T_2911 = inflight >> io_in_d_bits_source;
  wire  _T_2913 = _T_2911[0] | same_cycle_resp;
  wire [2:0] _GEN_39 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_40 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_39;
  wire [2:0] _GEN_41 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_40;
  wire [2:0] _GEN_42 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_41;
  wire [2:0] _GEN_43 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_42;
  wire [2:0] _GEN_44 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_43;
  wire [2:0] _GEN_51 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_42;
  wire [2:0] _GEN_52 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_51;
  wire  _T_2918 = io_in_d_bits_opcode == _GEN_52;
  wire  _T_2919 = io_in_d_bits_opcode == _GEN_44 | _T_2918;
  wire  _T_2923 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_55 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_56 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_55;
  wire [2:0] _GEN_57 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_56;
  wire [2:0] _GEN_58 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_57;
  wire [2:0] _GEN_59 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_58;
  wire [2:0] _GEN_60 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_59;
  wire [2:0] _GEN_67 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_58;
  wire [2:0] _GEN_68 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_67;
  wire  _T_2930 = io_in_d_bits_opcode == _GEN_68;
  wire  _T_2931 = io_in_d_bits_opcode == _GEN_60 | _T_2930;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_102 = {{1'd0}, io_in_d_bits_size};
  wire  _T_2935 = _GEN_102 == a_size_lookup;
  wire  _T_2945 = _T_2898 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_2900;
  wire  _T_2946 = ~io_in_d_ready;
  wire  _T_2947 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_2954 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [63:0] _inflight_T = inflight | a_set;
  wire [63:0] _inflight_T_1 = ~d_clr;
  wire [63:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [255:0] a_opcodes_set = _GEN_31[255:0];
  wire [255:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [255:0] d_opcodes_clr = _GEN_35[255:0];
  wire [255:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [255:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [255:0] a_sizes_set = _GEN_32[255:0];
  wire [255:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [255:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_2963 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [63:0] inflight_1;
  reg [255:0] inflight_sizes_1;
  reg [2:0] c_first_counter_1;
  wire [2:0] c_first_counter1_1 = c_first_counter_1 - 3'h1;
  wire  c_first_1 = c_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_2;
  wire [2:0] d_first_counter1_2 = d_first_counter_2 - 3'h1;
  wire  d_first_2 = d_first_counter_2 == 3'h0;
  wire [255:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [255:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_89;
  wire [255:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[255:1]};
  wire  _T_2973 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire  _T_2974 = io_in_c_valid & c_first_1 & _T_2973;
  wire [63:0] _c_set_wo_ready_T = 64'h1 << io_in_c_bits_source;
  wire [63:0] c_set_wo_ready = io_in_c_valid & c_first_1 & _T_2973 ? _c_set_wo_ready_T : 64'h0;
  wire  _T_2980 = _c_first_T & c_first_1 & _T_2973;
  wire [3:0] _c_sizes_set_interm_T = {io_in_c_bits_size, 1'h0};
  wire [3:0] _c_sizes_set_interm_T_1 = _c_sizes_set_interm_T | 4'h1;
  wire [7:0] _GEN_109 = {io_in_c_bits_source, 2'h0};
  wire [8:0] _c_opcodes_set_T = {{1'd0}, _GEN_109};
  wire [3:0] c_sizes_set_interm = _c_first_T & c_first_1 & _T_2973 ? _c_sizes_set_interm_T_1 : 4'h0;
  wire [514:0] _GEN_112 = {{511'd0}, c_sizes_set_interm};
  wire [514:0] _c_sizes_set_T_1 = _GEN_112 << _c_opcodes_set_T;
  wire [63:0] _T_2981 = inflight_1 >> io_in_c_bits_source;
  wire  _T_2983 = ~_T_2981[0];
  wire [63:0] c_set = _c_first_T & c_first_1 & _T_2973 ? _c_set_wo_ready_T : 64'h0;
  wire [514:0] _GEN_77 = _c_first_T & c_first_1 & _T_2973 ? _c_sizes_set_T_1 : 515'h0;
  wire  _T_2987 = io_in_d_valid & d_first_2;
  wire  _T_2989 = io_in_d_valid & d_first_2 & _T_1342;
  wire [63:0] d_clr_wo_ready_1 = io_in_d_valid & d_first_2 & _T_1342 ? _d_clr_wo_ready_T : 64'h0;
  wire [63:0] d_clr_1 = _d_first_T & d_first_2 & _T_1342 ? _d_clr_wo_ready_T : 64'h0;
  wire [526:0] _GEN_80 = _d_first_T & d_first_2 & _T_1342 ? _d_opcodes_clr_T_5 : 527'h0;
  wire  _same_cycle_resp_T_8 = io_in_c_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp_1 = _T_2974 & io_in_c_bits_source == io_in_d_bits_source;
  wire [63:0] _T_2997 = inflight_1 >> io_in_d_bits_source;
  wire  _T_2999 = _T_2997[0] | same_cycle_resp_1;
  wire  _T_3003 = io_in_d_bits_size == io_in_c_bits_size;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_3007 = _GEN_102 == c_size_lookup;
  wire  _T_3016 = _T_2987 & c_first_1 & io_in_c_valid & _same_cycle_resp_T_8 & _T_1342;
  wire  _T_3018 = _T_2946 | io_in_c_ready;
  wire  _T_3022 = |c_set_wo_ready;
  wire  _T_3023 = c_set_wo_ready != d_clr_wo_ready_1;
  wire [63:0] _inflight_T_3 = inflight_1 | c_set;
  wire [63:0] _inflight_T_4 = ~d_clr_1;
  wire [63:0] _inflight_T_5 = _inflight_T_3 & _inflight_T_4;
  wire [255:0] d_opcodes_clr_1 = _GEN_80[255:0];
  wire [255:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [255:0] c_sizes_set = _GEN_77[255:0];
  wire [255:0] _inflight_sizes_T_3 = inflight_sizes_1 | c_sizes_set;
  wire [255:0] _inflight_sizes_T_5 = _inflight_sizes_T_3 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_3032 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  reg  inflight_2;
  reg [2:0] d_first_counter_3;
  wire [2:0] d_first_counter1_3 = d_first_counter_3 - 3'h1;
  wire  d_first_3 = d_first_counter_3 == 3'h0;
  wire  _T_3044 = io_in_d_bits_opcode[2] & ~io_in_d_bits_opcode[1];
  wire  _T_3045 = _d_first_T & d_first_3 & _T_3044;
  wire  _T_3048 = ~inflight_2;
  wire [1:0] _GEN_84 = _d_first_T & d_first_3 & _T_3044 ? 2'h1 : 2'h0;
  wire  _T_3052 = io_in_e_ready & io_in_e_valid;
  wire [1:0] _e_clr_T = 2'h1 << io_in_e_bits_sink;
  wire  d_set = _GEN_84[0];
  wire  _T_3056 = (d_set | inflight_2) >> io_in_e_bits_sink;
  wire [1:0] _GEN_85 = _T_3052 ? _e_clr_T : 2'h0;
  wire  e_clr = _GEN_85[0];
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 3'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      param <= io_in_a_bits_param;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 3'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      c_first_counter <= 3'h0;
    end else if (_c_first_T) begin
      if (c_first) begin
        if (c_first_beats1_opdata) begin
          c_first_counter <= c_first_beats1_decode;
        end else begin
          c_first_counter <= 3'h0;
        end
      end else begin
        c_first_counter <= c_first_counter1;
      end
    end
    if (_c_first_T & c_first) begin
      opcode_3 <= io_in_c_bits_opcode;
    end
    if (_c_first_T & c_first) begin
      param_3 <= io_in_c_bits_param;
    end
    if (_c_first_T & c_first) begin
      size_3 <= io_in_c_bits_size;
    end
    if (_c_first_T & c_first) begin
      source_3 <= io_in_c_bits_source;
    end
    if (_c_first_T & c_first) begin
      address_2 <= io_in_c_bits_address;
    end
    if (reset) begin
      inflight <= 64'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 256'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 256'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 3'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 3'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 64'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 256'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      c_first_counter_1 <= 3'h0;
    end else if (_c_first_T) begin
      if (c_first_1) begin
        if (c_first_beats1_opdata) begin
          c_first_counter_1 <= c_first_beats1_decode;
        end else begin
          c_first_counter_1 <= 3'h0;
        end
      end else begin
        c_first_counter_1 <= c_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_2 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 3'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_c_first_T | _d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    if (reset) begin
      inflight_2 <= 1'h0;
    end else begin
      inflight_2 <= (inflight_2 | d_set) & ~e_clr;
    end
    if (reset) begin
      d_first_counter_3 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_3) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_3 <= d_first_beats1_decode;
        end else begin
          d_first_counter_3 <= 3'h0;
        end
      end else begin
        d_first_counter_3 <= d_first_counter1_3;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1086 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1086 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1206 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1206 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_1326 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_1326 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1338 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1338 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1346 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1346 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1358 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1358 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1346 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1346 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1373 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1373 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1377 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1377 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1346 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1346 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1373 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1373 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1377 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1377 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1410 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1410 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1410 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1410 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2368 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2368 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2479 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2479 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release smaller than a beat (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid report param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2368 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2368 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2479 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2479 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(_T_2744 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(_T_2744 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(_T_2744 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(_T_2744 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck address not aligned to size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(_T_2744 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(_T_2744 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channels carries invalid sink ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2789 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2789 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2793 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2793 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2797 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2797 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2801 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2801 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2805 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2805 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2813 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2813 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2817 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2817 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2821 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2821 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2825 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2825 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2833 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2833 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2865 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2865 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2869 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2869 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2873 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2873 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2877 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2877 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2881 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2881 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2890 & ~(_T_2894 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2890 & ~(_T_2894 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & ~(_T_2913 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & ~(_T_2913 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2919 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2919 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2923 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2923 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2931 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2931 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2935 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2935 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2945 & ~(_T_2947 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2945 & ~(_T_2947 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2954 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2954 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2963 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2963 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2980 & ~(_T_2983 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel re-used a source ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2980 & ~(_T_2983 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2989 & ~(_T_2999 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2989 & ~(_T_2999 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2989 & same_cycle_resp_1 & ~(_T_3003 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2989 & same_cycle_resp_1 & ~(_T_3003 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2989 & ~same_cycle_resp_1 & ~(_T_3007 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2989 & ~same_cycle_resp_1 & ~(_T_3007 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3016 & ~(_T_3018 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3016 & ~(_T_3018 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3022 & ~(_T_3023 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3022 & ~(_T_3023 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_3032 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_3032 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3045 & ~(_T_3048 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel re-used a sink ID (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3045 & ~(_T_3048 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3052 & ~(_T_3056 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:98)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3052 & ~(_T_3056 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  source = _RAND_4[5:0];
  _RAND_5 = {1{`RANDOM}};
  address = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  d_first_counter = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  opcode_1 = _RAND_7[2:0];
  _RAND_8 = {1{`RANDOM}};
  param_1 = _RAND_8[1:0];
  _RAND_9 = {1{`RANDOM}};
  size_1 = _RAND_9[2:0];
  _RAND_10 = {1{`RANDOM}};
  source_1 = _RAND_10[5:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  c_first_counter = _RAND_12[2:0];
  _RAND_13 = {1{`RANDOM}};
  opcode_3 = _RAND_13[2:0];
  _RAND_14 = {1{`RANDOM}};
  param_3 = _RAND_14[2:0];
  _RAND_15 = {1{`RANDOM}};
  size_3 = _RAND_15[2:0];
  _RAND_16 = {1{`RANDOM}};
  source_3 = _RAND_16[5:0];
  _RAND_17 = {1{`RANDOM}};
  address_2 = _RAND_17[31:0];
  _RAND_18 = {2{`RANDOM}};
  inflight = _RAND_18[63:0];
  _RAND_19 = {8{`RANDOM}};
  inflight_opcodes = _RAND_19[255:0];
  _RAND_20 = {8{`RANDOM}};
  inflight_sizes = _RAND_20[255:0];
  _RAND_21 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_21[2:0];
  _RAND_22 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_22[2:0];
  _RAND_23 = {1{`RANDOM}};
  watchdog = _RAND_23[31:0];
  _RAND_24 = {2{`RANDOM}};
  inflight_1 = _RAND_24[63:0];
  _RAND_25 = {8{`RANDOM}};
  inflight_sizes_1 = _RAND_25[255:0];
  _RAND_26 = {1{`RANDOM}};
  c_first_counter_1 = _RAND_26[2:0];
  _RAND_27 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_27[2:0];
  _RAND_28 = {1{`RANDOM}};
  watchdog_1 = _RAND_28[31:0];
  _RAND_29 = {1{`RANDOM}};
  inflight_2 = _RAND_29[0:0];
  _RAND_30 = {1{`RANDOM}};
  d_first_counter_3 = _RAND_30[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Repeater_1(
  input         clock,
  input         reset,
  input         io_repeat,
  output        io_full,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [2:0]  io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input         io_deq_ready,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [31:0] io_deq_bits_address
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_REG_INIT
  reg  full;
  reg [2:0] saved_size;
  reg [5:0] saved_source;
  reg [31:0] saved_address;
  wire  _T = io_enq_ready & io_enq_valid;
  wire  _GEN_0 = _T & io_repeat | full;
  wire  _T_2 = io_deq_ready & io_deq_valid;
  assign io_full = full;
  assign io_enq_ready = io_deq_ready & ~full;
  assign io_deq_valid = io_enq_valid | full;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  always @(posedge clock) begin
    if (reset) begin
      full <= 1'h0;
    end else if (_T_2 & ~io_repeat) begin
      full <= 1'h0;
    end else begin
      full <= _GEN_0;
    end
    if (_T & io_repeat) begin
      saved_size <= io_enq_bits_size;
    end
    if (_T & io_repeat) begin
      saved_source <= io_enq_bits_source;
    end
    if (_T & io_repeat) begin
      saved_address <= io_enq_bits_address;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  full = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  saved_size = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  saved_source = _RAND_2[5:0];
  _RAND_3 = {1{`RANDOM}};
  saved_address = _RAND_3[31:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLHintHandler(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_param,
  input  [2:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  output        auto_in_c_ready,
  input         auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
  input  [2:0]  auto_in_c_bits_param,
  input  [2:0]  auto_in_c_bits_size,
  input  [5:0]  auto_in_c_bits_source,
  input  [31:0] auto_in_c_bits_address,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  output        auto_in_e_ready,
  input         auto_in_e_valid,
  input         auto_in_e_bits_sink,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [2:0]  auto_out_a_bits_param,
  output [2:0]  auto_out_a_bits_size,
  output [6:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  input         auto_out_c_ready,
  output        auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
  output [2:0]  auto_out_c_bits_param,
  output [2:0]  auto_out_c_bits_size,
  output [6:0]  auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [6:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  input         auto_out_e_ready,
  output        auto_out_e_valid,
  output        auto_out_e_bits_sink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_param;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [5:0] monitor_io_in_a_bits_source;
  wire [31:0] monitor_io_in_a_bits_address;
  wire [7:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_c_ready;
  wire  monitor_io_in_c_valid;
  wire [2:0] monitor_io_in_c_bits_opcode;
  wire [2:0] monitor_io_in_c_bits_param;
  wire [2:0] monitor_io_in_c_bits_size;
  wire [5:0] monitor_io_in_c_bits_source;
  wire [31:0] monitor_io_in_c_bits_address;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [5:0] monitor_io_in_d_bits_source;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  monitor_io_in_e_ready;
  wire  monitor_io_in_e_valid;
  wire  monitor_io_in_e_bits_sink;
  wire  a_repeater_clock;
  wire  a_repeater_reset;
  wire  a_repeater_io_repeat;
  wire  a_repeater_io_full;
  wire  a_repeater_io_enq_ready;
  wire  a_repeater_io_enq_valid;
  wire [2:0] a_repeater_io_enq_bits_size;
  wire [5:0] a_repeater_io_enq_bits_source;
  wire [31:0] a_repeater_io_enq_bits_address;
  wire  a_repeater_io_deq_ready;
  wire  a_repeater_io_deq_valid;
  wire [2:0] a_repeater_io_deq_bits_size;
  wire [5:0] a_repeater_io_deq_bits_source;
  wire [31:0] a_repeater_io_deq_bits_address;
  wire  isHint = auto_in_a_bits_opcode == 3'h5;
  wire [31:0] _helpPP_T = auto_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _helpPP_T_1 = {1'b0,$signed(_helpPP_T)};
  wire [32:0] _helpPP_T_3 = $signed(_helpPP_T_1) & 33'shf0000000;
  wire  _helpPP_T_4 = $signed(_helpPP_T_3) == 33'sh0;
  wire [31:0] _helpPP_T_5 = auto_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _helpPP_T_6 = {1'b0,$signed(_helpPP_T_5)};
  wire [32:0] _helpPP_T_8 = $signed(_helpPP_T_6) & 33'she0000000;
  wire  _helpPP_T_9 = $signed(_helpPP_T_8) == 33'sh0;
  wire [31:0] _helpPP_T_10 = auto_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _helpPP_T_11 = {1'b0,$signed(_helpPP_T_10)};
  wire [32:0] _helpPP_T_13 = $signed(_helpPP_T_11) & 33'shc0000000;
  wire  _helpPP_T_14 = $signed(_helpPP_T_13) == 33'sh0;
  wire [31:0] _helpPP_T_15 = auto_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _helpPP_T_16 = {1'b0,$signed(_helpPP_T_15)};
  wire [32:0] _helpPP_T_18 = $signed(_helpPP_T_16) & 33'shc0000000;
  wire  _helpPP_T_19 = $signed(_helpPP_T_18) == 33'sh0;
  wire [31:0] _helpPP_T_20 = auto_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _helpPP_T_21 = {1'b0,$signed(_helpPP_T_20)};
  wire [32:0] _helpPP_T_23 = $signed(_helpPP_T_21) & 33'she0000000;
  wire  _helpPP_T_24 = $signed(_helpPP_T_23) == 33'sh0;
  wire  _helpPP_T_28 = _helpPP_T_4 | _helpPP_T_9 | _helpPP_T_14 | _helpPP_T_19 | _helpPP_T_24;
  wire  helpPP = isHint & _helpPP_T_28;
  wire  a_valid = a_repeater_io_deq_valid;
  wire  _a_repeater_io_repeat_T = auto_out_a_ready & a_valid;
  wire [2:0] a_bits_size = a_repeater_io_deq_bits_size;
  wire [12:0] _a_repeater_io_repeat_beats1_decode_T_1 = 13'h3f << a_bits_size;
  wire [5:0] _a_repeater_io_repeat_beats1_decode_T_3 = ~_a_repeater_io_repeat_beats1_decode_T_1[5:0];
  wire [2:0] a_repeater_io_repeat_beats1_decode = _a_repeater_io_repeat_beats1_decode_T_3[5:3];
  wire  mapPP = a_repeater_io_full | helpPP;
  wire [2:0] bundleOut_0_a_bits_opcode = mapPP ? 3'h1 : auto_in_a_bits_opcode;
  wire  a_repeater_io_repeat_beats1_opdata = ~bundleOut_0_a_bits_opcode[2];
  wire [2:0] a_repeater_io_repeat_beats1 = a_repeater_io_repeat_beats1_opdata ? a_repeater_io_repeat_beats1_decode : 3'h0
    ;
  reg [2:0] a_repeater_io_repeat_counter;
  wire [2:0] a_repeater_io_repeat_counter1 = a_repeater_io_repeat_counter - 3'h1;
  wire  a_repeater_io_repeat_first = a_repeater_io_repeat_counter == 3'h0;
  wire  a_repeater_io_repeat_last = a_repeater_io_repeat_counter == 3'h1 | a_repeater_io_repeat_beats1 == 3'h0;
  wire [5:0] a_bits_source = a_repeater_io_deq_bits_source;
  wire [6:0] _bundleOut_0_a_bits_source_T = {a_bits_source, 1'h0};
  wire [6:0] _GEN_1 = {{6'd0}, mapPP};
  wire  transform = auto_out_d_bits_source[0];
  CHIPLINK_PREFIX_Chiplink_TLMonitor_14 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_param(monitor_io_in_a_bits_param),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_c_ready(monitor_io_in_c_ready),
    .io_in_c_valid(monitor_io_in_c_valid),
    .io_in_c_bits_opcode(monitor_io_in_c_bits_opcode),
    .io_in_c_bits_param(monitor_io_in_c_bits_param),
    .io_in_c_bits_size(monitor_io_in_c_bits_size),
    .io_in_c_bits_source(monitor_io_in_c_bits_source),
    .io_in_c_bits_address(monitor_io_in_c_bits_address),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt),
    .io_in_e_ready(monitor_io_in_e_ready),
    .io_in_e_valid(monitor_io_in_e_valid),
    .io_in_e_bits_sink(monitor_io_in_e_bits_sink)
  );
  CHIPLINK_PREFIX_Repeater_1 a_repeater (
    .clock(a_repeater_clock),
    .reset(a_repeater_reset),
    .io_repeat(a_repeater_io_repeat),
    .io_full(a_repeater_io_full),
    .io_enq_ready(a_repeater_io_enq_ready),
    .io_enq_valid(a_repeater_io_enq_valid),
    .io_enq_bits_size(a_repeater_io_enq_bits_size),
    .io_enq_bits_source(a_repeater_io_enq_bits_source),
    .io_enq_bits_address(a_repeater_io_enq_bits_address),
    .io_deq_ready(a_repeater_io_deq_ready),
    .io_deq_valid(a_repeater_io_deq_valid),
    .io_deq_bits_size(a_repeater_io_deq_bits_size),
    .io_deq_bits_source(a_repeater_io_deq_bits_source),
    .io_deq_bits_address(a_repeater_io_deq_bits_address)
  );
  assign auto_in_a_ready = a_repeater_io_enq_ready;
  assign auto_in_c_ready = auto_out_c_ready;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = transform ? 3'h2 : auto_out_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source[6:1];
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_in_e_ready = auto_out_e_ready;
  assign auto_out_a_valid = a_repeater_io_deq_valid;
  assign auto_out_a_bits_opcode = mapPP ? 3'h1 : auto_in_a_bits_opcode;
  assign auto_out_a_bits_param = mapPP ? 3'h0 : auto_in_a_bits_param;
  assign auto_out_a_bits_size = a_repeater_io_deq_bits_size;
  assign auto_out_a_bits_source = _bundleOut_0_a_bits_source_T | _GEN_1;
  assign auto_out_a_bits_address = a_repeater_io_deq_bits_address;
  assign auto_out_a_bits_mask = mapPP ? 8'h0 : auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_c_valid = auto_in_c_valid;
  assign auto_out_c_bits_opcode = auto_in_c_bits_opcode;
  assign auto_out_c_bits_param = auto_in_c_bits_param;
  assign auto_out_c_bits_size = auto_in_c_bits_size;
  assign auto_out_c_bits_source = {auto_in_c_bits_source, 1'h0};
  assign auto_out_c_bits_address = auto_in_c_bits_address;
  assign auto_out_d_ready = auto_in_d_ready;
  assign auto_out_e_valid = auto_in_e_valid;
  assign auto_out_e_bits_sink = auto_in_e_bits_sink;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = a_repeater_io_enq_ready;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_param = auto_in_a_bits_param;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_c_ready = auto_out_c_ready;
  assign monitor_io_in_c_valid = auto_in_c_valid;
  assign monitor_io_in_c_bits_opcode = auto_in_c_bits_opcode;
  assign monitor_io_in_c_bits_param = auto_in_c_bits_param;
  assign monitor_io_in_c_bits_size = auto_in_c_bits_size;
  assign monitor_io_in_c_bits_source = auto_in_c_bits_source;
  assign monitor_io_in_c_bits_address = auto_in_c_bits_address;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = auto_out_d_valid;
  assign monitor_io_in_d_bits_opcode = transform ? 3'h2 : auto_out_d_bits_opcode;
  assign monitor_io_in_d_bits_param = auto_out_d_bits_param;
  assign monitor_io_in_d_bits_size = auto_out_d_bits_size;
  assign monitor_io_in_d_bits_source = auto_out_d_bits_source[6:1];
  assign monitor_io_in_d_bits_denied = auto_out_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign monitor_io_in_e_ready = auto_out_e_ready;
  assign monitor_io_in_e_valid = auto_in_e_valid;
  assign monitor_io_in_e_bits_sink = auto_in_e_bits_sink;
  assign a_repeater_clock = clock;
  assign a_repeater_reset = reset;
  assign a_repeater_io_repeat = mapPP & ~a_repeater_io_repeat_last;
  assign a_repeater_io_enq_valid = auto_in_a_valid;
  assign a_repeater_io_enq_bits_size = auto_in_a_bits_size;
  assign a_repeater_io_enq_bits_source = auto_in_a_bits_source;
  assign a_repeater_io_enq_bits_address = auto_in_a_bits_address;
  assign a_repeater_io_deq_ready = auto_out_a_ready;
  always @(posedge clock) begin
    if (reset) begin
      a_repeater_io_repeat_counter <= 3'h0;
    end else if (_a_repeater_io_repeat_T) begin
      if (a_repeater_io_repeat_first) begin
        if (a_repeater_io_repeat_beats1_opdata) begin
          a_repeater_io_repeat_counter <= a_repeater_io_repeat_beats1_decode;
        end else begin
          a_repeater_io_repeat_counter <= 3'h0;
        end
      end else begin
        a_repeater_io_repeat_counter <= a_repeater_io_repeat_counter1;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_repeater_io_repeat_counter = _RAND_0[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_15(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_param,
  input  [2:0]  io_in_a_bits_size,
  input  [5:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [3:0]  io_in_a_bits_mask,
  input         io_in_c_ready,
  input         io_in_c_valid,
  input  [2:0]  io_in_c_bits_opcode,
  input  [2:0]  io_in_c_bits_param,
  input  [2:0]  io_in_c_bits_size,
  input  [5:0]  io_in_c_bits_source,
  input  [31:0] io_in_c_bits_address,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [5:0]  io_in_d_bits_source,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt,
  input         io_in_e_ready,
  input         io_in_e_valid,
  input         io_in_e_bits_sink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [63:0] _RAND_18;
  reg [255:0] _RAND_19;
  reg [255:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [63:0] _RAND_24;
  reg [255:0] _RAND_25;
  reg [31:0] _RAND_26;
  reg [31:0] _RAND_27;
  reg [31:0] _RAND_28;
  reg [31:0] _RAND_29;
  reg [31:0] _RAND_30;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = io_in_a_bits_source[5:3] == 3'h0;
  wire  _source_ok_T_7 = io_in_a_bits_source[5:3] == 3'h1;
  wire  _source_ok_T_13 = io_in_a_bits_source[5:3] == 3'h2;
  wire  _source_ok_T_19 = io_in_a_bits_source[5:3] == 3'h3;
  wire  _source_ok_T_25 = io_in_a_bits_source[5:3] == 3'h4;
  wire  _source_ok_T_31 = io_in_a_bits_source[5:3] == 3'h5;
  wire  _source_ok_T_37 = io_in_a_bits_source[5:3] == 3'h6;
  wire  _source_ok_T_43 = io_in_a_bits_source[5:3] == 3'h7;
  wire  source_ok = _source_ok_T_1 | _source_ok_T_7 | _source_ok_T_13 | _source_ok_T_19 | _source_ok_T_25 |
    _source_ok_T_31 | _source_ok_T_37 | _source_ok_T_43;
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [31:0] _GEN_86 = {{26'd0}, is_aligned_mask};
  wire [31:0] _is_aligned_T = io_in_a_bits_address & _GEN_86;
  wire  is_aligned = _is_aligned_T == 32'h0;
  wire  mask_sizeOH_shiftAmount = io_in_a_bits_size[0];
  wire [1:0] _mask_sizeOH_T_1 = 2'h1 << mask_sizeOH_shiftAmount;
  wire [1:0] mask_sizeOH = _mask_sizeOH_T_1 | 2'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h2;
  wire  mask_size = mask_sizeOH[1];
  wire  mask_bit = io_in_a_bits_address[1];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[0];
  wire  mask_bit_1 = io_in_a_bits_address[0];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_lo_lo = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_lo_hi = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_hi_lo = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_hi_hi = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire [3:0] mask = {mask_hi_hi,mask_hi_lo,mask_lo_hi,mask_lo_lo};
  wire  _T_118 = io_in_a_bits_opcode == 3'h6;
  wire [31:0] _T_180 = io_in_a_bits_address ^ 32'h10000000;
  wire [32:0] _T_181 = {1'b0,$signed(_T_180)};
  wire [32:0] _T_183 = $signed(_T_181) & -33'sh10000000;
  wire  _T_184 = $signed(_T_183) == 33'sh0;
  wire [31:0] _T_185 = io_in_a_bits_address ^ 32'h20000000;
  wire [32:0] _T_186 = {1'b0,$signed(_T_185)};
  wire [32:0] _T_188 = $signed(_T_186) & -33'sh20000000;
  wire  _T_189 = $signed(_T_188) == 33'sh0;
  wire [31:0] _T_190 = io_in_a_bits_address ^ 32'h40000000;
  wire [32:0] _T_191 = {1'b0,$signed(_T_190)};
  wire [32:0] _T_193 = $signed(_T_191) & -33'sh40000000;
  wire  _T_194 = $signed(_T_193) == 33'sh0;
  wire [31:0] _T_195 = io_in_a_bits_address ^ 32'h80000000;
  wire [32:0] _T_196 = {1'b0,$signed(_T_195)};
  wire [32:0] _T_198 = $signed(_T_196) & -33'sh40000000;
  wire  _T_199 = $signed(_T_198) == 33'sh0;
  wire [31:0] _T_200 = io_in_a_bits_address ^ 32'hc0000000;
  wire [32:0] _T_201 = {1'b0,$signed(_T_200)};
  wire [32:0] _T_203 = $signed(_T_201) & -33'sh20000000;
  wire  _T_204 = $signed(_T_203) == 33'sh0;
  wire  _T_211 = io_in_a_bits_size <= 3'h6;
  wire [31:0] _T_214 = io_in_a_bits_address ^ 32'h1000;
  wire [32:0] _T_215 = {1'b0,$signed(_T_214)};
  wire [32:0] _T_217 = $signed(_T_215) & -33'sh1000;
  wire  _T_218 = $signed(_T_217) == 33'sh0;
  wire  _T_219 = _T_211 & _T_218;
  wire  _T_222 = source_ok & _T_219;
  wire  _T_277 = _source_ok_T_1 & _T_211;
  wire  _T_330 = _T_218 | _T_184 | _T_189 | _T_194 | _T_199 | _T_204;
  wire  _T_333 = _T_277 & _T_330;
  wire  _T_347 = io_in_a_bits_param <= 3'h2;
  wire [3:0] _T_351 = ~io_in_a_bits_mask;
  wire  _T_352 = _T_351 == 4'h0;
  wire  _T_360 = io_in_a_bits_opcode == 3'h7;
  wire  _T_593 = io_in_a_bits_param != 3'h0;
  wire  _T_606 = io_in_a_bits_opcode == 3'h4;
  wire  _T_709 = _T_211 & _T_330;
  wire  _T_720 = io_in_a_bits_param == 3'h0;
  wire  _T_724 = io_in_a_bits_mask == mask;
  wire  _T_732 = io_in_a_bits_opcode == 3'h0;
  wire  _T_834 = source_ok & _T_709;
  wire  _T_852 = io_in_a_bits_opcode == 3'h1;
  wire [3:0] _T_968 = ~mask;
  wire [3:0] _T_969 = io_in_a_bits_mask & _T_968;
  wire  _T_970 = _T_969 == 4'h0;
  wire  _T_974 = io_in_a_bits_opcode == 3'h2;
  wire  _T_1036 = io_in_a_bits_size <= 3'h3;
  wire  _T_1074 = _T_1036 & _T_330;
  wire  _T_1076 = source_ok & _T_1074;
  wire  _T_1086 = io_in_a_bits_param <= 3'h4;
  wire  _T_1094 = io_in_a_bits_opcode == 3'h3;
  wire  _T_1206 = io_in_a_bits_param <= 3'h3;
  wire  _T_1214 = io_in_a_bits_opcode == 3'h5;
  wire  _T_1326 = io_in_a_bits_param <= 3'h1;
  wire  _T_1338 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_55 = io_in_d_bits_source[5:3] == 3'h0;
  wire  _source_ok_T_61 = io_in_d_bits_source[5:3] == 3'h1;
  wire  _source_ok_T_67 = io_in_d_bits_source[5:3] == 3'h2;
  wire  _source_ok_T_73 = io_in_d_bits_source[5:3] == 3'h3;
  wire  _source_ok_T_79 = io_in_d_bits_source[5:3] == 3'h4;
  wire  _source_ok_T_85 = io_in_d_bits_source[5:3] == 3'h5;
  wire  _source_ok_T_91 = io_in_d_bits_source[5:3] == 3'h6;
  wire  _source_ok_T_97 = io_in_d_bits_source[5:3] == 3'h7;
  wire  source_ok_1 = _source_ok_T_55 | _source_ok_T_61 | _source_ok_T_67 | _source_ok_T_73 | _source_ok_T_79 |
    _source_ok_T_85 | _source_ok_T_91 | _source_ok_T_97;
  wire  _T_1342 = io_in_d_bits_opcode == 3'h6;
  wire  _T_1346 = io_in_d_bits_size >= 3'h2;
  wire  _T_1350 = io_in_d_bits_param == 2'h0;
  wire  _T_1354 = ~io_in_d_bits_corrupt;
  wire  _T_1358 = ~io_in_d_bits_denied;
  wire  _T_1362 = io_in_d_bits_opcode == 3'h4;
  wire  _T_1373 = io_in_d_bits_param <= 2'h2;
  wire  _T_1377 = io_in_d_bits_param != 2'h2;
  wire  _T_1390 = io_in_d_bits_opcode == 3'h5;
  wire  _T_1410 = _T_1358 | io_in_d_bits_corrupt;
  wire  _T_1419 = io_in_d_bits_opcode == 3'h0;
  wire  _T_1436 = io_in_d_bits_opcode == 3'h1;
  wire  _T_1454 = io_in_d_bits_opcode == 3'h2;
  wire  _source_ok_T_109 = io_in_c_bits_source[5:3] == 3'h0;
  wire  _source_ok_T_115 = io_in_c_bits_source[5:3] == 3'h1;
  wire  _source_ok_T_121 = io_in_c_bits_source[5:3] == 3'h2;
  wire  _source_ok_T_127 = io_in_c_bits_source[5:3] == 3'h3;
  wire  _source_ok_T_133 = io_in_c_bits_source[5:3] == 3'h4;
  wire  _source_ok_T_139 = io_in_c_bits_source[5:3] == 3'h5;
  wire  _source_ok_T_145 = io_in_c_bits_source[5:3] == 3'h6;
  wire  _source_ok_T_151 = io_in_c_bits_source[5:3] == 3'h7;
  wire  source_ok_2 = _source_ok_T_109 | _source_ok_T_115 | _source_ok_T_121 | _source_ok_T_127 | _source_ok_T_133 |
    _source_ok_T_139 | _source_ok_T_145 | _source_ok_T_151;
  wire [12:0] _is_aligned_mask_T_7 = 13'h3f << io_in_c_bits_size;
  wire [5:0] is_aligned_mask_2 = ~_is_aligned_mask_T_7[5:0];
  wire [31:0] _GEN_87 = {{26'd0}, is_aligned_mask_2};
  wire [31:0] _is_aligned_T_2 = io_in_c_bits_address & _GEN_87;
  wire  is_aligned_2 = _is_aligned_T_2 == 32'h0;
  wire [31:0] _address_ok_T_34 = io_in_c_bits_address ^ 32'h10000000;
  wire [32:0] _address_ok_T_35 = {1'b0,$signed(_address_ok_T_34)};
  wire [32:0] _address_ok_T_37 = $signed(_address_ok_T_35) & -33'sh10000000;
  wire  _address_ok_T_38 = $signed(_address_ok_T_37) == 33'sh0;
  wire [31:0] _address_ok_T_39 = io_in_c_bits_address ^ 32'h20000000;
  wire [32:0] _address_ok_T_40 = {1'b0,$signed(_address_ok_T_39)};
  wire [32:0] _address_ok_T_42 = $signed(_address_ok_T_40) & -33'sh20000000;
  wire  _address_ok_T_43 = $signed(_address_ok_T_42) == 33'sh0;
  wire [31:0] _address_ok_T_44 = io_in_c_bits_address ^ 32'h40000000;
  wire [32:0] _address_ok_T_45 = {1'b0,$signed(_address_ok_T_44)};
  wire [32:0] _address_ok_T_47 = $signed(_address_ok_T_45) & -33'sh40000000;
  wire  _address_ok_T_48 = $signed(_address_ok_T_47) == 33'sh0;
  wire [31:0] _address_ok_T_49 = io_in_c_bits_address ^ 32'h80000000;
  wire [32:0] _address_ok_T_50 = {1'b0,$signed(_address_ok_T_49)};
  wire [32:0] _address_ok_T_52 = $signed(_address_ok_T_50) & -33'sh40000000;
  wire  _address_ok_T_53 = $signed(_address_ok_T_52) == 33'sh0;
  wire [31:0] _address_ok_T_54 = io_in_c_bits_address ^ 32'hc0000000;
  wire [32:0] _address_ok_T_55 = {1'b0,$signed(_address_ok_T_54)};
  wire [32:0] _address_ok_T_57 = $signed(_address_ok_T_55) & -33'sh20000000;
  wire  _address_ok_T_58 = $signed(_address_ok_T_57) == 33'sh0;
  wire  _address_ok_T_62 = _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 | _address_ok_T_58;
  wire [31:0] _address_ok_T_63 = io_in_c_bits_address ^ 32'h1000;
  wire [32:0] _address_ok_T_64 = {1'b0,$signed(_address_ok_T_63)};
  wire [32:0] _address_ok_T_66 = $signed(_address_ok_T_64) & -33'sh1000;
  wire  _address_ok_T_67 = $signed(_address_ok_T_66) == 33'sh0;
  wire  address_ok_1 = _address_ok_T_62 | _address_ok_T_67;
  wire  _T_2224 = io_in_c_bits_opcode == 3'h4;
  wire  _T_2231 = io_in_c_bits_size >= 3'h2;
  wire  _T_2238 = io_in_c_bits_param <= 3'h5;
  wire  _T_2246 = io_in_c_bits_opcode == 3'h5;
  wire  _T_2264 = io_in_c_bits_opcode == 3'h6;
  wire  _T_2357 = io_in_c_bits_size <= 3'h6;
  wire  _T_2365 = _T_2357 & _address_ok_T_67;
  wire  _T_2368 = source_ok_2 & _T_2365;
  wire  _T_2423 = _source_ok_T_109 & _T_2357;
  wire  _T_2476 = _address_ok_T_67 | _address_ok_T_38 | _address_ok_T_43 | _address_ok_T_48 | _address_ok_T_53 |
    _address_ok_T_58;
  wire  _T_2479 = _T_2423 & _T_2476;
  wire  _T_2501 = io_in_c_bits_opcode == 3'h7;
  wire  _T_2734 = io_in_c_bits_opcode == 3'h0;
  wire  _T_2744 = io_in_c_bits_param == 3'h0;
  wire  _T_2752 = io_in_c_bits_opcode == 3'h1;
  wire  _T_2766 = io_in_c_bits_opcode == 3'h2;
  wire  sink_ok_1 = io_in_e_bits_sink < 1'h1;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [3:0] a_first_beats1_decode = is_aligned_mask[5:2];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [3:0] a_first_counter;
  wire [3:0] a_first_counter1 = a_first_counter - 4'h1;
  wire  a_first = a_first_counter == 4'h0;
  reg [2:0] opcode;
  reg [2:0] param;
  reg [2:0] size;
  reg [5:0] source;
  reg [31:0] address;
  wire  _T_2788 = io_in_a_valid & ~a_first;
  wire  _T_2789 = io_in_a_bits_opcode == opcode;
  wire  _T_2793 = io_in_a_bits_param == param;
  wire  _T_2797 = io_in_a_bits_size == size;
  wire  _T_2801 = io_in_a_bits_source == source;
  wire  _T_2805 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [3:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:2];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [3:0] d_first_counter;
  wire [3:0] d_first_counter1 = d_first_counter - 4'h1;
  wire  d_first = d_first_counter == 4'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [5:0] source_1;
  reg  denied;
  wire  _T_2812 = io_in_d_valid & ~d_first;
  wire  _T_2813 = io_in_d_bits_opcode == opcode_1;
  wire  _T_2817 = io_in_d_bits_param == param_1;
  wire  _T_2821 = io_in_d_bits_size == size_1;
  wire  _T_2825 = io_in_d_bits_source == source_1;
  wire  _T_2833 = io_in_d_bits_denied == denied;
  wire  _c_first_T = io_in_c_ready & io_in_c_valid;
  wire [3:0] c_first_beats1_decode = is_aligned_mask_2[5:2];
  wire  c_first_beats1_opdata = io_in_c_bits_opcode[0];
  reg [3:0] c_first_counter;
  wire [3:0] c_first_counter1 = c_first_counter - 4'h1;
  wire  c_first = c_first_counter == 4'h0;
  reg [2:0] opcode_3;
  reg [2:0] param_3;
  reg [2:0] size_3;
  reg [5:0] source_3;
  reg [31:0] address_2;
  wire  _T_2864 = io_in_c_valid & ~c_first;
  wire  _T_2865 = io_in_c_bits_opcode == opcode_3;
  wire  _T_2869 = io_in_c_bits_param == param_3;
  wire  _T_2873 = io_in_c_bits_size == size_3;
  wire  _T_2877 = io_in_c_bits_source == source_3;
  wire  _T_2881 = io_in_c_bits_address == address_2;
  reg [63:0] inflight;
  reg [255:0] inflight_opcodes;
  reg [255:0] inflight_sizes;
  reg [3:0] a_first_counter_1;
  wire [3:0] a_first_counter1_1 = a_first_counter_1 - 4'h1;
  wire  a_first_1 = a_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_1;
  wire [3:0] d_first_counter1_1 = d_first_counter_1 - 4'h1;
  wire  d_first_1 = d_first_counter_1 == 4'h0;
  wire [7:0] _GEN_88 = {io_in_d_bits_source, 2'h0};
  wire [8:0] _a_opcode_lookup_T = {{1'd0}, _GEN_88};
  wire [255:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [255:0] _GEN_89 = {{240'd0}, _a_opcode_lookup_T_5};
  wire [255:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_89;
  wire [255:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[255:1]};
  wire [255:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [255:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_89;
  wire [255:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[255:1]};
  wire  _T_2887 = io_in_a_valid & a_first_1;
  wire [63:0] _a_set_wo_ready_T = 64'h1 << io_in_a_bits_source;
  wire [63:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 64'h0;
  wire  _T_2890 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [7:0] _GEN_94 = {io_in_a_bits_source, 2'h0};
  wire [8:0] _a_opcodes_set_T = {{1'd0}, _GEN_94};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [514:0] _GEN_95 = {{511'd0}, a_opcodes_set_interm};
  wire [514:0] _a_opcodes_set_T_1 = _GEN_95 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [514:0] _GEN_97 = {{511'd0}, a_sizes_set_interm};
  wire [514:0] _a_sizes_set_T_1 = _GEN_97 << _a_opcodes_set_T;
  wire [63:0] _T_2892 = inflight >> io_in_a_bits_source;
  wire  _T_2894 = ~_T_2892[0];
  wire [63:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 64'h0;
  wire [514:0] _GEN_31 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 515'h0;
  wire [514:0] _GEN_32 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 515'h0;
  wire  _T_2898 = io_in_d_valid & d_first_1;
  wire  _T_2900 = ~_T_1342;
  wire  _T_2901 = io_in_d_valid & d_first_1 & ~_T_1342;
  wire [63:0] _d_clr_wo_ready_T = 64'h1 << io_in_d_bits_source;
  wire [63:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_1342 ? _d_clr_wo_ready_T : 64'h0;
  wire [526:0] _GEN_99 = {{511'd0}, _a_opcode_lookup_T_5};
  wire [526:0] _d_opcodes_clr_T_5 = _GEN_99 << _a_opcode_lookup_T;
  wire [63:0] d_clr = _d_first_T & d_first_1 & _T_2900 ? _d_clr_wo_ready_T : 64'h0;
  wire [526:0] _GEN_35 = _d_first_T & d_first_1 & _T_2900 ? _d_opcodes_clr_T_5 : 527'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_2887 & io_in_a_bits_source == io_in_d_bits_source;
  wire [63:0] _T_2911 = inflight >> io_in_d_bits_source;
  wire  _T_2913 = _T_2911[0] | same_cycle_resp;
  wire [2:0] _GEN_39 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_40 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_39;
  wire [2:0] _GEN_41 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_40;
  wire [2:0] _GEN_42 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_41;
  wire [2:0] _GEN_43 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_42;
  wire [2:0] _GEN_44 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_43;
  wire [2:0] _GEN_51 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_42;
  wire [2:0] _GEN_52 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_51;
  wire  _T_2918 = io_in_d_bits_opcode == _GEN_52;
  wire  _T_2919 = io_in_d_bits_opcode == _GEN_44 | _T_2918;
  wire  _T_2923 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_55 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_56 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_55;
  wire [2:0] _GEN_57 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_56;
  wire [2:0] _GEN_58 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_57;
  wire [2:0] _GEN_59 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_58;
  wire [2:0] _GEN_60 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_59;
  wire [2:0] _GEN_67 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_58;
  wire [2:0] _GEN_68 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_67;
  wire  _T_2930 = io_in_d_bits_opcode == _GEN_68;
  wire  _T_2931 = io_in_d_bits_opcode == _GEN_60 | _T_2930;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_102 = {{1'd0}, io_in_d_bits_size};
  wire  _T_2935 = _GEN_102 == a_size_lookup;
  wire  _T_2945 = _T_2898 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_2900;
  wire  _T_2946 = ~io_in_d_ready;
  wire  _T_2947 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_2954 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [63:0] _inflight_T = inflight | a_set;
  wire [63:0] _inflight_T_1 = ~d_clr;
  wire [63:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [255:0] a_opcodes_set = _GEN_31[255:0];
  wire [255:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [255:0] d_opcodes_clr = _GEN_35[255:0];
  wire [255:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [255:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [255:0] a_sizes_set = _GEN_32[255:0];
  wire [255:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [255:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_2963 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [63:0] inflight_1;
  reg [255:0] inflight_sizes_1;
  reg [3:0] c_first_counter_1;
  wire [3:0] c_first_counter1_1 = c_first_counter_1 - 4'h1;
  wire  c_first_1 = c_first_counter_1 == 4'h0;
  reg [3:0] d_first_counter_2;
  wire [3:0] d_first_counter1_2 = d_first_counter_2 - 4'h1;
  wire  d_first_2 = d_first_counter_2 == 4'h0;
  wire [255:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [255:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_89;
  wire [255:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[255:1]};
  wire  _T_2973 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire  _T_2974 = io_in_c_valid & c_first_1 & _T_2973;
  wire [63:0] _c_set_wo_ready_T = 64'h1 << io_in_c_bits_source;
  wire [63:0] c_set_wo_ready = io_in_c_valid & c_first_1 & _T_2973 ? _c_set_wo_ready_T : 64'h0;
  wire  _T_2980 = _c_first_T & c_first_1 & _T_2973;
  wire [3:0] _c_sizes_set_interm_T = {io_in_c_bits_size, 1'h0};
  wire [3:0] _c_sizes_set_interm_T_1 = _c_sizes_set_interm_T | 4'h1;
  wire [7:0] _GEN_109 = {io_in_c_bits_source, 2'h0};
  wire [8:0] _c_opcodes_set_T = {{1'd0}, _GEN_109};
  wire [3:0] c_sizes_set_interm = _c_first_T & c_first_1 & _T_2973 ? _c_sizes_set_interm_T_1 : 4'h0;
  wire [514:0] _GEN_112 = {{511'd0}, c_sizes_set_interm};
  wire [514:0] _c_sizes_set_T_1 = _GEN_112 << _c_opcodes_set_T;
  wire [63:0] _T_2981 = inflight_1 >> io_in_c_bits_source;
  wire  _T_2983 = ~_T_2981[0];
  wire [63:0] c_set = _c_first_T & c_first_1 & _T_2973 ? _c_set_wo_ready_T : 64'h0;
  wire [514:0] _GEN_77 = _c_first_T & c_first_1 & _T_2973 ? _c_sizes_set_T_1 : 515'h0;
  wire  _T_2987 = io_in_d_valid & d_first_2;
  wire  _T_2989 = io_in_d_valid & d_first_2 & _T_1342;
  wire [63:0] d_clr_wo_ready_1 = io_in_d_valid & d_first_2 & _T_1342 ? _d_clr_wo_ready_T : 64'h0;
  wire [63:0] d_clr_1 = _d_first_T & d_first_2 & _T_1342 ? _d_clr_wo_ready_T : 64'h0;
  wire [526:0] _GEN_80 = _d_first_T & d_first_2 & _T_1342 ? _d_opcodes_clr_T_5 : 527'h0;
  wire  _same_cycle_resp_T_8 = io_in_c_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp_1 = _T_2974 & io_in_c_bits_source == io_in_d_bits_source;
  wire [63:0] _T_2997 = inflight_1 >> io_in_d_bits_source;
  wire  _T_2999 = _T_2997[0] | same_cycle_resp_1;
  wire  _T_3003 = io_in_d_bits_size == io_in_c_bits_size;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_3007 = _GEN_102 == c_size_lookup;
  wire  _T_3016 = _T_2987 & c_first_1 & io_in_c_valid & _same_cycle_resp_T_8 & _T_1342;
  wire  _T_3018 = _T_2946 | io_in_c_ready;
  wire  _T_3022 = |c_set_wo_ready;
  wire  _T_3023 = c_set_wo_ready != d_clr_wo_ready_1;
  wire [63:0] _inflight_T_3 = inflight_1 | c_set;
  wire [63:0] _inflight_T_4 = ~d_clr_1;
  wire [63:0] _inflight_T_5 = _inflight_T_3 & _inflight_T_4;
  wire [255:0] d_opcodes_clr_1 = _GEN_80[255:0];
  wire [255:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [255:0] c_sizes_set = _GEN_77[255:0];
  wire [255:0] _inflight_sizes_T_3 = inflight_sizes_1 | c_sizes_set;
  wire [255:0] _inflight_sizes_T_5 = _inflight_sizes_T_3 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_3032 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  reg  inflight_2;
  reg [3:0] d_first_counter_3;
  wire [3:0] d_first_counter1_3 = d_first_counter_3 - 4'h1;
  wire  d_first_3 = d_first_counter_3 == 4'h0;
  wire  _T_3044 = io_in_d_bits_opcode[2] & ~io_in_d_bits_opcode[1];
  wire  _T_3045 = _d_first_T & d_first_3 & _T_3044;
  wire  _T_3048 = ~inflight_2;
  wire [1:0] _GEN_84 = _d_first_T & d_first_3 & _T_3044 ? 2'h1 : 2'h0;
  wire  _T_3052 = io_in_e_ready & io_in_e_valid;
  wire [1:0] _e_clr_T = 2'h1 << io_in_e_bits_sink;
  wire  d_set = _GEN_84[0];
  wire  _T_3056 = (d_set | inflight_2) >> io_in_e_bits_sink;
  wire [1:0] _GEN_85 = _T_3052 ? _e_clr_T : 2'h0;
  wire  e_clr = _GEN_85[0];
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 4'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      param <= io_in_a_bits_param;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 4'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      c_first_counter <= 4'h0;
    end else if (_c_first_T) begin
      if (c_first) begin
        if (c_first_beats1_opdata) begin
          c_first_counter <= c_first_beats1_decode;
        end else begin
          c_first_counter <= 4'h0;
        end
      end else begin
        c_first_counter <= c_first_counter1;
      end
    end
    if (_c_first_T & c_first) begin
      opcode_3 <= io_in_c_bits_opcode;
    end
    if (_c_first_T & c_first) begin
      param_3 <= io_in_c_bits_param;
    end
    if (_c_first_T & c_first) begin
      size_3 <= io_in_c_bits_size;
    end
    if (_c_first_T & c_first) begin
      source_3 <= io_in_c_bits_source;
    end
    if (_c_first_T & c_first) begin
      address_2 <= io_in_c_bits_address;
    end
    if (reset) begin
      inflight <= 64'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 256'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 256'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 4'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 4'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 4'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 64'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 256'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      c_first_counter_1 <= 4'h0;
    end else if (_c_first_T) begin
      if (c_first_1) begin
        if (c_first_beats1_opdata) begin
          c_first_counter_1 <= c_first_beats1_decode;
        end else begin
          c_first_counter_1 <= 4'h0;
        end
      end else begin
        c_first_counter_1 <= c_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_2 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 4'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_c_first_T | _d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    if (reset) begin
      inflight_2 <= 1'h0;
    end else begin
      inflight_2 <= (inflight_2 | d_set) & ~e_clr;
    end
    if (reset) begin
      d_first_counter_3 <= 4'h0;
    end else if (_d_first_T) begin
      if (d_first_3) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_3 <= d_first_beats1_decode;
        end else begin
          d_first_counter_3 <= 4'h0;
        end
      end else begin
        d_first_counter_3 <= d_first_counter1_3;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_222 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_333 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_347 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_593 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_360 & ~(_T_352 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_709 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_606 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_732 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_720 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_852 & ~(_T_970 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1086 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_1086 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_974 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1076 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1076 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1206 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_1206 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1094 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_834 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_834 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_1326 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_1326 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_1214 & ~(_T_724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1338 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1338 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1346 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1346 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1358 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1342 & ~(_T_1358 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1346 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1346 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1373 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1373 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1377 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1377 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1362 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1346 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1346 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1373 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1373 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1377 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1377 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1410 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1390 & ~(_T_1410 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1419 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1410 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1436 & ~(_T_1410 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1350 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1350 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1354 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1454 & ~(_T_1354 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2224 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2246 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2368 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2368 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2479 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2479 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release smaller than a beat (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid report param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2264 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2368 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2368 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2479 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2479 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2238 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2501 & ~(_T_2238 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(_T_2744 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2734 & ~(_T_2744 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(_T_2744 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2752 & ~(_T_2744 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(address_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(address_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck address not aligned to size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(_T_2744 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2766 & ~(_T_2744 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channels carries invalid sink ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_e_valid & ~(sink_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2789 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2789 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2793 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2793 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2797 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2797 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2801 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2801 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2788 & ~(_T_2805 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2788 & ~(_T_2805 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2813 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2813 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2817 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2817 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2821 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2821 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2825 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2825 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2812 & ~(_T_2833 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2812 & ~(_T_2833 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2865 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2865 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2869 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2869 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2873 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2873 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2877 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2877 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2864 & ~(_T_2881 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2864 & ~(_T_2881 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2890 & ~(_T_2894 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2890 & ~(_T_2894 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & ~(_T_2913 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & ~(_T_2913 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2919 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2919 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2923 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & same_cycle_resp & ~(_T_2923 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2931 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2931 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2935 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2901 & ~same_cycle_resp & ~(_T_2935 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2945 & ~(_T_2947 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2945 & ~(_T_2947 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2954 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2954 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2963 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2963 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2980 & ~(_T_2983 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel re-used a source ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2980 & ~(_T_2983 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2989 & ~(_T_2999 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2989 & ~(_T_2999 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2989 & same_cycle_resp_1 & ~(_T_3003 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2989 & same_cycle_resp_1 & ~(_T_3003 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2989 & ~same_cycle_resp_1 & ~(_T_3007 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2989 & ~same_cycle_resp_1 & ~(_T_3007 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3016 & ~(_T_3018 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3016 & ~(_T_3018 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3022 & ~(_T_3023 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3022 & ~(_T_3023 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_3032 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_3032 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3045 & ~(_T_3048 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel re-used a sink ID (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3045 & ~(_T_3048 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_3052 & ~(_T_3056 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:153:118)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_3052 & ~(_T_3056 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[3:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  source = _RAND_4[5:0];
  _RAND_5 = {1{`RANDOM}};
  address = _RAND_5[31:0];
  _RAND_6 = {1{`RANDOM}};
  d_first_counter = _RAND_6[3:0];
  _RAND_7 = {1{`RANDOM}};
  opcode_1 = _RAND_7[2:0];
  _RAND_8 = {1{`RANDOM}};
  param_1 = _RAND_8[1:0];
  _RAND_9 = {1{`RANDOM}};
  size_1 = _RAND_9[2:0];
  _RAND_10 = {1{`RANDOM}};
  source_1 = _RAND_10[5:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  c_first_counter = _RAND_12[3:0];
  _RAND_13 = {1{`RANDOM}};
  opcode_3 = _RAND_13[2:0];
  _RAND_14 = {1{`RANDOM}};
  param_3 = _RAND_14[2:0];
  _RAND_15 = {1{`RANDOM}};
  size_3 = _RAND_15[2:0];
  _RAND_16 = {1{`RANDOM}};
  source_3 = _RAND_16[5:0];
  _RAND_17 = {1{`RANDOM}};
  address_2 = _RAND_17[31:0];
  _RAND_18 = {2{`RANDOM}};
  inflight = _RAND_18[63:0];
  _RAND_19 = {8{`RANDOM}};
  inflight_opcodes = _RAND_19[255:0];
  _RAND_20 = {8{`RANDOM}};
  inflight_sizes = _RAND_20[255:0];
  _RAND_21 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_21[3:0];
  _RAND_22 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_22[3:0];
  _RAND_23 = {1{`RANDOM}};
  watchdog = _RAND_23[31:0];
  _RAND_24 = {2{`RANDOM}};
  inflight_1 = _RAND_24[63:0];
  _RAND_25 = {8{`RANDOM}};
  inflight_sizes_1 = _RAND_25[255:0];
  _RAND_26 = {1{`RANDOM}};
  c_first_counter_1 = _RAND_26[3:0];
  _RAND_27 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_27[3:0];
  _RAND_28 = {1{`RANDOM}};
  watchdog_1 = _RAND_28[31:0];
  _RAND_29 = {1{`RANDOM}};
  inflight_2 = _RAND_29[0:0];
  _RAND_30 = {1{`RANDOM}};
  d_first_counter_3 = _RAND_30[3:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Repeater_2(
  input         clock,
  input         reset,
  input         io_repeat,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_param,
  input  [2:0]  io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input         io_enq_bits_denied,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
  input         io_deq_ready,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
  output [2:0]  io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output        io_deq_bits_denied,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [63:0] _RAND_6;
  reg [31:0] _RAND_7;
`endif // RANDOMIZE_REG_INIT
  reg  full;
  reg [2:0] saved_opcode;
  reg [1:0] saved_param;
  reg [2:0] saved_size;
  reg [5:0] saved_source;
  reg  saved_denied;
  reg [63:0] saved_data;
  reg  saved_corrupt;
  wire  _T = io_enq_ready & io_enq_valid;
  wire  _GEN_0 = _T & io_repeat | full;
  wire  _T_2 = io_deq_ready & io_deq_valid;
  assign io_enq_ready = io_deq_ready & ~full;
  assign io_deq_valid = io_enq_valid | full;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_param = full ? saved_param : io_enq_bits_param;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_denied = full ? saved_denied : io_enq_bits_denied;
  assign io_deq_bits_data = full ? saved_data : io_enq_bits_data;
  assign io_deq_bits_corrupt = full ? saved_corrupt : io_enq_bits_corrupt;
  always @(posedge clock) begin
    if (reset) begin
      full <= 1'h0;
    end else if (_T_2 & ~io_repeat) begin
      full <= 1'h0;
    end else begin
      full <= _GEN_0;
    end
    if (_T & io_repeat) begin
      saved_opcode <= io_enq_bits_opcode;
    end
    if (_T & io_repeat) begin
      saved_param <= io_enq_bits_param;
    end
    if (_T & io_repeat) begin
      saved_size <= io_enq_bits_size;
    end
    if (_T & io_repeat) begin
      saved_source <= io_enq_bits_source;
    end
    if (_T & io_repeat) begin
      saved_denied <= io_enq_bits_denied;
    end
    if (_T & io_repeat) begin
      saved_data <= io_enq_bits_data;
    end
    if (_T & io_repeat) begin
      saved_corrupt <= io_enq_bits_corrupt;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  full = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  saved_opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  saved_param = _RAND_2[1:0];
  _RAND_3 = {1{`RANDOM}};
  saved_size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  saved_source = _RAND_4[5:0];
  _RAND_5 = {1{`RANDOM}};
  saved_denied = _RAND_5[0:0];
  _RAND_6 = {2{`RANDOM}};
  saved_data = _RAND_6[63:0];
  _RAND_7 = {1{`RANDOM}};
  saved_corrupt = _RAND_7[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLWidthWidget_1(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_param,
  input  [2:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [3:0]  auto_in_a_bits_mask,
  input  [31:0] auto_in_a_bits_data,
  output        auto_in_c_ready,
  input         auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
  input  [2:0]  auto_in_c_bits_param,
  input  [2:0]  auto_in_c_bits_size,
  input  [5:0]  auto_in_c_bits_source,
  input  [31:0] auto_in_c_bits_address,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [31:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  output        auto_in_e_ready,
  input         auto_in_e_valid,
  input         auto_in_e_bits_sink,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [2:0]  auto_out_a_bits_param,
  output [2:0]  auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  input         auto_out_c_ready,
  output        auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
  output [2:0]  auto_out_c_bits_param,
  output [2:0]  auto_out_c_bits_size,
  output [5:0]  auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  input         auto_out_e_ready,
  output        auto_out_e_valid,
  output        auto_out_e_bits_sink
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [31:0] _RAND_18;
  reg [31:0] _RAND_19;
  reg [31:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [31:0] _RAND_24;
  reg [31:0] _RAND_25;
  reg [31:0] _RAND_26;
  reg [31:0] _RAND_27;
  reg [31:0] _RAND_28;
  reg [31:0] _RAND_29;
  reg [31:0] _RAND_30;
  reg [31:0] _RAND_31;
  reg [31:0] _RAND_32;
  reg [31:0] _RAND_33;
  reg [31:0] _RAND_34;
  reg [31:0] _RAND_35;
  reg [31:0] _RAND_36;
  reg [31:0] _RAND_37;
  reg [31:0] _RAND_38;
  reg [31:0] _RAND_39;
  reg [31:0] _RAND_40;
  reg [31:0] _RAND_41;
  reg [31:0] _RAND_42;
  reg [31:0] _RAND_43;
  reg [31:0] _RAND_44;
  reg [31:0] _RAND_45;
  reg [31:0] _RAND_46;
  reg [31:0] _RAND_47;
  reg [31:0] _RAND_48;
  reg [31:0] _RAND_49;
  reg [31:0] _RAND_50;
  reg [31:0] _RAND_51;
  reg [31:0] _RAND_52;
  reg [31:0] _RAND_53;
  reg [31:0] _RAND_54;
  reg [31:0] _RAND_55;
  reg [31:0] _RAND_56;
  reg [31:0] _RAND_57;
  reg [31:0] _RAND_58;
  reg [31:0] _RAND_59;
  reg [31:0] _RAND_60;
  reg [31:0] _RAND_61;
  reg [31:0] _RAND_62;
  reg [31:0] _RAND_63;
  reg [31:0] _RAND_64;
  reg [31:0] _RAND_65;
  reg [31:0] _RAND_66;
  reg [31:0] _RAND_67;
  reg [31:0] _RAND_68;
  reg [31:0] _RAND_69;
  reg [31:0] _RAND_70;
  reg [31:0] _RAND_71;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_param;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [5:0] monitor_io_in_a_bits_source;
  wire [31:0] monitor_io_in_a_bits_address;
  wire [3:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_c_ready;
  wire  monitor_io_in_c_valid;
  wire [2:0] monitor_io_in_c_bits_opcode;
  wire [2:0] monitor_io_in_c_bits_param;
  wire [2:0] monitor_io_in_c_bits_size;
  wire [5:0] monitor_io_in_c_bits_source;
  wire [31:0] monitor_io_in_c_bits_address;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [5:0] monitor_io_in_d_bits_source;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  monitor_io_in_e_ready;
  wire  monitor_io_in_e_valid;
  wire  monitor_io_in_e_bits_sink;
  wire  repeated_repeater_clock;
  wire  repeated_repeater_reset;
  wire  repeated_repeater_io_repeat;
  wire  repeated_repeater_io_enq_ready;
  wire  repeated_repeater_io_enq_valid;
  wire [2:0] repeated_repeater_io_enq_bits_opcode;
  wire [1:0] repeated_repeater_io_enq_bits_param;
  wire [2:0] repeated_repeater_io_enq_bits_size;
  wire [5:0] repeated_repeater_io_enq_bits_source;
  wire  repeated_repeater_io_enq_bits_denied;
  wire [63:0] repeated_repeater_io_enq_bits_data;
  wire  repeated_repeater_io_enq_bits_corrupt;
  wire  repeated_repeater_io_deq_ready;
  wire  repeated_repeater_io_deq_valid;
  wire [2:0] repeated_repeater_io_deq_bits_opcode;
  wire [1:0] repeated_repeater_io_deq_bits_param;
  wire [2:0] repeated_repeater_io_deq_bits_size;
  wire [5:0] repeated_repeater_io_deq_bits_source;
  wire  repeated_repeater_io_deq_bits_denied;
  wire [63:0] repeated_repeater_io_deq_bits_data;
  wire  repeated_repeater_io_deq_bits_corrupt;
  wire  hasData = ~auto_in_a_bits_opcode[2];
  wire [9:0] _limit_T_1 = 10'h7 << auto_in_a_bits_size;
  wire [2:0] _limit_T_3 = ~_limit_T_1[2:0];
  wire  limit = _limit_T_3[2];
  reg  count;
  wire  last = count == limit | ~hasData;
  wire  enable_0 = ~(|(count & limit));
  wire  _bundleIn_0_a_ready_T = ~last;
  wire  bundleIn_0_a_ready = auto_out_a_ready | ~last;
  wire  _T = bundleIn_0_a_ready & auto_in_a_valid;
  reg  bundleOut_0_a_bits_data_rdata_written_once;
  wire  bundleOut_0_a_bits_data_masked_enable_0 = enable_0 | ~bundleOut_0_a_bits_data_rdata_written_once;
  reg [31:0] bundleOut_0_a_bits_data_rdata_0;
  wire [31:0] bundleOut_0_a_bits_data_lo = bundleOut_0_a_bits_data_masked_enable_0 ? auto_in_a_bits_data :
    bundleOut_0_a_bits_data_rdata_0;
  wire  _GEN_4 = _T & _bundleIn_0_a_ready_T | bundleOut_0_a_bits_data_rdata_written_once;
  wire [1:0] bundleOut_0_a_bits_mask_sizeOH_shiftAmount = auto_in_a_bits_size[1:0];
  wire [3:0] _bundleOut_0_a_bits_mask_sizeOH_T_1 = 4'h1 << bundleOut_0_a_bits_mask_sizeOH_shiftAmount;
  wire [2:0] bundleOut_0_a_bits_mask_sizeOH = _bundleOut_0_a_bits_mask_sizeOH_T_1[2:0] | 3'h1;
  wire  _bundleOut_0_a_bits_mask_T = auto_in_a_bits_size >= 3'h3;
  wire  bundleOut_0_a_bits_mask_size = bundleOut_0_a_bits_mask_sizeOH[2];
  wire  bundleOut_0_a_bits_mask_bit = auto_in_a_bits_address[2];
  wire  bundleOut_0_a_bits_mask_nbit = ~bundleOut_0_a_bits_mask_bit;
  wire  bundleOut_0_a_bits_mask_acc = _bundleOut_0_a_bits_mask_T | bundleOut_0_a_bits_mask_size &
    bundleOut_0_a_bits_mask_nbit;
  wire  bundleOut_0_a_bits_mask_acc_1 = _bundleOut_0_a_bits_mask_T | bundleOut_0_a_bits_mask_size &
    bundleOut_0_a_bits_mask_bit;
  wire  bundleOut_0_a_bits_mask_size_1 = bundleOut_0_a_bits_mask_sizeOH[1];
  wire  bundleOut_0_a_bits_mask_bit_1 = auto_in_a_bits_address[1];
  wire  bundleOut_0_a_bits_mask_nbit_1 = ~bundleOut_0_a_bits_mask_bit_1;
  wire  bundleOut_0_a_bits_mask_eq_2 = bundleOut_0_a_bits_mask_nbit & bundleOut_0_a_bits_mask_nbit_1;
  wire  bundleOut_0_a_bits_mask_acc_2 = bundleOut_0_a_bits_mask_acc | bundleOut_0_a_bits_mask_size_1 &
    bundleOut_0_a_bits_mask_eq_2;
  wire  bundleOut_0_a_bits_mask_eq_3 = bundleOut_0_a_bits_mask_nbit & bundleOut_0_a_bits_mask_bit_1;
  wire  bundleOut_0_a_bits_mask_acc_3 = bundleOut_0_a_bits_mask_acc | bundleOut_0_a_bits_mask_size_1 &
    bundleOut_0_a_bits_mask_eq_3;
  wire  bundleOut_0_a_bits_mask_eq_4 = bundleOut_0_a_bits_mask_bit & bundleOut_0_a_bits_mask_nbit_1;
  wire  bundleOut_0_a_bits_mask_acc_4 = bundleOut_0_a_bits_mask_acc_1 | bundleOut_0_a_bits_mask_size_1 &
    bundleOut_0_a_bits_mask_eq_4;
  wire  bundleOut_0_a_bits_mask_eq_5 = bundleOut_0_a_bits_mask_bit & bundleOut_0_a_bits_mask_bit_1;
  wire  bundleOut_0_a_bits_mask_acc_5 = bundleOut_0_a_bits_mask_acc_1 | bundleOut_0_a_bits_mask_size_1 &
    bundleOut_0_a_bits_mask_eq_5;
  wire  bundleOut_0_a_bits_mask_size_2 = bundleOut_0_a_bits_mask_sizeOH[0];
  wire  bundleOut_0_a_bits_mask_bit_2 = auto_in_a_bits_address[0];
  wire  bundleOut_0_a_bits_mask_nbit_2 = ~bundleOut_0_a_bits_mask_bit_2;
  wire  bundleOut_0_a_bits_mask_eq_6 = bundleOut_0_a_bits_mask_eq_2 & bundleOut_0_a_bits_mask_nbit_2;
  wire  bundleOut_0_a_bits_mask_lo_lo_lo = bundleOut_0_a_bits_mask_acc_2 | bundleOut_0_a_bits_mask_size_2 &
    bundleOut_0_a_bits_mask_eq_6;
  wire  bundleOut_0_a_bits_mask_eq_7 = bundleOut_0_a_bits_mask_eq_2 & bundleOut_0_a_bits_mask_bit_2;
  wire  bundleOut_0_a_bits_mask_lo_lo_hi = bundleOut_0_a_bits_mask_acc_2 | bundleOut_0_a_bits_mask_size_2 &
    bundleOut_0_a_bits_mask_eq_7;
  wire  bundleOut_0_a_bits_mask_eq_8 = bundleOut_0_a_bits_mask_eq_3 & bundleOut_0_a_bits_mask_nbit_2;
  wire  bundleOut_0_a_bits_mask_lo_hi_lo = bundleOut_0_a_bits_mask_acc_3 | bundleOut_0_a_bits_mask_size_2 &
    bundleOut_0_a_bits_mask_eq_8;
  wire  bundleOut_0_a_bits_mask_eq_9 = bundleOut_0_a_bits_mask_eq_3 & bundleOut_0_a_bits_mask_bit_2;
  wire  bundleOut_0_a_bits_mask_lo_hi_hi = bundleOut_0_a_bits_mask_acc_3 | bundleOut_0_a_bits_mask_size_2 &
    bundleOut_0_a_bits_mask_eq_9;
  wire  bundleOut_0_a_bits_mask_eq_10 = bundleOut_0_a_bits_mask_eq_4 & bundleOut_0_a_bits_mask_nbit_2;
  wire  bundleOut_0_a_bits_mask_hi_lo_lo = bundleOut_0_a_bits_mask_acc_4 | bundleOut_0_a_bits_mask_size_2 &
    bundleOut_0_a_bits_mask_eq_10;
  wire  bundleOut_0_a_bits_mask_eq_11 = bundleOut_0_a_bits_mask_eq_4 & bundleOut_0_a_bits_mask_bit_2;
  wire  bundleOut_0_a_bits_mask_hi_lo_hi = bundleOut_0_a_bits_mask_acc_4 | bundleOut_0_a_bits_mask_size_2 &
    bundleOut_0_a_bits_mask_eq_11;
  wire  bundleOut_0_a_bits_mask_eq_12 = bundleOut_0_a_bits_mask_eq_5 & bundleOut_0_a_bits_mask_nbit_2;
  wire  bundleOut_0_a_bits_mask_hi_hi_lo = bundleOut_0_a_bits_mask_acc_5 | bundleOut_0_a_bits_mask_size_2 &
    bundleOut_0_a_bits_mask_eq_12;
  wire  bundleOut_0_a_bits_mask_eq_13 = bundleOut_0_a_bits_mask_eq_5 & bundleOut_0_a_bits_mask_bit_2;
  wire  bundleOut_0_a_bits_mask_hi_hi_hi = bundleOut_0_a_bits_mask_acc_5 | bundleOut_0_a_bits_mask_size_2 &
    bundleOut_0_a_bits_mask_eq_13;
  wire [7:0] _bundleOut_0_a_bits_mask_T_1 = {bundleOut_0_a_bits_mask_hi_hi_hi,bundleOut_0_a_bits_mask_hi_hi_lo,
    bundleOut_0_a_bits_mask_hi_lo_hi,bundleOut_0_a_bits_mask_hi_lo_lo,bundleOut_0_a_bits_mask_lo_hi_hi,
    bundleOut_0_a_bits_mask_lo_hi_lo,bundleOut_0_a_bits_mask_lo_lo_hi,bundleOut_0_a_bits_mask_lo_lo_lo};
  reg  bundleOut_0_a_bits_mask_rdata_written_once;
  wire  bundleOut_0_a_bits_mask_masked_enable_0 = enable_0 | ~bundleOut_0_a_bits_mask_rdata_written_once;
  reg [3:0] bundleOut_0_a_bits_mask_rdata_0;
  wire [3:0] bundleOut_0_a_bits_mask_lo_1 = bundleOut_0_a_bits_mask_masked_enable_0 ? auto_in_a_bits_mask :
    bundleOut_0_a_bits_mask_rdata_0;
  wire  _GEN_6 = _T & _bundleIn_0_a_ready_T | bundleOut_0_a_bits_mask_rdata_written_once;
  wire [7:0] _bundleOut_0_a_bits_mask_T_5 = {auto_in_a_bits_mask,bundleOut_0_a_bits_mask_lo_1};
  wire [7:0] _bundleOut_0_a_bits_mask_T_7 = hasData ? _bundleOut_0_a_bits_mask_T_5 : 8'hff;
  wire [31:0] cated_bits_data_hi = repeated_repeater_io_deq_bits_data[63:32];
  wire [31:0] cated_bits_data_lo = auto_out_d_bits_data[31:0];
  wire [63:0] cated_bits_data = {cated_bits_data_hi,cated_bits_data_lo};
  wire [2:0] cated_bits_opcode = repeated_repeater_io_deq_bits_opcode;
  wire  repeat_hasData = cated_bits_opcode[0];
  wire [2:0] cated_bits_size = repeated_repeater_io_deq_bits_size;
  wire [9:0] _repeat_limit_T_1 = 10'h7 << cated_bits_size;
  wire [2:0] _repeat_limit_T_3 = ~_repeat_limit_T_1[2:0];
  wire  repeat_limit = _repeat_limit_T_3[2];
  reg  repeat_count;
  wire  repeat_first = ~repeat_count;
  wire  repeat_last = repeat_count == repeat_limit | ~repeat_hasData;
  wire  cated_valid = repeated_repeater_io_deq_valid;
  wire  _repeat_T = auto_in_d_ready & cated_valid;
  reg  repeat_sel_sel_sources_0;
  reg  repeat_sel_sel_sources_1;
  reg  repeat_sel_sel_sources_2;
  reg  repeat_sel_sel_sources_3;
  reg  repeat_sel_sel_sources_4;
  reg  repeat_sel_sel_sources_5;
  reg  repeat_sel_sel_sources_6;
  reg  repeat_sel_sel_sources_7;
  reg  repeat_sel_sel_sources_8;
  reg  repeat_sel_sel_sources_9;
  reg  repeat_sel_sel_sources_10;
  reg  repeat_sel_sel_sources_11;
  reg  repeat_sel_sel_sources_12;
  reg  repeat_sel_sel_sources_13;
  reg  repeat_sel_sel_sources_14;
  reg  repeat_sel_sel_sources_15;
  reg  repeat_sel_sel_sources_16;
  reg  repeat_sel_sel_sources_17;
  reg  repeat_sel_sel_sources_18;
  reg  repeat_sel_sel_sources_19;
  reg  repeat_sel_sel_sources_20;
  reg  repeat_sel_sel_sources_21;
  reg  repeat_sel_sel_sources_22;
  reg  repeat_sel_sel_sources_23;
  reg  repeat_sel_sel_sources_24;
  reg  repeat_sel_sel_sources_25;
  reg  repeat_sel_sel_sources_26;
  reg  repeat_sel_sel_sources_27;
  reg  repeat_sel_sel_sources_28;
  reg  repeat_sel_sel_sources_29;
  reg  repeat_sel_sel_sources_30;
  reg  repeat_sel_sel_sources_31;
  reg  repeat_sel_sel_sources_32;
  reg  repeat_sel_sel_sources_33;
  reg  repeat_sel_sel_sources_34;
  reg  repeat_sel_sel_sources_35;
  reg  repeat_sel_sel_sources_36;
  reg  repeat_sel_sel_sources_37;
  reg  repeat_sel_sel_sources_38;
  reg  repeat_sel_sel_sources_39;
  reg  repeat_sel_sel_sources_40;
  reg  repeat_sel_sel_sources_41;
  reg  repeat_sel_sel_sources_42;
  reg  repeat_sel_sel_sources_43;
  reg  repeat_sel_sel_sources_44;
  reg  repeat_sel_sel_sources_45;
  reg  repeat_sel_sel_sources_46;
  reg  repeat_sel_sel_sources_47;
  reg  repeat_sel_sel_sources_48;
  reg  repeat_sel_sel_sources_49;
  reg  repeat_sel_sel_sources_50;
  reg  repeat_sel_sel_sources_51;
  reg  repeat_sel_sel_sources_52;
  reg  repeat_sel_sel_sources_53;
  reg  repeat_sel_sel_sources_54;
  reg  repeat_sel_sel_sources_55;
  reg  repeat_sel_sel_sources_56;
  reg  repeat_sel_sel_sources_57;
  reg  repeat_sel_sel_sources_58;
  reg  repeat_sel_sel_sources_59;
  reg  repeat_sel_sel_sources_60;
  reg  repeat_sel_sel_sources_61;
  reg  repeat_sel_sel_sources_62;
  reg  repeat_sel_sel_sources_63;
  wire [5:0] cated_bits_source = repeated_repeater_io_deq_bits_source;
  reg  repeat_sel_hold_r;
  wire  _GEN_139 = 6'h1 == cated_bits_source ? repeat_sel_sel_sources_1 : repeat_sel_sel_sources_0;
  wire  _GEN_140 = 6'h2 == cated_bits_source ? repeat_sel_sel_sources_2 : _GEN_139;
  wire  _GEN_141 = 6'h3 == cated_bits_source ? repeat_sel_sel_sources_3 : _GEN_140;
  wire  _GEN_142 = 6'h4 == cated_bits_source ? repeat_sel_sel_sources_4 : _GEN_141;
  wire  _GEN_143 = 6'h5 == cated_bits_source ? repeat_sel_sel_sources_5 : _GEN_142;
  wire  _GEN_144 = 6'h6 == cated_bits_source ? repeat_sel_sel_sources_6 : _GEN_143;
  wire  _GEN_145 = 6'h7 == cated_bits_source ? repeat_sel_sel_sources_7 : _GEN_144;
  wire  _GEN_146 = 6'h8 == cated_bits_source ? repeat_sel_sel_sources_8 : _GEN_145;
  wire  _GEN_147 = 6'h9 == cated_bits_source ? repeat_sel_sel_sources_9 : _GEN_146;
  wire  _GEN_148 = 6'ha == cated_bits_source ? repeat_sel_sel_sources_10 : _GEN_147;
  wire  _GEN_149 = 6'hb == cated_bits_source ? repeat_sel_sel_sources_11 : _GEN_148;
  wire  _GEN_150 = 6'hc == cated_bits_source ? repeat_sel_sel_sources_12 : _GEN_149;
  wire  _GEN_151 = 6'hd == cated_bits_source ? repeat_sel_sel_sources_13 : _GEN_150;
  wire  _GEN_152 = 6'he == cated_bits_source ? repeat_sel_sel_sources_14 : _GEN_151;
  wire  _GEN_153 = 6'hf == cated_bits_source ? repeat_sel_sel_sources_15 : _GEN_152;
  wire  _GEN_154 = 6'h10 == cated_bits_source ? repeat_sel_sel_sources_16 : _GEN_153;
  wire  _GEN_155 = 6'h11 == cated_bits_source ? repeat_sel_sel_sources_17 : _GEN_154;
  wire  _GEN_156 = 6'h12 == cated_bits_source ? repeat_sel_sel_sources_18 : _GEN_155;
  wire  _GEN_157 = 6'h13 == cated_bits_source ? repeat_sel_sel_sources_19 : _GEN_156;
  wire  _GEN_158 = 6'h14 == cated_bits_source ? repeat_sel_sel_sources_20 : _GEN_157;
  wire  _GEN_159 = 6'h15 == cated_bits_source ? repeat_sel_sel_sources_21 : _GEN_158;
  wire  _GEN_160 = 6'h16 == cated_bits_source ? repeat_sel_sel_sources_22 : _GEN_159;
  wire  _GEN_161 = 6'h17 == cated_bits_source ? repeat_sel_sel_sources_23 : _GEN_160;
  wire  _GEN_162 = 6'h18 == cated_bits_source ? repeat_sel_sel_sources_24 : _GEN_161;
  wire  _GEN_163 = 6'h19 == cated_bits_source ? repeat_sel_sel_sources_25 : _GEN_162;
  wire  _GEN_164 = 6'h1a == cated_bits_source ? repeat_sel_sel_sources_26 : _GEN_163;
  wire  _GEN_165 = 6'h1b == cated_bits_source ? repeat_sel_sel_sources_27 : _GEN_164;
  wire  _GEN_166 = 6'h1c == cated_bits_source ? repeat_sel_sel_sources_28 : _GEN_165;
  wire  _GEN_167 = 6'h1d == cated_bits_source ? repeat_sel_sel_sources_29 : _GEN_166;
  wire  _GEN_168 = 6'h1e == cated_bits_source ? repeat_sel_sel_sources_30 : _GEN_167;
  wire  _GEN_169 = 6'h1f == cated_bits_source ? repeat_sel_sel_sources_31 : _GEN_168;
  wire  _GEN_170 = 6'h20 == cated_bits_source ? repeat_sel_sel_sources_32 : _GEN_169;
  wire  _GEN_171 = 6'h21 == cated_bits_source ? repeat_sel_sel_sources_33 : _GEN_170;
  wire  _GEN_172 = 6'h22 == cated_bits_source ? repeat_sel_sel_sources_34 : _GEN_171;
  wire  _GEN_173 = 6'h23 == cated_bits_source ? repeat_sel_sel_sources_35 : _GEN_172;
  wire  _GEN_174 = 6'h24 == cated_bits_source ? repeat_sel_sel_sources_36 : _GEN_173;
  wire  _GEN_175 = 6'h25 == cated_bits_source ? repeat_sel_sel_sources_37 : _GEN_174;
  wire  _GEN_176 = 6'h26 == cated_bits_source ? repeat_sel_sel_sources_38 : _GEN_175;
  wire  _GEN_177 = 6'h27 == cated_bits_source ? repeat_sel_sel_sources_39 : _GEN_176;
  wire  _GEN_178 = 6'h28 == cated_bits_source ? repeat_sel_sel_sources_40 : _GEN_177;
  wire  _GEN_179 = 6'h29 == cated_bits_source ? repeat_sel_sel_sources_41 : _GEN_178;
  wire  _GEN_180 = 6'h2a == cated_bits_source ? repeat_sel_sel_sources_42 : _GEN_179;
  wire  _GEN_181 = 6'h2b == cated_bits_source ? repeat_sel_sel_sources_43 : _GEN_180;
  wire  _GEN_182 = 6'h2c == cated_bits_source ? repeat_sel_sel_sources_44 : _GEN_181;
  wire  _GEN_183 = 6'h2d == cated_bits_source ? repeat_sel_sel_sources_45 : _GEN_182;
  wire  _GEN_184 = 6'h2e == cated_bits_source ? repeat_sel_sel_sources_46 : _GEN_183;
  wire  _GEN_185 = 6'h2f == cated_bits_source ? repeat_sel_sel_sources_47 : _GEN_184;
  wire  _GEN_186 = 6'h30 == cated_bits_source ? repeat_sel_sel_sources_48 : _GEN_185;
  wire  _GEN_187 = 6'h31 == cated_bits_source ? repeat_sel_sel_sources_49 : _GEN_186;
  wire  _GEN_188 = 6'h32 == cated_bits_source ? repeat_sel_sel_sources_50 : _GEN_187;
  wire  _GEN_189 = 6'h33 == cated_bits_source ? repeat_sel_sel_sources_51 : _GEN_188;
  wire  _GEN_190 = 6'h34 == cated_bits_source ? repeat_sel_sel_sources_52 : _GEN_189;
  wire  _GEN_191 = 6'h35 == cated_bits_source ? repeat_sel_sel_sources_53 : _GEN_190;
  wire  _GEN_192 = 6'h36 == cated_bits_source ? repeat_sel_sel_sources_54 : _GEN_191;
  wire  _GEN_193 = 6'h37 == cated_bits_source ? repeat_sel_sel_sources_55 : _GEN_192;
  wire  _GEN_194 = 6'h38 == cated_bits_source ? repeat_sel_sel_sources_56 : _GEN_193;
  wire  _GEN_195 = 6'h39 == cated_bits_source ? repeat_sel_sel_sources_57 : _GEN_194;
  wire  _GEN_196 = 6'h3a == cated_bits_source ? repeat_sel_sel_sources_58 : _GEN_195;
  wire  _GEN_197 = 6'h3b == cated_bits_source ? repeat_sel_sel_sources_59 : _GEN_196;
  wire  _GEN_198 = 6'h3c == cated_bits_source ? repeat_sel_sel_sources_60 : _GEN_197;
  wire  _GEN_199 = 6'h3d == cated_bits_source ? repeat_sel_sel_sources_61 : _GEN_198;
  wire  _GEN_200 = 6'h3e == cated_bits_source ? repeat_sel_sel_sources_62 : _GEN_199;
  wire  _GEN_201 = 6'h3f == cated_bits_source ? repeat_sel_sel_sources_63 : _GEN_200;
  wire  _GEN_202 = repeat_first ? _GEN_201 : repeat_sel_hold_r;
  wire  repeat_sel = _GEN_202 & ~repeat_limit;
  wire  repeat_index = repeat_sel | repeat_count;
  wire [31:0] repeat_bundleIn_0_d_bits_data_mux_0 = cated_bits_data[31:0];
  wire [31:0] repeat_bundleIn_0_d_bits_data_mux_1 = cated_bits_data[63:32];
  wire  hasData_1 = auto_in_c_bits_opcode[0];
  wire [9:0] _limit_T_5 = 10'h7 << auto_in_c_bits_size;
  wire [2:0] _limit_T_7 = ~_limit_T_5[2:0];
  wire  limit_1 = _limit_T_7[2];
  reg  count_1;
  wire  last_1 = count_1 == limit_1 | ~hasData_1;
  wire  bundleIn_0_c_ready = auto_out_c_ready | ~last_1;
  wire  _T_1 = bundleIn_0_c_ready & auto_in_c_valid;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_15 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_param(monitor_io_in_a_bits_param),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_c_ready(monitor_io_in_c_ready),
    .io_in_c_valid(monitor_io_in_c_valid),
    .io_in_c_bits_opcode(monitor_io_in_c_bits_opcode),
    .io_in_c_bits_param(monitor_io_in_c_bits_param),
    .io_in_c_bits_size(monitor_io_in_c_bits_size),
    .io_in_c_bits_source(monitor_io_in_c_bits_source),
    .io_in_c_bits_address(monitor_io_in_c_bits_address),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt),
    .io_in_e_ready(monitor_io_in_e_ready),
    .io_in_e_valid(monitor_io_in_e_valid),
    .io_in_e_bits_sink(monitor_io_in_e_bits_sink)
  );
  CHIPLINK_PREFIX_Repeater_2 repeated_repeater (
    .clock(repeated_repeater_clock),
    .reset(repeated_repeater_reset),
    .io_repeat(repeated_repeater_io_repeat),
    .io_enq_ready(repeated_repeater_io_enq_ready),
    .io_enq_valid(repeated_repeater_io_enq_valid),
    .io_enq_bits_opcode(repeated_repeater_io_enq_bits_opcode),
    .io_enq_bits_param(repeated_repeater_io_enq_bits_param),
    .io_enq_bits_size(repeated_repeater_io_enq_bits_size),
    .io_enq_bits_source(repeated_repeater_io_enq_bits_source),
    .io_enq_bits_denied(repeated_repeater_io_enq_bits_denied),
    .io_enq_bits_data(repeated_repeater_io_enq_bits_data),
    .io_enq_bits_corrupt(repeated_repeater_io_enq_bits_corrupt),
    .io_deq_ready(repeated_repeater_io_deq_ready),
    .io_deq_valid(repeated_repeater_io_deq_valid),
    .io_deq_bits_opcode(repeated_repeater_io_deq_bits_opcode),
    .io_deq_bits_param(repeated_repeater_io_deq_bits_param),
    .io_deq_bits_size(repeated_repeater_io_deq_bits_size),
    .io_deq_bits_source(repeated_repeater_io_deq_bits_source),
    .io_deq_bits_denied(repeated_repeater_io_deq_bits_denied),
    .io_deq_bits_data(repeated_repeater_io_deq_bits_data),
    .io_deq_bits_corrupt(repeated_repeater_io_deq_bits_corrupt)
  );
  assign auto_in_a_ready = auto_out_a_ready | ~last;
  assign auto_in_c_ready = auto_out_c_ready | ~last_1;
  assign auto_in_d_valid = repeated_repeater_io_deq_valid;
  assign auto_in_d_bits_opcode = repeated_repeater_io_deq_bits_opcode;
  assign auto_in_d_bits_param = repeated_repeater_io_deq_bits_param;
  assign auto_in_d_bits_size = repeated_repeater_io_deq_bits_size;
  assign auto_in_d_bits_source = repeated_repeater_io_deq_bits_source;
  assign auto_in_d_bits_denied = repeated_repeater_io_deq_bits_denied;
  assign auto_in_d_bits_data = repeat_index ? repeat_bundleIn_0_d_bits_data_mux_1 : repeat_bundleIn_0_d_bits_data_mux_0;
  assign auto_in_d_bits_corrupt = repeated_repeater_io_deq_bits_corrupt;
  assign auto_in_e_ready = auto_out_e_ready;
  assign auto_out_a_valid = auto_in_a_valid & last;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_param = auto_in_a_bits_param;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_mask = _bundleOut_0_a_bits_mask_T_1 & _bundleOut_0_a_bits_mask_T_7;
  assign auto_out_a_bits_data = {auto_in_a_bits_data,bundleOut_0_a_bits_data_lo};
  assign auto_out_c_valid = auto_in_c_valid & last_1;
  assign auto_out_c_bits_opcode = auto_in_c_bits_opcode;
  assign auto_out_c_bits_param = auto_in_c_bits_param;
  assign auto_out_c_bits_size = auto_in_c_bits_size;
  assign auto_out_c_bits_source = auto_in_c_bits_source;
  assign auto_out_c_bits_address = auto_in_c_bits_address;
  assign auto_out_d_ready = repeated_repeater_io_enq_ready;
  assign auto_out_e_valid = auto_in_e_valid;
  assign auto_out_e_bits_sink = auto_in_e_bits_sink;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = auto_out_a_ready | ~last;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_param = auto_in_a_bits_param;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_c_ready = auto_out_c_ready | ~last_1;
  assign monitor_io_in_c_valid = auto_in_c_valid;
  assign monitor_io_in_c_bits_opcode = auto_in_c_bits_opcode;
  assign monitor_io_in_c_bits_param = auto_in_c_bits_param;
  assign monitor_io_in_c_bits_size = auto_in_c_bits_size;
  assign monitor_io_in_c_bits_source = auto_in_c_bits_source;
  assign monitor_io_in_c_bits_address = auto_in_c_bits_address;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = repeated_repeater_io_deq_valid;
  assign monitor_io_in_d_bits_opcode = repeated_repeater_io_deq_bits_opcode;
  assign monitor_io_in_d_bits_param = repeated_repeater_io_deq_bits_param;
  assign monitor_io_in_d_bits_size = repeated_repeater_io_deq_bits_size;
  assign monitor_io_in_d_bits_source = repeated_repeater_io_deq_bits_source;
  assign monitor_io_in_d_bits_denied = repeated_repeater_io_deq_bits_denied;
  assign monitor_io_in_d_bits_corrupt = repeated_repeater_io_deq_bits_corrupt;
  assign monitor_io_in_e_ready = auto_out_e_ready;
  assign monitor_io_in_e_valid = auto_in_e_valid;
  assign monitor_io_in_e_bits_sink = auto_in_e_bits_sink;
  assign repeated_repeater_clock = clock;
  assign repeated_repeater_reset = reset;
  assign repeated_repeater_io_repeat = ~repeat_last;
  assign repeated_repeater_io_enq_valid = auto_out_d_valid;
  assign repeated_repeater_io_enq_bits_opcode = auto_out_d_bits_opcode;
  assign repeated_repeater_io_enq_bits_param = auto_out_d_bits_param;
  assign repeated_repeater_io_enq_bits_size = auto_out_d_bits_size;
  assign repeated_repeater_io_enq_bits_source = auto_out_d_bits_source;
  assign repeated_repeater_io_enq_bits_denied = auto_out_d_bits_denied;
  assign repeated_repeater_io_enq_bits_data = auto_out_d_bits_data;
  assign repeated_repeater_io_enq_bits_corrupt = auto_out_d_bits_corrupt;
  assign repeated_repeater_io_deq_ready = auto_in_d_ready;
  always @(posedge clock) begin
    if (reset) begin
      count <= 1'h0;
    end else if (_T) begin
      if (last) begin
        count <= 1'h0;
      end else begin
        count <= count + 1'h1;
      end
    end
    if (reset) begin
      bundleOut_0_a_bits_data_rdata_written_once <= 1'h0;
    end else begin
      bundleOut_0_a_bits_data_rdata_written_once <= _GEN_4;
    end
    if (_T & _bundleIn_0_a_ready_T) begin
      if (bundleOut_0_a_bits_data_masked_enable_0) begin
        bundleOut_0_a_bits_data_rdata_0 <= auto_in_a_bits_data;
      end
    end
    if (reset) begin
      bundleOut_0_a_bits_mask_rdata_written_once <= 1'h0;
    end else begin
      bundleOut_0_a_bits_mask_rdata_written_once <= _GEN_6;
    end
    if (_T & _bundleIn_0_a_ready_T) begin
      if (bundleOut_0_a_bits_mask_masked_enable_0) begin
        bundleOut_0_a_bits_mask_rdata_0 <= auto_in_a_bits_mask;
      end
    end
    if (reset) begin
      repeat_count <= 1'h0;
    end else if (_repeat_T) begin
      if (repeat_last) begin
        repeat_count <= 1'h0;
      end else begin
        repeat_count <= repeat_count + 1'h1;
      end
    end
    if (_T) begin
      if (6'h0 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_0 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h1 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_1 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h2 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_2 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h3 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_3 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h4 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_4 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h5 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_5 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h6 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_6 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h7 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_7 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h8 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_8 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h9 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_9 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'ha == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_10 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'hb == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_11 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'hc == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_12 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'hd == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_13 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'he == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_14 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'hf == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_15 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h10 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_16 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h11 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_17 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h12 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_18 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h13 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_19 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h14 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_20 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h15 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_21 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h16 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_22 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h17 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_23 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h18 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_24 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h19 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_25 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h1a == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_26 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h1b == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_27 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h1c == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_28 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h1d == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_29 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h1e == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_30 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h1f == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_31 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h20 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_32 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h21 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_33 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h22 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_34 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h23 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_35 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h24 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_36 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h25 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_37 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h26 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_38 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h27 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_39 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h28 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_40 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h29 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_41 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h2a == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_42 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h2b == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_43 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h2c == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_44 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h2d == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_45 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h2e == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_46 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h2f == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_47 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h30 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_48 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h31 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_49 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h32 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_50 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h33 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_51 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h34 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_52 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h35 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_53 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h36 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_54 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h37 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_55 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h38 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_56 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h39 == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_57 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h3a == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_58 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h3b == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_59 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h3c == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_60 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h3d == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_61 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h3e == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_62 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (_T) begin
      if (6'h3f == auto_in_a_bits_source) begin
        repeat_sel_sel_sources_63 <= bundleOut_0_a_bits_mask_bit;
      end
    end
    if (repeat_first) begin
      if (6'h3f == cated_bits_source) begin
        repeat_sel_hold_r <= repeat_sel_sel_sources_63;
      end else if (6'h3e == cated_bits_source) begin
        repeat_sel_hold_r <= repeat_sel_sel_sources_62;
      end else if (6'h3d == cated_bits_source) begin
        repeat_sel_hold_r <= repeat_sel_sel_sources_61;
      end else begin
        repeat_sel_hold_r <= _GEN_198;
      end
    end
    if (reset) begin
      count_1 <= 1'h0;
    end else if (_T_1) begin
      if (last_1) begin
        count_1 <= 1'h0;
      end else begin
        count_1 <= count_1 + 1'h1;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  count = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  bundleOut_0_a_bits_data_rdata_written_once = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  bundleOut_0_a_bits_data_rdata_0 = _RAND_2[31:0];
  _RAND_3 = {1{`RANDOM}};
  bundleOut_0_a_bits_mask_rdata_written_once = _RAND_3[0:0];
  _RAND_4 = {1{`RANDOM}};
  bundleOut_0_a_bits_mask_rdata_0 = _RAND_4[3:0];
  _RAND_5 = {1{`RANDOM}};
  repeat_count = _RAND_5[0:0];
  _RAND_6 = {1{`RANDOM}};
  repeat_sel_sel_sources_0 = _RAND_6[0:0];
  _RAND_7 = {1{`RANDOM}};
  repeat_sel_sel_sources_1 = _RAND_7[0:0];
  _RAND_8 = {1{`RANDOM}};
  repeat_sel_sel_sources_2 = _RAND_8[0:0];
  _RAND_9 = {1{`RANDOM}};
  repeat_sel_sel_sources_3 = _RAND_9[0:0];
  _RAND_10 = {1{`RANDOM}};
  repeat_sel_sel_sources_4 = _RAND_10[0:0];
  _RAND_11 = {1{`RANDOM}};
  repeat_sel_sel_sources_5 = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  repeat_sel_sel_sources_6 = _RAND_12[0:0];
  _RAND_13 = {1{`RANDOM}};
  repeat_sel_sel_sources_7 = _RAND_13[0:0];
  _RAND_14 = {1{`RANDOM}};
  repeat_sel_sel_sources_8 = _RAND_14[0:0];
  _RAND_15 = {1{`RANDOM}};
  repeat_sel_sel_sources_9 = _RAND_15[0:0];
  _RAND_16 = {1{`RANDOM}};
  repeat_sel_sel_sources_10 = _RAND_16[0:0];
  _RAND_17 = {1{`RANDOM}};
  repeat_sel_sel_sources_11 = _RAND_17[0:0];
  _RAND_18 = {1{`RANDOM}};
  repeat_sel_sel_sources_12 = _RAND_18[0:0];
  _RAND_19 = {1{`RANDOM}};
  repeat_sel_sel_sources_13 = _RAND_19[0:0];
  _RAND_20 = {1{`RANDOM}};
  repeat_sel_sel_sources_14 = _RAND_20[0:0];
  _RAND_21 = {1{`RANDOM}};
  repeat_sel_sel_sources_15 = _RAND_21[0:0];
  _RAND_22 = {1{`RANDOM}};
  repeat_sel_sel_sources_16 = _RAND_22[0:0];
  _RAND_23 = {1{`RANDOM}};
  repeat_sel_sel_sources_17 = _RAND_23[0:0];
  _RAND_24 = {1{`RANDOM}};
  repeat_sel_sel_sources_18 = _RAND_24[0:0];
  _RAND_25 = {1{`RANDOM}};
  repeat_sel_sel_sources_19 = _RAND_25[0:0];
  _RAND_26 = {1{`RANDOM}};
  repeat_sel_sel_sources_20 = _RAND_26[0:0];
  _RAND_27 = {1{`RANDOM}};
  repeat_sel_sel_sources_21 = _RAND_27[0:0];
  _RAND_28 = {1{`RANDOM}};
  repeat_sel_sel_sources_22 = _RAND_28[0:0];
  _RAND_29 = {1{`RANDOM}};
  repeat_sel_sel_sources_23 = _RAND_29[0:0];
  _RAND_30 = {1{`RANDOM}};
  repeat_sel_sel_sources_24 = _RAND_30[0:0];
  _RAND_31 = {1{`RANDOM}};
  repeat_sel_sel_sources_25 = _RAND_31[0:0];
  _RAND_32 = {1{`RANDOM}};
  repeat_sel_sel_sources_26 = _RAND_32[0:0];
  _RAND_33 = {1{`RANDOM}};
  repeat_sel_sel_sources_27 = _RAND_33[0:0];
  _RAND_34 = {1{`RANDOM}};
  repeat_sel_sel_sources_28 = _RAND_34[0:0];
  _RAND_35 = {1{`RANDOM}};
  repeat_sel_sel_sources_29 = _RAND_35[0:0];
  _RAND_36 = {1{`RANDOM}};
  repeat_sel_sel_sources_30 = _RAND_36[0:0];
  _RAND_37 = {1{`RANDOM}};
  repeat_sel_sel_sources_31 = _RAND_37[0:0];
  _RAND_38 = {1{`RANDOM}};
  repeat_sel_sel_sources_32 = _RAND_38[0:0];
  _RAND_39 = {1{`RANDOM}};
  repeat_sel_sel_sources_33 = _RAND_39[0:0];
  _RAND_40 = {1{`RANDOM}};
  repeat_sel_sel_sources_34 = _RAND_40[0:0];
  _RAND_41 = {1{`RANDOM}};
  repeat_sel_sel_sources_35 = _RAND_41[0:0];
  _RAND_42 = {1{`RANDOM}};
  repeat_sel_sel_sources_36 = _RAND_42[0:0];
  _RAND_43 = {1{`RANDOM}};
  repeat_sel_sel_sources_37 = _RAND_43[0:0];
  _RAND_44 = {1{`RANDOM}};
  repeat_sel_sel_sources_38 = _RAND_44[0:0];
  _RAND_45 = {1{`RANDOM}};
  repeat_sel_sel_sources_39 = _RAND_45[0:0];
  _RAND_46 = {1{`RANDOM}};
  repeat_sel_sel_sources_40 = _RAND_46[0:0];
  _RAND_47 = {1{`RANDOM}};
  repeat_sel_sel_sources_41 = _RAND_47[0:0];
  _RAND_48 = {1{`RANDOM}};
  repeat_sel_sel_sources_42 = _RAND_48[0:0];
  _RAND_49 = {1{`RANDOM}};
  repeat_sel_sel_sources_43 = _RAND_49[0:0];
  _RAND_50 = {1{`RANDOM}};
  repeat_sel_sel_sources_44 = _RAND_50[0:0];
  _RAND_51 = {1{`RANDOM}};
  repeat_sel_sel_sources_45 = _RAND_51[0:0];
  _RAND_52 = {1{`RANDOM}};
  repeat_sel_sel_sources_46 = _RAND_52[0:0];
  _RAND_53 = {1{`RANDOM}};
  repeat_sel_sel_sources_47 = _RAND_53[0:0];
  _RAND_54 = {1{`RANDOM}};
  repeat_sel_sel_sources_48 = _RAND_54[0:0];
  _RAND_55 = {1{`RANDOM}};
  repeat_sel_sel_sources_49 = _RAND_55[0:0];
  _RAND_56 = {1{`RANDOM}};
  repeat_sel_sel_sources_50 = _RAND_56[0:0];
  _RAND_57 = {1{`RANDOM}};
  repeat_sel_sel_sources_51 = _RAND_57[0:0];
  _RAND_58 = {1{`RANDOM}};
  repeat_sel_sel_sources_52 = _RAND_58[0:0];
  _RAND_59 = {1{`RANDOM}};
  repeat_sel_sel_sources_53 = _RAND_59[0:0];
  _RAND_60 = {1{`RANDOM}};
  repeat_sel_sel_sources_54 = _RAND_60[0:0];
  _RAND_61 = {1{`RANDOM}};
  repeat_sel_sel_sources_55 = _RAND_61[0:0];
  _RAND_62 = {1{`RANDOM}};
  repeat_sel_sel_sources_56 = _RAND_62[0:0];
  _RAND_63 = {1{`RANDOM}};
  repeat_sel_sel_sources_57 = _RAND_63[0:0];
  _RAND_64 = {1{`RANDOM}};
  repeat_sel_sel_sources_58 = _RAND_64[0:0];
  _RAND_65 = {1{`RANDOM}};
  repeat_sel_sel_sources_59 = _RAND_65[0:0];
  _RAND_66 = {1{`RANDOM}};
  repeat_sel_sel_sources_60 = _RAND_66[0:0];
  _RAND_67 = {1{`RANDOM}};
  repeat_sel_sel_sources_61 = _RAND_67[0:0];
  _RAND_68 = {1{`RANDOM}};
  repeat_sel_sel_sources_62 = _RAND_68[0:0];
  _RAND_69 = {1{`RANDOM}};
  repeat_sel_sel_sources_63 = _RAND_69[0:0];
  _RAND_70 = {1{`RANDOM}};
  repeat_sel_hold_r = _RAND_70[0:0];
  _RAND_71 = {1{`RANDOM}};
  count_1 = _RAND_71[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Chiplink_TLMonitor_16(
  input         clock,
  input         reset,
  input         io_in_a_ready,
  input         io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
  input  [2:0]  io_in_a_bits_param,
  input  [2:0]  io_in_a_bits_size,
  input  [6:0]  io_in_a_bits_source,
  input  [12:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input         io_in_a_bits_corrupt,
  input         io_in_c_ready,
  input         io_in_c_valid,
  input  [2:0]  io_in_c_bits_opcode,
  input  [2:0]  io_in_c_bits_param,
  input  [2:0]  io_in_c_bits_size,
  input  [6:0]  io_in_c_bits_source,
  input  [12:0] io_in_c_bits_address,
  input         io_in_d_ready,
  input         io_in_d_valid,
  input  [2:0]  io_in_d_bits_opcode,
  input  [1:0]  io_in_d_bits_param,
  input  [2:0]  io_in_d_bits_size,
  input  [6:0]  io_in_d_bits_source,
  input         io_in_d_bits_denied,
  input         io_in_d_bits_corrupt,
  input         io_in_e_valid
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
  reg [31:0] _RAND_8;
  reg [31:0] _RAND_9;
  reg [31:0] _RAND_10;
  reg [31:0] _RAND_11;
  reg [31:0] _RAND_12;
  reg [31:0] _RAND_13;
  reg [31:0] _RAND_14;
  reg [31:0] _RAND_15;
  reg [31:0] _RAND_16;
  reg [31:0] _RAND_17;
  reg [127:0] _RAND_18;
  reg [511:0] _RAND_19;
  reg [511:0] _RAND_20;
  reg [31:0] _RAND_21;
  reg [31:0] _RAND_22;
  reg [31:0] _RAND_23;
  reg [127:0] _RAND_24;
  reg [511:0] _RAND_25;
  reg [31:0] _RAND_26;
  reg [31:0] _RAND_27;
  reg [31:0] _RAND_28;
  reg [31:0] _RAND_29;
  reg [31:0] _RAND_30;
`endif // RANDOMIZE_REG_INIT
  wire [31:0] plusarg_reader_out;
  wire [31:0] plusarg_reader_1_out;
  wire  _source_ok_T_1 = io_in_a_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_7 = io_in_a_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_13 = io_in_a_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_19 = io_in_a_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_25 = io_in_a_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_31 = io_in_a_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_37 = io_in_a_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_43 = io_in_a_bits_source[6:4] == 3'h7;
  wire  source_ok = _source_ok_T_1 | _source_ok_T_7 | _source_ok_T_13 | _source_ok_T_19 | _source_ok_T_25 |
    _source_ok_T_31 | _source_ok_T_37 | _source_ok_T_43;
  wire [12:0] _is_aligned_mask_T_1 = 13'h3f << io_in_a_bits_size;
  wire [5:0] is_aligned_mask = ~_is_aligned_mask_T_1[5:0];
  wire [12:0] _GEN_86 = {{7'd0}, is_aligned_mask};
  wire [12:0] _is_aligned_T = io_in_a_bits_address & _GEN_86;
  wire  is_aligned = _is_aligned_T == 13'h0;
  wire [1:0] mask_sizeOH_shiftAmount = io_in_a_bits_size[1:0];
  wire [3:0] _mask_sizeOH_T_1 = 4'h1 << mask_sizeOH_shiftAmount;
  wire [2:0] mask_sizeOH = _mask_sizeOH_T_1[2:0] | 3'h1;
  wire  _mask_T = io_in_a_bits_size >= 3'h3;
  wire  mask_size = mask_sizeOH[2];
  wire  mask_bit = io_in_a_bits_address[2];
  wire  mask_nbit = ~mask_bit;
  wire  mask_acc = _mask_T | mask_size & mask_nbit;
  wire  mask_acc_1 = _mask_T | mask_size & mask_bit;
  wire  mask_size_1 = mask_sizeOH[1];
  wire  mask_bit_1 = io_in_a_bits_address[1];
  wire  mask_nbit_1 = ~mask_bit_1;
  wire  mask_eq_2 = mask_nbit & mask_nbit_1;
  wire  mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;
  wire  mask_eq_3 = mask_nbit & mask_bit_1;
  wire  mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;
  wire  mask_eq_4 = mask_bit & mask_nbit_1;
  wire  mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;
  wire  mask_eq_5 = mask_bit & mask_bit_1;
  wire  mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;
  wire  mask_size_2 = mask_sizeOH[0];
  wire  mask_bit_2 = io_in_a_bits_address[0];
  wire  mask_nbit_2 = ~mask_bit_2;
  wire  mask_eq_6 = mask_eq_2 & mask_nbit_2;
  wire  mask_lo_lo_lo = mask_acc_2 | mask_size_2 & mask_eq_6;
  wire  mask_eq_7 = mask_eq_2 & mask_bit_2;
  wire  mask_lo_lo_hi = mask_acc_2 | mask_size_2 & mask_eq_7;
  wire  mask_eq_8 = mask_eq_3 & mask_nbit_2;
  wire  mask_lo_hi_lo = mask_acc_3 | mask_size_2 & mask_eq_8;
  wire  mask_eq_9 = mask_eq_3 & mask_bit_2;
  wire  mask_lo_hi_hi = mask_acc_3 | mask_size_2 & mask_eq_9;
  wire  mask_eq_10 = mask_eq_4 & mask_nbit_2;
  wire  mask_hi_lo_lo = mask_acc_4 | mask_size_2 & mask_eq_10;
  wire  mask_eq_11 = mask_eq_4 & mask_bit_2;
  wire  mask_hi_lo_hi = mask_acc_4 | mask_size_2 & mask_eq_11;
  wire  mask_eq_12 = mask_eq_5 & mask_nbit_2;
  wire  mask_hi_hi_lo = mask_acc_5 | mask_size_2 & mask_eq_12;
  wire  mask_eq_13 = mask_eq_5 & mask_bit_2;
  wire  mask_hi_hi_hi = mask_acc_5 | mask_size_2 & mask_eq_13;
  wire [7:0] mask = {mask_hi_hi_hi,mask_hi_hi_lo,mask_hi_lo_hi,mask_hi_lo_lo,mask_lo_hi_hi,mask_lo_hi_lo,mask_lo_lo_hi,
    mask_lo_lo_lo};
  wire  _T_118 = io_in_a_bits_opcode == 3'h6;
  wire  _T_180 = io_in_a_bits_size <= 3'h6;
  wire [12:0] _T_183 = io_in_a_bits_address ^ 13'h1000;
  wire [13:0] _T_184 = {1'b0,$signed(_T_183)};
  wire [13:0] _T_186 = $signed(_T_184) & -14'sh1000;
  wire  _T_187 = $signed(_T_186) == 14'sh0;
  wire  _T_188 = _T_180 & _T_187;
  wire  _T_190 = source_ok & _T_188;
  wire  _T_245 = _source_ok_T_1 & _T_180;
  wire  _T_271 = _T_245 & _T_187;
  wire  _T_285 = io_in_a_bits_param <= 3'h2;
  wire [7:0] _T_289 = ~io_in_a_bits_mask;
  wire  _T_290 = _T_289 == 8'h0;
  wire  _T_294 = ~io_in_a_bits_corrupt;
  wire  _T_298 = io_in_a_bits_opcode == 3'h7;
  wire  _T_469 = io_in_a_bits_param != 3'h0;
  wire  _T_482 = io_in_a_bits_opcode == 3'h4;
  wire  _T_566 = io_in_a_bits_param == 3'h0;
  wire  _T_570 = io_in_a_bits_mask == mask;
  wire  _T_578 = io_in_a_bits_opcode == 3'h0;
  wire  _T_668 = io_in_a_bits_opcode == 3'h1;
  wire [7:0] _T_754 = ~mask;
  wire [7:0] _T_755 = io_in_a_bits_mask & _T_754;
  wire  _T_756 = _T_755 == 8'h0;
  wire  _T_760 = io_in_a_bits_opcode == 3'h2;
  wire  _T_842 = io_in_a_bits_param <= 3'h4;
  wire  _T_850 = io_in_a_bits_opcode == 3'h3;
  wire  _T_932 = io_in_a_bits_param <= 3'h3;
  wire  _T_940 = io_in_a_bits_opcode == 3'h5;
  wire  _T_1022 = io_in_a_bits_param <= 3'h1;
  wire  _T_1034 = io_in_d_bits_opcode <= 3'h6;
  wire  _source_ok_T_55 = io_in_d_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_61 = io_in_d_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_67 = io_in_d_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_73 = io_in_d_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_79 = io_in_d_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_85 = io_in_d_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_91 = io_in_d_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_97 = io_in_d_bits_source[6:4] == 3'h7;
  wire  source_ok_1 = _source_ok_T_55 | _source_ok_T_61 | _source_ok_T_67 | _source_ok_T_73 | _source_ok_T_79 |
    _source_ok_T_85 | _source_ok_T_91 | _source_ok_T_97;
  wire  _T_1038 = io_in_d_bits_opcode == 3'h6;
  wire  _T_1042 = io_in_d_bits_size >= 3'h3;
  wire  _T_1046 = io_in_d_bits_param == 2'h0;
  wire  _T_1050 = ~io_in_d_bits_corrupt;
  wire  _T_1054 = ~io_in_d_bits_denied;
  wire  _T_1058 = io_in_d_bits_opcode == 3'h4;
  wire  _T_1069 = io_in_d_bits_param <= 2'h2;
  wire  _T_1073 = io_in_d_bits_param != 2'h2;
  wire  _T_1086 = io_in_d_bits_opcode == 3'h5;
  wire  _T_1106 = _T_1054 | io_in_d_bits_corrupt;
  wire  _T_1115 = io_in_d_bits_opcode == 3'h0;
  wire  _T_1132 = io_in_d_bits_opcode == 3'h1;
  wire  _T_1150 = io_in_d_bits_opcode == 3'h2;
  wire  _source_ok_T_109 = io_in_c_bits_source[6:4] == 3'h0;
  wire  _source_ok_T_115 = io_in_c_bits_source[6:4] == 3'h1;
  wire  _source_ok_T_121 = io_in_c_bits_source[6:4] == 3'h2;
  wire  _source_ok_T_127 = io_in_c_bits_source[6:4] == 3'h3;
  wire  _source_ok_T_133 = io_in_c_bits_source[6:4] == 3'h4;
  wire  _source_ok_T_139 = io_in_c_bits_source[6:4] == 3'h5;
  wire  _source_ok_T_145 = io_in_c_bits_source[6:4] == 3'h6;
  wire  _source_ok_T_151 = io_in_c_bits_source[6:4] == 3'h7;
  wire  source_ok_2 = _source_ok_T_109 | _source_ok_T_115 | _source_ok_T_121 | _source_ok_T_127 | _source_ok_T_133 |
    _source_ok_T_139 | _source_ok_T_145 | _source_ok_T_151;
  wire [12:0] _is_aligned_mask_T_7 = 13'h3f << io_in_c_bits_size;
  wire [5:0] is_aligned_mask_2 = ~_is_aligned_mask_T_7[5:0];
  wire [12:0] _GEN_87 = {{7'd0}, is_aligned_mask_2};
  wire [12:0] _is_aligned_T_2 = io_in_c_bits_address & _GEN_87;
  wire  is_aligned_2 = _is_aligned_T_2 == 13'h0;
  wire [12:0] _address_ok_T_5 = io_in_c_bits_address ^ 13'h1000;
  wire [13:0] _address_ok_T_6 = {1'b0,$signed(_address_ok_T_5)};
  wire [13:0] _address_ok_T_8 = $signed(_address_ok_T_6) & -14'sh1000;
  wire  _address_ok_T_9 = $signed(_address_ok_T_8) == 14'sh0;
  wire  _T_1710 = io_in_c_bits_opcode == 3'h4;
  wire  _T_1717 = io_in_c_bits_size >= 3'h3;
  wire  _T_1724 = io_in_c_bits_param <= 3'h5;
  wire  _T_1732 = io_in_c_bits_opcode == 3'h5;
  wire  _T_1750 = io_in_c_bits_opcode == 3'h6;
  wire  _T_1812 = io_in_c_bits_size <= 3'h6;
  wire  _T_1820 = _T_1812 & _address_ok_T_9;
  wire  _T_1822 = source_ok_2 & _T_1820;
  wire  _T_1877 = _source_ok_T_109 & _T_1812;
  wire  _T_1903 = _T_1877 & _address_ok_T_9;
  wire  _T_1925 = io_in_c_bits_opcode == 3'h7;
  wire  _T_2096 = io_in_c_bits_opcode == 3'h0;
  wire  _T_2106 = io_in_c_bits_param == 3'h0;
  wire  _T_2114 = io_in_c_bits_opcode == 3'h1;
  wire  _T_2128 = io_in_c_bits_opcode == 3'h2;
  wire  _a_first_T = io_in_a_ready & io_in_a_valid;
  wire [2:0] a_first_beats1_decode = is_aligned_mask[5:3];
  wire  a_first_beats1_opdata = ~io_in_a_bits_opcode[2];
  reg [2:0] a_first_counter;
  wire [2:0] a_first_counter1 = a_first_counter - 3'h1;
  wire  a_first = a_first_counter == 3'h0;
  reg [2:0] opcode;
  reg [2:0] param;
  reg [2:0] size;
  reg [6:0] source;
  reg [12:0] address;
  wire  _T_2150 = io_in_a_valid & ~a_first;
  wire  _T_2151 = io_in_a_bits_opcode == opcode;
  wire  _T_2155 = io_in_a_bits_param == param;
  wire  _T_2159 = io_in_a_bits_size == size;
  wire  _T_2163 = io_in_a_bits_source == source;
  wire  _T_2167 = io_in_a_bits_address == address;
  wire  _d_first_T = io_in_d_ready & io_in_d_valid;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3f << io_in_d_bits_size;
  wire [5:0] _d_first_beats1_decode_T_3 = ~_d_first_beats1_decode_T_1[5:0];
  wire [2:0] d_first_beats1_decode = _d_first_beats1_decode_T_3[5:3];
  wire  d_first_beats1_opdata = io_in_d_bits_opcode[0];
  reg [2:0] d_first_counter;
  wire [2:0] d_first_counter1 = d_first_counter - 3'h1;
  wire  d_first = d_first_counter == 3'h0;
  reg [2:0] opcode_1;
  reg [1:0] param_1;
  reg [2:0] size_1;
  reg [6:0] source_1;
  reg  denied;
  wire  _T_2174 = io_in_d_valid & ~d_first;
  wire  _T_2175 = io_in_d_bits_opcode == opcode_1;
  wire  _T_2179 = io_in_d_bits_param == param_1;
  wire  _T_2183 = io_in_d_bits_size == size_1;
  wire  _T_2187 = io_in_d_bits_source == source_1;
  wire  _T_2195 = io_in_d_bits_denied == denied;
  wire  _c_first_T = io_in_c_ready & io_in_c_valid;
  wire [2:0] c_first_beats1_decode = is_aligned_mask_2[5:3];
  wire  c_first_beats1_opdata = io_in_c_bits_opcode[0];
  reg [2:0] c_first_counter;
  wire [2:0] c_first_counter1 = c_first_counter - 3'h1;
  wire  c_first = c_first_counter == 3'h0;
  reg [2:0] opcode_3;
  reg [2:0] param_3;
  reg [2:0] size_3;
  reg [6:0] source_3;
  reg [12:0] address_2;
  wire  _T_2226 = io_in_c_valid & ~c_first;
  wire  _T_2227 = io_in_c_bits_opcode == opcode_3;
  wire  _T_2231 = io_in_c_bits_param == param_3;
  wire  _T_2235 = io_in_c_bits_size == size_3;
  wire  _T_2239 = io_in_c_bits_source == source_3;
  wire  _T_2243 = io_in_c_bits_address == address_2;
  reg [127:0] inflight;
  reg [511:0] inflight_opcodes;
  reg [511:0] inflight_sizes;
  reg [2:0] a_first_counter_1;
  wire [2:0] a_first_counter1_1 = a_first_counter_1 - 3'h1;
  wire  a_first_1 = a_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_1;
  wire [2:0] d_first_counter1_1 = d_first_counter_1 - 3'h1;
  wire  d_first_1 = d_first_counter_1 == 3'h0;
  wire [8:0] _GEN_88 = {io_in_d_bits_source, 2'h0};
  wire [9:0] _a_opcode_lookup_T = {{1'd0}, _GEN_88};
  wire [511:0] _a_opcode_lookup_T_1 = inflight_opcodes >> _a_opcode_lookup_T;
  wire [15:0] _a_opcode_lookup_T_5 = 16'h10 - 16'h1;
  wire [511:0] _GEN_89 = {{496'd0}, _a_opcode_lookup_T_5};
  wire [511:0] _a_opcode_lookup_T_6 = _a_opcode_lookup_T_1 & _GEN_89;
  wire [511:0] _a_opcode_lookup_T_7 = {{1'd0}, _a_opcode_lookup_T_6[511:1]};
  wire [511:0] _a_size_lookup_T_1 = inflight_sizes >> _a_opcode_lookup_T;
  wire [511:0] _a_size_lookup_T_6 = _a_size_lookup_T_1 & _GEN_89;
  wire [511:0] _a_size_lookup_T_7 = {{1'd0}, _a_size_lookup_T_6[511:1]};
  wire  _T_2249 = io_in_a_valid & a_first_1;
  wire [127:0] _a_set_wo_ready_T = 128'h1 << io_in_a_bits_source;
  wire [127:0] a_set_wo_ready = io_in_a_valid & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire  _T_2252 = _a_first_T & a_first_1;
  wire [3:0] _a_opcodes_set_interm_T = {io_in_a_bits_opcode, 1'h0};
  wire [3:0] _a_opcodes_set_interm_T_1 = _a_opcodes_set_interm_T | 4'h1;
  wire [3:0] _a_sizes_set_interm_T = {io_in_a_bits_size, 1'h0};
  wire [3:0] _a_sizes_set_interm_T_1 = _a_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_94 = {io_in_a_bits_source, 2'h0};
  wire [9:0] _a_opcodes_set_T = {{1'd0}, _GEN_94};
  wire [3:0] a_opcodes_set_interm = _a_first_T & a_first_1 ? _a_opcodes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_95 = {{1023'd0}, a_opcodes_set_interm};
  wire [1026:0] _a_opcodes_set_T_1 = _GEN_95 << _a_opcodes_set_T;
  wire [3:0] a_sizes_set_interm = _a_first_T & a_first_1 ? _a_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_97 = {{1023'd0}, a_sizes_set_interm};
  wire [1026:0] _a_sizes_set_T_1 = _GEN_97 << _a_opcodes_set_T;
  wire [127:0] _T_2254 = inflight >> io_in_a_bits_source;
  wire  _T_2256 = ~_T_2254[0];
  wire [127:0] a_set = _a_first_T & a_first_1 ? _a_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_31 = _a_first_T & a_first_1 ? _a_opcodes_set_T_1 : 1027'h0;
  wire [1026:0] _GEN_32 = _a_first_T & a_first_1 ? _a_sizes_set_T_1 : 1027'h0;
  wire  _T_2260 = io_in_d_valid & d_first_1;
  wire  _T_2262 = ~_T_1038;
  wire  _T_2263 = io_in_d_valid & d_first_1 & ~_T_1038;
  wire [127:0] _d_clr_wo_ready_T = 128'h1 << io_in_d_bits_source;
  wire [127:0] d_clr_wo_ready = io_in_d_valid & d_first_1 & ~_T_1038 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_99 = {{1023'd0}, _a_opcode_lookup_T_5};
  wire [1038:0] _d_opcodes_clr_T_5 = _GEN_99 << _a_opcode_lookup_T;
  wire [127:0] d_clr = _d_first_T & d_first_1 & _T_2262 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_35 = _d_first_T & d_first_1 & _T_2262 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_2 = io_in_a_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp = _T_2249 & io_in_a_bits_source == io_in_d_bits_source;
  wire [127:0] _T_2273 = inflight >> io_in_d_bits_source;
  wire  _T_2275 = _T_2273[0] | same_cycle_resp;
  wire [2:0] _GEN_39 = 3'h2 == io_in_a_bits_opcode ? 3'h1 : 3'h0;
  wire [2:0] _GEN_40 = 3'h3 == io_in_a_bits_opcode ? 3'h1 : _GEN_39;
  wire [2:0] _GEN_41 = 3'h4 == io_in_a_bits_opcode ? 3'h1 : _GEN_40;
  wire [2:0] _GEN_42 = 3'h5 == io_in_a_bits_opcode ? 3'h2 : _GEN_41;
  wire [2:0] _GEN_43 = 3'h6 == io_in_a_bits_opcode ? 3'h4 : _GEN_42;
  wire [2:0] _GEN_44 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_43;
  wire [2:0] _GEN_51 = 3'h6 == io_in_a_bits_opcode ? 3'h5 : _GEN_42;
  wire [2:0] _GEN_52 = 3'h7 == io_in_a_bits_opcode ? 3'h4 : _GEN_51;
  wire  _T_2280 = io_in_d_bits_opcode == _GEN_52;
  wire  _T_2281 = io_in_d_bits_opcode == _GEN_44 | _T_2280;
  wire  _T_2285 = io_in_a_bits_size == io_in_d_bits_size;
  wire [3:0] a_opcode_lookup = _a_opcode_lookup_T_7[3:0];
  wire [2:0] _GEN_55 = 3'h2 == a_opcode_lookup[2:0] ? 3'h1 : 3'h0;
  wire [2:0] _GEN_56 = 3'h3 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_55;
  wire [2:0] _GEN_57 = 3'h4 == a_opcode_lookup[2:0] ? 3'h1 : _GEN_56;
  wire [2:0] _GEN_58 = 3'h5 == a_opcode_lookup[2:0] ? 3'h2 : _GEN_57;
  wire [2:0] _GEN_59 = 3'h6 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_58;
  wire [2:0] _GEN_60 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_59;
  wire [2:0] _GEN_67 = 3'h6 == a_opcode_lookup[2:0] ? 3'h5 : _GEN_58;
  wire [2:0] _GEN_68 = 3'h7 == a_opcode_lookup[2:0] ? 3'h4 : _GEN_67;
  wire  _T_2292 = io_in_d_bits_opcode == _GEN_68;
  wire  _T_2293 = io_in_d_bits_opcode == _GEN_60 | _T_2292;
  wire [3:0] a_size_lookup = _a_size_lookup_T_7[3:0];
  wire [3:0] _GEN_102 = {{1'd0}, io_in_d_bits_size};
  wire  _T_2297 = _GEN_102 == a_size_lookup;
  wire  _T_2307 = _T_2260 & a_first_1 & io_in_a_valid & _same_cycle_resp_T_2 & _T_2262;
  wire  _T_2308 = ~io_in_d_ready;
  wire  _T_2309 = ~io_in_d_ready | io_in_a_ready;
  wire  _T_2316 = a_set_wo_ready != d_clr_wo_ready | ~(|a_set_wo_ready);
  wire [127:0] _inflight_T = inflight | a_set;
  wire [127:0] _inflight_T_1 = ~d_clr;
  wire [127:0] _inflight_T_2 = _inflight_T & _inflight_T_1;
  wire [511:0] a_opcodes_set = _GEN_31[511:0];
  wire [511:0] _inflight_opcodes_T = inflight_opcodes | a_opcodes_set;
  wire [511:0] d_opcodes_clr = _GEN_35[511:0];
  wire [511:0] _inflight_opcodes_T_1 = ~d_opcodes_clr;
  wire [511:0] _inflight_opcodes_T_2 = _inflight_opcodes_T & _inflight_opcodes_T_1;
  wire [511:0] a_sizes_set = _GEN_32[511:0];
  wire [511:0] _inflight_sizes_T = inflight_sizes | a_sizes_set;
  wire [511:0] _inflight_sizes_T_2 = _inflight_sizes_T & _inflight_opcodes_T_1;
  reg [31:0] watchdog;
  wire  _T_2325 = ~(|inflight) | plusarg_reader_out == 32'h0 | watchdog < plusarg_reader_out;
  wire [31:0] _watchdog_T_1 = watchdog + 32'h1;
  reg [127:0] inflight_1;
  reg [511:0] inflight_sizes_1;
  reg [2:0] c_first_counter_1;
  wire [2:0] c_first_counter1_1 = c_first_counter_1 - 3'h1;
  wire  c_first_1 = c_first_counter_1 == 3'h0;
  reg [2:0] d_first_counter_2;
  wire [2:0] d_first_counter1_2 = d_first_counter_2 - 3'h1;
  wire  d_first_2 = d_first_counter_2 == 3'h0;
  wire [511:0] _c_size_lookup_T_1 = inflight_sizes_1 >> _a_opcode_lookup_T;
  wire [511:0] _c_size_lookup_T_6 = _c_size_lookup_T_1 & _GEN_89;
  wire [511:0] _c_size_lookup_T_7 = {{1'd0}, _c_size_lookup_T_6[511:1]};
  wire  _T_2335 = io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];
  wire  _T_2336 = io_in_c_valid & c_first_1 & _T_2335;
  wire [127:0] _c_set_wo_ready_T = 128'h1 << io_in_c_bits_source;
  wire [127:0] c_set_wo_ready = io_in_c_valid & c_first_1 & _T_2335 ? _c_set_wo_ready_T : 128'h0;
  wire  _T_2342 = _c_first_T & c_first_1 & _T_2335;
  wire [3:0] _c_sizes_set_interm_T = {io_in_c_bits_size, 1'h0};
  wire [3:0] _c_sizes_set_interm_T_1 = _c_sizes_set_interm_T | 4'h1;
  wire [8:0] _GEN_109 = {io_in_c_bits_source, 2'h0};
  wire [9:0] _c_opcodes_set_T = {{1'd0}, _GEN_109};
  wire [3:0] c_sizes_set_interm = _c_first_T & c_first_1 & _T_2335 ? _c_sizes_set_interm_T_1 : 4'h0;
  wire [1026:0] _GEN_112 = {{1023'd0}, c_sizes_set_interm};
  wire [1026:0] _c_sizes_set_T_1 = _GEN_112 << _c_opcodes_set_T;
  wire [127:0] _T_2343 = inflight_1 >> io_in_c_bits_source;
  wire  _T_2345 = ~_T_2343[0];
  wire [127:0] c_set = _c_first_T & c_first_1 & _T_2335 ? _c_set_wo_ready_T : 128'h0;
  wire [1026:0] _GEN_77 = _c_first_T & c_first_1 & _T_2335 ? _c_sizes_set_T_1 : 1027'h0;
  wire  _T_2349 = io_in_d_valid & d_first_2;
  wire  _T_2351 = io_in_d_valid & d_first_2 & _T_1038;
  wire [127:0] d_clr_wo_ready_1 = io_in_d_valid & d_first_2 & _T_1038 ? _d_clr_wo_ready_T : 128'h0;
  wire [127:0] d_clr_1 = _d_first_T & d_first_2 & _T_1038 ? _d_clr_wo_ready_T : 128'h0;
  wire [1038:0] _GEN_80 = _d_first_T & d_first_2 & _T_1038 ? _d_opcodes_clr_T_5 : 1039'h0;
  wire  _same_cycle_resp_T_8 = io_in_c_bits_source == io_in_d_bits_source;
  wire  same_cycle_resp_1 = _T_2336 & io_in_c_bits_source == io_in_d_bits_source;
  wire [127:0] _T_2359 = inflight_1 >> io_in_d_bits_source;
  wire  _T_2361 = _T_2359[0] | same_cycle_resp_1;
  wire  _T_2365 = io_in_d_bits_size == io_in_c_bits_size;
  wire [3:0] c_size_lookup = _c_size_lookup_T_7[3:0];
  wire  _T_2369 = _GEN_102 == c_size_lookup;
  wire  _T_2378 = _T_2349 & c_first_1 & io_in_c_valid & _same_cycle_resp_T_8 & _T_1038;
  wire  _T_2380 = _T_2308 | io_in_c_ready;
  wire  _T_2384 = |c_set_wo_ready;
  wire  _T_2385 = c_set_wo_ready != d_clr_wo_ready_1;
  wire [127:0] _inflight_T_3 = inflight_1 | c_set;
  wire [127:0] _inflight_T_4 = ~d_clr_1;
  wire [127:0] _inflight_T_5 = _inflight_T_3 & _inflight_T_4;
  wire [511:0] d_opcodes_clr_1 = _GEN_80[511:0];
  wire [511:0] _inflight_opcodes_T_4 = ~d_opcodes_clr_1;
  wire [511:0] c_sizes_set = _GEN_77[511:0];
  wire [511:0] _inflight_sizes_T_3 = inflight_sizes_1 | c_sizes_set;
  wire [511:0] _inflight_sizes_T_5 = _inflight_sizes_T_3 & _inflight_opcodes_T_4;
  reg [31:0] watchdog_1;
  wire  _T_2394 = ~(|inflight_1) | plusarg_reader_1_out == 32'h0 | watchdog_1 < plusarg_reader_1_out;
  wire [31:0] _watchdog_T_3 = watchdog_1 + 32'h1;
  reg  inflight_2;
  reg [2:0] d_first_counter_3;
  wire [2:0] d_first_counter1_3 = d_first_counter_3 - 3'h1;
  wire  d_first_3 = d_first_counter_3 == 3'h0;
  wire  _T_2406 = io_in_d_bits_opcode[2] & ~io_in_d_bits_opcode[1];
  wire  _T_2407 = _d_first_T & d_first_3 & _T_2406;
  wire  _T_2410 = ~inflight_2;
  wire [1:0] _GEN_84 = _d_first_T & d_first_3 & _T_2406 ? 2'h1 : 2'h0;
  wire  d_set = _GEN_84[0];
  wire  _T_2417 = d_set | inflight_2;
  wire [1:0] _GEN_85 = io_in_e_valid ? 2'h1 : 2'h0;
  wire  e_clr = _GEN_85[0];
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader (
    .out(plusarg_reader_out)
  );
  CHIPLINK_PREFIX_plusarg_reader #(.FORMAT("tilelink_timeout=%d"), .DEFAULT(0), .WIDTH(32)) plusarg_reader_1 (
    .out(plusarg_reader_1_out)
  );
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first) begin
        if (a_first_beats1_opdata) begin
          a_first_counter <= a_first_beats1_decode;
        end else begin
          a_first_counter <= 3'h0;
        end
      end else begin
        a_first_counter <= a_first_counter1;
      end
    end
    if (_a_first_T & a_first) begin
      opcode <= io_in_a_bits_opcode;
    end
    if (_a_first_T & a_first) begin
      param <= io_in_a_bits_param;
    end
    if (_a_first_T & a_first) begin
      size <= io_in_a_bits_size;
    end
    if (_a_first_T & a_first) begin
      source <= io_in_a_bits_source;
    end
    if (_a_first_T & a_first) begin
      address <= io_in_a_bits_address;
    end
    if (reset) begin
      d_first_counter <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first) begin
        if (d_first_beats1_opdata) begin
          d_first_counter <= d_first_beats1_decode;
        end else begin
          d_first_counter <= 3'h0;
        end
      end else begin
        d_first_counter <= d_first_counter1;
      end
    end
    if (_d_first_T & d_first) begin
      opcode_1 <= io_in_d_bits_opcode;
    end
    if (_d_first_T & d_first) begin
      param_1 <= io_in_d_bits_param;
    end
    if (_d_first_T & d_first) begin
      size_1 <= io_in_d_bits_size;
    end
    if (_d_first_T & d_first) begin
      source_1 <= io_in_d_bits_source;
    end
    if (_d_first_T & d_first) begin
      denied <= io_in_d_bits_denied;
    end
    if (reset) begin
      c_first_counter <= 3'h0;
    end else if (_c_first_T) begin
      if (c_first) begin
        if (c_first_beats1_opdata) begin
          c_first_counter <= c_first_beats1_decode;
        end else begin
          c_first_counter <= 3'h0;
        end
      end else begin
        c_first_counter <= c_first_counter1;
      end
    end
    if (_c_first_T & c_first) begin
      opcode_3 <= io_in_c_bits_opcode;
    end
    if (_c_first_T & c_first) begin
      param_3 <= io_in_c_bits_param;
    end
    if (_c_first_T & c_first) begin
      size_3 <= io_in_c_bits_size;
    end
    if (_c_first_T & c_first) begin
      source_3 <= io_in_c_bits_source;
    end
    if (_c_first_T & c_first) begin
      address_2 <= io_in_c_bits_address;
    end
    if (reset) begin
      inflight <= 128'h0;
    end else begin
      inflight <= _inflight_T_2;
    end
    if (reset) begin
      inflight_opcodes <= 512'h0;
    end else begin
      inflight_opcodes <= _inflight_opcodes_T_2;
    end
    if (reset) begin
      inflight_sizes <= 512'h0;
    end else begin
      inflight_sizes <= _inflight_sizes_T_2;
    end
    if (reset) begin
      a_first_counter_1 <= 3'h0;
    end else if (_a_first_T) begin
      if (a_first_1) begin
        if (a_first_beats1_opdata) begin
          a_first_counter_1 <= a_first_beats1_decode;
        end else begin
          a_first_counter_1 <= 3'h0;
        end
      end else begin
        a_first_counter_1 <= a_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_1 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_1) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_1 <= d_first_beats1_decode;
        end else begin
          d_first_counter_1 <= 3'h0;
        end
      end else begin
        d_first_counter_1 <= d_first_counter1_1;
      end
    end
    if (reset) begin
      watchdog <= 32'h0;
    end else if (_a_first_T | _d_first_T) begin
      watchdog <= 32'h0;
    end else begin
      watchdog <= _watchdog_T_1;
    end
    if (reset) begin
      inflight_1 <= 128'h0;
    end else begin
      inflight_1 <= _inflight_T_5;
    end
    if (reset) begin
      inflight_sizes_1 <= 512'h0;
    end else begin
      inflight_sizes_1 <= _inflight_sizes_T_5;
    end
    if (reset) begin
      c_first_counter_1 <= 3'h0;
    end else if (_c_first_T) begin
      if (c_first_1) begin
        if (c_first_beats1_opdata) begin
          c_first_counter_1 <= c_first_beats1_decode;
        end else begin
          c_first_counter_1 <= 3'h0;
        end
      end else begin
        c_first_counter_1 <= c_first_counter1_1;
      end
    end
    if (reset) begin
      d_first_counter_2 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_2) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_2 <= d_first_beats1_decode;
        end else begin
          d_first_counter_2 <= 3'h0;
        end
      end else begin
        d_first_counter_2 <= d_first_counter1_2;
      end
    end
    if (reset) begin
      watchdog_1 <= 32'h0;
    end else if (_c_first_T | _d_first_T) begin
      watchdog_1 <= 32'h0;
    end else begin
      watchdog_1 <= _watchdog_T_3;
    end
    if (reset) begin
      inflight_2 <= 1'h0;
    end else begin
      inflight_2 <= (inflight_2 | d_set) & ~e_clr;
    end
    if (reset) begin
      d_first_counter_3 <= 3'h0;
    end else if (_d_first_T) begin
      if (d_first_3) begin
        if (d_first_beats1_opdata) begin
          d_first_counter_3 <= d_first_beats1_decode;
        end else begin
          d_first_counter_3 <= 3'h0;
        end
      end else begin
        d_first_counter_3 <= d_first_counter1_3;
      end
    end
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_271 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_271 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_285 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_285 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_290 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_290 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_294 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_118 & ~(_T_294 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_271 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_271 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_mask_T | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_mask_T | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_285 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_285 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_469 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_469 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_290 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_290 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_294 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_298 & ~(_T_294 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_188 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_188 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_566 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get carries invalid param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_566 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_570 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get contains invalid mask (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_570 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_294 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Get is corrupt (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_482 & ~(_T_294 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_566 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull carries invalid param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_566 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_570 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutFull contains invalid mask (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_578 & ~(_T_570 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_566 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial carries invalid param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_566 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_756 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_668 & ~(_T_756 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_842 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_842 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_570 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_760 & ~(_T_570 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_932 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_932 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_570 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Logical contains invalid mask (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_850 & ~(_T_570 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_190 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_190 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(source_ok | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(source_ok | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(is_aligned | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(is_aligned | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_1022 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_1022 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_570 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint contains invalid mask (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_570 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_294 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel Hint is corrupt (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_a_valid & _T_940 & ~(_T_294 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1034 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel has invalid opcode (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & ~(_T_1034 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1042 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1042 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1046 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1046 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1050 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1050 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1054 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel ReleaseAck is denied (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1038 & ~(_T_1054 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1042 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant smaller than a beat (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1042 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1069 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries invalid cap param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1069 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1073 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant carries toN param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1073 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1050 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel Grant is corrupt (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1058 & ~(_T_1050 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1042 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData smaller than a beat (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1042 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1069 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1069 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1073 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData carries toN param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1073 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1106 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1086 & ~(_T_1106 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(_T_1046 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(_T_1046 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(_T_1050 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAck is corrupt (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1115 & ~(_T_1050 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(_T_1046 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(_T_1046 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(_T_1106 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1132 & ~(_T_1106 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(source_ok_1 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(source_ok_1 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(_T_1046 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(_T_1046 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(_T_1050 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel HintAck is corrupt (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_d_valid & _T_1150 & ~(_T_1050 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_address_ok_T_9 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_address_ok_T_9 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_T_1717 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_T_1717 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_T_1724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1710 & ~(_T_1724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_address_ok_T_9 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_address_ok_T_9 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_T_1717 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_T_1717 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_T_1724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1732 & ~(_T_1724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1822 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release type unsupported by manager (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1822 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1903 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1903 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1717 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release smaller than a beat (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1717 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel Release carries invalid report param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1750 & ~(_T_1724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1822 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1822 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1903 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1903 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1717 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1717 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1724 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_1925 & ~(_T_1724 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(_address_ok_T_9 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(_address_ok_T_9 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(_T_2106 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAck carries invalid param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2096 & ~(_T_2106 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(_address_ok_T_9 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(_address_ok_T_9 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(_T_2106 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel AccessAckData carries invalid param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2114 & ~(_T_2106 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(_address_ok_T_9 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries unmanaged address (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(_address_ok_T_9 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(source_ok_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(source_ok_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(is_aligned_2 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck address not aligned to size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(is_aligned_2 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(_T_2106 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel HintAck carries invalid param (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_c_valid & _T_2128 & ~(_T_2106 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2150 & ~(_T_2151 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2150 & ~(_T_2151 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2150 & ~(_T_2155 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2150 & ~(_T_2155 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2150 & ~(_T_2159 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2150 & ~(_T_2159 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2150 & ~(_T_2163 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2150 & ~(_T_2163 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2150 & ~(_T_2167 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2150 & ~(_T_2167 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2174 & ~(_T_2175 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2174 & ~(_T_2175 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2174 & ~(_T_2179 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2174 & ~(_T_2179 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2174 & ~(_T_2183 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2174 & ~(_T_2183 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2174 & ~(_T_2187 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2174 & ~(_T_2187 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2174 & ~(_T_2195 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel denied changed with multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2174 & ~(_T_2195 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2226 & ~(_T_2227 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel opcode changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2226 & ~(_T_2227 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2226 & ~(_T_2231 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel param changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2226 & ~(_T_2231 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2226 & ~(_T_2235 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel size changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2226 & ~(_T_2235 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2226 & ~(_T_2239 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel source changed within multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2226 & ~(_T_2239 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2226 & ~(_T_2243 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel address changed with multibeat operation (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2226 & ~(_T_2243 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2252 & ~(_T_2256 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' channel re-used a source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2252 & ~(_T_2256 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2263 & ~(_T_2275 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2263 & ~(_T_2275 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2263 & same_cycle_resp & ~(_T_2281 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2263 & same_cycle_resp & ~(_T_2281 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2263 & same_cycle_resp & ~(_T_2285 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2263 & same_cycle_resp & ~(_T_2285 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2263 & ~same_cycle_resp & ~(_T_2293 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper opcode response (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2263 & ~same_cycle_resp & ~(_T_2293 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2263 & ~same_cycle_resp & ~(_T_2297 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2263 & ~same_cycle_resp & ~(_T_2297 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2307 & ~(_T_2309 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2307 & ~(_T_2309 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2316 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2316 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2325 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2325 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2342 & ~(_T_2345 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' channel re-used a source ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2342 & ~(_T_2345 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2351 & ~(_T_2361 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2351 & ~(_T_2361 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2351 & same_cycle_resp_1 & ~(_T_2365 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2351 & same_cycle_resp_1 & ~(_T_2365 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2351 & ~same_cycle_resp_1 & ~(_T_2369 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel contains improper response size (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2351 & ~same_cycle_resp_1 & ~(_T_2369 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2378 & ~(_T_2380 | reset)) begin
          $fwrite(32'h80000002,"Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2378 & ~(_T_2380 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2384 & ~(_T_2385 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'C' and 'D' concurrent, despite minlatency 1 (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2384 & ~(_T_2385 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (~(_T_2394 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: TileLink timeout expired (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (~(_T_2394 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (_T_2407 & ~(_T_2410 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'D' channel re-used a sink ID (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:49 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (_T_2407 & ~(_T_2410 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef PRINTF_COND
      if (`PRINTF_COND) begin
    `endif
        if (io_in_e_valid & ~(_T_2417 | reset)) begin
          $fwrite(32'h80000002,
            "Assertion failed: 'E' channel acknowledged for nothing inflight (connected at ChipLinkBridge.scala:154:32)\n    at Monitor.scala:42 assert(cond, message)\n"
            );
        end
    `ifdef PRINTF_COND
      end
    `endif
    `endif // SYNTHESIS
    `ifndef SYNTHESIS
    `ifdef STOP_COND
      if (`STOP_COND) begin
    `endif
        if (io_in_e_valid & ~(_T_2417 | reset)) begin
          $fatal;
        end
    `ifdef STOP_COND
      end
    `endif
    `endif // SYNTHESIS
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  a_first_counter = _RAND_0[2:0];
  _RAND_1 = {1{`RANDOM}};
  opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  source = _RAND_4[6:0];
  _RAND_5 = {1{`RANDOM}};
  address = _RAND_5[12:0];
  _RAND_6 = {1{`RANDOM}};
  d_first_counter = _RAND_6[2:0];
  _RAND_7 = {1{`RANDOM}};
  opcode_1 = _RAND_7[2:0];
  _RAND_8 = {1{`RANDOM}};
  param_1 = _RAND_8[1:0];
  _RAND_9 = {1{`RANDOM}};
  size_1 = _RAND_9[2:0];
  _RAND_10 = {1{`RANDOM}};
  source_1 = _RAND_10[6:0];
  _RAND_11 = {1{`RANDOM}};
  denied = _RAND_11[0:0];
  _RAND_12 = {1{`RANDOM}};
  c_first_counter = _RAND_12[2:0];
  _RAND_13 = {1{`RANDOM}};
  opcode_3 = _RAND_13[2:0];
  _RAND_14 = {1{`RANDOM}};
  param_3 = _RAND_14[2:0];
  _RAND_15 = {1{`RANDOM}};
  size_3 = _RAND_15[2:0];
  _RAND_16 = {1{`RANDOM}};
  source_3 = _RAND_16[6:0];
  _RAND_17 = {1{`RANDOM}};
  address_2 = _RAND_17[12:0];
  _RAND_18 = {4{`RANDOM}};
  inflight = _RAND_18[127:0];
  _RAND_19 = {16{`RANDOM}};
  inflight_opcodes = _RAND_19[511:0];
  _RAND_20 = {16{`RANDOM}};
  inflight_sizes = _RAND_20[511:0];
  _RAND_21 = {1{`RANDOM}};
  a_first_counter_1 = _RAND_21[2:0];
  _RAND_22 = {1{`RANDOM}};
  d_first_counter_1 = _RAND_22[2:0];
  _RAND_23 = {1{`RANDOM}};
  watchdog = _RAND_23[31:0];
  _RAND_24 = {4{`RANDOM}};
  inflight_1 = _RAND_24[127:0];
  _RAND_25 = {16{`RANDOM}};
  inflight_sizes_1 = _RAND_25[511:0];
  _RAND_26 = {1{`RANDOM}};
  c_first_counter_1 = _RAND_26[2:0];
  _RAND_27 = {1{`RANDOM}};
  d_first_counter_2 = _RAND_27[2:0];
  _RAND_28 = {1{`RANDOM}};
  watchdog_1 = _RAND_28[31:0];
  _RAND_29 = {1{`RANDOM}};
  inflight_2 = _RAND_29[0:0];
  _RAND_30 = {1{`RANDOM}};
  d_first_counter_3 = _RAND_30[2:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Repeater_4(
  input         clock,
  input         reset,
  input         io_repeat,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [2:0]  io_enq_bits_param,
  input  [2:0]  io_enq_bits_size,
  input  [6:0]  io_enq_bits_source,
  input  [12:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_enq_bits_corrupt,
  input         io_deq_ready,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [2:0]  io_deq_bits_param,
  output [2:0]  io_deq_bits_size,
  output [6:0]  io_deq_bits_source,
  output [12:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output        io_deq_bits_corrupt
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
  reg [31:0] _RAND_6;
  reg [31:0] _RAND_7;
`endif // RANDOMIZE_REG_INIT
  reg  full;
  reg [2:0] saved_opcode;
  reg [2:0] saved_param;
  reg [2:0] saved_size;
  reg [6:0] saved_source;
  reg [12:0] saved_address;
  reg [7:0] saved_mask;
  reg  saved_corrupt;
  wire  _T = io_enq_ready & io_enq_valid;
  wire  _GEN_0 = _T & io_repeat | full;
  wire  _T_2 = io_deq_ready & io_deq_valid;
  assign io_enq_ready = io_deq_ready & ~full;
  assign io_deq_valid = io_enq_valid | full;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_param = full ? saved_param : io_enq_bits_param;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
  assign io_deq_bits_corrupt = full ? saved_corrupt : io_enq_bits_corrupt;
  always @(posedge clock) begin
    if (reset) begin
      full <= 1'h0;
    end else if (_T_2 & ~io_repeat) begin
      full <= 1'h0;
    end else begin
      full <= _GEN_0;
    end
    if (_T & io_repeat) begin
      saved_opcode <= io_enq_bits_opcode;
    end
    if (_T & io_repeat) begin
      saved_param <= io_enq_bits_param;
    end
    if (_T & io_repeat) begin
      saved_size <= io_enq_bits_size;
    end
    if (_T & io_repeat) begin
      saved_source <= io_enq_bits_source;
    end
    if (_T & io_repeat) begin
      saved_address <= io_enq_bits_address;
    end
    if (_T & io_repeat) begin
      saved_mask <= io_enq_bits_mask;
    end
    if (_T & io_repeat) begin
      saved_corrupt <= io_enq_bits_corrupt;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  full = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  saved_opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  saved_param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  saved_size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  saved_source = _RAND_4[6:0];
  _RAND_5 = {1{`RANDOM}};
  saved_address = _RAND_5[12:0];
  _RAND_6 = {1{`RANDOM}};
  saved_mask = _RAND_6[7:0];
  _RAND_7 = {1{`RANDOM}};
  saved_corrupt = _RAND_7[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_Repeater_5(
  input         clock,
  input         reset,
  input         io_repeat,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [2:0]  io_enq_bits_param,
  input  [2:0]  io_enq_bits_size,
  input  [6:0]  io_enq_bits_source,
  input  [12:0] io_enq_bits_address,
  input         io_deq_ready,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [2:0]  io_deq_bits_param,
  output [2:0]  io_deq_bits_size,
  output [6:0]  io_deq_bits_source,
  output [12:0] io_deq_bits_address
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
  reg [31:0] _RAND_4;
  reg [31:0] _RAND_5;
`endif // RANDOMIZE_REG_INIT
  reg  full;
  reg [2:0] saved_opcode;
  reg [2:0] saved_param;
  reg [2:0] saved_size;
  reg [6:0] saved_source;
  reg [12:0] saved_address;
  wire  _T = io_enq_ready & io_enq_valid;
  wire  _GEN_0 = _T & io_repeat | full;
  wire  _T_2 = io_deq_ready & io_deq_valid;
  assign io_enq_ready = io_deq_ready & ~full;
  assign io_deq_valid = io_enq_valid | full;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_param = full ? saved_param : io_enq_bits_param;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  always @(posedge clock) begin
    if (reset) begin
      full <= 1'h0;
    end else if (_T_2 & ~io_repeat) begin
      full <= 1'h0;
    end else begin
      full <= _GEN_0;
    end
    if (_T & io_repeat) begin
      saved_opcode <= io_enq_bits_opcode;
    end
    if (_T & io_repeat) begin
      saved_param <= io_enq_bits_param;
    end
    if (_T & io_repeat) begin
      saved_size <= io_enq_bits_size;
    end
    if (_T & io_repeat) begin
      saved_source <= io_enq_bits_source;
    end
    if (_T & io_repeat) begin
      saved_address <= io_enq_bits_address;
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  full = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  saved_opcode = _RAND_1[2:0];
  _RAND_2 = {1{`RANDOM}};
  saved_param = _RAND_2[2:0];
  _RAND_3 = {1{`RANDOM}};
  saved_size = _RAND_3[2:0];
  _RAND_4 = {1{`RANDOM}};
  saved_source = _RAND_4[6:0];
  _RAND_5 = {1{`RANDOM}};
  saved_address = _RAND_5[12:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule
module CHIPLINK_PREFIX_TLWidthWidget_2(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_param,
  input  [2:0]  auto_in_a_bits_size,
  input  [6:0]  auto_in_a_bits_source,
  input  [12:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input         auto_in_a_bits_corrupt,
  output        auto_in_c_ready,
  input         auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
  input  [2:0]  auto_in_c_bits_param,
  input  [2:0]  auto_in_c_bits_size,
  input  [6:0]  auto_in_c_bits_source,
  input  [12:0] auto_in_c_bits_address,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [6:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output        auto_in_d_bits_corrupt,
  input         auto_in_e_valid,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [2:0]  auto_out_a_bits_param,
  output [2:0]  auto_out_a_bits_size,
  output [6:0]  auto_out_a_bits_source,
  output [12:0] auto_out_a_bits_address,
  output [3:0]  auto_out_a_bits_mask,
  output        auto_out_a_bits_corrupt,
  input         auto_out_c_ready,
  output        auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
  output [2:0]  auto_out_c_bits_param,
  output [2:0]  auto_out_c_bits_size,
  output [6:0]  auto_out_c_bits_source,
  output [12:0] auto_out_c_bits_address,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [6:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input         auto_out_d_bits_corrupt,
  output        auto_out_e_valid
);
`ifdef RANDOMIZE_REG_INIT
  reg [31:0] _RAND_0;
  reg [31:0] _RAND_1;
  reg [31:0] _RAND_2;
  reg [31:0] _RAND_3;
`endif // RANDOMIZE_REG_INIT
  wire  monitor_clock;
  wire  monitor_reset;
  wire  monitor_io_in_a_ready;
  wire  monitor_io_in_a_valid;
  wire [2:0] monitor_io_in_a_bits_opcode;
  wire [2:0] monitor_io_in_a_bits_param;
  wire [2:0] monitor_io_in_a_bits_size;
  wire [6:0] monitor_io_in_a_bits_source;
  wire [12:0] monitor_io_in_a_bits_address;
  wire [7:0] monitor_io_in_a_bits_mask;
  wire  monitor_io_in_a_bits_corrupt;
  wire  monitor_io_in_c_ready;
  wire  monitor_io_in_c_valid;
  wire [2:0] monitor_io_in_c_bits_opcode;
  wire [2:0] monitor_io_in_c_bits_param;
  wire [2:0] monitor_io_in_c_bits_size;
  wire [6:0] monitor_io_in_c_bits_source;
  wire [12:0] monitor_io_in_c_bits_address;
  wire  monitor_io_in_d_ready;
  wire  monitor_io_in_d_valid;
  wire [2:0] monitor_io_in_d_bits_opcode;
  wire [1:0] monitor_io_in_d_bits_param;
  wire [2:0] monitor_io_in_d_bits_size;
  wire [6:0] monitor_io_in_d_bits_source;
  wire  monitor_io_in_d_bits_denied;
  wire  monitor_io_in_d_bits_corrupt;
  wire  monitor_io_in_e_valid;
  wire  repeated_repeater_clock;
  wire  repeated_repeater_reset;
  wire  repeated_repeater_io_repeat;
  wire  repeated_repeater_io_enq_ready;
  wire  repeated_repeater_io_enq_valid;
  wire [2:0] repeated_repeater_io_enq_bits_opcode;
  wire [2:0] repeated_repeater_io_enq_bits_param;
  wire [2:0] repeated_repeater_io_enq_bits_size;
  wire [6:0] repeated_repeater_io_enq_bits_source;
  wire [12:0] repeated_repeater_io_enq_bits_address;
  wire [7:0] repeated_repeater_io_enq_bits_mask;
  wire  repeated_repeater_io_enq_bits_corrupt;
  wire  repeated_repeater_io_deq_ready;
  wire  repeated_repeater_io_deq_valid;
  wire [2:0] repeated_repeater_io_deq_bits_opcode;
  wire [2:0] repeated_repeater_io_deq_bits_param;
  wire [2:0] repeated_repeater_io_deq_bits_size;
  wire [6:0] repeated_repeater_io_deq_bits_source;
  wire [12:0] repeated_repeater_io_deq_bits_address;
  wire [7:0] repeated_repeater_io_deq_bits_mask;
  wire  repeated_repeater_io_deq_bits_corrupt;
  wire  repeated_repeater_1_clock;
  wire  repeated_repeater_1_reset;
  wire  repeated_repeater_1_io_repeat;
  wire  repeated_repeater_1_io_enq_ready;
  wire  repeated_repeater_1_io_enq_valid;
  wire [2:0] repeated_repeater_1_io_enq_bits_opcode;
  wire [2:0] repeated_repeater_1_io_enq_bits_param;
  wire [2:0] repeated_repeater_1_io_enq_bits_size;
  wire [6:0] repeated_repeater_1_io_enq_bits_source;
  wire [12:0] repeated_repeater_1_io_enq_bits_address;
  wire  repeated_repeater_1_io_deq_ready;
  wire  repeated_repeater_1_io_deq_valid;
  wire [2:0] repeated_repeater_1_io_deq_bits_opcode;
  wire [2:0] repeated_repeater_1_io_deq_bits_param;
  wire [2:0] repeated_repeater_1_io_deq_bits_size;
  wire [6:0] repeated_repeater_1_io_deq_bits_source;
  wire [12:0] repeated_repeater_1_io_deq_bits_address;
  wire [2:0] cated_bits_opcode = repeated_repeater_io_deq_bits_opcode;
  wire  repeat_hasData = ~cated_bits_opcode[2];
  wire [2:0] cated_bits_size = repeated_repeater_io_deq_bits_size;
  wire [9:0] _repeat_limit_T_1 = 10'h7 << cated_bits_size;
  wire [2:0] _repeat_limit_T_3 = ~_repeat_limit_T_1[2:0];
  wire  repeat_limit = _repeat_limit_T_3[2];
  reg  repeat_count;
  wire  repeat_last = repeat_count == repeat_limit | ~repeat_hasData;
  wire  cated_valid = repeated_repeater_io_deq_valid;
  wire  _repeat_T = auto_out_a_ready & cated_valid;
  wire [12:0] cated_bits_address = repeated_repeater_io_deq_bits_address;
  wire  repeat_sel = cated_bits_address[2];
  wire  repeat_index = repeat_sel | repeat_count;
  wire [7:0] cated_bits_mask = repeated_repeater_io_deq_bits_mask;
  wire [3:0] repeat_bundleOut_0_a_bits_mask_mux_0 = cated_bits_mask[3:0];
  wire [3:0] repeat_bundleOut_0_a_bits_mask_mux_1 = cated_bits_mask[7:4];
  wire  hasData = auto_out_d_bits_opcode[0];
  wire [9:0] _limit_T_1 = 10'h7 << auto_out_d_bits_size;
  wire [2:0] _limit_T_3 = ~_limit_T_1[2:0];
  wire  limit = _limit_T_3[2];
  reg  count;
  wire  last = count == limit | ~hasData;
  reg  corrupt_reg;
  wire  corrupt_out = auto_out_d_bits_corrupt | corrupt_reg;
  wire  bundleOut_0_d_ready = auto_in_d_ready | ~last;
  wire  _T = bundleOut_0_d_ready & auto_out_d_valid;
  wire [2:0] cated_1_bits_opcode = repeated_repeater_1_io_deq_bits_opcode;
  wire  repeat_hasData_1 = cated_1_bits_opcode[0];
  wire [2:0] cated_1_bits_size = repeated_repeater_1_io_deq_bits_size;
  wire [9:0] _repeat_limit_T_5 = 10'h7 << cated_1_bits_size;
  wire [2:0] _repeat_limit_T_7 = ~_repeat_limit_T_5[2:0];
  wire  repeat_limit_1 = _repeat_limit_T_7[2];
  reg  repeat_count_1;
  wire  repeat_last_1 = repeat_count_1 == repeat_limit_1 | ~repeat_hasData_1;
  wire  cated_1_valid = repeated_repeater_1_io_deq_valid;
  wire  _repeat_T_2 = auto_out_c_ready & cated_1_valid;
  CHIPLINK_PREFIX_Chiplink_TLMonitor_16 monitor (
    .clock(monitor_clock),
    .reset(monitor_reset),
    .io_in_a_ready(monitor_io_in_a_ready),
    .io_in_a_valid(monitor_io_in_a_valid),
    .io_in_a_bits_opcode(monitor_io_in_a_bits_opcode),
    .io_in_a_bits_param(monitor_io_in_a_bits_param),
    .io_in_a_bits_size(monitor_io_in_a_bits_size),
    .io_in_a_bits_source(monitor_io_in_a_bits_source),
    .io_in_a_bits_address(monitor_io_in_a_bits_address),
    .io_in_a_bits_mask(monitor_io_in_a_bits_mask),
    .io_in_a_bits_corrupt(monitor_io_in_a_bits_corrupt),
    .io_in_c_ready(monitor_io_in_c_ready),
    .io_in_c_valid(monitor_io_in_c_valid),
    .io_in_c_bits_opcode(monitor_io_in_c_bits_opcode),
    .io_in_c_bits_param(monitor_io_in_c_bits_param),
    .io_in_c_bits_size(monitor_io_in_c_bits_size),
    .io_in_c_bits_source(monitor_io_in_c_bits_source),
    .io_in_c_bits_address(monitor_io_in_c_bits_address),
    .io_in_d_ready(monitor_io_in_d_ready),
    .io_in_d_valid(monitor_io_in_d_valid),
    .io_in_d_bits_opcode(monitor_io_in_d_bits_opcode),
    .io_in_d_bits_param(monitor_io_in_d_bits_param),
    .io_in_d_bits_size(monitor_io_in_d_bits_size),
    .io_in_d_bits_source(monitor_io_in_d_bits_source),
    .io_in_d_bits_denied(monitor_io_in_d_bits_denied),
    .io_in_d_bits_corrupt(monitor_io_in_d_bits_corrupt),
    .io_in_e_valid(monitor_io_in_e_valid)
  );
  CHIPLINK_PREFIX_Repeater_4 repeated_repeater (
    .clock(repeated_repeater_clock),
    .reset(repeated_repeater_reset),
    .io_repeat(repeated_repeater_io_repeat),
    .io_enq_ready(repeated_repeater_io_enq_ready),
    .io_enq_valid(repeated_repeater_io_enq_valid),
    .io_enq_bits_opcode(repeated_repeater_io_enq_bits_opcode),
    .io_enq_bits_param(repeated_repeater_io_enq_bits_param),
    .io_enq_bits_size(repeated_repeater_io_enq_bits_size),
    .io_enq_bits_source(repeated_repeater_io_enq_bits_source),
    .io_enq_bits_address(repeated_repeater_io_enq_bits_address),
    .io_enq_bits_mask(repeated_repeater_io_enq_bits_mask),
    .io_enq_bits_corrupt(repeated_repeater_io_enq_bits_corrupt),
    .io_deq_ready(repeated_repeater_io_deq_ready),
    .io_deq_valid(repeated_repeater_io_deq_valid),
    .io_deq_bits_opcode(repeated_repeater_io_deq_bits_opcode),
    .io_deq_bits_param(repeated_repeater_io_deq_bits_param),
    .io_deq_bits_size(repeated_repeater_io_deq_bits_size),
    .io_deq_bits_source(repeated_repeater_io_deq_bits_source),
    .io_deq_bits_address(repeated_repeater_io_deq_bits_address),
    .io_deq_bits_mask(repeated_repeater_io_deq_bits_mask),
    .io_deq_bits_corrupt(repeated_repeater_io_deq_bits_corrupt)
  );
  CHIPLINK_PREFIX_Repeater_5 repeated_repeater_1 (
    .clock(repeated_repeater_1_clock),
    .reset(repeated_repeater_1_reset),
    .io_repeat(repeated_repeater_1_io_repeat),
    .io_enq_ready(repeated_repeater_1_io_enq_ready),
    .io_enq_valid(repeated_repeater_1_io_enq_valid),
    .io_enq_bits_opcode(repeated_repeater_1_io_enq_bits_opcode),
    .io_enq_bits_param(repeated_repeater_1_io_enq_bits_param),
    .io_enq_bits_size(repeated_repeater_1_io_enq_bits_size),
    .io_enq_bits_source(repeated_repeater_1_io_enq_bits_source),
    .io_enq_bits_address(repeated_repeater_1_io_enq_bits_address),
    .io_deq_ready(repeated_repeater_1_io_deq_ready),
    .io_deq_valid(repeated_repeater_1_io_deq_valid),
    .io_deq_bits_opcode(repeated_repeater_1_io_deq_bits_opcode),
    .io_deq_bits_param(repeated_repeater_1_io_deq_bits_param),
    .io_deq_bits_size(repeated_repeater_1_io_deq_bits_size),
    .io_deq_bits_source(repeated_repeater_1_io_deq_bits_source),
    .io_deq_bits_address(repeated_repeater_1_io_deq_bits_address)
  );
  assign auto_in_a_ready = repeated_repeater_io_enq_ready;
  assign auto_in_c_ready = repeated_repeater_1_io_enq_ready;
  assign auto_in_d_valid = auto_out_d_valid & last;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt | corrupt_reg;
  assign auto_out_a_valid = repeated_repeater_io_deq_valid;
  assign auto_out_a_bits_opcode = repeated_repeater_io_deq_bits_opcode;
  assign auto_out_a_bits_param = repeated_repeater_io_deq_bits_param;
  assign auto_out_a_bits_size = repeated_repeater_io_deq_bits_size;
  assign auto_out_a_bits_source = repeated_repeater_io_deq_bits_source;
  assign auto_out_a_bits_address = repeated_repeater_io_deq_bits_address;
  assign auto_out_a_bits_mask = repeat_index ? repeat_bundleOut_0_a_bits_mask_mux_1 :
    repeat_bundleOut_0_a_bits_mask_mux_0;
  assign auto_out_a_bits_corrupt = repeated_repeater_io_deq_bits_corrupt;
  assign auto_out_c_valid = repeated_repeater_1_io_deq_valid;
  assign auto_out_c_bits_opcode = repeated_repeater_1_io_deq_bits_opcode;
  assign auto_out_c_bits_param = repeated_repeater_1_io_deq_bits_param;
  assign auto_out_c_bits_size = repeated_repeater_1_io_deq_bits_size;
  assign auto_out_c_bits_source = repeated_repeater_1_io_deq_bits_source;
  assign auto_out_c_bits_address = repeated_repeater_1_io_deq_bits_address;
  assign auto_out_d_ready = auto_in_d_ready | ~last;
  assign auto_out_e_valid = auto_in_e_valid;
  assign monitor_clock = clock;
  assign monitor_reset = reset;
  assign monitor_io_in_a_ready = repeated_repeater_io_enq_ready;
  assign monitor_io_in_a_valid = auto_in_a_valid;
  assign monitor_io_in_a_bits_opcode = auto_in_a_bits_opcode;
  assign monitor_io_in_a_bits_param = auto_in_a_bits_param;
  assign monitor_io_in_a_bits_size = auto_in_a_bits_size;
  assign monitor_io_in_a_bits_source = auto_in_a_bits_source;
  assign monitor_io_in_a_bits_address = auto_in_a_bits_address;
  assign monitor_io_in_a_bits_mask = auto_in_a_bits_mask;
  assign monitor_io_in_a_bits_corrupt = auto_in_a_bits_corrupt;
  assign monitor_io_in_c_ready = repeated_repeater_1_io_enq_ready;
  assign monitor_io_in_c_valid = auto_in_c_valid;
  assign monitor_io_in_c_bits_opcode = auto_in_c_bits_opcode;
  assign monitor_io_in_c_bits_param = auto_in_c_bits_param;
  assign monitor_io_in_c_bits_size = auto_in_c_bits_size;
  assign monitor_io_in_c_bits_source = auto_in_c_bits_source;
  assign monitor_io_in_c_bits_address = auto_in_c_bits_address;
  assign monitor_io_in_d_ready = auto_in_d_ready;
  assign monitor_io_in_d_valid = auto_out_d_valid & last;
  assign monitor_io_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign monitor_io_in_d_bits_param = auto_out_d_bits_param;
  assign monitor_io_in_d_bits_size = auto_out_d_bits_size;
  assign monitor_io_in_d_bits_source = auto_out_d_bits_source;
  assign monitor_io_in_d_bits_denied = auto_out_d_bits_denied;
  assign monitor_io_in_d_bits_corrupt = auto_out_d_bits_corrupt | corrupt_reg;
  assign monitor_io_in_e_valid = auto_in_e_valid;
  assign repeated_repeater_clock = clock;
  assign repeated_repeater_reset = reset;
  assign repeated_repeater_io_repeat = ~repeat_last;
  assign repeated_repeater_io_enq_valid = auto_in_a_valid;
  assign repeated_repeater_io_enq_bits_opcode = auto_in_a_bits_opcode;
  assign repeated_repeater_io_enq_bits_param = auto_in_a_bits_param;
  assign repeated_repeater_io_enq_bits_size = auto_in_a_bits_size;
  assign repeated_repeater_io_enq_bits_source = auto_in_a_bits_source;
  assign repeated_repeater_io_enq_bits_address = auto_in_a_bits_address;
  assign repeated_repeater_io_enq_bits_mask = auto_in_a_bits_mask;
  assign repeated_repeater_io_enq_bits_corrupt = auto_in_a_bits_corrupt;
  assign repeated_repeater_io_deq_ready = auto_out_a_ready;
  assign repeated_repeater_1_clock = clock;
  assign repeated_repeater_1_reset = reset;
  assign repeated_repeater_1_io_repeat = ~repeat_last_1;
  assign repeated_repeater_1_io_enq_valid = auto_in_c_valid;
  assign repeated_repeater_1_io_enq_bits_opcode = auto_in_c_bits_opcode;
  assign repeated_repeater_1_io_enq_bits_param = auto_in_c_bits_param;
  assign repeated_repeater_1_io_enq_bits_size = auto_in_c_bits_size;
  assign repeated_repeater_1_io_enq_bits_source = auto_in_c_bits_source;
  assign repeated_repeater_1_io_enq_bits_address = auto_in_c_bits_address;
  assign repeated_repeater_1_io_deq_ready = auto_out_c_ready;
  always @(posedge clock) begin
    if (reset) begin
      repeat_count <= 1'h0;
    end else if (_repeat_T) begin
      if (repeat_last) begin
        repeat_count <= 1'h0;
      end else begin
        repeat_count <= repeat_count + 1'h1;
      end
    end
    if (reset) begin
      count <= 1'h0;
    end else if (_T) begin
      if (last) begin
        count <= 1'h0;
      end else begin
        count <= count + 1'h1;
      end
    end
    if (reset) begin
      corrupt_reg <= 1'h0;
    end else if (_T) begin
      if (last) begin
        corrupt_reg <= 1'h0;
      end else begin
        corrupt_reg <= corrupt_out;
      end
    end
    if (reset) begin
      repeat_count_1 <= 1'h0;
    end else if (_repeat_T_2) begin
      if (repeat_last_1) begin
        repeat_count_1 <= 1'h0;
      end else begin
        repeat_count_1 <= repeat_count_1 + 1'h1;
      end
    end
  end
// Register and memory initialization
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
`ifdef FIRRTL_BEFORE_INITIAL
`FIRRTL_BEFORE_INITIAL
`endif
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
`ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  repeat_count = _RAND_0[0:0];
  _RAND_1 = {1{`RANDOM}};
  count = _RAND_1[0:0];
  _RAND_2 = {1{`RANDOM}};
  corrupt_reg = _RAND_2[0:0];
  _RAND_3 = {1{`RANDOM}};
  repeat_count_1 = _RAND_3[0:0];
`endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`ifdef FIRRTL_AFTER_INITIAL
`FIRRTL_AFTER_INITIAL
`endif
`endif // SYNTHESIS
endmodule

module CHIPLINK_PREFIX_ChipLinkBridgeLazy_Depreciate(
  input         clock,
  input         reset,
  input         io_master_awready,
  output        io_master_awvalid,
  output [3:0]  io_master_awid,
  output [31:0] io_master_awaddr,
  output [7:0]  io_master_awlen,
  output [2:0]  io_master_awsize,
  output [1:0]  io_master_awburst,
  input         io_master_wready,
  output        io_master_wvalid,
  output [63:0] io_master_wdata,
  output [7:0]  io_master_wstrb,
  output        io_master_wlast,
  output        io_master_bready,
  input         io_master_bvalid,
  input  [3:0]  io_master_bid,
  input  [1:0]  io_master_bresp,
  input         io_master_arready,
  output        io_master_arvalid,
  output [3:0]  io_master_arid,
  output [31:0] io_master_araddr,
  output [7:0]  io_master_arlen,
  output [2:0]  io_master_arsize,
  output [1:0]  io_master_arburst,
  output        io_master_rready,
  input         io_master_rvalid,
  input  [3:0]  io_master_rid,
  input  [63:0] io_master_rdata,
  input  [1:0]  io_master_rresp,
  input         io_master_rlast,
  output        io_slave_awready,
  input         io_slave_awvalid,
  input  [3:0]  io_slave_awid,
  input  [31:0] io_slave_awaddr,
  input  [7:0]  io_slave_awlen,
  input  [2:0]  io_slave_awsize,
  input  [1:0]  io_slave_awburst,
  output        io_slave_wready,
  input         io_slave_wvalid,
  input  [63:0] io_slave_wdata,
  input  [7:0]  io_slave_wstrb,
  input         io_slave_wlast,
  input         io_slave_bready,
  output        io_slave_bvalid,
  output [3:0]  io_slave_bid,
  output [1:0]  io_slave_bresp,
  output        io_slave_arready,
  input         io_slave_arvalid,
  input  [3:0]  io_slave_arid,
  input  [31:0] io_slave_araddr,
  input  [7:0]  io_slave_arlen,
  input  [2:0]  io_slave_arsize,
  input  [1:0]  io_slave_arburst,
  input         io_slave_rready,
  output        io_slave_rvalid,
  output [3:0]  io_slave_rid,
  output [63:0] io_slave_rdata,
  output [1:0]  io_slave_rresp,
  output        io_slave_rlast,
  output        fpga_io_c2b_clk,
  output        fpga_io_c2b_rst,
  output        fpga_io_c2b_send,
  output [7:0]  fpga_io_c2b_data,
  input         fpga_io_b2c_clk,
  input         fpga_io_b2c_rst,
  input         fpga_io_b2c_send,
  input  [7:0]  fpga_io_b2c_data
);
  wire  chipLinkConverter_clock;
  wire  chipLinkConverter_reset;
  wire  chipLinkConverter_slave_0_awready;
  wire  chipLinkConverter_slave_0_awvalid;
  wire [3:0] chipLinkConverter_slave_0_awid;
  wire [31:0] chipLinkConverter_slave_0_awaddr;
  wire [7:0] chipLinkConverter_slave_0_awlen;
  wire [2:0] chipLinkConverter_slave_0_awsize;
  wire [1:0] chipLinkConverter_slave_0_awburst;
  wire  chipLinkConverter_slave_0_wready;
  wire  chipLinkConverter_slave_0_wvalid;
  wire [63:0] chipLinkConverter_slave_0_wdata;
  wire [7:0] chipLinkConverter_slave_0_wstrb;
  wire  chipLinkConverter_slave_0_wlast;
  wire  chipLinkConverter_slave_0_bready;
  wire  chipLinkConverter_slave_0_bvalid;
  wire [3:0] chipLinkConverter_slave_0_bid;
  wire [1:0] chipLinkConverter_slave_0_bresp;
  wire  chipLinkConverter_slave_0_arready;
  wire  chipLinkConverter_slave_0_arvalid;
  wire [3:0] chipLinkConverter_slave_0_arid;
  wire [31:0] chipLinkConverter_slave_0_araddr;
  wire [7:0] chipLinkConverter_slave_0_arlen;
  wire [2:0] chipLinkConverter_slave_0_arsize;
  wire [1:0] chipLinkConverter_slave_0_arburst;
  wire  chipLinkConverter_slave_0_rready;
  wire  chipLinkConverter_slave_0_rvalid;
  wire [3:0] chipLinkConverter_slave_0_rid;
  wire [63:0] chipLinkConverter_slave_0_rdata;
  wire [1:0] chipLinkConverter_slave_0_rresp;
  wire  chipLinkConverter_slave_0_rlast;
  wire  chipLinkConverter_master_mem_0_awready;
  wire  chipLinkConverter_master_mem_0_awvalid;
  wire [3:0] chipLinkConverter_master_mem_0_awid;
  wire [31:0] chipLinkConverter_master_mem_0_awaddr;
  wire [7:0] chipLinkConverter_master_mem_0_awlen;
  wire [2:0] chipLinkConverter_master_mem_0_awsize;
  wire [1:0] chipLinkConverter_master_mem_0_awburst;
  wire  chipLinkConverter_master_mem_0_wready;
  wire  chipLinkConverter_master_mem_0_wvalid;
  wire [63:0] chipLinkConverter_master_mem_0_wdata;
  wire [7:0] chipLinkConverter_master_mem_0_wstrb;
  wire  chipLinkConverter_master_mem_0_wlast;
  wire  chipLinkConverter_master_mem_0_bready;
  wire  chipLinkConverter_master_mem_0_bvalid;
  wire [3:0] chipLinkConverter_master_mem_0_bid;
  wire [1:0] chipLinkConverter_master_mem_0_bresp;
  wire  chipLinkConverter_master_mem_0_arready;
  wire  chipLinkConverter_master_mem_0_arvalid;
  wire [3:0] chipLinkConverter_master_mem_0_arid;
  wire [31:0] chipLinkConverter_master_mem_0_araddr;
  wire [7:0] chipLinkConverter_master_mem_0_arlen;
  wire [2:0] chipLinkConverter_master_mem_0_arsize;
  wire [1:0] chipLinkConverter_master_mem_0_arburst;
  wire  chipLinkConverter_master_mem_0_rready;
  wire  chipLinkConverter_master_mem_0_rvalid;
  wire [3:0] chipLinkConverter_master_mem_0_rid;
  wire [63:0] chipLinkConverter_master_mem_0_rdata;
  wire [1:0] chipLinkConverter_master_mem_0_rresp;
  wire  chipLinkConverter_master_mem_0_rlast;
  wire  chipLinkConverter_fpga_io_c2b_clk;
  wire  chipLinkConverter_fpga_io_c2b_rst;
  wire  chipLinkConverter_fpga_io_c2b_send;
  wire [7:0] chipLinkConverter_fpga_io_c2b_data;
  wire  chipLinkConverter_fpga_io_b2c_clk;
  wire  chipLinkConverter_fpga_io_b2c_rst;
  wire  chipLinkConverter_fpga_io_b2c_send;
  wire [7:0] chipLinkConverter_fpga_io_b2c_data;
  CHIPLINK_PREFIX_ChipLinkMaster chipLinkConverter (
    .clock(chipLinkConverter_clock),
    .reset(chipLinkConverter_reset),
  `ifdef CHIPLINK_CONNECT_DIRECT_TL
    .slave_0_awready(),
    .slave_0_awvalid(1'b0),
    .slave_0_awid(4'b0),
    .slave_0_awaddr(32'b0),
    .slave_0_awlen(8'b0),
    .slave_0_awsize(3'b0),
    .slave_0_awburst(2'b0),
    .slave_0_wready(),
    .slave_0_wvalid(1'b0),
    .slave_0_wdata(64'b0),
    .slave_0_wstrb(8'b0),
    .slave_0_wlast(1'b0),
    .slave_0_bready(1'b0),
    .slave_0_bvalid(),
    .slave_0_bid(),
    .slave_0_bresp(),
    .slave_0_arready(),
    .slave_0_arvalid(1'b0),
    .slave_0_arid(4'b0),
    .slave_0_araddr(32'b0),
    .slave_0_arlen(8'b0),
    .slave_0_arsize(3'b0),
    .slave_0_arburst(2'b0),
    .slave_0_rready(1'b0),
    .slave_0_rvalid(),
    .slave_0_rid(),
    .slave_0_rdata(),
    .slave_0_rresp(),
    .slave_0_rlast(),
  `else
    .slave_0_awready(chipLinkConverter_slave_0_awready),
    .slave_0_awvalid(chipLinkConverter_slave_0_awvalid),
    .slave_0_awid(chipLinkConverter_slave_0_awid),
    .slave_0_awaddr(chipLinkConverter_slave_0_awaddr),
    .slave_0_awlen(chipLinkConverter_slave_0_awlen),
    .slave_0_awsize(chipLinkConverter_slave_0_awsize),
    .slave_0_awburst(chipLinkConverter_slave_0_awburst),
    .slave_0_wready(chipLinkConverter_slave_0_wready),
    .slave_0_wvalid(chipLinkConverter_slave_0_wvalid),
    .slave_0_wdata(chipLinkConverter_slave_0_wdata),
    .slave_0_wstrb(chipLinkConverter_slave_0_wstrb),
    .slave_0_wlast(chipLinkConverter_slave_0_wlast),
    .slave_0_bready(chipLinkConverter_slave_0_bready),
    .slave_0_bvalid(chipLinkConverter_slave_0_bvalid),
    .slave_0_bid(chipLinkConverter_slave_0_bid),
    .slave_0_bresp(chipLinkConverter_slave_0_bresp),
    .slave_0_arready(chipLinkConverter_slave_0_arready),
    .slave_0_arvalid(chipLinkConverter_slave_0_arvalid),
    .slave_0_arid(chipLinkConverter_slave_0_arid),
    .slave_0_araddr(chipLinkConverter_slave_0_araddr),
    .slave_0_arlen(chipLinkConverter_slave_0_arlen),
    .slave_0_arsize(chipLinkConverter_slave_0_arsize),
    .slave_0_arburst(chipLinkConverter_slave_0_arburst),
    .slave_0_rready(chipLinkConverter_slave_0_rready),
    .slave_0_rvalid(chipLinkConverter_slave_0_rvalid),
    .slave_0_rid(chipLinkConverter_slave_0_rid),
    .slave_0_rdata(chipLinkConverter_slave_0_rdata),
    .slave_0_rresp(chipLinkConverter_slave_0_rresp),
    .slave_0_rlast(chipLinkConverter_slave_0_rlast),
  `endif
    .master_mem_0_awready(chipLinkConverter_master_mem_0_awready),
    .master_mem_0_awvalid(chipLinkConverter_master_mem_0_awvalid),
    .master_mem_0_awid(chipLinkConverter_master_mem_0_awid),
    .master_mem_0_awaddr(chipLinkConverter_master_mem_0_awaddr),
    .master_mem_0_awlen(chipLinkConverter_master_mem_0_awlen),
    .master_mem_0_awsize(chipLinkConverter_master_mem_0_awsize),
    .master_mem_0_awburst(chipLinkConverter_master_mem_0_awburst),
    .master_mem_0_wready(chipLinkConverter_master_mem_0_wready),
    .master_mem_0_wvalid(chipLinkConverter_master_mem_0_wvalid),
    .master_mem_0_wdata(chipLinkConverter_master_mem_0_wdata),
    .master_mem_0_wstrb(chipLinkConverter_master_mem_0_wstrb),
    .master_mem_0_wlast(chipLinkConverter_master_mem_0_wlast),
    .master_mem_0_bready(chipLinkConverter_master_mem_0_bready),
    .master_mem_0_bvalid(chipLinkConverter_master_mem_0_bvalid),
    .master_mem_0_bid(chipLinkConverter_master_mem_0_bid),
    .master_mem_0_bresp(chipLinkConverter_master_mem_0_bresp),
    .master_mem_0_arready(chipLinkConverter_master_mem_0_arready),
    .master_mem_0_arvalid(chipLinkConverter_master_mem_0_arvalid),
    .master_mem_0_arid(chipLinkConverter_master_mem_0_arid),
    .master_mem_0_araddr(chipLinkConverter_master_mem_0_araddr),
    .master_mem_0_arlen(chipLinkConverter_master_mem_0_arlen),
    .master_mem_0_arsize(chipLinkConverter_master_mem_0_arsize),
    .master_mem_0_arburst(chipLinkConverter_master_mem_0_arburst),
    .master_mem_0_rready(chipLinkConverter_master_mem_0_rready),
    .master_mem_0_rvalid(chipLinkConverter_master_mem_0_rvalid),
    .master_mem_0_rid(chipLinkConverter_master_mem_0_rid),
    .master_mem_0_rdata(chipLinkConverter_master_mem_0_rdata),
    .master_mem_0_rresp(chipLinkConverter_master_mem_0_rresp),
    .master_mem_0_rlast(chipLinkConverter_master_mem_0_rlast),
    .fpga_io_c2b_clk(chipLinkConverter_fpga_io_c2b_clk),
    .fpga_io_c2b_rst(chipLinkConverter_fpga_io_c2b_rst),
    .fpga_io_c2b_send(chipLinkConverter_fpga_io_c2b_send),
    .fpga_io_c2b_data(chipLinkConverter_fpga_io_c2b_data),
    .fpga_io_b2c_clk(chipLinkConverter_fpga_io_b2c_clk),
    .fpga_io_b2c_rst(chipLinkConverter_fpga_io_b2c_rst),
    .fpga_io_b2c_send(chipLinkConverter_fpga_io_b2c_send),
    .fpga_io_b2c_data(chipLinkConverter_fpga_io_b2c_data)
  );
  assign io_master_awvalid = chipLinkConverter_master_mem_0_awvalid;
  assign io_master_awid = chipLinkConverter_master_mem_0_awid;
  assign io_master_awaddr = chipLinkConverter_master_mem_0_awaddr;
  assign io_master_awlen = chipLinkConverter_master_mem_0_awlen;
  assign io_master_awsize = chipLinkConverter_master_mem_0_awsize;
  assign io_master_awburst = chipLinkConverter_master_mem_0_awburst;
  assign io_master_wvalid = chipLinkConverter_master_mem_0_wvalid;
  assign io_master_wdata = chipLinkConverter_master_mem_0_wdata;
  assign io_master_wstrb = chipLinkConverter_master_mem_0_wstrb;
  assign io_master_wlast = chipLinkConverter_master_mem_0_wlast;
  assign io_master_bready = chipLinkConverter_master_mem_0_bready;
  assign io_master_arvalid = chipLinkConverter_master_mem_0_arvalid;
  assign io_master_arid = chipLinkConverter_master_mem_0_arid;
  assign io_master_araddr = chipLinkConverter_master_mem_0_araddr;
  assign io_master_arlen = chipLinkConverter_master_mem_0_arlen;
  assign io_master_arsize = chipLinkConverter_master_mem_0_arsize;
  assign io_master_arburst = chipLinkConverter_master_mem_0_arburst;
  assign io_master_rready = chipLinkConverter_master_mem_0_rready;
  assign io_slave_awready = chipLinkConverter_slave_0_awready;
  assign io_slave_wready = chipLinkConverter_slave_0_wready;
  assign io_slave_bvalid = chipLinkConverter_slave_0_bvalid;
  assign io_slave_bid = chipLinkConverter_slave_0_bid;
  assign io_slave_bresp = chipLinkConverter_slave_0_bresp;
  assign io_slave_arready = chipLinkConverter_slave_0_arready;
  assign io_slave_rvalid = chipLinkConverter_slave_0_rvalid;
  assign io_slave_rid = chipLinkConverter_slave_0_rid;
  assign io_slave_rdata = chipLinkConverter_slave_0_rdata;
  assign io_slave_rresp = chipLinkConverter_slave_0_rresp;
  assign io_slave_rlast = chipLinkConverter_slave_0_rlast;
  assign fpga_io_c2b_clk = chipLinkConverter_fpga_io_c2b_clk;
  assign fpga_io_c2b_rst = chipLinkConverter_fpga_io_c2b_rst;
  assign fpga_io_c2b_send = chipLinkConverter_fpga_io_c2b_send;
  assign fpga_io_c2b_data = chipLinkConverter_fpga_io_c2b_data;
  assign chipLinkConverter_clock = clock;
  assign chipLinkConverter_reset = reset;
  assign chipLinkConverter_slave_0_awvalid = io_slave_awvalid;
  assign chipLinkConverter_slave_0_awid = io_slave_awid;
  assign chipLinkConverter_slave_0_awaddr = io_slave_awaddr;
  assign chipLinkConverter_slave_0_awlen = io_slave_awlen;
  assign chipLinkConverter_slave_0_awsize = io_slave_awsize;
  assign chipLinkConverter_slave_0_awburst = io_slave_awburst;
  assign chipLinkConverter_slave_0_wvalid = io_slave_wvalid;
  assign chipLinkConverter_slave_0_wdata = io_slave_wdata;
  assign chipLinkConverter_slave_0_wstrb = io_slave_wstrb;
  assign chipLinkConverter_slave_0_wlast = io_slave_wlast;
  assign chipLinkConverter_slave_0_bready = io_slave_bready;
  assign chipLinkConverter_slave_0_arvalid = io_slave_arvalid;
  assign chipLinkConverter_slave_0_arid = io_slave_arid;
  assign chipLinkConverter_slave_0_araddr = io_slave_araddr;
  assign chipLinkConverter_slave_0_arlen = io_slave_arlen;
  assign chipLinkConverter_slave_0_arsize = io_slave_arsize;
  assign chipLinkConverter_slave_0_arburst = io_slave_arburst;
  assign chipLinkConverter_slave_0_rready = io_slave_rready;
  assign chipLinkConverter_master_mem_0_awready = io_master_awready;
  assign chipLinkConverter_master_mem_0_wready = io_master_wready;
  assign chipLinkConverter_master_mem_0_bvalid = io_master_bvalid;
  assign chipLinkConverter_master_mem_0_bid = io_master_bid;
  assign chipLinkConverter_master_mem_0_bresp = io_master_bresp;
  assign chipLinkConverter_master_mem_0_arready = io_master_arready;
  assign chipLinkConverter_master_mem_0_rvalid = io_master_rvalid;
  assign chipLinkConverter_master_mem_0_rid = io_master_rid;
  assign chipLinkConverter_master_mem_0_rdata = io_master_rdata;
  assign chipLinkConverter_master_mem_0_rresp = io_master_rresp;
  assign chipLinkConverter_master_mem_0_rlast = io_master_rlast;
  assign chipLinkConverter_fpga_io_b2c_clk = fpga_io_b2c_clk;
  assign chipLinkConverter_fpga_io_b2c_rst = fpga_io_b2c_rst;
  assign chipLinkConverter_fpga_io_b2c_send = fpga_io_b2c_send;
  assign chipLinkConverter_fpga_io_b2c_data = fpga_io_b2c_data;
endmodule

module CHIPLINK_PREFIX_ram(
  input  [4:0]  R0_addr,
  input         R0_en,
  input         R0_clk,
  output [31:0] R0_data,
  input  [4:0]  W0_addr,
  input         W0_en,
  input         W0_clk,
  input  [31:0] W0_data
);
  wire [4:0] ram_ext_R0_addr;
  wire  ram_ext_R0_en;
  wire  ram_ext_R0_clk;
  wire [31:0] ram_ext_R0_data;
  wire [4:0] ram_ext_W0_addr;
  wire  ram_ext_W0_en;
  wire  ram_ext_W0_clk;
  wire [31:0] ram_ext_W0_data;
  CHIPLINK_PREFIX_ram_ext ram_ext (
    .R0_addr(ram_ext_R0_addr),
    .R0_en(ram_ext_R0_en),
    .R0_clk(ram_ext_R0_clk),
    .R0_data(ram_ext_R0_data),
    .W0_addr(ram_ext_W0_addr),
    .W0_en(ram_ext_W0_en),
    .W0_clk(ram_ext_W0_clk),
    .W0_data(ram_ext_W0_data)
  );
  assign ram_ext_R0_clk = R0_clk;
  assign ram_ext_R0_en = R0_en;
  assign ram_ext_R0_addr = R0_addr;
  assign R0_data = ram_ext_R0_data;
  assign ram_ext_W0_clk = W0_clk;
  assign ram_ext_W0_en = W0_en;
  assign ram_ext_W0_addr = W0_addr;
  assign ram_ext_W0_data = W0_data;
endmodule

module CHIPLINK_PREFIX_ram_ext(
  input W0_clk,
  input [4:0] W0_addr,
  input W0_en,
  input [31:0] W0_data,
  input R0_clk,
  input [4:0] R0_addr,
  input R0_en,
  output [31:0] R0_data
);

  reg reg_R0_ren;
  reg [4:0] reg_R0_addr;
  reg [31:0] ram [31:0];
  `ifdef RANDOMIZE_MEM_INIT
    integer initvar;
    initial begin
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
      for (initvar = 0; initvar < 32; initvar = initvar+1)
        ram[initvar] = {1 {$random}};
      reg_R0_addr = {1 {$random}};
    end
  `endif
  integer i;
  always @(posedge R0_clk)
    reg_R0_ren <= R0_en;
  always @(posedge R0_clk)
    if (R0_en) reg_R0_addr <= R0_addr;
  always @(posedge W0_clk)
    if (W0_en) begin
      ram[W0_addr][31:0] <= W0_data[31:0];
    end
  `ifdef RANDOMIZE_GARBAGE_ASSIGN
  reg [31:0] R0_random;
  `ifdef RANDOMIZE_MEM_INIT
    initial begin
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
      R0_random = {$random};
      reg_R0_ren = R0_random[0];
    end
  `endif
  always @(posedge R0_clk) R0_random <= {$random};
  assign R0_data = reg_R0_ren ? ram[reg_R0_addr] : R0_random[31:0];
  `else
  assign R0_data = ram[reg_R0_addr];
  `endif

endmodule
// See LICENSE.SiFive for license details.

//VCS coverage exclude_file

// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),
// but Incisive demands them. These default values should never be used.
module CHIPLINK_PREFIX_plusarg_reader #(
   parameter FORMAT="borked=%d",
   parameter WIDTH=1,
   parameter [WIDTH-1:0] DEFAULT=0
) (
   output [WIDTH-1:0] out
);

`ifdef SYNTHESIS
assign out = DEFAULT;
`else
reg [WIDTH-1:0] myplus;
assign out = myplus;

initial begin
   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;
end
`endif

endmodule
/* verilator lint_off UNOPTFLAT */

module CHIPLINK_PREFIX_EICG_wrapper(
  output out,
  input en,
  input test_en,
  input in
);

  reg en_latched /*verilator clock_enable*/;

  always @(*) begin
     if (!in) begin
        en_latched = en || test_en;
     end
  end

  assign out = en_latched && in;

endmodule
